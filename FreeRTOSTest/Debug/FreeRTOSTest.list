
FreeRTOSTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000198f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b04  08019a80  08019a80  0001aa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b584  0801b584  000226cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801b584  0801b584  0001c584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b58c  0801b58c  000226cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b58c  0801b58c  0001c58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b590  0801b590  0001c590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  0801b594  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .nzds         00000028  200001d0  0801b764  0001d1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       000046cc  10000000  0801b78c  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a1b4  200001f8  200001f8  000231f8  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2000a3ac  2000a3ac  000231f8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000226cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004781b  00000000  00000000  000226fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000ab29  00000000  00000000  00069f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a28  00000000  00000000  00074a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f3a  00000000  00000000  00077468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c5e4  00000000  00000000  000793a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00040b7e  00000000  00000000  000a5986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f75f3  00000000  00000000  000e6504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000b8  00000000  00000000  001ddaf7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b110  00000000  00000000  001ddbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000054  00000000  00000000  001e8cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    000015c0  00000000  00000000  001e8d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 00000060  00000000  00000000  001ea2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019a68 	.word	0x08019a68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08019a68 	.word	0x08019a68

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	@ 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__gedf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__ledf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpdf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009aa:	d01b      	beq.n	80009e4 <__cmpdf2+0x54>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b2:	bf0c      	ite	eq
 80009b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b8:	ea91 0f03 	teqne	r1, r3
 80009bc:	bf02      	ittt	eq
 80009be:	ea90 0f02 	teqeq	r0, r2
 80009c2:	2000      	moveq	r0, #0
 80009c4:	4770      	bxeq	lr
 80009c6:	f110 0f00 	cmn.w	r0, #0
 80009ca:	ea91 0f03 	teq	r1, r3
 80009ce:	bf58      	it	pl
 80009d0:	4299      	cmppl	r1, r3
 80009d2:	bf08      	it	eq
 80009d4:	4290      	cmpeq	r0, r2
 80009d6:	bf2c      	ite	cs
 80009d8:	17d8      	asrcs	r0, r3, #31
 80009da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009de:	f040 0001 	orr.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d102      	bne.n	80009f4 <__cmpdf2+0x64>
 80009ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f2:	d107      	bne.n	8000a04 <__cmpdf2+0x74>
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d1d6      	bne.n	80009ac <__cmpdf2+0x1c>
 80009fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a02:	d0d3      	beq.n	80009ac <__cmpdf2+0x1c>
 8000a04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	4619      	mov	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b501      	push	{r0, lr}
 8000a1e:	f7ff ffb7 	bl	8000990 <__cmpdf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd01      	pop	{r0, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffce 	bl	8000a0c <__aeabi_cdrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc4 	bl	8000a0c <__aeabi_cdrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpun>:
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__aeabi_dcmpun+0x10>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d10a      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x20>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0001 	mov.w	r0, #1
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_frsub>:
 8000b5c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b60:	e002      	b.n	8000b68 <__addsf3>
 8000b62:	bf00      	nop

08000b64 <__aeabi_fsub>:
 8000b64:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b68 <__addsf3>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	bf1f      	itttt	ne
 8000b6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b70:	ea92 0f03 	teqne	r2, r3
 8000b74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7c:	d06a      	beq.n	8000c54 <__addsf3+0xec>
 8000b7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b86:	bfc1      	itttt	gt
 8000b88:	18d2      	addgt	r2, r2, r3
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	4048      	eorgt	r0, r1
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	bfb8      	it	lt
 8000b92:	425b      	neglt	r3, r3
 8000b94:	2b19      	cmp	r3, #25
 8000b96:	bf88      	it	hi
 8000b98:	4770      	bxhi	lr
 8000b9a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bb2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4249      	negne	r1, r1
 8000bba:	ea92 0f03 	teq	r2, r3
 8000bbe:	d03f      	beq.n	8000c40 <__addsf3+0xd8>
 8000bc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc8:	eb10 000c 	adds.w	r0, r0, ip
 8000bcc:	f1c3 0320 	rsb	r3, r3, #32
 8000bd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd8:	d502      	bpl.n	8000be0 <__addsf3+0x78>
 8000bda:	4249      	negs	r1, r1
 8000bdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be4:	d313      	bcc.n	8000c0e <__addsf3+0xa6>
 8000be6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bea:	d306      	bcc.n	8000bfa <__addsf3+0x92>
 8000bec:	0840      	lsrs	r0, r0, #1
 8000bee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf2:	f102 0201 	add.w	r2, r2, #1
 8000bf6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf8:	d251      	bcs.n	8000c9e <__addsf3+0x136>
 8000bfa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	ea40 0003 	orr.w	r0, r0, r3
 8000c0c:	4770      	bx	lr
 8000c0e:	0049      	lsls	r1, r1, #1
 8000c10:	eb40 0000 	adc.w	r0, r0, r0
 8000c14:	3a01      	subs	r2, #1
 8000c16:	bf28      	it	cs
 8000c18:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c1c:	d2ed      	bcs.n	8000bfa <__addsf3+0x92>
 8000c1e:	fab0 fc80 	clz	ip, r0
 8000c22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c26:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2e:	bfaa      	itet	ge
 8000c30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c34:	4252      	neglt	r2, r2
 8000c36:	4318      	orrge	r0, r3
 8000c38:	bfbc      	itt	lt
 8000c3a:	40d0      	lsrlt	r0, r2
 8000c3c:	4318      	orrlt	r0, r3
 8000c3e:	4770      	bx	lr
 8000c40:	f092 0f00 	teq	r2, #0
 8000c44:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c48:	bf06      	itte	eq
 8000c4a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4e:	3201      	addeq	r2, #1
 8000c50:	3b01      	subne	r3, #1
 8000c52:	e7b5      	b.n	8000bc0 <__addsf3+0x58>
 8000c54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c5c:	bf18      	it	ne
 8000c5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c62:	d021      	beq.n	8000ca8 <__addsf3+0x140>
 8000c64:	ea92 0f03 	teq	r2, r3
 8000c68:	d004      	beq.n	8000c74 <__addsf3+0x10c>
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	bf08      	it	eq
 8000c70:	4608      	moveq	r0, r1
 8000c72:	4770      	bx	lr
 8000c74:	ea90 0f01 	teq	r0, r1
 8000c78:	bf1c      	itt	ne
 8000c7a:	2000      	movne	r0, #0
 8000c7c:	4770      	bxne	lr
 8000c7e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c82:	d104      	bne.n	8000c8e <__addsf3+0x126>
 8000c84:	0040      	lsls	r0, r0, #1
 8000c86:	bf28      	it	cs
 8000c88:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	4770      	bx	lr
 8000c8e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c92:	bf3c      	itt	cc
 8000c94:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c98:	4770      	bxcc	lr
 8000c9a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ca2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca6:	4770      	bx	lr
 8000ca8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cac:	bf16      	itet	ne
 8000cae:	4608      	movne	r0, r1
 8000cb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb4:	4601      	movne	r1, r0
 8000cb6:	0242      	lsls	r2, r0, #9
 8000cb8:	bf06      	itte	eq
 8000cba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cbe:	ea90 0f01 	teqeq	r0, r1
 8000cc2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_ui2f>:
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e004      	b.n	8000cd8 <__aeabi_i2f+0x8>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_i2f>:
 8000cd0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd4:	bf48      	it	mi
 8000cd6:	4240      	negmi	r0, r0
 8000cd8:	ea5f 0c00 	movs.w	ip, r0
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce4:	4601      	mov	r1, r0
 8000ce6:	f04f 0000 	mov.w	r0, #0
 8000cea:	e01c      	b.n	8000d26 <__aeabi_l2f+0x2a>

08000cec <__aeabi_ul2f>:
 8000cec:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf0:	bf08      	it	eq
 8000cf2:	4770      	bxeq	lr
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e00a      	b.n	8000d10 <__aeabi_l2f+0x14>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_l2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d08:	d502      	bpl.n	8000d10 <__aeabi_l2f+0x14>
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	ea5f 0c01 	movs.w	ip, r1
 8000d14:	bf02      	ittt	eq
 8000d16:	4684      	moveq	ip, r0
 8000d18:	4601      	moveq	r1, r0
 8000d1a:	2000      	moveq	r0, #0
 8000d1c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d20:	bf08      	it	eq
 8000d22:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d2a:	fabc f28c 	clz	r2, ip
 8000d2e:	3a08      	subs	r2, #8
 8000d30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d34:	db10      	blt.n	8000d58 <__aeabi_l2f+0x5c>
 8000d36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d48:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	f020 0001 	biceq.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	f102 0220 	add.w	r2, r2, #32
 8000d5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d68:	fa21 f202 	lsr.w	r2, r1, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_ldivmod>:
 8000d78:	b97b      	cbnz	r3, 8000d9a <__aeabi_ldivmod+0x22>
 8000d7a:	b972      	cbnz	r2, 8000d9a <__aeabi_ldivmod+0x22>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bfbe      	ittt	lt
 8000d80:	2000      	movlt	r0, #0
 8000d82:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000d86:	e006      	blt.n	8000d96 <__aeabi_ldivmod+0x1e>
 8000d88:	bf08      	it	eq
 8000d8a:	2800      	cmpeq	r0, #0
 8000d8c:	bf1c      	itt	ne
 8000d8e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d92:	f04f 30ff 	movne.w	r0, #4294967295
 8000d96:	f000 b9b5 	b.w	8001104 <__aeabi_idiv0>
 8000d9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da2:	2900      	cmp	r1, #0
 8000da4:	db09      	blt.n	8000dba <__aeabi_ldivmod+0x42>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db1a      	blt.n	8000de0 <__aeabi_ldivmod+0x68>
 8000daa:	f000 f84d 	bl	8000e48 <__udivmoddi4>
 8000dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db6:	b004      	add	sp, #16
 8000db8:	4770      	bx	lr
 8000dba:	4240      	negs	r0, r0
 8000dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db1b      	blt.n	8000dfc <__aeabi_ldivmod+0x84>
 8000dc4:	f000 f840 	bl	8000e48 <__udivmoddi4>
 8000dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd0:	b004      	add	sp, #16
 8000dd2:	4240      	negs	r0, r0
 8000dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd8:	4252      	negs	r2, r2
 8000dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dde:	4770      	bx	lr
 8000de0:	4252      	negs	r2, r2
 8000de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000de6:	f000 f82f 	bl	8000e48 <__udivmoddi4>
 8000dea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df2:	b004      	add	sp, #16
 8000df4:	4240      	negs	r0, r0
 8000df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfa:	4770      	bx	lr
 8000dfc:	4252      	negs	r2, r2
 8000dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e02:	f000 f821 	bl	8000e48 <__udivmoddi4>
 8000e06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e0e:	b004      	add	sp, #16
 8000e10:	4252      	negs	r2, r2
 8000e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_uldivmod>:
 8000e18:	b953      	cbnz	r3, 8000e30 <__aeabi_uldivmod+0x18>
 8000e1a:	b94a      	cbnz	r2, 8000e30 <__aeabi_uldivmod+0x18>
 8000e1c:	2900      	cmp	r1, #0
 8000e1e:	bf08      	it	eq
 8000e20:	2800      	cmpeq	r0, #0
 8000e22:	bf1c      	itt	ne
 8000e24:	f04f 31ff 	movne.w	r1, #4294967295
 8000e28:	f04f 30ff 	movne.w	r0, #4294967295
 8000e2c:	f000 b96a 	b.w	8001104 <__aeabi_idiv0>
 8000e30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e38:	f000 f806 	bl	8000e48 <__udivmoddi4>
 8000e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e44:	b004      	add	sp, #16
 8000e46:	4770      	bx	lr

08000e48 <__udivmoddi4>:
 8000e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e4c:	9d08      	ldr	r5, [sp, #32]
 8000e4e:	460c      	mov	r4, r1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d14e      	bne.n	8000ef2 <__udivmoddi4+0xaa>
 8000e54:	4694      	mov	ip, r2
 8000e56:	458c      	cmp	ip, r1
 8000e58:	4686      	mov	lr, r0
 8000e5a:	fab2 f282 	clz	r2, r2
 8000e5e:	d962      	bls.n	8000f26 <__udivmoddi4+0xde>
 8000e60:	b14a      	cbz	r2, 8000e76 <__udivmoddi4+0x2e>
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	4091      	lsls	r1, r2
 8000e68:	fa20 f303 	lsr.w	r3, r0, r3
 8000e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e70:	4319      	orrs	r1, r3
 8000e72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7a:	fa1f f68c 	uxth.w	r6, ip
 8000e7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e86:	fb07 1114 	mls	r1, r7, r4, r1
 8000e8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8e:	fb04 f106 	mul.w	r1, r4, r6
 8000e92:	4299      	cmp	r1, r3
 8000e94:	d90a      	bls.n	8000eac <__udivmoddi4+0x64>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e9e:	f080 8112 	bcs.w	80010c6 <__udivmoddi4+0x27e>
 8000ea2:	4299      	cmp	r1, r3
 8000ea4:	f240 810f 	bls.w	80010c6 <__udivmoddi4+0x27e>
 8000ea8:	3c02      	subs	r4, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	1a59      	subs	r1, r3, r1
 8000eae:	fa1f f38e 	uxth.w	r3, lr
 8000eb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f606 	mul.w	r6, r0, r6
 8000ec2:	429e      	cmp	r6, r3
 8000ec4:	d90a      	bls.n	8000edc <__udivmoddi4+0x94>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ece:	f080 80fc 	bcs.w	80010ca <__udivmoddi4+0x282>
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	f240 80f9 	bls.w	80010ca <__udivmoddi4+0x282>
 8000ed8:	4463      	add	r3, ip
 8000eda:	3802      	subs	r0, #2
 8000edc:	1b9b      	subs	r3, r3, r6
 8000ede:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	b11d      	cbz	r5, 8000eee <__udivmoddi4+0xa6>
 8000ee6:	40d3      	lsrs	r3, r2
 8000ee8:	2200      	movs	r2, #0
 8000eea:	e9c5 3200 	strd	r3, r2, [r5]
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d905      	bls.n	8000f02 <__udivmoddi4+0xba>
 8000ef6:	b10d      	cbz	r5, 8000efc <__udivmoddi4+0xb4>
 8000ef8:	e9c5 0100 	strd	r0, r1, [r5]
 8000efc:	2100      	movs	r1, #0
 8000efe:	4608      	mov	r0, r1
 8000f00:	e7f5      	b.n	8000eee <__udivmoddi4+0xa6>
 8000f02:	fab3 f183 	clz	r1, r3
 8000f06:	2900      	cmp	r1, #0
 8000f08:	d146      	bne.n	8000f98 <__udivmoddi4+0x150>
 8000f0a:	42a3      	cmp	r3, r4
 8000f0c:	d302      	bcc.n	8000f14 <__udivmoddi4+0xcc>
 8000f0e:	4290      	cmp	r0, r2
 8000f10:	f0c0 80f0 	bcc.w	80010f4 <__udivmoddi4+0x2ac>
 8000f14:	1a86      	subs	r6, r0, r2
 8000f16:	eb64 0303 	sbc.w	r3, r4, r3
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	2d00      	cmp	r5, #0
 8000f1e:	d0e6      	beq.n	8000eee <__udivmoddi4+0xa6>
 8000f20:	e9c5 6300 	strd	r6, r3, [r5]
 8000f24:	e7e3      	b.n	8000eee <__udivmoddi4+0xa6>
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	f040 8090 	bne.w	800104c <__udivmoddi4+0x204>
 8000f2c:	eba1 040c 	sub.w	r4, r1, ip
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa1f f78c 	uxth.w	r7, ip
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f42:	fb08 4416 	mls	r4, r8, r6, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb07 f006 	mul.w	r0, r7, r6
 8000f4e:	4298      	cmp	r0, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x11c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x11a>
 8000f5c:	4298      	cmp	r0, r3
 8000f5e:	f200 80cd 	bhi.w	80010fc <__udivmoddi4+0x2b4>
 8000f62:	4626      	mov	r6, r4
 8000f64:	1a1c      	subs	r4, r3, r0
 8000f66:	fa1f f38e 	uxth.w	r3, lr
 8000f6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000f72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f76:	fb00 f707 	mul.w	r7, r0, r7
 8000f7a:	429f      	cmp	r7, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x148>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f86:	d202      	bcs.n	8000f8e <__udivmoddi4+0x146>
 8000f88:	429f      	cmp	r7, r3
 8000f8a:	f200 80b0 	bhi.w	80010ee <__udivmoddi4+0x2a6>
 8000f8e:	4620      	mov	r0, r4
 8000f90:	1bdb      	subs	r3, r3, r7
 8000f92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f96:	e7a5      	b.n	8000ee4 <__udivmoddi4+0x9c>
 8000f98:	f1c1 0620 	rsb	r6, r1, #32
 8000f9c:	408b      	lsls	r3, r1
 8000f9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000fa2:	431f      	orrs	r7, r3
 8000fa4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa8:	fa04 f301 	lsl.w	r3, r4, r1
 8000fac:	ea43 030c 	orr.w	r3, r3, ip
 8000fb0:	40f4      	lsrs	r4, r6
 8000fb2:	fa00 f801 	lsl.w	r8, r0, r1
 8000fb6:	0c38      	lsrs	r0, r7, #16
 8000fb8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000fc0:	fa1f fc87 	uxth.w	ip, r7
 8000fc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000fd0:	45a1      	cmp	r9, r4
 8000fd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fd6:	d90a      	bls.n	8000fee <__udivmoddi4+0x1a6>
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fde:	f080 8084 	bcs.w	80010ea <__udivmoddi4+0x2a2>
 8000fe2:	45a1      	cmp	r9, r4
 8000fe4:	f240 8081 	bls.w	80010ea <__udivmoddi4+0x2a2>
 8000fe8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	eba4 0409 	sub.w	r4, r4, r9
 8000ff2:	fa1f f983 	uxth.w	r9, r3
 8000ff6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ffa:	fb00 4413 	mls	r4, r0, r3, r4
 8000ffe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001002:	fb03 fc0c 	mul.w	ip, r3, ip
 8001006:	45a4      	cmp	ip, r4
 8001008:	d907      	bls.n	800101a <__udivmoddi4+0x1d2>
 800100a:	193c      	adds	r4, r7, r4
 800100c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001010:	d267      	bcs.n	80010e2 <__udivmoddi4+0x29a>
 8001012:	45a4      	cmp	ip, r4
 8001014:	d965      	bls.n	80010e2 <__udivmoddi4+0x29a>
 8001016:	3b02      	subs	r3, #2
 8001018:	443c      	add	r4, r7
 800101a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800101e:	fba0 9302 	umull	r9, r3, r0, r2
 8001022:	eba4 040c 	sub.w	r4, r4, ip
 8001026:	429c      	cmp	r4, r3
 8001028:	46ce      	mov	lr, r9
 800102a:	469c      	mov	ip, r3
 800102c:	d351      	bcc.n	80010d2 <__udivmoddi4+0x28a>
 800102e:	d04e      	beq.n	80010ce <__udivmoddi4+0x286>
 8001030:	b155      	cbz	r5, 8001048 <__udivmoddi4+0x200>
 8001032:	ebb8 030e 	subs.w	r3, r8, lr
 8001036:	eb64 040c 	sbc.w	r4, r4, ip
 800103a:	fa04 f606 	lsl.w	r6, r4, r6
 800103e:	40cb      	lsrs	r3, r1
 8001040:	431e      	orrs	r6, r3
 8001042:	40cc      	lsrs	r4, r1
 8001044:	e9c5 6400 	strd	r6, r4, [r5]
 8001048:	2100      	movs	r1, #0
 800104a:	e750      	b.n	8000eee <__udivmoddi4+0xa6>
 800104c:	f1c2 0320 	rsb	r3, r2, #32
 8001050:	fa20 f103 	lsr.w	r1, r0, r3
 8001054:	fa0c fc02 	lsl.w	ip, ip, r2
 8001058:	fa24 f303 	lsr.w	r3, r4, r3
 800105c:	4094      	lsls	r4, r2
 800105e:	430c      	orrs	r4, r1
 8001060:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001064:	fa00 fe02 	lsl.w	lr, r0, r2
 8001068:	fa1f f78c 	uxth.w	r7, ip
 800106c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001070:	fb08 3110 	mls	r1, r8, r0, r3
 8001074:	0c23      	lsrs	r3, r4, #16
 8001076:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800107a:	fb00 f107 	mul.w	r1, r0, r7
 800107e:	4299      	cmp	r1, r3
 8001080:	d908      	bls.n	8001094 <__udivmoddi4+0x24c>
 8001082:	eb1c 0303 	adds.w	r3, ip, r3
 8001086:	f100 36ff 	add.w	r6, r0, #4294967295
 800108a:	d22c      	bcs.n	80010e6 <__udivmoddi4+0x29e>
 800108c:	4299      	cmp	r1, r3
 800108e:	d92a      	bls.n	80010e6 <__udivmoddi4+0x29e>
 8001090:	3802      	subs	r0, #2
 8001092:	4463      	add	r3, ip
 8001094:	1a5b      	subs	r3, r3, r1
 8001096:	b2a4      	uxth	r4, r4
 8001098:	fbb3 f1f8 	udiv	r1, r3, r8
 800109c:	fb08 3311 	mls	r3, r8, r1, r3
 80010a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010a4:	fb01 f307 	mul.w	r3, r1, r7
 80010a8:	42a3      	cmp	r3, r4
 80010aa:	d908      	bls.n	80010be <__udivmoddi4+0x276>
 80010ac:	eb1c 0404 	adds.w	r4, ip, r4
 80010b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80010b4:	d213      	bcs.n	80010de <__udivmoddi4+0x296>
 80010b6:	42a3      	cmp	r3, r4
 80010b8:	d911      	bls.n	80010de <__udivmoddi4+0x296>
 80010ba:	3902      	subs	r1, #2
 80010bc:	4464      	add	r4, ip
 80010be:	1ae4      	subs	r4, r4, r3
 80010c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010c4:	e739      	b.n	8000f3a <__udivmoddi4+0xf2>
 80010c6:	4604      	mov	r4, r0
 80010c8:	e6f0      	b.n	8000eac <__udivmoddi4+0x64>
 80010ca:	4608      	mov	r0, r1
 80010cc:	e706      	b.n	8000edc <__udivmoddi4+0x94>
 80010ce:	45c8      	cmp	r8, r9
 80010d0:	d2ae      	bcs.n	8001030 <__udivmoddi4+0x1e8>
 80010d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80010d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80010da:	3801      	subs	r0, #1
 80010dc:	e7a8      	b.n	8001030 <__udivmoddi4+0x1e8>
 80010de:	4631      	mov	r1, r6
 80010e0:	e7ed      	b.n	80010be <__udivmoddi4+0x276>
 80010e2:	4603      	mov	r3, r0
 80010e4:	e799      	b.n	800101a <__udivmoddi4+0x1d2>
 80010e6:	4630      	mov	r0, r6
 80010e8:	e7d4      	b.n	8001094 <__udivmoddi4+0x24c>
 80010ea:	46d6      	mov	lr, sl
 80010ec:	e77f      	b.n	8000fee <__udivmoddi4+0x1a6>
 80010ee:	4463      	add	r3, ip
 80010f0:	3802      	subs	r0, #2
 80010f2:	e74d      	b.n	8000f90 <__udivmoddi4+0x148>
 80010f4:	4606      	mov	r6, r0
 80010f6:	4623      	mov	r3, r4
 80010f8:	4608      	mov	r0, r1
 80010fa:	e70f      	b.n	8000f1c <__udivmoddi4+0xd4>
 80010fc:	3e02      	subs	r6, #2
 80010fe:	4463      	add	r3, ip
 8001100:	e730      	b.n	8000f64 <__udivmoddi4+0x11c>
 8001102:	bf00      	nop

08001104 <__aeabi_idiv0>:
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f900 	bl	8001350 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f8c8 	bl	80012fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000214 	.word	0x20000214

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4907      	ldr	r1, [pc, #28]	@ (80011f8 <__NVIC_EnableIRQ+0x38>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	@ (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	@ (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	@ 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	@ 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130e:	f7ff ff49 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 8001312:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	6978      	ldr	r0, [r7, #20]
 800131a:	f7ff ff99 	bl	8001250 <NVIC_EncodePriority>
 800131e:	4602      	mov	r2, r0
 8001320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff68 	bl	80011fc <__NVIC_SetPriority>
}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff3c 	bl	80011c0 <__NVIC_EnableIRQ>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffad 	bl	80012b8 <SysTick_Config>
 800135e:	4603      	mov	r3, r0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff ff0a 	bl	800118c <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e099      	b.n	80014b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a4:	e00f      	b.n	80013c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013a6:	f7ff fef1 	bl	800118c <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d908      	bls.n	80013c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2220      	movs	r2, #32
 80013b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e078      	b.n	80014b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e8      	bne.n	80013a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <HAL_DMA_Init+0x158>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	2b04      	cmp	r3, #4
 800141e:	d107      	bne.n	8001430 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001428:	4313      	orrs	r3, r2
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f023 0307 	bic.w	r3, r3, #7
 8001446:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	4313      	orrs	r3, r2
 8001450:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	2b04      	cmp	r3, #4
 8001458:	d117      	bne.n	800148a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00e      	beq.n	800148a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fa91 	bl	8001994 <DMA_CheckFifoParam>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2240      	movs	r2, #64	@ 0x40
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001486:	2301      	movs	r3, #1
 8001488:	e016      	b.n	80014b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fa48 	bl	8001928 <DMA_CalcBaseAndBitshift>
 8001498:	4603      	mov	r3, r0
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a0:	223f      	movs	r2, #63	@ 0x3f
 80014a2:	409a      	lsls	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	f010803f 	.word	0xf010803f

080014c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_DMA_Start_IT+0x26>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e040      	b.n	800156c <HAL_DMA_Start_IT+0xa8>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d12f      	bne.n	800155e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2202      	movs	r2, #2
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f9da 	bl	80018cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800151c:	223f      	movs	r2, #63	@ 0x3f
 800151e:	409a      	lsls	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0216 	orr.w	r2, r2, #22
 8001532:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	2b00      	cmp	r3, #0
 800153a:	d007      	beq.n	800154c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0208 	orr.w	r2, r2, #8
 800154a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e005      	b.n	800156a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001566:	2302      	movs	r3, #2
 8001568:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800156a:	7dfb      	ldrb	r3, [r7, #23]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d004      	beq.n	8001592 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2280      	movs	r2, #128	@ 0x80
 800158c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00c      	b.n	80015ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2205      	movs	r2, #5
 8001596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0201 	bic.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001800 <HAL_DMA_IRQHandler+0x248>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a8e      	ldr	r2, [pc, #568]	@ (8001804 <HAL_DMA_IRQHandler+0x24c>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	0a9b      	lsrs	r3, r3, #10
 80015d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e2:	2208      	movs	r2, #8
 80015e4:	409a      	lsls	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d01a      	beq.n	8001624 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0204 	bic.w	r2, r2, #4
 800160a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001610:	2208      	movs	r2, #8
 8001612:	409a      	lsls	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001628:	2201      	movs	r2, #1
 800162a:	409a      	lsls	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d012      	beq.n	800165a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001646:	2201      	movs	r2, #1
 8001648:	409a      	lsls	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001652:	f043 0202 	orr.w	r2, r3, #2
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165e:	2204      	movs	r2, #4
 8001660:	409a      	lsls	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d012      	beq.n	8001690 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00b      	beq.n	8001690 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800167c:	2204      	movs	r2, #4
 800167e:	409a      	lsls	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001688:	f043 0204 	orr.w	r2, r3, #4
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001694:	2210      	movs	r2, #16
 8001696:	409a      	lsls	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d043      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d03c      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b2:	2210      	movs	r2, #16
 80016b4:	409a      	lsls	r2, r3
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d018      	beq.n	80016fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d108      	bne.n	80016e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d024      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	4798      	blx	r3
 80016e6:	e01f      	b.n	8001728 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01b      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	4798      	blx	r3
 80016f8:	e016      	b.n	8001728 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d107      	bne.n	8001718 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0208 	bic.w	r2, r2, #8
 8001716:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172c:	2220      	movs	r2, #32
 800172e:	409a      	lsls	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 808f 	beq.w	8001858 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8087 	beq.w	8001858 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800174e:	2220      	movs	r2, #32
 8001750:	409a      	lsls	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b05      	cmp	r3, #5
 8001760:	d136      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0216 	bic.w	r2, r2, #22
 8001770:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001780:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <HAL_DMA_IRQHandler+0x1da>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0208 	bic.w	r2, r2, #8
 80017a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a6:	223f      	movs	r2, #63	@ 0x3f
 80017a8:	409a      	lsls	r2, r3
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d07e      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	4798      	blx	r3
        }
        return;
 80017ce:	e079      	b.n	80018c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01d      	beq.n	800181a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10d      	bne.n	8001808 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d031      	beq.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
 80017fc:	e02c      	b.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
 80017fe:	bf00      	nop
 8001800:	20000000 	.word	0x20000000
 8001804:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800180c:	2b00      	cmp	r3, #0
 800180e:	d023      	beq.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
 8001818:	e01e      	b.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10f      	bne.n	8001848 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0210 	bic.w	r2, r2, #16
 8001836:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800185c:	2b00      	cmp	r3, #0
 800185e:	d032      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d022      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2205      	movs	r2, #5
 8001870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3301      	adds	r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	d307      	bcc.n	80018a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f2      	bne.n	8001884 <HAL_DMA_IRQHandler+0x2cc>
 800189e:	e000      	b.n	80018a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	4798      	blx	r3
 80018c2:	e000      	b.n	80018c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80018c4:	bf00      	nop
    }
  }
}
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80018e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b40      	cmp	r3, #64	@ 0x40
 80018f8:	d108      	bne.n	800190c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800190a:	e007      	b.n	800191c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	3b10      	subs	r3, #16
 8001938:	4a14      	ldr	r2, [pc, #80]	@ (800198c <DMA_CalcBaseAndBitshift+0x64>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001942:	4a13      	ldr	r2, [pc, #76]	@ (8001990 <DMA_CalcBaseAndBitshift+0x68>)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d909      	bls.n	800196a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	1d1a      	adds	r2, r3, #4
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	659a      	str	r2, [r3, #88]	@ 0x58
 8001968:	e007      	b.n	800197a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001972:	f023 0303 	bic.w	r3, r3, #3
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	aaaaaaab 	.word	0xaaaaaaab
 8001990:	0801a900 	.word	0x0801a900

08001994 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d11f      	bne.n	80019ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d856      	bhi.n	8001a62 <DMA_CheckFifoParam+0xce>
 80019b4:	a201      	add	r2, pc, #4	@ (adr r2, 80019bc <DMA_CheckFifoParam+0x28>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019cd 	.word	0x080019cd
 80019c0:	080019df 	.word	0x080019df
 80019c4:	080019cd 	.word	0x080019cd
 80019c8:	08001a63 	.word	0x08001a63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d046      	beq.n	8001a66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019dc:	e043      	b.n	8001a66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019e6:	d140      	bne.n	8001a6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ec:	e03d      	b.n	8001a6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019f6:	d121      	bne.n	8001a3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d837      	bhi.n	8001a6e <DMA_CheckFifoParam+0xda>
 80019fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001a04 <DMA_CheckFifoParam+0x70>)
 8001a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a04:	08001a15 	.word	0x08001a15
 8001a08:	08001a1b 	.word	0x08001a1b
 8001a0c:	08001a15 	.word	0x08001a15
 8001a10:	08001a2d 	.word	0x08001a2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
      break;
 8001a18:	e030      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d025      	beq.n	8001a72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a2a:	e022      	b.n	8001a72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a34:	d11f      	bne.n	8001a76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a3a:	e01c      	b.n	8001a76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d903      	bls.n	8001a4a <DMA_CheckFifoParam+0xb6>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d003      	beq.n	8001a50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a48:	e018      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a4e:	e015      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00e      	beq.n	8001a7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a60:	e00b      	b.n	8001a7a <DMA_CheckFifoParam+0xe6>
      break;
 8001a62:	bf00      	nop
 8001a64:	e00a      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a66:	bf00      	nop
 8001a68:	e008      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a6a:	bf00      	nop
 8001a6c:	e006      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a6e:	bf00      	nop
 8001a70:	e004      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a72:	bf00      	nop
 8001a74:	e002      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;   
 8001a76:	bf00      	nop
 8001a78:	e000      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a7a:	bf00      	nop
    }
  } 
  
  return status; 
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e16b      	b.n	8001d80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 815a 	bne.w	8001d7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d005      	beq.n	8001ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d130      	bne.n	8001b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 0201 	and.w	r2, r3, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d017      	beq.n	8001b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d123      	bne.n	8001bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80b4 	beq.w	8001d7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b60      	ldr	r3, [pc, #384]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c22:	4b5d      	ldr	r3, [pc, #372]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d9c <HAL_GPIO_Init+0x310>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a52      	ldr	r2, [pc, #328]	@ (8001da0 <HAL_GPIO_Init+0x314>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02b      	beq.n	8001cb2 <HAL_GPIO_Init+0x226>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a51      	ldr	r2, [pc, #324]	@ (8001da4 <HAL_GPIO_Init+0x318>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d025      	beq.n	8001cae <HAL_GPIO_Init+0x222>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a50      	ldr	r2, [pc, #320]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <HAL_GPIO_Init+0x21e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001dac <HAL_GPIO_Init+0x320>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x21a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4e      	ldr	r2, [pc, #312]	@ (8001db0 <HAL_GPIO_Init+0x324>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x216>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001db4 <HAL_GPIO_Init+0x328>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x212>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	@ (8001db8 <HAL_GPIO_Init+0x32c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001dbc <HAL_GPIO_Init+0x330>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x20a>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e00e      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c96:	2308      	movs	r3, #8
 8001c98:	e00c      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	e00a      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc4:	4935      	ldr	r1, [pc, #212]	@ (8001d9c <HAL_GPIO_Init+0x310>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a32      	ldr	r2, [pc, #200]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b30      	ldr	r3, [pc, #192]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a27      	ldr	r2, [pc, #156]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	f67f ae90 	bls.w	8001aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3724      	adds	r7, #36	@ 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40021400 	.word	0x40021400
 8001db8:	40021800 	.word	0x40021800
 8001dbc:	40021c00 	.word	0x40021c00
 8001dc0:	40013c00 	.word	0x40013c00

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de0:	e003      	b.n	8001dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	041a      	lsls	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e08:	887a      	ldrh	r2, [r7, #2]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	041a      	lsls	r2, r3, #16
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	400b      	ands	r3, r1
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	619a      	str	r2, [r3, #24]
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e12b      	b.n	8002096 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f007 fc6e 	bl	8009734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2224      	movs	r2, #36	@ 0x24
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e90:	f001 fc64 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8001e94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4a81      	ldr	r2, [pc, #516]	@ (80020a0 <HAL_I2C_Init+0x274>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d807      	bhi.n	8001eb0 <HAL_I2C_Init+0x84>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4a80      	ldr	r2, [pc, #512]	@ (80020a4 <HAL_I2C_Init+0x278>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	bf94      	ite	ls
 8001ea8:	2301      	movls	r3, #1
 8001eaa:	2300      	movhi	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	e006      	b.n	8001ebe <HAL_I2C_Init+0x92>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4a7d      	ldr	r2, [pc, #500]	@ (80020a8 <HAL_I2C_Init+0x27c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	bf94      	ite	ls
 8001eb8:	2301      	movls	r3, #1
 8001eba:	2300      	movhi	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0e7      	b.n	8002096 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4a78      	ldr	r2, [pc, #480]	@ (80020ac <HAL_I2C_Init+0x280>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0c9b      	lsrs	r3, r3, #18
 8001ed0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a6a      	ldr	r2, [pc, #424]	@ (80020a0 <HAL_I2C_Init+0x274>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d802      	bhi.n	8001f00 <HAL_I2C_Init+0xd4>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3301      	adds	r3, #1
 8001efe:	e009      	b.n	8001f14 <HAL_I2C_Init+0xe8>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	4a69      	ldr	r2, [pc, #420]	@ (80020b0 <HAL_I2C_Init+0x284>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	099b      	lsrs	r3, r3, #6
 8001f12:	3301      	adds	r3, #1
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	495c      	ldr	r1, [pc, #368]	@ (80020a0 <HAL_I2C_Init+0x274>)
 8001f30:	428b      	cmp	r3, r1
 8001f32:	d819      	bhi.n	8001f68 <HAL_I2C_Init+0x13c>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1e59      	subs	r1, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f42:	1c59      	adds	r1, r3, #1
 8001f44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f48:	400b      	ands	r3, r1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_I2C_Init+0x138>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1e59      	subs	r1, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f62:	e051      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001f64:	2304      	movs	r3, #4
 8001f66:	e04f      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d111      	bne.n	8001f94 <HAL_I2C_Init+0x168>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e58      	subs	r0, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	440b      	add	r3, r1
 8001f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e012      	b.n	8001fba <HAL_I2C_Init+0x18e>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1e58      	subs	r0, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	0099      	lsls	r1, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001faa:	3301      	adds	r3, #1
 8001fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_Init+0x196>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e022      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_I2C_Init+0x1bc>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1e58      	subs	r0, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	440b      	add	r3, r1
 8001fd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fe6:	e00f      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1e58      	subs	r0, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	0099      	lsls	r1, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002004:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	6809      	ldr	r1, [r1, #0]
 800200c:	4313      	orrs	r3, r2
 800200e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002036:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6911      	ldr	r1, [r2, #16]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68d2      	ldr	r2, [r2, #12]
 8002042:	4311      	orrs	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	430b      	orrs	r3, r1
 800204a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	000186a0 	.word	0x000186a0
 80020a4:	001e847f 	.word	0x001e847f
 80020a8:	003d08ff 	.word	0x003d08ff
 80020ac:	431bde83 	.word	0x431bde83
 80020b0:	10624dd3 	.word	0x10624dd3

080020b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	817b      	strh	r3, [r7, #10]
 80020c6:	460b      	mov	r3, r1
 80020c8:	813b      	strh	r3, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020ce:	f7ff f85d 	bl	800118c <HAL_GetTick>
 80020d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b20      	cmp	r3, #32
 80020de:	f040 80d9 	bne.w	8002294 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	2319      	movs	r3, #25
 80020e8:	2201      	movs	r2, #1
 80020ea:	496d      	ldr	r1, [pc, #436]	@ (80022a0 <HAL_I2C_Mem_Write+0x1ec>)
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 fc8f 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0cc      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_I2C_Mem_Write+0x56>
 8002106:	2302      	movs	r3, #2
 8002108:	e0c5      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d007      	beq.n	8002130 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800213e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2221      	movs	r2, #33	@ 0x21
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2240      	movs	r2, #64	@ 0x40
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a3a      	ldr	r2, [r7, #32]
 800215a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002160:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4a4d      	ldr	r2, [pc, #308]	@ (80022a4 <HAL_I2C_Mem_Write+0x1f0>)
 8002170:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002172:	88f8      	ldrh	r0, [r7, #6]
 8002174:	893a      	ldrh	r2, [r7, #8]
 8002176:	8979      	ldrh	r1, [r7, #10]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	4603      	mov	r3, r0
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fac6 	bl	8002714 <I2C_RequestMemoryWrite>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d052      	beq.n	8002234 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e081      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fd54 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00d      	beq.n	80021be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d107      	bne.n	80021ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06b      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d11b      	bne.n	8002234 <HAL_I2C_Mem_Write+0x180>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d017      	beq.n	8002234 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1aa      	bne.n	8002192 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fd47 	bl	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00d      	beq.n	8002268 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	2b04      	cmp	r3, #4
 8002252:	d107      	bne.n	8002264 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002262:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e016      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e000      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	00100002 	.word	0x00100002
 80022a4:	ffff0000 	.word	0xffff0000

080022a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	@ 0x30
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	817b      	strh	r3, [r7, #10]
 80022ba:	460b      	mov	r3, r1
 80022bc:	813b      	strh	r3, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022c2:	f7fe ff63 	bl	800118c <HAL_GetTick>
 80022c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	f040 8218 	bne.w	8002706 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2319      	movs	r3, #25
 80022dc:	2201      	movs	r2, #1
 80022de:	497c      	ldr	r1, [pc, #496]	@ (80024d0 <HAL_I2C_Mem_Read+0x228>)
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fb95 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80022ec:	2302      	movs	r3, #2
 80022ee:	e20b      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_I2C_Mem_Read+0x56>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e204      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d007      	beq.n	8002324 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002332:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2222      	movs	r2, #34	@ 0x22
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2240      	movs	r2, #64	@ 0x40
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002354:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4a5c      	ldr	r2, [pc, #368]	@ (80024d4 <HAL_I2C_Mem_Read+0x22c>)
 8002364:	62da      	str	r2, [r3, #44]	@ 0x2c
//    hal_flage = 1;//JH
    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002366:	88f8      	ldrh	r0, [r7, #6]
 8002368:	893a      	ldrh	r2, [r7, #8]
 800236a:	8979      	ldrh	r1, [r7, #10]
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	4603      	mov	r3, r0
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fa62 	bl	8002840 <I2C_RequestMemoryRead>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d004      	beq.n	800238c <HAL_I2C_Mem_Read+0xe4>
    {
    	hal_flage = 1;//JH
 8002382:	4b55      	ldr	r3, [pc, #340]	@ (80024d8 <HAL_I2C_Mem_Read+0x230>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e1bd      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
//      hal_flage = 1;// Not follow rule can't debug
    }
//    hal_flage = 1;//NJH

    if (hi2c->XferSize == 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	d113      	bne.n	80023bc <HAL_I2C_Mem_Read+0x114>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	623b      	str	r3, [r7, #32]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	623b      	str	r3, [r7, #32]
 80023a8:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e191      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d11b      	bne.n	80023fc <HAL_I2C_Mem_Read+0x154>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023d2:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e171      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 2U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002400:	2b02      	cmp	r3, #2
 8002402:	d11b      	bne.n	800243c <HAL_I2C_Mem_Read+0x194>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002412:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002422:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	e151      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
    }
//    hal_flage = 1;//NJH
    while (hi2c->XferSize > 0U)
 8002452:	e145      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002458:	2b03      	cmp	r3, #3
 800245a:	f200 80f2 	bhi.w	8002642 <HAL_I2C_Mem_Read+0x39a>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002462:	2b01      	cmp	r3, #1
 8002464:	d123      	bne.n	80024ae <HAL_I2C_Mem_Read+0x206>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002468:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fc7a 	bl	8002d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Mem_Read+0x1d2>
          {
            return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e146      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024ac:	e118      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d14f      	bne.n	8002556 <HAL_I2C_Mem_Read+0x2ae>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024bc:	2200      	movs	r2, #0
 80024be:	4907      	ldr	r1, [pc, #28]	@ (80024dc <HAL_I2C_Mem_Read+0x234>)
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 faa5 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x238>
          {
            return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e11b      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
 80024d0:	00100002 	.word	0x00100002
 80024d4:	ffff0000 	.word	0xffff0000
 80024d8:	20000218 	.word	0x20000218
 80024dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002554:	e0c4      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255c:	2200      	movs	r2, #0
 800255e:	496c      	ldr	r1, [pc, #432]	@ (8002710 <HAL_I2C_Mem_Read+0x468>)
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fa55 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_Mem_Read+0x2c8>
          {
            return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0cb      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800257e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b8:	2200      	movs	r2, #0
 80025ba:	4955      	ldr	r1, [pc, #340]	@ (8002710 <HAL_I2C_Mem_Read+0x468>)
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fa27 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Mem_Read+0x324>
          {
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e09d      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002640:	e04e      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002644:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fb8c 	bl	8002d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Mem_Read+0x3ae>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e058      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b04      	cmp	r3, #4
 8002694:	d124      	bne.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        {
          if (hi2c->XferSize == 3U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269a:	2b03      	cmp	r3, #3
 800269c:	d107      	bne.n	80026ae <HAL_I2C_Mem_Read+0x406>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f47f aeb5 	bne.w	8002454 <HAL_I2C_Mem_Read+0x1ac>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
//    hal_flage = 1;//NJH
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
//    hal_flage = 1;//NJH
    return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
//	  hal_flage = 1;//NJH
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3728      	adds	r7, #40	@ 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	00010004 	.word	0x00010004

08002714 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	460b      	mov	r3, r1
 8002728:	813b      	strh	r3, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800273c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2200      	movs	r2, #0
 8002746:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f960 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00d      	beq.n	8002772 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002764:	d103      	bne.n	800276e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800276c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e05f      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002772:	897b      	ldrh	r3, [r7, #10]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002780:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	492d      	ldr	r1, [pc, #180]	@ (800283c <I2C_RequestMemoryWrite+0x128>)
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f9bb 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e04c      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b0:	6a39      	ldr	r1, [r7, #32]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fa46 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00d      	beq.n	80027da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d107      	bne.n	80027d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e02b      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027e0:	893b      	ldrh	r3, [r7, #8]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	611a      	str	r2, [r3, #16]
 80027ea:	e021      	b.n	8002830 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027ec:	893b      	ldrh	r3, [r7, #8]
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027fc:	6a39      	ldr	r1, [r7, #32]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 fa20 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00d      	beq.n	8002826 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	2b04      	cmp	r3, #4
 8002810:	d107      	bne.n	8002822 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002820:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e005      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002826:	893b      	ldrh	r3, [r7, #8]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	00010002 	.word	0x00010002

08002840 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	461a      	mov	r2, r3
 800284e:	4603      	mov	r3, r0
 8002850:	817b      	strh	r3, [r7, #10]
 8002852:	460b      	mov	r3, r1
 8002854:	813b      	strh	r3, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002868:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002878:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	2200      	movs	r2, #0
 8002882:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f8c2 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028a0:	d103      	bne.n	80028aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0aa      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	6a3a      	ldr	r2, [r7, #32]
 80028c2:	4952      	ldr	r1, [pc, #328]	@ (8002a0c <I2C_RequestMemoryRead+0x1cc>)
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f91d 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e097      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ec:	6a39      	ldr	r1, [r7, #32]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f9a8 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d107      	bne.n	8002912 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002910:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e076      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800291c:	893b      	ldrh	r3, [r7, #8]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	611a      	str	r2, [r3, #16]
 8002926:	e021      	b.n	800296c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002928:	893b      	ldrh	r3, [r7, #8]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29b      	uxth	r3, r3
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f982 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	2b04      	cmp	r3, #4
 800294c:	d107      	bne.n	800295e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e050      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002962:	893b      	ldrh	r3, [r7, #8]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800296c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296e:	6a39      	ldr	r1, [r7, #32]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f967 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	2b04      	cmp	r3, #4
 8002982:	d107      	bne.n	8002994 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002992:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e035      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f82b 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00d      	beq.n	80029dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ce:	d103      	bne.n	80029d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e013      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029dc:	897b      	ldrh	r3, [r7, #10]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	6a3a      	ldr	r2, [r7, #32]
 80029f0:	4906      	ldr	r1, [pc, #24]	@ (8002a0c <I2C_RequestMemoryRead+0x1cc>)
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f886 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	00010002 	.word	0x00010002

08002a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a20:	e048      	b.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d044      	beq.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2a:	f7fe fbaf 	bl	800118c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d302      	bcc.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d139      	bne.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10d      	bne.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4013      	ands	r3, r2
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	e00c      	b.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4013      	ands	r3, r2
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d116      	bne.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e023      	b.n	8002afc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	0c1b      	lsrs	r3, r3, #16
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d10d      	bne.n	8002ada <I2C_WaitOnFlagUntilTimeout+0xca>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	e00c      	b.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d093      	beq.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b12:	e071      	b.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b22:	d123      	bne.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f043 0204 	orr.w	r2, r3, #4
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e067      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d041      	beq.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b74:	f7fe fb0a 	bl	800118c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d302      	bcc.n	8002b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d136      	bne.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10c      	bne.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf14      	ite	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2300      	moveq	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	e00b      	b.n	8002bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e021      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	0c1b      	lsrs	r3, r3, #16
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10c      	bne.n	8002c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e00b      	b.n	8002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f47f af6d 	bne.w	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c50:	e034      	b.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f8e3 	bl	8002e1e <I2C_IsAcknowledgeFailed>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e034      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d028      	beq.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7fe fa8f 	bl	800118c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d11d      	bne.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8a:	2b80      	cmp	r3, #128	@ 0x80
 8002c8c:	d016      	beq.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e007      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc6:	2b80      	cmp	r3, #128	@ 0x80
 8002cc8:	d1c3      	bne.n	8002c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce0:	e034      	b.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f89b 	bl	8002e1e <I2C_IsAcknowledgeFailed>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e034      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d028      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfa:	f7fe fa47 	bl	800118c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d302      	bcc.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d11d      	bne.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d016      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e007      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d1c3      	bne.n	8002ce2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d70:	e049      	b.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d119      	bne.n	8002db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0210 	mvn.w	r2, #16
 8002d88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e030      	b.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db4:	f7fe f9ea 	bl	800118c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d302      	bcc.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d11d      	bne.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd4:	2b40      	cmp	r3, #64	@ 0x40
 8002dd6:	d016      	beq.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	f043 0220 	orr.w	r2, r3, #32
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e007      	b.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e10:	2b40      	cmp	r3, #64	@ 0x40
 8002e12:	d1ae      	bne.n	8002d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e34:	d11b      	bne.n	8002e6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e267      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d075      	beq.n	8002f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e9a:	4b88      	ldr	r3, [pc, #544]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b85      	ldr	r3, [pc, #532]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d112      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb2:	4b82      	ldr	r3, [pc, #520]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d05b      	beq.n	8002f84 <HAL_RCC_OscConfig+0x108>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d157      	bne.n	8002f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e242      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x74>
 8002ee2:	4b76      	ldr	r3, [pc, #472]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a75      	ldr	r2, [pc, #468]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e01d      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x98>
 8002efa:	4b70      	ldr	r3, [pc, #448]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6f      	ldr	r2, [pc, #444]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b6d      	ldr	r3, [pc, #436]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a6c      	ldr	r2, [pc, #432]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002f14:	4b69      	ldr	r3, [pc, #420]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a68      	ldr	r2, [pc, #416]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b66      	ldr	r3, [pc, #408]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a65      	ldr	r2, [pc, #404]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe f92a 	bl	800118c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe f926 	bl	800118c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	@ 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e207      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0xc0>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f916 	bl	800118c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe f912 	bl	800118c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	@ 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e1f3      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	4b51      	ldr	r3, [pc, #324]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0xe8>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d063      	beq.n	800305a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f92:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b47      	ldr	r3, [pc, #284]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002faa:	4b44      	ldr	r3, [pc, #272]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	4b41      	ldr	r3, [pc, #260]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1c7      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b3b      	ldr	r3, [pc, #236]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4937      	ldr	r1, [pc, #220]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	e03a      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	4b34      	ldr	r3, [pc, #208]	@ (80030c0 <HAL_RCC_OscConfig+0x244>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fe f8cb 	bl	800118c <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fe f8c7 	bl	800118c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e1a8      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	4b2b      	ldr	r3, [pc, #172]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4925      	ldr	r1, [pc, #148]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
 800302c:	e015      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b24      	ldr	r3, [pc, #144]	@ (80030c0 <HAL_RCC_OscConfig+0x244>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fe f8aa 	bl	800118c <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303c:	f7fe f8a6 	bl	800118c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e187      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d036      	beq.n	80030d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306e:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <HAL_RCC_OscConfig+0x248>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe f88a 	bl	800118c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe f886 	bl	800118c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e167      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x200>
 800309a:	e01b      	b.n	80030d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309c:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_RCC_OscConfig+0x248>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7fe f873 	bl	800118c <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	e00e      	b.n	80030c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030aa:	f7fe f86f 	bl	800118c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d907      	bls.n	80030c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e150      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	42470000 	.word	0x42470000
 80030c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	4b88      	ldr	r3, [pc, #544]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ea      	bne.n	80030aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8097 	beq.w	8003210 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e6:	4b81      	ldr	r3, [pc, #516]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10f      	bne.n	8003112 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	4b7d      	ldr	r3, [pc, #500]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	4a7c      	ldr	r2, [pc, #496]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003100:	6413      	str	r3, [r2, #64]	@ 0x40
 8003102:	4b7a      	ldr	r3, [pc, #488]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	4b77      	ldr	r3, [pc, #476]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d118      	bne.n	8003150 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311e:	4b74      	ldr	r3, [pc, #464]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a73      	ldr	r2, [pc, #460]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312a:	f7fe f82f 	bl	800118c <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7fe f82b 	bl	800118c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e10c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	4b6a      	ldr	r3, [pc, #424]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d106      	bne.n	8003166 <HAL_RCC_OscConfig+0x2ea>
 8003158:	4b64      	ldr	r3, [pc, #400]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315c:	4a63      	ldr	r2, [pc, #396]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	@ 0x70
 8003164:	e01c      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x30c>
 800316e:	4b5f      	ldr	r3, [pc, #380]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	4a5e      	ldr	r2, [pc, #376]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6713      	str	r3, [r2, #112]	@ 0x70
 800317a:	4b5c      	ldr	r3, [pc, #368]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317e:	4a5b      	ldr	r2, [pc, #364]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6713      	str	r3, [r2, #112]	@ 0x70
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003188:	4b58      	ldr	r3, [pc, #352]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a57      	ldr	r2, [pc, #348]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
 8003194:	4b55      	ldr	r3, [pc, #340]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a54      	ldr	r2, [pc, #336]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fd fff0 	bl	800118c <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fd ffec 	bl	800118c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0cb      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c6:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0ee      	beq.n	80031b0 <HAL_RCC_OscConfig+0x334>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7fd ffda 	bl	800118c <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7fd ffd6 	bl	800118c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0b5      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f2:	4b3e      	ldr	r3, [pc, #248]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1ee      	bne.n	80031dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003204:	4b39      	ldr	r3, [pc, #228]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	4a38      	ldr	r2, [pc, #224]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80a1 	beq.w	800335c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321a:	4b34      	ldr	r3, [pc, #208]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b08      	cmp	r3, #8
 8003224:	d05c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d141      	bne.n	80032b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b31      	ldr	r3, [pc, #196]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fd ffaa 	bl	800118c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fd ffa6 	bl	800118c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e087      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	4b27      	ldr	r3, [pc, #156]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	019b      	lsls	r3, r3, #6
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	085b      	lsrs	r3, r3, #1
 8003272:	3b01      	subs	r3, #1
 8003274:	041b      	lsls	r3, r3, #16
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	491b      	ldr	r1, [pc, #108]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fd ff7f 	bl	800118c <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7fd ff7b 	bl	800118c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e05c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a4:	4b11      	ldr	r3, [pc, #68]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x416>
 80032b0:	e054      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fd ff68 	bl	800118c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fd ff64 	bl	800118c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e045      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x444>
 80032de:	e03d      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e038      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40007000 	.word	0x40007000
 80032f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003368 <HAL_RCC_OscConfig+0x4ec>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d028      	beq.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d121      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d11a      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003328:	4013      	ands	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800332e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003330:	4293      	cmp	r3, r2
 8003332:	d111      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	3b01      	subs	r3, #1
 8003342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800

0800336c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0cc      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003380:	4b68      	ldr	r3, [pc, #416]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d90c      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b65      	ldr	r3, [pc, #404]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b63      	ldr	r3, [pc, #396]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0b8      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c0:	4b59      	ldr	r3, [pc, #356]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a58      	ldr	r2, [pc, #352]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d8:	4b53      	ldr	r3, [pc, #332]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a52      	ldr	r2, [pc, #328]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b50      	ldr	r3, [pc, #320]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	494d      	ldr	r1, [pc, #308]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d044      	beq.n	800348c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d119      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d003      	beq.n	800342a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003426:	2b03      	cmp	r3, #3
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342a:	4b3f      	ldr	r3, [pc, #252]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e06f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343a:	4b3b      	ldr	r3, [pc, #236]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e067      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344a:	4b37      	ldr	r3, [pc, #220]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f023 0203 	bic.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4934      	ldr	r1, [pc, #208]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800345c:	f7fd fe96 	bl	800118c <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	e00a      	b.n	800347a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fd fe92 	bl	800118c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e04f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 020c 	and.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	429a      	cmp	r2, r3
 800348a:	d1eb      	bne.n	8003464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800348c:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d20c      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b22      	ldr	r3, [pc, #136]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e032      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c0:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4916      	ldr	r1, [pc, #88]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034de:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	490e      	ldr	r1, [pc, #56]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034f2:	f000 f821 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	490a      	ldr	r1, [pc, #40]	@ (800352c <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	4a09      	ldr	r2, [pc, #36]	@ (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800350e:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd fe0a 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40023c00 	.word	0x40023c00
 8003528:	40023800 	.word	0x40023800
 800352c:	0801a8e8 	.word	0x0801a8e8
 8003530:	20000000 	.word	0x20000000
 8003534:	20000004 	.word	0x20000004

08003538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800353c:	b094      	sub	sp, #80	@ 0x50
 800353e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003550:	4b79      	ldr	r3, [pc, #484]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d00d      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x40>
 800355c:	2b08      	cmp	r3, #8
 800355e:	f200 80e1 	bhi.w	8003724 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x34>
 8003566:	2b04      	cmp	r3, #4
 8003568:	d003      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x3a>
 800356a:	e0db      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800356c:	4b73      	ldr	r3, [pc, #460]	@ (800373c <HAL_RCC_GetSysClockFreq+0x204>)
 800356e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003570:	e0db      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003572:	4b73      	ldr	r3, [pc, #460]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x208>)
 8003574:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003576:	e0d8      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003578:	4b6f      	ldr	r3, [pc, #444]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003580:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003582:	4b6d      	ldr	r3, [pc, #436]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d063      	beq.n	8003656 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358e:	4b6a      	ldr	r3, [pc, #424]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	2200      	movs	r2, #0
 8003596:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003598:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035a2:	2300      	movs	r3, #0
 80035a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035aa:	4622      	mov	r2, r4
 80035ac:	462b      	mov	r3, r5
 80035ae:	f04f 0000 	mov.w	r0, #0
 80035b2:	f04f 0100 	mov.w	r1, #0
 80035b6:	0159      	lsls	r1, r3, #5
 80035b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035bc:	0150      	lsls	r0, r2, #5
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4621      	mov	r1, r4
 80035c4:	1a51      	subs	r1, r2, r1
 80035c6:	6139      	str	r1, [r7, #16]
 80035c8:	4629      	mov	r1, r5
 80035ca:	eb63 0301 	sbc.w	r3, r3, r1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035dc:	4659      	mov	r1, fp
 80035de:	018b      	lsls	r3, r1, #6
 80035e0:	4651      	mov	r1, sl
 80035e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035e6:	4651      	mov	r1, sl
 80035e8:	018a      	lsls	r2, r1, #6
 80035ea:	4651      	mov	r1, sl
 80035ec:	ebb2 0801 	subs.w	r8, r2, r1
 80035f0:	4659      	mov	r1, fp
 80035f2:	eb63 0901 	sbc.w	r9, r3, r1
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800360a:	4690      	mov	r8, r2
 800360c:	4699      	mov	r9, r3
 800360e:	4623      	mov	r3, r4
 8003610:	eb18 0303 	adds.w	r3, r8, r3
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	462b      	mov	r3, r5
 8003618:	eb49 0303 	adc.w	r3, r9, r3
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800362a:	4629      	mov	r1, r5
 800362c:	024b      	lsls	r3, r1, #9
 800362e:	4621      	mov	r1, r4
 8003630:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003634:	4621      	mov	r1, r4
 8003636:	024a      	lsls	r2, r1, #9
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800363e:	2200      	movs	r2, #0
 8003640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003644:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003648:	f7fd fbe6 	bl	8000e18 <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4613      	mov	r3, r2
 8003652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003654:	e058      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003656:	4b38      	ldr	r3, [pc, #224]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	2200      	movs	r2, #0
 800365e:	4618      	mov	r0, r3
 8003660:	4611      	mov	r1, r2
 8003662:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003666:	623b      	str	r3, [r7, #32]
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
 800366c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003670:	4642      	mov	r2, r8
 8003672:	464b      	mov	r3, r9
 8003674:	f04f 0000 	mov.w	r0, #0
 8003678:	f04f 0100 	mov.w	r1, #0
 800367c:	0159      	lsls	r1, r3, #5
 800367e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003682:	0150      	lsls	r0, r2, #5
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4641      	mov	r1, r8
 800368a:	ebb2 0a01 	subs.w	sl, r2, r1
 800368e:	4649      	mov	r1, r9
 8003690:	eb63 0b01 	sbc.w	fp, r3, r1
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036a8:	ebb2 040a 	subs.w	r4, r2, sl
 80036ac:	eb63 050b 	sbc.w	r5, r3, fp
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	00eb      	lsls	r3, r5, #3
 80036ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036be:	00e2      	lsls	r2, r4, #3
 80036c0:	4614      	mov	r4, r2
 80036c2:	461d      	mov	r5, r3
 80036c4:	4643      	mov	r3, r8
 80036c6:	18e3      	adds	r3, r4, r3
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	464b      	mov	r3, r9
 80036cc:	eb45 0303 	adc.w	r3, r5, r3
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036de:	4629      	mov	r1, r5
 80036e0:	028b      	lsls	r3, r1, #10
 80036e2:	4621      	mov	r1, r4
 80036e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036e8:	4621      	mov	r1, r4
 80036ea:	028a      	lsls	r2, r1, #10
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f2:	2200      	movs	r2, #0
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	61fa      	str	r2, [r7, #28]
 80036f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fc:	f7fd fb8c 	bl	8000e18 <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4613      	mov	r3, r2
 8003706:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003708:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	3301      	adds	r3, #1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003718:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800371a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003722:	e002      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_RCC_GetSysClockFreq+0x204>)
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800372a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800372c:	4618      	mov	r0, r3
 800372e:	3750      	adds	r7, #80	@ 0x50
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	00f42400 	.word	0x00f42400
 8003740:	007a1200 	.word	0x007a1200

08003744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003748:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <HAL_RCC_GetHCLKFreq+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000

0800375c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003760:	f7ff fff0 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b05      	ldr	r3, [pc, #20]	@ (800377c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0a9b      	lsrs	r3, r3, #10
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4903      	ldr	r1, [pc, #12]	@ (8003780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40023800 	.word	0x40023800
 8003780:	0801a8f8 	.word	0x0801a8f8

08003784 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003794:	f7fd fcfa 	bl	800118c <HAL_GetTick>
 8003798:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800379a:	88fb      	ldrh	r3, [r7, #6]
 800379c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d001      	beq.n	80037ae <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80037aa:	2302      	movs	r3, #2
 80037ac:	e12a      	b.n	8003a04 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_SPI_Transmit+0x36>
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e122      	b.n	8003a04 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_SPI_Transmit+0x48>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e11b      	b.n	8003a04 <HAL_SPI_Transmit+0x280>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2203      	movs	r2, #3
 80037d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	88fa      	ldrh	r2, [r7, #6]
 80037f2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800381a:	d10f      	bne.n	800383c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800382a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800383a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003846:	2b40      	cmp	r3, #64	@ 0x40
 8003848:	d007      	beq.n	800385a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003862:	d152      	bne.n	800390a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_SPI_Transmit+0xee>
 800386c:	8b7b      	ldrh	r3, [r7, #26]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d145      	bne.n	80038fe <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003876:	881a      	ldrh	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	1c9a      	adds	r2, r3, #2
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003896:	e032      	b.n	80038fe <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d112      	bne.n	80038cc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	881a      	ldrh	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	1c9a      	adds	r2, r3, #2
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038ca:	e018      	b.n	80038fe <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038cc:	f7fd fc5e 	bl	800118c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d803      	bhi.n	80038e4 <HAL_SPI_Transmit+0x160>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e2:	d102      	bne.n	80038ea <HAL_SPI_Transmit+0x166>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e082      	b.n	8003a04 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1c7      	bne.n	8003898 <HAL_SPI_Transmit+0x114>
 8003908:	e053      	b.n	80039b2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_SPI_Transmit+0x194>
 8003912:	8b7b      	ldrh	r3, [r7, #26]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d147      	bne.n	80039a8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	7812      	ldrb	r2, [r2, #0]
 8003924:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800393e:	e033      	b.n	80039a8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d113      	bne.n	8003976 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	330c      	adds	r3, #12
 8003958:	7812      	ldrb	r2, [r2, #0]
 800395a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003974:	e018      	b.n	80039a8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003976:	f7fd fc09 	bl	800118c <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d803      	bhi.n	800398e <HAL_SPI_Transmit+0x20a>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d102      	bne.n	8003994 <HAL_SPI_Transmit+0x210>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e02d      	b.n	8003a04 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1c6      	bne.n	8003940 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	6839      	ldr	r1, [r7, #0]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fcea 	bl	8004390 <SPI_EndRxTxTransaction>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003a02:	2300      	movs	r3, #0
  }
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d001      	beq.n	8003a2c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e104      	b.n	8003c36 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a34:	d112      	bne.n	8003a5c <HAL_SPI_Receive+0x50>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10e      	bne.n	8003a5c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2204      	movs	r2, #4
 8003a42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f8f3 	bl	8003c3e <HAL_SPI_TransmitReceive>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	e0ec      	b.n	8003c36 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a5c:	f7fd fb96 	bl	800118c <HAL_GetTick>
 8003a60:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_SPI_Receive+0x62>
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0e1      	b.n	8003c36 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_SPI_Receive+0x74>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e0da      	b.n	8003c36 <HAL_SPI_Receive+0x22a>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	88fa      	ldrh	r2, [r7, #6]
 8003aa0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	88fa      	ldrh	r2, [r7, #6]
 8003aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ace:	d10f      	bne.n	8003af0 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ade:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afa:	2b40      	cmp	r3, #64	@ 0x40
 8003afc:	d007      	beq.n	8003b0e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b0c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d170      	bne.n	8003bf8 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b16:	e035      	b.n	8003b84 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d115      	bne.n	8003b52 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f103 020c 	add.w	r2, r3, #12
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b32:	7812      	ldrb	r2, [r2, #0]
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b50:	e018      	b.n	8003b84 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b52:	f7fd fb1b 	bl	800118c <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d803      	bhi.n	8003b6a <HAL_SPI_Receive+0x15e>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d102      	bne.n	8003b70 <HAL_SPI_Receive+0x164>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e058      	b.n	8003c36 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1c4      	bne.n	8003b18 <HAL_SPI_Receive+0x10c>
 8003b8e:	e038      	b.n	8003c02 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d113      	bne.n	8003bc6 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb0:	1c9a      	adds	r2, r3, #2
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bc4:	e018      	b.n	8003bf8 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bc6:	f7fd fae1 	bl	800118c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d803      	bhi.n	8003bde <HAL_SPI_Receive+0x1d2>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d102      	bne.n	8003be4 <HAL_SPI_Receive+0x1d8>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e01e      	b.n	8003c36 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1c6      	bne.n	8003b90 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	6839      	ldr	r1, [r7, #0]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fb5c 	bl	80042c4 <SPI_EndRxTransaction>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003c34:	2300      	movs	r3, #0
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b08a      	sub	sp, #40	@ 0x28
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c50:	f7fd fa9c 	bl	800118c <HAL_GetTick>
 8003c54:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c5c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003c64:	887b      	ldrh	r3, [r7, #2]
 8003c66:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c68:	7ffb      	ldrb	r3, [r7, #31]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d00c      	beq.n	8003c88 <HAL_SPI_TransmitReceive+0x4a>
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c74:	d106      	bne.n	8003c84 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <HAL_SPI_TransmitReceive+0x46>
 8003c7e:	7ffb      	ldrb	r3, [r7, #31]
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d001      	beq.n	8003c88 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
 8003c86:	e17f      	b.n	8003f88 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_SPI_TransmitReceive+0x5c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <HAL_SPI_TransmitReceive+0x5c>
 8003c94:	887b      	ldrh	r3, [r7, #2]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e174      	b.n	8003f88 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x6e>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e16d      	b.n	8003f88 <HAL_SPI_TransmitReceive+0x34a>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d003      	beq.n	8003cc8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2205      	movs	r2, #5
 8003cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	887a      	ldrh	r2, [r7, #2]
 8003cd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	887a      	ldrh	r2, [r7, #2]
 8003cde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	887a      	ldrh	r2, [r7, #2]
 8003cea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	887a      	ldrh	r2, [r7, #2]
 8003cf0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d08:	2b40      	cmp	r3, #64	@ 0x40
 8003d0a:	d007      	beq.n	8003d1c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d24:	d17e      	bne.n	8003e24 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_SPI_TransmitReceive+0xf6>
 8003d2e:	8afb      	ldrh	r3, [r7, #22]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d16c      	bne.n	8003e0e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	881a      	ldrh	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	1c9a      	adds	r2, r3, #2
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d58:	e059      	b.n	8003e0e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d11b      	bne.n	8003da0 <HAL_SPI_TransmitReceive+0x162>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d016      	beq.n	8003da0 <HAL_SPI_TransmitReceive+0x162>
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d113      	bne.n	8003da0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7c:	881a      	ldrh	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	1c9a      	adds	r2, r3, #2
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d119      	bne.n	8003de2 <HAL_SPI_TransmitReceive+0x1a4>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d014      	beq.n	8003de2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dde:	2301      	movs	r3, #1
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003de2:	f7fd f9d3 	bl	800118c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d80d      	bhi.n	8003e0e <HAL_SPI_TransmitReceive+0x1d0>
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d009      	beq.n	8003e0e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0bc      	b.n	8003f88 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1a0      	bne.n	8003d5a <HAL_SPI_TransmitReceive+0x11c>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d19b      	bne.n	8003d5a <HAL_SPI_TransmitReceive+0x11c>
 8003e22:	e082      	b.n	8003f2a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SPI_TransmitReceive+0x1f4>
 8003e2c:	8afb      	ldrh	r3, [r7, #22]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d171      	bne.n	8003f16 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	330c      	adds	r3, #12
 8003e3c:	7812      	ldrb	r2, [r2, #0]
 8003e3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e58:	e05d      	b.n	8003f16 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d11c      	bne.n	8003ea2 <HAL_SPI_TransmitReceive+0x264>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d017      	beq.n	8003ea2 <HAL_SPI_TransmitReceive+0x264>
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d114      	bne.n	8003ea2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	7812      	ldrb	r2, [r2, #0]
 8003e84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d119      	bne.n	8003ee4 <HAL_SPI_TransmitReceive+0x2a6>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d014      	beq.n	8003ee4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ee4:	f7fd f952 	bl	800118c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d803      	bhi.n	8003efc <HAL_SPI_TransmitReceive+0x2be>
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efa:	d102      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x2c4>
 8003efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e038      	b.n	8003f88 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d19c      	bne.n	8003e5a <HAL_SPI_TransmitReceive+0x21c>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d197      	bne.n	8003e5a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f2a:	6a3a      	ldr	r2, [r7, #32]
 8003f2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fa2e 	bl	8004390 <SPI_EndRxTxTransaction>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d008      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e01d      	b.n	8003f88 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003f86:	2300      	movs	r3, #0
  }
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3728      	adds	r7, #40	@ 0x28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10e      	bne.n	8003fd0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	4798      	blx	r3
    return;
 8003fce:	e0ce      	b.n	800416e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <HAL_SPI_IRQHandler+0x5e>
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
    return;
 8003fec:	e0bf      	b.n	800416e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10a      	bne.n	800400e <HAL_SPI_IRQHandler+0x7e>
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d105      	bne.n	800400e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80b0 	beq.w	800416e <HAL_SPI_IRQHandler+0x1de>
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80aa 	beq.w	800416e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d023      	beq.n	800406c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b03      	cmp	r3, #3
 800402e:	d011      	beq.n	8004054 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004034:	f043 0204 	orr.w	r2, r3, #4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	e00b      	b.n	800406c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004054:	2300      	movs	r3, #0
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	693b      	ldr	r3, [r7, #16]
        return;
 800406a:	e080      	b.n	800416e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d014      	beq.n	80040a0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407a:	f043 0201 	orr.w	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00c      	beq.n	80040c4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ae:	f043 0208 	orr.w	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d04f      	beq.n	800416c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040da:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d104      	bne.n	80040f8 <HAL_SPI_IRQHandler+0x168>
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d034      	beq.n	8004162 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0203 	bic.w	r2, r2, #3
 8004106:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d011      	beq.n	8004134 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004114:	4a17      	ldr	r2, [pc, #92]	@ (8004174 <HAL_SPI_IRQHandler+0x1e4>)
 8004116:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411c:	4618      	mov	r0, r3
 800411e:	f7fd fa29 	bl	8001574 <HAL_DMA_Abort_IT>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004138:	2b00      	cmp	r3, #0
 800413a:	d016      	beq.n	800416a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004140:	4a0c      	ldr	r2, [pc, #48]	@ (8004174 <HAL_SPI_IRQHandler+0x1e4>)
 8004142:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004148:	4618      	mov	r0, r3
 800414a:	f7fd fa13 	bl	8001574 <HAL_DMA_Abort_IT>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004158:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004160:	e003      	b.n	800416a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f808 	bl	8004178 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004168:	e000      	b.n	800416c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800416a:	bf00      	nop
    return;
 800416c:	bf00      	nop
  }
}
 800416e:	3720      	adds	r7, #32
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	0800418d 	.word	0x0800418d

08004178 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004198:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff ffe6 	bl	8004178 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041c4:	f7fc ffe2 	bl	800118c <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	4413      	add	r3, r2
 80041d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041d4:	f7fc ffda 	bl	800118c <HAL_GetTick>
 80041d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041da:	4b39      	ldr	r3, [pc, #228]	@ (80042c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	015b      	lsls	r3, r3, #5
 80041e0:	0d1b      	lsrs	r3, r3, #20
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	fb02 f303 	mul.w	r3, r2, r3
 80041e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ea:	e054      	b.n	8004296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d050      	beq.n	8004296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041f4:	f7fc ffca 	bl	800118c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	429a      	cmp	r2, r3
 8004202:	d902      	bls.n	800420a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d13d      	bne.n	8004286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004222:	d111      	bne.n	8004248 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800422c:	d004      	beq.n	8004238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004236:	d107      	bne.n	8004248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004250:	d10f      	bne.n	8004272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e017      	b.n	80042b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	3b01      	subs	r3, #1
 8004294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4013      	ands	r3, r2
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	bf0c      	ite	eq
 80042a6:	2301      	moveq	r3, #1
 80042a8:	2300      	movne	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d19b      	bne.n	80041ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3720      	adds	r7, #32
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000000 	.word	0x20000000

080042c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042d8:	d111      	bne.n	80042fe <SPI_EndRxTransaction+0x3a>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042e2:	d004      	beq.n	80042ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ec:	d107      	bne.n	80042fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004306:	d12a      	bne.n	800435e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004310:	d012      	beq.n	8004338 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2200      	movs	r2, #0
 800431a:	2180      	movs	r1, #128	@ 0x80
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7ff ff49 	bl	80041b4 <SPI_WaitFlagStateUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d02d      	beq.n	8004384 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432c:	f043 0220 	orr.w	r2, r3, #32
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e026      	b.n	8004386 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2200      	movs	r2, #0
 8004340:	2101      	movs	r1, #1
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f7ff ff36 	bl	80041b4 <SPI_WaitFlagStateUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01a      	beq.n	8004384 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e013      	b.n	8004386 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2200      	movs	r2, #0
 8004366:	2101      	movs	r1, #1
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f7ff ff23 	bl	80041b4 <SPI_WaitFlagStateUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d007      	beq.n	8004384 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e000      	b.n	8004386 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2201      	movs	r2, #1
 80043a4:	2102      	movs	r1, #2
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff ff04 	bl	80041b4 <SPI_WaitFlagStateUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e032      	b.n	8004428 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004430 <SPI_EndRxTxTransaction+0xa0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004434 <SPI_EndRxTxTransaction+0xa4>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	0d5b      	lsrs	r3, r3, #21
 80043ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043e0:	d112      	bne.n	8004408 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2200      	movs	r2, #0
 80043ea:	2180      	movs	r1, #128	@ 0x80
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7ff fee1 	bl	80041b4 <SPI_WaitFlagStateUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d016      	beq.n	8004426 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fc:	f043 0220 	orr.w	r2, r3, #32
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e00f      	b.n	8004428 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	3b01      	subs	r3, #1
 8004412:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441e:	2b80      	cmp	r3, #128	@ 0x80
 8004420:	d0f2      	beq.n	8004408 <SPI_EndRxTxTransaction+0x78>
 8004422:	e000      	b.n	8004426 <SPI_EndRxTxTransaction+0x96>
        break;
 8004424:	bf00      	nop
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20000000 	.word	0x20000000
 8004434:	165e9f81 	.word	0x165e9f81

08004438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e041      	b.n	80044ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f005 fe6c 	bl	800a13c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f000 fc58 	bl	8004d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d001      	beq.n	80044f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e04e      	b.n	800458e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a23      	ldr	r2, [pc, #140]	@ (800459c <HAL_TIM_Base_Start_IT+0xc4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d022      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451a:	d01d      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1f      	ldr	r2, [pc, #124]	@ (80045a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d018      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1e      	ldr	r2, [pc, #120]	@ (80045a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1c      	ldr	r2, [pc, #112]	@ (80045a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00e      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1b      	ldr	r2, [pc, #108]	@ (80045ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d009      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a19      	ldr	r2, [pc, #100]	@ (80045b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a18      	ldr	r2, [pc, #96]	@ (80045b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d111      	bne.n	800457c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b06      	cmp	r3, #6
 8004568:	d010      	beq.n	800458c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457a:	e007      	b.n	800458c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40010000 	.word	0x40010000
 80045a0:	40000400 	.word	0x40000400
 80045a4:	40000800 	.word	0x40000800
 80045a8:	40000c00 	.word	0x40000c00
 80045ac:	40010400 	.word	0x40010400
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40001800 	.word	0x40001800

080045b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e041      	b.n	800464e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f005 fbc8 	bl	8009d74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f000 fb98 	bl	8004d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d109      	bne.n	800467c <HAL_TIM_PWM_Start+0x24>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	bf14      	ite	ne
 8004674:	2301      	movne	r3, #1
 8004676:	2300      	moveq	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	e022      	b.n	80046c2 <HAL_TIM_PWM_Start+0x6a>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b04      	cmp	r3, #4
 8004680:	d109      	bne.n	8004696 <HAL_TIM_PWM_Start+0x3e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b01      	cmp	r3, #1
 800468c:	bf14      	ite	ne
 800468e:	2301      	movne	r3, #1
 8004690:	2300      	moveq	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	e015      	b.n	80046c2 <HAL_TIM_PWM_Start+0x6a>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b08      	cmp	r3, #8
 800469a:	d109      	bne.n	80046b0 <HAL_TIM_PWM_Start+0x58>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	bf14      	ite	ne
 80046a8:	2301      	movne	r3, #1
 80046aa:	2300      	moveq	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	e008      	b.n	80046c2 <HAL_TIM_PWM_Start+0x6a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e07c      	b.n	80047c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d104      	bne.n	80046da <HAL_TIM_PWM_Start+0x82>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d8:	e013      	b.n	8004702 <HAL_TIM_PWM_Start+0xaa>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d104      	bne.n	80046ea <HAL_TIM_PWM_Start+0x92>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e8:	e00b      	b.n	8004702 <HAL_TIM_PWM_Start+0xaa>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_PWM_Start+0xa2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f8:	e003      	b.n	8004702 <HAL_TIM_PWM_Start+0xaa>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2201      	movs	r2, #1
 8004708:	6839      	ldr	r1, [r7, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fe04 	bl	8005318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a2d      	ldr	r2, [pc, #180]	@ (80047cc <HAL_TIM_PWM_Start+0x174>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_TIM_PWM_Start+0xcc>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a2c      	ldr	r2, [pc, #176]	@ (80047d0 <HAL_TIM_PWM_Start+0x178>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_TIM_PWM_Start+0xd0>
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <HAL_TIM_PWM_Start+0xd2>
 8004728:	2300      	movs	r3, #0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800473c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a22      	ldr	r2, [pc, #136]	@ (80047cc <HAL_TIM_PWM_Start+0x174>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d022      	beq.n	800478e <HAL_TIM_PWM_Start+0x136>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004750:	d01d      	beq.n	800478e <HAL_TIM_PWM_Start+0x136>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1f      	ldr	r2, [pc, #124]	@ (80047d4 <HAL_TIM_PWM_Start+0x17c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d018      	beq.n	800478e <HAL_TIM_PWM_Start+0x136>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1d      	ldr	r2, [pc, #116]	@ (80047d8 <HAL_TIM_PWM_Start+0x180>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <HAL_TIM_PWM_Start+0x136>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1c      	ldr	r2, [pc, #112]	@ (80047dc <HAL_TIM_PWM_Start+0x184>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <HAL_TIM_PWM_Start+0x136>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a16      	ldr	r2, [pc, #88]	@ (80047d0 <HAL_TIM_PWM_Start+0x178>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <HAL_TIM_PWM_Start+0x136>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a18      	ldr	r2, [pc, #96]	@ (80047e0 <HAL_TIM_PWM_Start+0x188>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_TIM_PWM_Start+0x136>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a16      	ldr	r2, [pc, #88]	@ (80047e4 <HAL_TIM_PWM_Start+0x18c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d111      	bne.n	80047b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b06      	cmp	r3, #6
 800479e:	d010      	beq.n	80047c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b0:	e007      	b.n	80047c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0201 	orr.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40010000 	.word	0x40010000
 80047d0:	40010400 	.word	0x40010400
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	40000c00 	.word	0x40000c00
 80047e0:	40014000 	.word	0x40014000
 80047e4:	40001800 	.word	0x40001800

080047e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d020      	beq.n	800484c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01b      	beq.n	800484c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0202 	mvn.w	r2, #2
 800481c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa5b 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
 8004838:	e005      	b.n	8004846 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fa4d 	bl	8004cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fa5e 	bl	8004d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d020      	beq.n	8004898 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01b      	beq.n	8004898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0204 	mvn.w	r2, #4
 8004868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa35 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
 8004884:	e005      	b.n	8004892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fa27 	bl	8004cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fa38 	bl	8004d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d020      	beq.n	80048e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01b      	beq.n	80048e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0208 	mvn.w	r2, #8
 80048b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2204      	movs	r2, #4
 80048ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fa0f 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
 80048d0:	e005      	b.n	80048de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa01 	bl	8004cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fa12 	bl	8004d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d020      	beq.n	8004930 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01b      	beq.n	8004930 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0210 	mvn.w	r2, #16
 8004900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2208      	movs	r2, #8
 8004906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f9e9 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f9db 	bl	8004cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f9ec 	bl	8004d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00c      	beq.n	8004954 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0201 	mvn.w	r2, #1
 800494c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f003 fe36 	bl	80085c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00c      	beq.n	8004978 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fd7c 	bl	8005470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00c      	beq.n	800499c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9bd 	bl	8004d16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00c      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0220 	mvn.w	r2, #32
 80049b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fd4e 	bl	800545c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e0ae      	b.n	8004b44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b0c      	cmp	r3, #12
 80049f2:	f200 809f 	bhi.w	8004b34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049f6:	a201      	add	r2, pc, #4	@ (adr r2, 80049fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a31 	.word	0x08004a31
 8004a00:	08004b35 	.word	0x08004b35
 8004a04:	08004b35 	.word	0x08004b35
 8004a08:	08004b35 	.word	0x08004b35
 8004a0c:	08004a71 	.word	0x08004a71
 8004a10:	08004b35 	.word	0x08004b35
 8004a14:	08004b35 	.word	0x08004b35
 8004a18:	08004b35 	.word	0x08004b35
 8004a1c:	08004ab3 	.word	0x08004ab3
 8004a20:	08004b35 	.word	0x08004b35
 8004a24:	08004b35 	.word	0x08004b35
 8004a28:	08004b35 	.word	0x08004b35
 8004a2c:	08004af3 	.word	0x08004af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fa24 	bl	8004e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0208 	orr.w	r2, r2, #8
 8004a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0204 	bic.w	r2, r2, #4
 8004a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6999      	ldr	r1, [r3, #24]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	619a      	str	r2, [r3, #24]
      break;
 8004a6e:	e064      	b.n	8004b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fa74 	bl	8004f64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6999      	ldr	r1, [r3, #24]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	021a      	lsls	r2, r3, #8
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	619a      	str	r2, [r3, #24]
      break;
 8004ab0:	e043      	b.n	8004b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fac9 	bl	8005050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0208 	orr.w	r2, r2, #8
 8004acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0204 	bic.w	r2, r2, #4
 8004adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69d9      	ldr	r1, [r3, #28]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	61da      	str	r2, [r3, #28]
      break;
 8004af0:	e023      	b.n	8004b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fb1d 	bl	8005138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69d9      	ldr	r1, [r3, #28]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	021a      	lsls	r2, r3, #8
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	61da      	str	r2, [r3, #28]
      break;
 8004b32:	e002      	b.n	8004b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	75fb      	strb	r3, [r7, #23]
      break;
 8004b38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_TIM_ConfigClockSource+0x1c>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e0b4      	b.n	8004cd2 <HAL_TIM_ConfigClockSource+0x186>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ba0:	d03e      	beq.n	8004c20 <HAL_TIM_ConfigClockSource+0xd4>
 8004ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ba6:	f200 8087 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bae:	f000 8086 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0x172>
 8004bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb6:	d87f      	bhi.n	8004cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b70      	cmp	r3, #112	@ 0x70
 8004bba:	d01a      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0xa6>
 8004bbc:	2b70      	cmp	r3, #112	@ 0x70
 8004bbe:	d87b      	bhi.n	8004cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b60      	cmp	r3, #96	@ 0x60
 8004bc2:	d050      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x11a>
 8004bc4:	2b60      	cmp	r3, #96	@ 0x60
 8004bc6:	d877      	bhi.n	8004cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b50      	cmp	r3, #80	@ 0x50
 8004bca:	d03c      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0xfa>
 8004bcc:	2b50      	cmp	r3, #80	@ 0x50
 8004bce:	d873      	bhi.n	8004cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b40      	cmp	r3, #64	@ 0x40
 8004bd2:	d058      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x13a>
 8004bd4:	2b40      	cmp	r3, #64	@ 0x40
 8004bd6:	d86f      	bhi.n	8004cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b30      	cmp	r3, #48	@ 0x30
 8004bda:	d064      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bdc:	2b30      	cmp	r3, #48	@ 0x30
 8004bde:	d86b      	bhi.n	8004cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b20      	cmp	r3, #32
 8004be2:	d060      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d867      	bhi.n	8004cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d05c      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bec:	2b10      	cmp	r3, #16
 8004bee:	d05a      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bf0:	e062      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c02:	f000 fb69 	bl	80052d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	609a      	str	r2, [r3, #8]
      break;
 8004c1e:	e04f      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c30:	f000 fb52 	bl	80052d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c42:	609a      	str	r2, [r3, #8]
      break;
 8004c44:	e03c      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c52:	461a      	mov	r2, r3
 8004c54:	f000 fac6 	bl	80051e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2150      	movs	r1, #80	@ 0x50
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fb1f 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 8004c64:	e02c      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c72:	461a      	mov	r2, r3
 8004c74:	f000 fae5 	bl	8005242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2160      	movs	r1, #96	@ 0x60
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fb0f 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 8004c84:	e01c      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c92:	461a      	mov	r2, r3
 8004c94:	f000 faa6 	bl	80051e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2140      	movs	r1, #64	@ 0x40
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 faff 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 8004ca4:	e00c      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f000 faf6 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 8004cb6:	e003      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
      break;
 8004cbc:	e000      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a46      	ldr	r2, [pc, #280]	@ (8004e58 <TIM_Base_SetConfig+0x12c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d013      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4a:	d00f      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a43      	ldr	r2, [pc, #268]	@ (8004e5c <TIM_Base_SetConfig+0x130>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a42      	ldr	r2, [pc, #264]	@ (8004e60 <TIM_Base_SetConfig+0x134>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d007      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a41      	ldr	r2, [pc, #260]	@ (8004e64 <TIM_Base_SetConfig+0x138>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a40      	ldr	r2, [pc, #256]	@ (8004e68 <TIM_Base_SetConfig+0x13c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d108      	bne.n	8004d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a35      	ldr	r2, [pc, #212]	@ (8004e58 <TIM_Base_SetConfig+0x12c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d02b      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d8c:	d027      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a32      	ldr	r2, [pc, #200]	@ (8004e5c <TIM_Base_SetConfig+0x130>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d023      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a31      	ldr	r2, [pc, #196]	@ (8004e60 <TIM_Base_SetConfig+0x134>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01f      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a30      	ldr	r2, [pc, #192]	@ (8004e64 <TIM_Base_SetConfig+0x138>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01b      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a2f      	ldr	r2, [pc, #188]	@ (8004e68 <TIM_Base_SetConfig+0x13c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d017      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e6c <TIM_Base_SetConfig+0x140>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a2d      	ldr	r2, [pc, #180]	@ (8004e70 <TIM_Base_SetConfig+0x144>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00f      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8004e74 <TIM_Base_SetConfig+0x148>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e78 <TIM_Base_SetConfig+0x14c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e7c <TIM_Base_SetConfig+0x150>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a29      	ldr	r2, [pc, #164]	@ (8004e80 <TIM_Base_SetConfig+0x154>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d108      	bne.n	8004df0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a10      	ldr	r2, [pc, #64]	@ (8004e58 <TIM_Base_SetConfig+0x12c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_Base_SetConfig+0xf8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a12      	ldr	r2, [pc, #72]	@ (8004e68 <TIM_Base_SetConfig+0x13c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d103      	bne.n	8004e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d105      	bne.n	8004e4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f023 0201 	bic.w	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	611a      	str	r2, [r3, #16]
  }
}
 8004e4a:	bf00      	nop
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800
 8004e64:	40000c00 	.word	0x40000c00
 8004e68:	40010400 	.word	0x40010400
 8004e6c:	40014000 	.word	0x40014000
 8004e70:	40014400 	.word	0x40014400
 8004e74:	40014800 	.word	0x40014800
 8004e78:	40001800 	.word	0x40001800
 8004e7c:	40001c00 	.word	0x40001c00
 8004e80:	40002000 	.word	0x40002000

08004e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f023 0201 	bic.w	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0303 	bic.w	r3, r3, #3
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f023 0302 	bic.w	r3, r3, #2
 8004ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a20      	ldr	r2, [pc, #128]	@ (8004f5c <TIM_OC1_SetConfig+0xd8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_OC1_SetConfig+0x64>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f60 <TIM_OC1_SetConfig+0xdc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10c      	bne.n	8004f02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f023 0308 	bic.w	r3, r3, #8
 8004eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f023 0304 	bic.w	r3, r3, #4
 8004f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a15      	ldr	r2, [pc, #84]	@ (8004f5c <TIM_OC1_SetConfig+0xd8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d003      	beq.n	8004f12 <TIM_OC1_SetConfig+0x8e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a14      	ldr	r2, [pc, #80]	@ (8004f60 <TIM_OC1_SetConfig+0xdc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d111      	bne.n	8004f36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	621a      	str	r2, [r3, #32]
}
 8004f50:	bf00      	nop
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	40010400 	.word	0x40010400

08004f64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f023 0210 	bic.w	r2, r3, #16
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f023 0320 	bic.w	r3, r3, #32
 8004fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a22      	ldr	r2, [pc, #136]	@ (8005048 <TIM_OC2_SetConfig+0xe4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_OC2_SetConfig+0x68>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a21      	ldr	r2, [pc, #132]	@ (800504c <TIM_OC2_SetConfig+0xe8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d10d      	bne.n	8004fe8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fe6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a17      	ldr	r2, [pc, #92]	@ (8005048 <TIM_OC2_SetConfig+0xe4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_OC2_SetConfig+0x94>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a16      	ldr	r2, [pc, #88]	@ (800504c <TIM_OC2_SetConfig+0xe8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d113      	bne.n	8005020 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40010000 	.word	0x40010000
 800504c:	40010400 	.word	0x40010400

08005050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0303 	bic.w	r3, r3, #3
 8005086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a21      	ldr	r2, [pc, #132]	@ (8005130 <TIM_OC3_SetConfig+0xe0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_OC3_SetConfig+0x66>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a20      	ldr	r2, [pc, #128]	@ (8005134 <TIM_OC3_SetConfig+0xe4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d10d      	bne.n	80050d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a16      	ldr	r2, [pc, #88]	@ (8005130 <TIM_OC3_SetConfig+0xe0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d003      	beq.n	80050e2 <TIM_OC3_SetConfig+0x92>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a15      	ldr	r2, [pc, #84]	@ (8005134 <TIM_OC3_SetConfig+0xe4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d113      	bne.n	800510a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	621a      	str	r2, [r3, #32]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40010000 	.word	0x40010000
 8005134:	40010400 	.word	0x40010400

08005138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800516e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	031b      	lsls	r3, r3, #12
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a12      	ldr	r2, [pc, #72]	@ (80051dc <TIM_OC4_SetConfig+0xa4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_OC4_SetConfig+0x68>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a11      	ldr	r2, [pc, #68]	@ (80051e0 <TIM_OC4_SetConfig+0xa8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d109      	bne.n	80051b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	019b      	lsls	r3, r3, #6
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40010000 	.word	0x40010000
 80051e0:	40010400 	.word	0x40010400

080051e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0201 	bic.w	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800520e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f023 030a 	bic.w	r3, r3, #10
 8005220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005242:	b480      	push	{r7}
 8005244:	b087      	sub	sp, #28
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f023 0210 	bic.w	r2, r3, #16
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800526c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	031b      	lsls	r3, r3, #12
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800527e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	f043 0307 	orr.w	r3, r3, #7
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	609a      	str	r2, [r3, #8]
}
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	021a      	lsls	r2, r3, #8
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4313      	orrs	r3, r2
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	609a      	str	r2, [r3, #8]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	2201      	movs	r2, #1
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	43db      	mvns	r3, r3
 800533a:	401a      	ands	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	431a      	orrs	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005378:	2302      	movs	r3, #2
 800537a:	e05a      	b.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a21      	ldr	r2, [pc, #132]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d022      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c8:	d01d      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d018      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1a      	ldr	r2, [pc, #104]	@ (800544c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00e      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a18      	ldr	r2, [pc, #96]	@ (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d009      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a17      	ldr	r2, [pc, #92]	@ (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a15      	ldr	r2, [pc, #84]	@ (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d10c      	bne.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800540c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	4313      	orrs	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40010000 	.word	0x40010000
 8005444:	40000400 	.word	0x40000400
 8005448:	40000800 	.word	0x40000800
 800544c:	40000c00 	.word	0x40000c00
 8005450:	40010400 	.word	0x40010400
 8005454:	40014000 	.word	0x40014000
 8005458:	40001800 	.word	0x40001800

0800545c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f103 0208 	add.w	r2, r3, #8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f04f 32ff 	mov.w	r2, #4294967295
 800549c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f103 0208 	add.w	r2, r3, #8
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f103 0208 	add.w	r2, r3, #8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	601a      	str	r2, [r3, #0]
}
 800551a:	bf00      	nop
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d103      	bne.n	8005546 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e00c      	b.n	8005560 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3308      	adds	r3, #8
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	e002      	b.n	8005554 <vListInsert+0x2e>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	429a      	cmp	r2, r3
 800555e:	d2f6      	bcs.n	800554e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	601a      	str	r2, [r3, #0]
}
 800558c:	bf00      	nop
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6892      	ldr	r2, [r2, #8]
 80055ae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6852      	ldr	r2, [r2, #4]
 80055b8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d103      	bne.n	80055cc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	1e5a      	subs	r2, r3, #1
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <xQueueGenericReset+0x20>
 8005600:	f240 120d 	movw	r2, #269	@ 0x10d
 8005604:	492a      	ldr	r1, [pc, #168]	@ (80056b0 <xQueueGenericReset+0xc4>)
 8005606:	482b      	ldr	r0, [pc, #172]	@ (80056b4 <xQueueGenericReset+0xc8>)
 8005608:	f00c ff2e 	bl	8012468 <assertFail>

    taskENTER_CRITICAL();
 800560c:	f002 fc66 	bl	8007edc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005618:	68f9      	ldr	r1, [r7, #12]
 800561a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	441a      	add	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563c:	3b01      	subs	r3, #1
 800563e:	68f9      	ldr	r1, [r7, #12]
 8005640:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005642:	fb01 f303 	mul.w	r3, r1, r3
 8005646:	441a      	add	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	22ff      	movs	r2, #255	@ 0xff
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	22ff      	movs	r2, #255	@ 0xff
 8005658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d114      	bne.n	800568c <xQueueGenericReset+0xa0>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01a      	beq.n	80056a0 <xQueueGenericReset+0xb4>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3310      	adds	r3, #16
 800566e:	4618      	mov	r0, r3
 8005670:	f001 fc1c 	bl	8006eac <xTaskRemoveFromEventList>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d012      	beq.n	80056a0 <xQueueGenericReset+0xb4>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800567a:	4b0f      	ldr	r3, [pc, #60]	@ (80056b8 <xQueueGenericReset+0xcc>)
 800567c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	e009      	b.n	80056a0 <xQueueGenericReset+0xb4>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3310      	adds	r3, #16
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff fef7 	bl	8005484 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3324      	adds	r3, #36	@ 0x24
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fef2 	bl	8005484 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80056a0:	f002 fc4a 	bl	8007f38 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80056a4:	2301      	movs	r3, #1
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	08019a80 	.word	0x08019a80
 80056b4:	08019a94 	.word	0x08019a94
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d105      	bne.n	80056dc <xQueueGenericCreateStatic+0x20>
 80056d0:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80056d4:	4929      	ldr	r1, [pc, #164]	@ (800577c <xQueueGenericCreateStatic+0xc0>)
 80056d6:	482a      	ldr	r0, [pc, #168]	@ (8005780 <xQueueGenericCreateStatic+0xc4>)
 80056d8:	f00c fec6 	bl	8012468 <assertFail>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d105      	bne.n	80056ee <xQueueGenericCreateStatic+0x32>
 80056e2:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 80056e6:	4925      	ldr	r1, [pc, #148]	@ (800577c <xQueueGenericCreateStatic+0xc0>)
 80056e8:	4826      	ldr	r0, [pc, #152]	@ (8005784 <xQueueGenericCreateStatic+0xc8>)
 80056ea:	f00c febd 	bl	8012468 <assertFail>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <xQueueGenericCreateStatic+0x3e>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <xQueueGenericCreateStatic+0x42>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <xQueueGenericCreateStatic+0x44>
 80056fe:	2300      	movs	r3, #0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d105      	bne.n	8005710 <xQueueGenericCreateStatic+0x54>
 8005704:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8005708:	491c      	ldr	r1, [pc, #112]	@ (800577c <xQueueGenericCreateStatic+0xc0>)
 800570a:	481f      	ldr	r0, [pc, #124]	@ (8005788 <xQueueGenericCreateStatic+0xcc>)
 800570c:	f00c feac 	bl	8012468 <assertFail>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <xQueueGenericCreateStatic+0x60>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <xQueueGenericCreateStatic+0x64>
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <xQueueGenericCreateStatic+0x66>
 8005720:	2300      	movs	r3, #0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d105      	bne.n	8005732 <xQueueGenericCreateStatic+0x76>
 8005726:	f240 1251 	movw	r2, #337	@ 0x151
 800572a:	4914      	ldr	r1, [pc, #80]	@ (800577c <xQueueGenericCreateStatic+0xc0>)
 800572c:	4817      	ldr	r0, [pc, #92]	@ (800578c <xQueueGenericCreateStatic+0xd0>)
 800572e:	f00c fe9b 	bl	8012468 <assertFail>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8005732:	2350      	movs	r3, #80	@ 0x50
 8005734:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( Queue_t ) );
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b50      	cmp	r3, #80	@ 0x50
 800573a:	d005      	beq.n	8005748 <xQueueGenericCreateStatic+0x8c>
 800573c:	f240 1259 	movw	r2, #345	@ 0x159
 8005740:	490e      	ldr	r1, [pc, #56]	@ (800577c <xQueueGenericCreateStatic+0xc0>)
 8005742:	4813      	ldr	r0, [pc, #76]	@ (8005790 <xQueueGenericCreateStatic+0xd4>)
 8005744:	f00c fe90 	bl	8012468 <assertFail>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005748:	693b      	ldr	r3, [r7, #16]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	617b      	str	r3, [r7, #20]

        if( pxNewQueue != NULL )
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00d      	beq.n	8005770 <xQueueGenericCreateStatic+0xb4>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800575c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f862 	bl	8005834 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005770:	697b      	ldr	r3, [r7, #20]
    }
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	08019a80 	.word	0x08019a80
 8005780:	08019a9c 	.word	0x08019a9c
 8005784:	08019ac0 	.word	0x08019ac0
 8005788:	08019ad8 	.word	0x08019ad8
 800578c:	08019b10 	.word	0x08019b10
 8005790:	08019b48 	.word	0x08019b48

08005794 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005794:	b580      	push	{r7, lr}
 8005796:	b08a      	sub	sp, #40	@ 0x28
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	4613      	mov	r3, r2
 80057a0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d105      	bne.n	80057b4 <xQueueGenericCreate+0x20>
 80057a8:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 80057ac:	491e      	ldr	r1, [pc, #120]	@ (8005828 <xQueueGenericCreate+0x94>)
 80057ae:	481f      	ldr	r0, [pc, #124]	@ (800582c <xQueueGenericCreate+0x98>)
 80057b0:	f00c fe5a 	bl	8012468 <assertFail>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	fb02 f303 	mul.w	r3, r2, r3
 80057bc:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d006      	beq.n	80057d2 <xQueueGenericCreate+0x3e>
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d101      	bne.n	80057d6 <xQueueGenericCreate+0x42>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <xQueueGenericCreate+0x44>
 80057d6:	2300      	movs	r3, #0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d105      	bne.n	80057e8 <xQueueGenericCreate+0x54>
 80057dc:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
 80057e0:	4911      	ldr	r1, [pc, #68]	@ (8005828 <xQueueGenericCreate+0x94>)
 80057e2:	4813      	ldr	r0, [pc, #76]	@ (8005830 <xQueueGenericCreate+0x9c>)
 80057e4:	f00c fe40 	bl	8012468 <assertFail>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	3350      	adds	r3, #80	@ 0x50
 80057ec:	4618      	mov	r0, r3
 80057ee:	f002 fc87 	bl	8008100 <pvPortMalloc>
 80057f2:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d011      	beq.n	800581e <xQueueGenericCreate+0x8a>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	3350      	adds	r3, #80	@ 0x50
 8005802:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800580c:	79fa      	ldrb	r2, [r7, #7]
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f80b 	bl	8005834 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800581e:	69bb      	ldr	r3, [r7, #24]
    }
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	08019a80 	.word	0x08019a80
 800582c:	08019a9c 	.word	0x08019a9c
 8005830:	08019b64 	.word	0x08019b64

08005834 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d103      	bne.n	8005850 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e002      	b.n	8005856 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005862:	2101      	movs	r1, #1
 8005864:	69b8      	ldr	r0, [r7, #24]
 8005866:	f7ff fec1 	bl	80055ec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00e      	beq.n	80058a6 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800589a:	2300      	movs	r3, #0
 800589c:	2200      	movs	r2, #0
 800589e:	2100      	movs	r1, #0
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f81f 	bl	80058e4 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b088      	sub	sp, #32
 80058b2:	af02      	add	r7, sp, #8
 80058b4:	4603      	mov	r3, r0
 80058b6:	6039      	str	r1, [r7, #0]
 80058b8:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80058ba:	2301      	movs	r3, #1
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2200      	movs	r2, #0
 80058ca:	6939      	ldr	r1, [r7, #16]
 80058cc:	6978      	ldr	r0, [r7, #20]
 80058ce:	f7ff fef5 	bl	80056bc <xQueueGenericCreateStatic>
 80058d2:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff ffd0 	bl	800587a <prvInitialiseMutex>

        return xNewQueue;
 80058da:	68fb      	ldr	r3, [r7, #12]
    }
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08a      	sub	sp, #40	@ 0x28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058f2:	2300      	movs	r3, #0
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d105      	bne.n	800590c <xQueueGenericSend+0x28>
 8005900:	f240 3209 	movw	r2, #777	@ 0x309
 8005904:	4977      	ldr	r1, [pc, #476]	@ (8005ae4 <xQueueGenericSend+0x200>)
 8005906:	4878      	ldr	r0, [pc, #480]	@ (8005ae8 <xQueueGenericSend+0x204>)
 8005908:	f00c fdae 	bl	8012468 <assertFail>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <xQueueGenericSend+0x36>
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <xQueueGenericSend+0x3a>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <xQueueGenericSend+0x3c>
 800591e:	2300      	movs	r3, #0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <xQueueGenericSend+0x4c>
 8005924:	f240 320a 	movw	r2, #778	@ 0x30a
 8005928:	496e      	ldr	r1, [pc, #440]	@ (8005ae4 <xQueueGenericSend+0x200>)
 800592a:	4870      	ldr	r0, [pc, #448]	@ (8005aec <xQueueGenericSend+0x208>)
 800592c:	f00c fd9c 	bl	8012468 <assertFail>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d103      	bne.n	800593e <xQueueGenericSend+0x5a>
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <xQueueGenericSend+0x5e>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <xQueueGenericSend+0x60>
 8005942:	2300      	movs	r3, #0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d105      	bne.n	8005954 <xQueueGenericSend+0x70>
 8005948:	f240 320b 	movw	r2, #779	@ 0x30b
 800594c:	4965      	ldr	r1, [pc, #404]	@ (8005ae4 <xQueueGenericSend+0x200>)
 800594e:	4868      	ldr	r0, [pc, #416]	@ (8005af0 <xQueueGenericSend+0x20c>)
 8005950:	f00c fd8a 	bl	8012468 <assertFail>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005954:	f001 fc52 	bl	80071fc <xTaskGetSchedulerState>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <xQueueGenericSend+0x80>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <xQueueGenericSend+0x84>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <xQueueGenericSend+0x86>
 8005968:	2300      	movs	r3, #0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d105      	bne.n	800597a <xQueueGenericSend+0x96>
 800596e:	f240 320e 	movw	r2, #782	@ 0x30e
 8005972:	495c      	ldr	r1, [pc, #368]	@ (8005ae4 <xQueueGenericSend+0x200>)
 8005974:	485f      	ldr	r0, [pc, #380]	@ (8005af4 <xQueueGenericSend+0x210>)
 8005976:	f00c fd77 	bl	8012468 <assertFail>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800597a:	f002 faaf 	bl	8007edc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <xQueueGenericSend+0xac>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d12f      	bne.n	80059f0 <xQueueGenericSend+0x10c>
            {
                traceQUEUE_SEND( pxQueue );
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005994:	4a58      	ldr	r2, [pc, #352]	@ (8005af8 <xQueueGenericSend+0x214>)
 8005996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800599a:	6013      	str	r3, [r2, #0]
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	6a38      	ldr	r0, [r7, #32]
 80059a2:	f000 fbdf 	bl	8006164 <prvCopyDataToQueue>
 80059a6:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d010      	beq.n	80059d2 <xQueueGenericSend+0xee>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	3324      	adds	r3, #36	@ 0x24
 80059b4:	4618      	mov	r0, r3
 80059b6:	f001 fa79 	bl	8006eac <xTaskRemoveFromEventList>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d013      	beq.n	80059e8 <xQueueGenericSend+0x104>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80059c0:	4b4e      	ldr	r3, [pc, #312]	@ (8005afc <xQueueGenericSend+0x218>)
 80059c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	e00a      	b.n	80059e8 <xQueueGenericSend+0x104>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d007      	beq.n	80059e8 <xQueueGenericSend+0x104>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80059d8:	4b48      	ldr	r3, [pc, #288]	@ (8005afc <xQueueGenericSend+0x218>)
 80059da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80059e8:	f002 faa6 	bl	8007f38 <vPortExitCritical>
                return pdPASS;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e075      	b.n	8005adc <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <xQueueGenericSend+0x126>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80059f6:	f002 fa9f 	bl	8007f38 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059fe:	4a3e      	ldr	r2, [pc, #248]	@ (8005af8 <xQueueGenericSend+0x214>)
 8005a00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a04:	6013      	str	r3, [r2, #0]
                    return errQUEUE_FULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e068      	b.n	8005adc <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d106      	bne.n	8005a1e <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005a10:	f107 0314 	add.w	r3, r7, #20
 8005a14:	4618      	mov	r0, r3
 8005a16:	f001 faab 	bl	8006f70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005a1e:	f002 fa8b 	bl	8007f38 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005a22:	f000 ffd1 	bl	80069c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005a26:	f002 fa59 	bl	8007edc <vPortEnterCritical>
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a30:	b25b      	sxtb	r3, r3
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d103      	bne.n	8005a40 <xQueueGenericSend+0x15c>
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a46:	b25b      	sxtb	r3, r3
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d103      	bne.n	8005a56 <xQueueGenericSend+0x172>
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a56:	f002 fa6f 	bl	8007f38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a5a:	1d3a      	adds	r2, r7, #4
 8005a5c:	f107 0314 	add.w	r3, r7, #20
 8005a60:	4611      	mov	r1, r2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 fa9a 	bl	8006f9c <xTaskCheckForTimeOut>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d12a      	bne.n	8005ac4 <xQueueGenericSend+0x1e0>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a6e:	6a38      	ldr	r0, [r7, #32]
 8005a70:	f000 fc70 	bl	8006354 <prvIsQueueFull>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d01e      	beq.n	8005ab8 <xQueueGenericSend+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005af8 <xQueueGenericSend+0x214>)
 8005a80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a84:	6013      	str	r3, [r2, #0]
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	3310      	adds	r3, #16
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 f9be 	bl	8006e10 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005a94:	6a38      	ldr	r0, [r7, #32]
 8005a96:	f000 fbf5 	bl	8006284 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005a9a:	f000 ffa3 	bl	80069e4 <xTaskResumeAll>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f47f af6a 	bne.w	800597a <xQueueGenericSend+0x96>
                {
                    portYIELD_WITHIN_API();
 8005aa6:	4b15      	ldr	r3, [pc, #84]	@ (8005afc <xQueueGenericSend+0x218>)
 8005aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	e760      	b.n	800597a <xQueueGenericSend+0x96>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005ab8:	6a38      	ldr	r0, [r7, #32]
 8005aba:	f000 fbe3 	bl	8006284 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005abe:	f000 ff91 	bl	80069e4 <xTaskResumeAll>
 8005ac2:	e75a      	b.n	800597a <xQueueGenericSend+0x96>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005ac4:	6a38      	ldr	r0, [r7, #32]
 8005ac6:	f000 fbdd 	bl	8006284 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005aca:	f000 ff8b 	bl	80069e4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ad2:	4a09      	ldr	r2, [pc, #36]	@ (8005af8 <xQueueGenericSend+0x214>)
 8005ad4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ad8:	6013      	str	r3, [r2, #0]
            return errQUEUE_FULL;
 8005ada:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3728      	adds	r7, #40	@ 0x28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	08019a80 	.word	0x08019a80
 8005ae8:	08019a94 	.word	0x08019a94
 8005aec:	08019bb4 	.word	0x08019bb4
 8005af0:	08019c04 	.word	0x08019c04
 8005af4:	08019c4c 	.word	0x08019c4c
 8005af8:	e000000c 	.word	0xe000000c
 8005afc:	e000ed04 	.word	0xe000ed04

08005b00 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08c      	sub	sp, #48	@ 0x30
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8005b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d105      	bne.n	8005b24 <xQueueGenericSendFromISR+0x24>
 8005b18:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8005b1c:	4943      	ldr	r1, [pc, #268]	@ (8005c2c <xQueueGenericSendFromISR+0x12c>)
 8005b1e:	4844      	ldr	r0, [pc, #272]	@ (8005c30 <xQueueGenericSendFromISR+0x130>)
 8005b20:	f00c fca2 	bl	8012468 <assertFail>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <xQueueGenericSendFromISR+0x32>
 8005b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <xQueueGenericSendFromISR+0x36>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <xQueueGenericSendFromISR+0x38>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d105      	bne.n	8005b48 <xQueueGenericSendFromISR+0x48>
 8005b3c:	f240 32de 	movw	r2, #990	@ 0x3de
 8005b40:	493a      	ldr	r1, [pc, #232]	@ (8005c2c <xQueueGenericSendFromISR+0x12c>)
 8005b42:	483c      	ldr	r0, [pc, #240]	@ (8005c34 <xQueueGenericSendFromISR+0x134>)
 8005b44:	f00c fc90 	bl	8012468 <assertFail>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d103      	bne.n	8005b56 <xQueueGenericSendFromISR+0x56>
 8005b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <xQueueGenericSendFromISR+0x5a>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <xQueueGenericSendFromISR+0x5c>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d105      	bne.n	8005b6c <xQueueGenericSendFromISR+0x6c>
 8005b60:	f240 32df 	movw	r2, #991	@ 0x3df
 8005b64:	4931      	ldr	r1, [pc, #196]	@ (8005c2c <xQueueGenericSendFromISR+0x12c>)
 8005b66:	4834      	ldr	r0, [pc, #208]	@ (8005c38 <xQueueGenericSendFromISR+0x138>)
 8005b68:	f00c fc7e 	bl	8012468 <assertFail>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b6c:	f002 fa8e 	bl	800808c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005b70:	f3ef 8211 	mrs	r2, BASEPRI
 8005b74:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	61ba      	str	r2, [r7, #24]
 8005b86:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005b88:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d302      	bcc.n	8005b9e <xQueueGenericSendFromISR+0x9e>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d139      	bne.n	8005c12 <xQueueGenericSendFromISR+0x112>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ba4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bac:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bb4:	f000 fad6 	bl	8006164 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005bb8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d112      	bne.n	8005be8 <xQueueGenericSendFromISR+0xe8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d020      	beq.n	8005c0c <xQueueGenericSendFromISR+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bcc:	3324      	adds	r3, #36	@ 0x24
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 f96c 	bl	8006eac <xTaskRemoveFromEventList>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d018      	beq.n	8005c0c <xQueueGenericSendFromISR+0x10c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d015      	beq.n	8005c0c <xQueueGenericSendFromISR+0x10c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e011      	b.n	8005c0c <xQueueGenericSendFromISR+0x10c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005be8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8005bec:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bee:	d105      	bne.n	8005bfc <xQueueGenericSendFromISR+0xfc>
 8005bf0:	f44f 628d 	mov.w	r2, #1128	@ 0x468
 8005bf4:	490d      	ldr	r1, [pc, #52]	@ (8005c2c <xQueueGenericSendFromISR+0x12c>)
 8005bf6:	4811      	ldr	r0, [pc, #68]	@ (8005c3c <xQueueGenericSendFromISR+0x13c>)
 8005bf8:	f00c fc36 	bl	8012468 <assertFail>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c00:	3301      	adds	r3, #1
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	b25a      	sxtb	r2, r3
 8005c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
 8005c10:	e001      	b.n	8005c16 <xQueueGenericSendFromISR+0x116>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005c20:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3730      	adds	r7, #48	@ 0x30
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	08019a80 	.word	0x08019a80
 8005c30:	08019a94 	.word	0x08019a94
 8005c34:	08019bb4 	.word	0x08019bb4
 8005c38:	08019c04 	.word	0x08019c04
 8005c3c:	08019ca4 	.word	0x08019ca4

08005c40 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08a      	sub	sp, #40	@ 0x28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d105      	bne.n	8005c60 <xQueueGiveFromISR+0x20>
 8005c54:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 8005c58:	493c      	ldr	r1, [pc, #240]	@ (8005d4c <xQueueGiveFromISR+0x10c>)
 8005c5a:	483d      	ldr	r0, [pc, #244]	@ (8005d50 <xQueueGiveFromISR+0x110>)
 8005c5c:	f00c fc04 	bl	8012468 <assertFail>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <xQueueGiveFromISR+0x34>
 8005c68:	f240 428c 	movw	r2, #1164	@ 0x48c
 8005c6c:	4937      	ldr	r1, [pc, #220]	@ (8005d4c <xQueueGiveFromISR+0x10c>)
 8005c6e:	4839      	ldr	r0, [pc, #228]	@ (8005d54 <xQueueGiveFromISR+0x114>)
 8005c70:	f00c fbfa 	bl	8012468 <assertFail>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d103      	bne.n	8005c84 <xQueueGiveFromISR+0x44>
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <xQueueGiveFromISR+0x48>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <xQueueGiveFromISR+0x4a>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d105      	bne.n	8005c9a <xQueueGiveFromISR+0x5a>
 8005c8e:	f240 4291 	movw	r2, #1169	@ 0x491
 8005c92:	492e      	ldr	r1, [pc, #184]	@ (8005d4c <xQueueGiveFromISR+0x10c>)
 8005c94:	4830      	ldr	r0, [pc, #192]	@ (8005d58 <xQueueGiveFromISR+0x118>)
 8005c96:	f00c fbe7 	bl	8012468 <assertFail>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c9a:	f002 f9f7 	bl	800808c <vPortValidateInterruptPriority>
        __asm volatile
 8005c9e:	f3ef 8211 	mrs	r2, BASEPRI
 8005ca2:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	613a      	str	r2, [r7, #16]
 8005cb4:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8005cb6:	693b      	ldr	r3, [r7, #16]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cb8:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbe:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d233      	bcs.n	8005d32 <xQueueGiveFromISR+0xf2>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cd0:	75fb      	strb	r3, [r7, #23]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005cda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce2:	d112      	bne.n	8005d0a <xQueueGiveFromISR+0xca>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01f      	beq.n	8005d2c <xQueueGiveFromISR+0xec>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	3324      	adds	r3, #36	@ 0x24
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 f8db 	bl	8006eac <xTaskRemoveFromEventList>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d017      	beq.n	8005d2c <xQueueGiveFromISR+0xec>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d014      	beq.n	8005d2c <xQueueGiveFromISR+0xec>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2201      	movs	r2, #1
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	e010      	b.n	8005d2c <xQueueGiveFromISR+0xec>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d10:	d105      	bne.n	8005d1e <xQueueGiveFromISR+0xde>
 8005d12:	f44f 62a2 	mov.w	r2, #1296	@ 0x510
 8005d16:	490d      	ldr	r1, [pc, #52]	@ (8005d4c <xQueueGiveFromISR+0x10c>)
 8005d18:	4810      	ldr	r0, [pc, #64]	@ (8005d5c <xQueueGiveFromISR+0x11c>)
 8005d1a:	f00c fba5 	bl	8012468 <assertFail>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
 8005d20:	3301      	adds	r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	b25a      	sxtb	r2, r3
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d30:	e001      	b.n	8005d36 <xQueueGiveFromISR+0xf6>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f383 8811 	msr	BASEPRI, r3
    }
 8005d40:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3728      	adds	r7, #40	@ 0x28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	08019a80 	.word	0x08019a80
 8005d50:	08019a94 	.word	0x08019a94
 8005d54:	08019cc0 	.word	0x08019cc0
 8005d58:	08019cdc 	.word	0x08019cdc
 8005d5c:	08019ca4 	.word	0x08019ca4

08005d60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08a      	sub	sp, #40	@ 0x28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d105      	bne.n	8005d86 <xQueueReceive+0x26>
 8005d7a:	f240 522c 	movw	r2, #1324	@ 0x52c
 8005d7e:	4962      	ldr	r1, [pc, #392]	@ (8005f08 <xQueueReceive+0x1a8>)
 8005d80:	4862      	ldr	r0, [pc, #392]	@ (8005f0c <xQueueReceive+0x1ac>)
 8005d82:	f00c fb71 	bl	8012468 <assertFail>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <xQueueReceive+0x34>
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <xQueueReceive+0x38>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <xQueueReceive+0x3a>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d105      	bne.n	8005daa <xQueueReceive+0x4a>
 8005d9e:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 8005da2:	4959      	ldr	r1, [pc, #356]	@ (8005f08 <xQueueReceive+0x1a8>)
 8005da4:	485a      	ldr	r0, [pc, #360]	@ (8005f10 <xQueueReceive+0x1b0>)
 8005da6:	f00c fb5f 	bl	8012468 <assertFail>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005daa:	f001 fa27 	bl	80071fc <xTaskGetSchedulerState>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <xQueueReceive+0x5a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <xQueueReceive+0x5e>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <xQueueReceive+0x60>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <xQueueReceive+0x70>
 8005dc4:	f240 5235 	movw	r2, #1333	@ 0x535
 8005dc8:	494f      	ldr	r1, [pc, #316]	@ (8005f08 <xQueueReceive+0x1a8>)
 8005dca:	4852      	ldr	r0, [pc, #328]	@ (8005f14 <xQueueReceive+0x1b4>)
 8005dcc:	f00c fb4c 	bl	8012468 <assertFail>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005dd0:	f002 f884 	bl	8007edc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd8:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01f      	beq.n	8005e20 <xQueueReceive+0xc0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	6a38      	ldr	r0, [r7, #32]
 8005de4:	f000 fa28 	bl	8006238 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	1e5a      	subs	r2, r3, #1
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00f      	beq.n	8005e18 <xQueueReceive+0xb8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	3310      	adds	r3, #16
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 f855 	bl	8006eac <xTaskRemoveFromEventList>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <xQueueReceive+0xb8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005e08:	4b43      	ldr	r3, [pc, #268]	@ (8005f18 <xQueueReceive+0x1b8>)
 8005e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005e18:	f002 f88e 	bl	8007f38 <vPortExitCritical>
                return pdPASS;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e06f      	b.n	8005f00 <xQueueReceive+0x1a0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <xQueueReceive+0xce>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005e26:	f002 f887 	bl	8007f38 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e068      	b.n	8005f00 <xQueueReceive+0x1a0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <xQueueReceive+0xe2>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005e34:	f107 0314 	add.w	r3, r7, #20
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 f899 	bl	8006f70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005e42:	f002 f879 	bl	8007f38 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005e46:	f000 fdbf 	bl	80069c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005e4a:	f002 f847 	bl	8007edc <vPortEnterCritical>
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e54:	b25b      	sxtb	r3, r3
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	d103      	bne.n	8005e64 <xQueueReceive+0x104>
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e6a:	b25b      	sxtb	r3, r3
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d103      	bne.n	8005e7a <xQueueReceive+0x11a>
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e7a:	f002 f85d 	bl	8007f38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e7e:	1d3a      	adds	r2, r7, #4
 8005e80:	f107 0314 	add.w	r3, r7, #20
 8005e84:	4611      	mov	r1, r2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 f888 	bl	8006f9c <xTaskCheckForTimeOut>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d129      	bne.n	8005ee6 <xQueueReceive+0x186>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e92:	6a38      	ldr	r0, [r7, #32]
 8005e94:	f000 fa48 	bl	8006328 <prvIsQueueEmpty>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d01d      	beq.n	8005eda <xQueueReceive+0x17a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f1c <xQueueReceive+0x1bc>)
 8005ea4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005ea8:	6013      	str	r3, [r2, #0]
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	3324      	adds	r3, #36	@ 0x24
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 ffac 	bl	8006e10 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005eb8:	6a38      	ldr	r0, [r7, #32]
 8005eba:	f000 f9e3 	bl	8006284 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005ebe:	f000 fd91 	bl	80069e4 <xTaskResumeAll>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d183      	bne.n	8005dd0 <xQueueReceive+0x70>
                {
                    portYIELD_WITHIN_API();
 8005ec8:	4b13      	ldr	r3, [pc, #76]	@ (8005f18 <xQueueReceive+0x1b8>)
 8005eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	e77a      	b.n	8005dd0 <xQueueReceive+0x70>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005eda:	6a38      	ldr	r0, [r7, #32]
 8005edc:	f000 f9d2 	bl	8006284 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005ee0:	f000 fd80 	bl	80069e4 <xTaskResumeAll>
 8005ee4:	e774      	b.n	8005dd0 <xQueueReceive+0x70>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005ee6:	6a38      	ldr	r0, [r7, #32]
 8005ee8:	f000 f9cc 	bl	8006284 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005eec:	f000 fd7a 	bl	80069e4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ef0:	6a38      	ldr	r0, [r7, #32]
 8005ef2:	f000 fa19 	bl	8006328 <prvIsQueueEmpty>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f43f af69 	beq.w	8005dd0 <xQueueReceive+0x70>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005efe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3728      	adds	r7, #40	@ 0x28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	08019a80 	.word	0x08019a80
 8005f0c:	08019d44 	.word	0x08019d44
 8005f10:	08019d50 	.word	0x08019d50
 8005f14:	08019c4c 	.word	0x08019c4c
 8005f18:	e000ed04 	.word	0xe000ed04
 8005f1c:	e000000c 	.word	0xe000000c

08005f20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	@ 0x28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8005f32:	2300      	movs	r3, #0
 8005f34:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d105      	bne.n	8005f48 <xQueueSemaphoreTake+0x28>
 8005f3c:	f240 52be 	movw	r2, #1470	@ 0x5be
 8005f40:	4975      	ldr	r1, [pc, #468]	@ (8006118 <xQueueSemaphoreTake+0x1f8>)
 8005f42:	4876      	ldr	r0, [pc, #472]	@ (800611c <xQueueSemaphoreTake+0x1fc>)
 8005f44:	f00c fa90 	bl	8012468 <assertFail>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <xQueueSemaphoreTake+0x3c>
 8005f50:	f240 52c2 	movw	r2, #1474	@ 0x5c2
 8005f54:	4970      	ldr	r1, [pc, #448]	@ (8006118 <xQueueSemaphoreTake+0x1f8>)
 8005f56:	4872      	ldr	r0, [pc, #456]	@ (8006120 <xQueueSemaphoreTake+0x200>)
 8005f58:	f00c fa86 	bl	8012468 <assertFail>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f5c:	f001 f94e 	bl	80071fc <xTaskGetSchedulerState>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d102      	bne.n	8005f6c <xQueueSemaphoreTake+0x4c>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <xQueueSemaphoreTake+0x50>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e000      	b.n	8005f72 <xQueueSemaphoreTake+0x52>
 8005f70:	2300      	movs	r3, #0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d105      	bne.n	8005f82 <xQueueSemaphoreTake+0x62>
 8005f76:	f240 52c7 	movw	r2, #1479	@ 0x5c7
 8005f7a:	4967      	ldr	r1, [pc, #412]	@ (8006118 <xQueueSemaphoreTake+0x1f8>)
 8005f7c:	4869      	ldr	r0, [pc, #420]	@ (8006124 <xQueueSemaphoreTake+0x204>)
 8005f7e:	f00c fa73 	bl	8012468 <assertFail>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005f82:	f001 ffab 	bl	8007edc <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8a:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d024      	beq.n	8005fdc <xQueueSemaphoreTake+0xbc>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	1e5a      	subs	r2, r3, #1
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d104      	bne.n	8005fac <xQueueSemaphoreTake+0x8c>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005fa2:	f001 fabf 	bl	8007524 <pvTaskIncrementMutexHeldCount>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00f      	beq.n	8005fd4 <xQueueSemaphoreTake+0xb4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	3310      	adds	r3, #16
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 ff77 	bl	8006eac <xTaskRemoveFromEventList>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d007      	beq.n	8005fd4 <xQueueSemaphoreTake+0xb4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005fc4:	4b58      	ldr	r3, [pc, #352]	@ (8006128 <xQueueSemaphoreTake+0x208>)
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005fd4:	f001 ffb0 	bl	8007f38 <vPortExitCritical>
                return pdPASS;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e098      	b.n	800610e <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10c      	bne.n	8005ffc <xQueueSemaphoreTake+0xdc>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <xQueueSemaphoreTake+0xd4>
 8005fe8:	f240 620d 	movw	r2, #1549	@ 0x60d
 8005fec:	494a      	ldr	r1, [pc, #296]	@ (8006118 <xQueueSemaphoreTake+0x1f8>)
 8005fee:	484f      	ldr	r0, [pc, #316]	@ (800612c <xQueueSemaphoreTake+0x20c>)
 8005ff0:	f00c fa3a 	bl	8012468 <assertFail>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8005ff4:	f001 ffa0 	bl	8007f38 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	e088      	b.n	800610e <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <xQueueSemaphoreTake+0xf0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006002:	f107 030c 	add.w	r3, r7, #12
 8006006:	4618      	mov	r0, r3
 8006008:	f000 ffb2 	bl	8006f70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800600c:	2301      	movs	r3, #1
 800600e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006010:	f001 ff92 	bl	8007f38 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006014:	f000 fcd8 	bl	80069c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006018:	f001 ff60 	bl	8007edc <vPortEnterCritical>
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006022:	b25b      	sxtb	r3, r3
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d103      	bne.n	8006032 <xQueueSemaphoreTake+0x112>
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006038:	b25b      	sxtb	r3, r3
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603e:	d103      	bne.n	8006048 <xQueueSemaphoreTake+0x128>
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006048:	f001 ff76 	bl	8007f38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800604c:	463a      	mov	r2, r7
 800604e:	f107 030c 	add.w	r3, r7, #12
 8006052:	4611      	mov	r1, r2
 8006054:	4618      	mov	r0, r3
 8006056:	f000 ffa1 	bl	8006f9c <xTaskCheckForTimeOut>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d138      	bne.n	80060d2 <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006060:	69f8      	ldr	r0, [r7, #28]
 8006062:	f000 f961 	bl	8006328 <prvIsQueueEmpty>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d02c      	beq.n	80060c6 <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006070:	4a2f      	ldr	r2, [pc, #188]	@ (8006130 <xQueueSemaphoreTake+0x210>)
 8006072:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006076:	6013      	str	r3, [r2, #0]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d109      	bne.n	8006094 <xQueueSemaphoreTake+0x174>
                        {
                            taskENTER_CRITICAL();
 8006080:	f001 ff2c 	bl	8007edc <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	4618      	mov	r0, r3
 800608a:	f001 f8d5 	bl	8007238 <xTaskPriorityInherit>
 800608e:	6238      	str	r0, [r7, #32]
                            }
                            taskEXIT_CRITICAL();
 8006090:	f001 ff52 	bl	8007f38 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	3324      	adds	r3, #36	@ 0x24
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	4611      	mov	r1, r2
 800609c:	4618      	mov	r0, r3
 800609e:	f000 feb7 	bl	8006e10 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80060a2:	69f8      	ldr	r0, [r7, #28]
 80060a4:	f000 f8ee 	bl	8006284 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80060a8:	f000 fc9c 	bl	80069e4 <xTaskResumeAll>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f47f af67 	bne.w	8005f82 <xQueueSemaphoreTake+0x62>
                {
                    portYIELD_WITHIN_API();
 80060b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006128 <xQueueSemaphoreTake+0x208>)
 80060b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	e75d      	b.n	8005f82 <xQueueSemaphoreTake+0x62>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80060c6:	69f8      	ldr	r0, [r7, #28]
 80060c8:	f000 f8dc 	bl	8006284 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80060cc:	f000 fc8a 	bl	80069e4 <xTaskResumeAll>
 80060d0:	e757      	b.n	8005f82 <xQueueSemaphoreTake+0x62>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80060d2:	69f8      	ldr	r0, [r7, #28]
 80060d4:	f000 f8d6 	bl	8006284 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80060d8:	f000 fc84 	bl	80069e4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060dc:	69f8      	ldr	r0, [r7, #28]
 80060de:	f000 f923 	bl	8006328 <prvIsQueueEmpty>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f43f af4c 	beq.w	8005f82 <xQueueSemaphoreTake+0x62>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00d      	beq.n	800610c <xQueueSemaphoreTake+0x1ec>
                        {
                            taskENTER_CRITICAL();
 80060f0:	f001 fef4 	bl	8007edc <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80060f4:	69f8      	ldr	r0, [r7, #28]
 80060f6:	f000 f81d 	bl	8006134 <prvGetDisinheritPriorityAfterTimeout>
 80060fa:	6178      	str	r0, [r7, #20]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	4618      	mov	r0, r3
 8006104:	f001 f984 	bl	8007410 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8006108:	f001 ff16 	bl	8007f38 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800610c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800610e:	4618      	mov	r0, r3
 8006110:	3728      	adds	r7, #40	@ 0x28
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	08019a80 	.word	0x08019a80
 800611c:	08019d44 	.word	0x08019d44
 8006120:	08019cc0 	.word	0x08019cc0
 8006124:	08019c4c 	.word	0x08019c4c
 8006128:	e000ed04 	.word	0xe000ed04
 800612c:	08019da4 	.word	0x08019da4
 8006130:	e000000c 	.word	0xe000000c

08006134 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d006      	beq.n	8006152 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f1c3 0306 	rsb	r3, r3, #6
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	e001      	b.n	8006156 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8006156:	68fb      	ldr	r3, [r7, #12]
    }
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006170:	2300      	movs	r3, #0
 8006172:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006178:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10d      	bne.n	800619e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d14d      	bne.n	8006226 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	4618      	mov	r0, r3
 8006190:	f001 f8c8 	bl	8007324 <xTaskPriorityDisinherit>
 8006194:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	609a      	str	r2, [r3, #8]
 800619c:	e043      	b.n	8006226 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d119      	bne.n	80061d8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6858      	ldr	r0, [r3, #4]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ac:	461a      	mov	r2, r3
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	f011 fc32 	bl	8017a18 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061bc:	441a      	add	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d32b      	bcc.n	8006226 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	605a      	str	r2, [r3, #4]
 80061d6:	e026      	b.n	8006226 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	68d8      	ldr	r0, [r3, #12]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e0:	461a      	mov	r2, r3
 80061e2:	68b9      	ldr	r1, [r7, #8]
 80061e4:	f011 fc18 	bl	8017a18 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f0:	425b      	negs	r3, r3
 80061f2:	441a      	add	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d207      	bcs.n	8006214 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620c:	425b      	negs	r3, r3
 800620e:	441a      	add	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b02      	cmp	r3, #2
 8006218:	d105      	bne.n	8006226 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	3b01      	subs	r3, #1
 8006224:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800622e:	697b      	ldr	r3, [r7, #20]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d018      	beq.n	800627c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006252:	441a      	add	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	d303      	bcc.n	800626c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68d9      	ldr	r1, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006274:	461a      	mov	r2, r3
 8006276:	6838      	ldr	r0, [r7, #0]
 8006278:	f011 fbce 	bl	8017a18 <memcpy>
    }
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800628c:	f001 fe26 	bl	8007edc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006296:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006298:	e011      	b.n	80062be <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d012      	beq.n	80062c8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3324      	adds	r3, #36	@ 0x24
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fe00 	bl	8006eac <xTaskRemoveFromEventList>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80062b2:	f000 fed5 	bl	8007060 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80062be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	dce9      	bgt.n	800629a <prvUnlockQueue+0x16>
 80062c6:	e000      	b.n	80062ca <prvUnlockQueue+0x46>
                        break;
 80062c8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	22ff      	movs	r2, #255	@ 0xff
 80062ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80062d2:	f001 fe31 	bl	8007f38 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80062d6:	f001 fe01 	bl	8007edc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062e0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80062e2:	e011      	b.n	8006308 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d012      	beq.n	8006312 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3310      	adds	r3, #16
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fddb 	bl	8006eac <xTaskRemoveFromEventList>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80062fc:	f000 feb0 	bl	8007060 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006300:	7bbb      	ldrb	r3, [r7, #14]
 8006302:	3b01      	subs	r3, #1
 8006304:	b2db      	uxtb	r3, r3
 8006306:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800630c:	2b00      	cmp	r3, #0
 800630e:	dce9      	bgt.n	80062e4 <prvUnlockQueue+0x60>
 8006310:	e000      	b.n	8006314 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006312:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	22ff      	movs	r2, #255	@ 0xff
 8006318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800631c:	f001 fe0c 	bl	8007f38 <vPortExitCritical>
}
 8006320:	bf00      	nop
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006330:	f001 fdd4 	bl	8007edc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800633c:	2301      	movs	r3, #1
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e001      	b.n	8006346 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006346:	f001 fdf7 	bl	8007f38 <vPortExitCritical>

    return xReturn;
 800634a:	68fb      	ldr	r3, [r7, #12]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800635c:	f001 fdbe 	bl	8007edc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006368:	429a      	cmp	r2, r3
 800636a:	d102      	bne.n	8006372 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800636c:	2301      	movs	r3, #1
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	e001      	b.n	8006376 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006376:	f001 fddf 	bl	8007f38 <vPortExitCritical>

    return xReturn;
 800637a:	68fb      	ldr	r3, [r7, #12]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	e014      	b.n	80063be <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006394:	4a0f      	ldr	r2, [pc, #60]	@ (80063d4 <vQueueAddToRegistry+0x50>)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10b      	bne.n	80063b8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80063a0:	490c      	ldr	r1, [pc, #48]	@ (80063d4 <vQueueAddToRegistry+0x50>)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80063aa:	4a0a      	ldr	r2, [pc, #40]	@ (80063d4 <vQueueAddToRegistry+0x50>)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	4413      	add	r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80063b6:	e006      	b.n	80063c6 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3301      	adds	r3, #1
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b09      	cmp	r3, #9
 80063c2:	d9e7      	bls.n	8006394 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	2000021c 	.word	0x2000021c

080063d8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80063e8:	f001 fd78 	bl	8007edc <vPortEnterCritical>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063f2:	b25b      	sxtb	r3, r3
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d103      	bne.n	8006402 <vQueueWaitForMessageRestricted+0x2a>
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006408:	b25b      	sxtb	r3, r3
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640e:	d103      	bne.n	8006418 <vQueueWaitForMessageRestricted+0x40>
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006418:	f001 fd8e 	bl	8007f38 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006420:	2b00      	cmp	r3, #0
 8006422:	d106      	bne.n	8006432 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	3324      	adds	r3, #36	@ 0x24
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fd13 	bl	8006e58 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006432:	6978      	ldr	r0, [r7, #20]
 8006434:	f7ff ff26 	bl	8006284 <prvUnlockQueue>
    }
 8006438:	bf00      	nop
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8006440:	b580      	push	{r7, lr}
 8006442:	b08c      	sub	sp, #48	@ 0x30
 8006444:	af04      	add	r7, sp, #16
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800644e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <xTaskCreateStatic+0x20>
 8006454:	f240 2243 	movw	r2, #579	@ 0x243
 8006458:	4920      	ldr	r1, [pc, #128]	@ (80064dc <xTaskCreateStatic+0x9c>)
 800645a:	4821      	ldr	r0, [pc, #132]	@ (80064e0 <xTaskCreateStatic+0xa0>)
 800645c:	f00c f804 	bl	8012468 <assertFail>
        configASSERT( pxTaskBuffer != NULL );
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	2b00      	cmp	r3, #0
 8006464:	d105      	bne.n	8006472 <xTaskCreateStatic+0x32>
 8006466:	f44f 7211 	mov.w	r2, #580	@ 0x244
 800646a:	491c      	ldr	r1, [pc, #112]	@ (80064dc <xTaskCreateStatic+0x9c>)
 800646c:	481d      	ldr	r0, [pc, #116]	@ (80064e4 <xTaskCreateStatic+0xa4>)
 800646e:	f00b fffb 	bl	8012468 <assertFail>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 8006472:	2364      	movs	r3, #100	@ 0x64
 8006474:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( TCB_t ) );
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b64      	cmp	r3, #100	@ 0x64
 800647a:	d005      	beq.n	8006488 <xTaskCreateStatic+0x48>
 800647c:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 8006480:	4916      	ldr	r1, [pc, #88]	@ (80064dc <xTaskCreateStatic+0x9c>)
 8006482:	4819      	ldr	r0, [pc, #100]	@ (80064e8 <xTaskCreateStatic+0xa8>)
 8006484:	f00b fff0 	bl	8012468 <assertFail>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006488:	697b      	ldr	r3, [r7, #20]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01e      	beq.n	80064ce <xTaskCreateStatic+0x8e>
 8006490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d01b      	beq.n	80064ce <xTaskCreateStatic+0x8e>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	61fb      	str	r3, [r7, #28]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800649e:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064a8:	2300      	movs	r3, #0
 80064aa:	9303      	str	r3, [sp, #12]
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	9302      	str	r3, [sp, #8]
 80064b0:	f107 0318 	add.w	r3, r7, #24
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f859 	bl	8006578 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80064c6:	69f8      	ldr	r0, [r7, #28]
 80064c8:	f000 f8f4 	bl	80066b4 <prvAddNewTaskToReadyList>
 80064cc:	e001      	b.n	80064d2 <xTaskCreateStatic+0x92>
        }
        else
        {
            xReturn = NULL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80064d2:	69bb      	ldr	r3, [r7, #24]
    }
 80064d4:	4618      	mov	r0, r3
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	08019e50 	.word	0x08019e50
 80064e0:	08019e64 	.word	0x08019e64
 80064e4:	08019e7c 	.word	0x08019e7c
 80064e8:	08019e94 	.word	0x08019e94

080064ec <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08c      	sub	sp, #48	@ 0x30
 80064f0:	af04      	add	r7, sp, #16
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4618      	mov	r0, r3
 8006502:	f001 fdfd 	bl	8008100 <pvPortMalloc>
 8006506:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00e      	beq.n	800652c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800650e:	2064      	movs	r0, #100	@ 0x64
 8006510:	f001 fdf6 	bl	8008100 <pvPortMalloc>
 8006514:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	631a      	str	r2, [r3, #48]	@ 0x30
 8006522:	e005      	b.n	8006530 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006524:	6978      	ldr	r0, [r7, #20]
 8006526:	f001 feb3 	bl	8008290 <vPortFree>
 800652a:	e001      	b.n	8006530 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800652c:	2300      	movs	r3, #0
 800652e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d017      	beq.n	8006566 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800653e:	88fa      	ldrh	r2, [r7, #6]
 8006540:	2300      	movs	r3, #0
 8006542:	9303      	str	r3, [sp, #12]
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	9302      	str	r3, [sp, #8]
 8006548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654a:	9301      	str	r3, [sp, #4]
 800654c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f80f 	bl	8006578 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800655a:	69f8      	ldr	r0, [r7, #28]
 800655c:	f000 f8aa 	bl	80066b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006560:	2301      	movs	r3, #1
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	e002      	b.n	800656c <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006566:	f04f 33ff 	mov.w	r3, #4294967295
 800656a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800656c:	69bb      	ldr	r3, [r7, #24]
    }
 800656e:	4618      	mov	r0, r3
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	461a      	mov	r2, r3
 8006590:	21a5      	movs	r1, #165	@ 0xa5
 8006592:	f011 f9fb 	bl	801798c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065a0:	3b01      	subs	r3, #1
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f023 0307 	bic.w	r3, r3, #7
 80065ae:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d005      	beq.n	80065c6 <prvInitialiseNewTask+0x4e>
 80065ba:	f240 3259 	movw	r2, #857	@ 0x359
 80065be:	493b      	ldr	r1, [pc, #236]	@ (80066ac <prvInitialiseNewTask+0x134>)
 80065c0:	483b      	ldr	r0, [pc, #236]	@ (80066b0 <prvInitialiseNewTask+0x138>)
 80065c2:	f00b ff51 	bl	8012468 <assertFail>

            #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
                {
                    /* Also record the stack's high address, which may assist
                     * debugging. */
                    pxNewTCB->pxEndOfStack = pxTopOfStack;
 80065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	641a      	str	r2, [r3, #64]	@ 0x40
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d01f      	beq.n	8006612 <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
 80065d6:	e012      	b.n	80065fe <prvInitialiseNewTask+0x86>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	4413      	add	r3, r2
 80065de:	7819      	ldrb	r1, [r3, #0]
 80065e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	4413      	add	r3, r2
 80065e6:	3334      	adds	r3, #52	@ 0x34
 80065e8:	460a      	mov	r2, r1
 80065ea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	4413      	add	r3, r2
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d006      	beq.n	8006606 <prvInitialiseNewTask+0x8e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	3301      	adds	r3, #1
 80065fc:	617b      	str	r3, [r7, #20]
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b09      	cmp	r3, #9
 8006602:	d9e9      	bls.n	80065d8 <prvInitialiseNewTask+0x60>
 8006604:	e000      	b.n	8006608 <prvInitialiseNewTask+0x90>
            {
                break;
 8006606:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006610:	e003      	b.n	800661a <prvInitialiseNewTask+0xa2>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	2b05      	cmp	r3, #5
 800661e:	d901      	bls.n	8006624 <prvInitialiseNewTask+0xac>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006620:	2305      	movs	r3, #5
 8006622:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006626:	6a3a      	ldr	r2, [r7, #32]
 8006628:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	6a3a      	ldr	r2, [r7, #32]
 800662e:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8006630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006632:	2200      	movs	r2, #0
 8006634:	651a      	str	r2, [r3, #80]	@ 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006638:	3304      	adds	r3, #4
 800663a:	4618      	mov	r0, r3
 800663c:	f7fe ff42 	bl	80054c4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006642:	3318      	adds	r3, #24
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe ff3d 	bl	80054c4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800664a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800664e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	f1c3 0206 	rsb	r2, r3, #6
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800665a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800665e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 8006660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006662:	2200      	movs	r2, #0
 8006664:	655a      	str	r2, [r3, #84]	@ 0x54
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = 0UL;
 8006666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006668:	2200      	movs	r2, #0
 800666a:	659a      	str	r2, [r3, #88]	@ 0x58
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666e:	335c      	adds	r3, #92	@ 0x5c
 8006670:	2204      	movs	r2, #4
 8006672:	2100      	movs	r1, #0
 8006674:	4618      	mov	r0, r3
 8006676:	f011 f989 	bl	801798c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800667a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667c:	3360      	adds	r3, #96	@ 0x60
 800667e:	2201      	movs	r2, #1
 8006680:	2100      	movs	r1, #0
 8006682:	4618      	mov	r0, r3
 8006684:	f011 f982 	bl	801798c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	68f9      	ldr	r1, [r7, #12]
 800668c:	6938      	ldr	r0, [r7, #16]
 800668e:	f001 fb0d 	bl	8007cac <pxPortInitialiseStack>
 8006692:	4602      	mov	r2, r0
 8006694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006696:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <prvInitialiseNewTask+0x12c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066a2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80066a4:	bf00      	nop
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	08019e50 	.word	0x08019e50
 80066b0:	08019eb0 	.word	0x08019eb0

080066b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80066bc:	f001 fc0e 	bl	8007edc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80066c0:	4b2c      	ldr	r3, [pc, #176]	@ (8006774 <prvAddNewTaskToReadyList+0xc0>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3301      	adds	r3, #1
 80066c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006774 <prvAddNewTaskToReadyList+0xc0>)
 80066c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80066ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006778 <prvAddNewTaskToReadyList+0xc4>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d109      	bne.n	80066e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80066d2:	4a29      	ldr	r2, [pc, #164]	@ (8006778 <prvAddNewTaskToReadyList+0xc4>)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066d8:	4b26      	ldr	r3, [pc, #152]	@ (8006774 <prvAddNewTaskToReadyList+0xc0>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d110      	bne.n	8006702 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80066e0:	f000 fcd4 	bl	800708c <prvInitialiseTaskLists>
 80066e4:	e00d      	b.n	8006702 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80066e6:	4b25      	ldr	r3, [pc, #148]	@ (800677c <prvAddNewTaskToReadyList+0xc8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066ee:	4b22      	ldr	r3, [pc, #136]	@ (8006778 <prvAddNewTaskToReadyList+0xc4>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d802      	bhi.n	8006702 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80066fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006778 <prvAddNewTaskToReadyList+0xc4>)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006702:	4b1f      	ldr	r3, [pc, #124]	@ (8006780 <prvAddNewTaskToReadyList+0xcc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3301      	adds	r3, #1
 8006708:	4a1d      	ldr	r2, [pc, #116]	@ (8006780 <prvAddNewTaskToReadyList+0xcc>)
 800670a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800670c:	4b1c      	ldr	r3, [pc, #112]	@ (8006780 <prvAddNewTaskToReadyList+0xcc>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006718:	2201      	movs	r2, #1
 800671a:	409a      	lsls	r2, r3
 800671c:	4b19      	ldr	r3, [pc, #100]	@ (8006784 <prvAddNewTaskToReadyList+0xd0>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4313      	orrs	r3, r2
 8006722:	4a18      	ldr	r2, [pc, #96]	@ (8006784 <prvAddNewTaskToReadyList+0xd0>)
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800672a:	4613      	mov	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4a15      	ldr	r2, [pc, #84]	@ (8006788 <prvAddNewTaskToReadyList+0xd4>)
 8006734:	441a      	add	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3304      	adds	r3, #4
 800673a:	4619      	mov	r1, r3
 800673c:	4610      	mov	r0, r2
 800673e:	f7fe fece 	bl	80054de <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006742:	f001 fbf9 	bl	8007f38 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006746:	4b0d      	ldr	r3, [pc, #52]	@ (800677c <prvAddNewTaskToReadyList+0xc8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00e      	beq.n	800676c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800674e:	4b0a      	ldr	r3, [pc, #40]	@ (8006778 <prvAddNewTaskToReadyList+0xc4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006758:	429a      	cmp	r2, r3
 800675a:	d207      	bcs.n	800676c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800675c:	4b0b      	ldr	r3, [pc, #44]	@ (800678c <prvAddNewTaskToReadyList+0xd8>)
 800675e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20000358 	.word	0x20000358
 8006778:	2000026c 	.word	0x2000026c
 800677c:	20000364 	.word	0x20000364
 8006780:	20000374 	.word	0x20000374
 8006784:	20000360 	.word	0x20000360
 8006788:	20000270 	.word	0x20000270
 800678c:	e000ed04 	.word	0xe000ed04

08006790 <vTaskDelayUntil>:

#if ( INCLUDE_vTaskDelayUntil == 1 )

    void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                          const TickType_t xTimeIncrement )
    {
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d105      	bne.n	80067b0 <vTaskDelayUntil+0x20>
 80067a4:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80067a8:	492d      	ldr	r1, [pc, #180]	@ (8006860 <vTaskDelayUntil+0xd0>)
 80067aa:	482e      	ldr	r0, [pc, #184]	@ (8006864 <vTaskDelayUntil+0xd4>)
 80067ac:	f00b fe5c 	bl	8012468 <assertFail>
        configASSERT( ( xTimeIncrement > 0U ) );
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d105      	bne.n	80067c2 <vTaskDelayUntil+0x32>
 80067b6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80067ba:	4929      	ldr	r1, [pc, #164]	@ (8006860 <vTaskDelayUntil+0xd0>)
 80067bc:	482a      	ldr	r0, [pc, #168]	@ (8006868 <vTaskDelayUntil+0xd8>)
 80067be:	f00b fe53 	bl	8012468 <assertFail>
        configASSERT( uxSchedulerSuspended == 0 );
 80067c2:	4b2a      	ldr	r3, [pc, #168]	@ (800686c <vTaskDelayUntil+0xdc>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <vTaskDelayUntil+0x46>
 80067ca:	f240 42e4 	movw	r2, #1252	@ 0x4e4
 80067ce:	4924      	ldr	r1, [pc, #144]	@ (8006860 <vTaskDelayUntil+0xd0>)
 80067d0:	4827      	ldr	r0, [pc, #156]	@ (8006870 <vTaskDelayUntil+0xe0>)
 80067d2:	f00b fe49 	bl	8012468 <assertFail>

        vTaskSuspendAll();
 80067d6:	f000 f8f7 	bl	80069c8 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80067da:	4b26      	ldr	r3, [pc, #152]	@ (8006874 <vTaskDelayUntil+0xe4>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	4413      	add	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d20b      	bcs.n	800680c <vTaskDelayUntil+0x7c>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d211      	bcs.n	8006822 <vTaskDelayUntil+0x92>
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	429a      	cmp	r2, r3
 8006804:	d90d      	bls.n	8006822 <vTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 8006806:	2301      	movs	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	e00a      	b.n	8006822 <vTaskDelayUntil+0x92>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	429a      	cmp	r2, r3
 8006814:	d303      	bcc.n	800681e <vTaskDelayUntil+0x8e>
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	429a      	cmp	r2, r3
 800681c:	d901      	bls.n	8006822 <vTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 800681e:	2301      	movs	r3, #1
 8006820:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d006      	beq.n	800683c <vTaskDelayUntil+0xac>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2100      	movs	r1, #0
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fe88 	bl	800754c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800683c:	f000 f8d2 	bl	80069e4 <xTaskResumeAll>
 8006840:	60b8      	str	r0, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d107      	bne.n	8006858 <vTaskDelayUntil+0xc8>
        {
            portYIELD_WITHIN_API();
 8006848:	4b0b      	ldr	r3, [pc, #44]	@ (8006878 <vTaskDelayUntil+0xe8>)
 800684a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006858:	bf00      	nop
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	08019e50 	.word	0x08019e50
 8006864:	08019f38 	.word	0x08019f38
 8006868:	08019f4c 	.word	0x08019f4c
 800686c:	20000380 	.word	0x20000380
 8006870:	08019f1c 	.word	0x08019f1c
 8006874:	2000035c 	.word	0x2000035c
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d012      	beq.n	80068b4 <vTaskDelay+0x38>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800688e:	4b11      	ldr	r3, [pc, #68]	@ (80068d4 <vTaskDelay+0x58>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <vTaskDelay+0x26>
 8006896:	f44f 62a7 	mov.w	r2, #1336	@ 0x538
 800689a:	490f      	ldr	r1, [pc, #60]	@ (80068d8 <vTaskDelay+0x5c>)
 800689c:	480f      	ldr	r0, [pc, #60]	@ (80068dc <vTaskDelay+0x60>)
 800689e:	f00b fde3 	bl	8012468 <assertFail>
            vTaskSuspendAll();
 80068a2:	f000 f891 	bl	80069c8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068a6:	2100      	movs	r1, #0
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fe4f 	bl	800754c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80068ae:	f000 f899 	bl	80069e4 <xTaskResumeAll>
 80068b2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d107      	bne.n	80068ca <vTaskDelay+0x4e>
        {
            portYIELD_WITHIN_API();
 80068ba:	4b09      	ldr	r3, [pc, #36]	@ (80068e0 <vTaskDelay+0x64>)
 80068bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000380 	.word	0x20000380
 80068d8:	08019e50 	.word	0x08019e50
 80068dc:	08019f1c 	.word	0x08019f1c
 80068e0:	e000ed04 	.word	0xe000ed04

080068e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08a      	sub	sp, #40	@ 0x28
 80068e8:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60bb      	str	r3, [r7, #8]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068f2:	1d3a      	adds	r2, r7, #4
 80068f4:	f107 0108 	add.w	r1, r7, #8
 80068f8:	f107 030c 	add.w	r3, r7, #12
 80068fc:	4618      	mov	r0, r3
 80068fe:	f006 faff 	bl	800cf00 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	9202      	str	r2, [sp, #8]
 800690a:	9301      	str	r3, [sp, #4]
 800690c:	2300      	movs	r3, #0
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	2300      	movs	r3, #0
 8006912:	460a      	mov	r2, r1
 8006914:	4922      	ldr	r1, [pc, #136]	@ (80069a0 <vTaskStartScheduler+0xbc>)
 8006916:	4823      	ldr	r0, [pc, #140]	@ (80069a4 <vTaskStartScheduler+0xc0>)
 8006918:	f7ff fd92 	bl	8006440 <xTaskCreateStatic>
 800691c:	4603      	mov	r3, r0
 800691e:	4a22      	ldr	r2, [pc, #136]	@ (80069a8 <vTaskStartScheduler+0xc4>)
 8006920:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 8006922:	4b21      	ldr	r3, [pc, #132]	@ (80069a8 <vTaskStartScheduler+0xc4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <vTaskStartScheduler+0x4c>
            {
                xReturn = pdPASS;
 800692a:	2301      	movs	r3, #1
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	e001      	b.n	8006934 <vTaskStartScheduler+0x50>
            }
            else
            {
                xReturn = pdFAIL;
 8006930:	2300      	movs	r3, #0
 8006932:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d102      	bne.n	8006940 <vTaskStartScheduler+0x5c>
            {
                xReturn = xTimerCreateTimerTask();
 800693a:	f000 fe6d 	bl	8007618 <xTimerCreateTimerTask>
 800693e:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d11e      	bne.n	8006984 <vTaskStartScheduler+0xa0>
        __asm volatile
 8006946:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	613b      	str	r3, [r7, #16]
    }
 8006958:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800695a:	4b14      	ldr	r3, [pc, #80]	@ (80069ac <vTaskStartScheduler+0xc8>)
 800695c:	f04f 32ff 	mov.w	r2, #4294967295
 8006960:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006962:	4b13      	ldr	r3, [pc, #76]	@ (80069b0 <vTaskStartScheduler+0xcc>)
 8006964:	2201      	movs	r2, #1
 8006966:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006968:	4b12      	ldr	r3, [pc, #72]	@ (80069b4 <vTaskStartScheduler+0xd0>)
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
         * macro must be defined to configure the timer/counter used to generate
         * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800696e:	f005 f927 	bl	800bbc0 <usecTimerInit>

        traceTASK_SWITCHED_IN();
 8006972:	4b11      	ldr	r3, [pc, #68]	@ (80069b8 <vTaskStartScheduler+0xd4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3334      	adds	r3, #52	@ 0x34
 8006978:	4a10      	ldr	r2, [pc, #64]	@ (80069bc <vTaskStartScheduler+0xd8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6013      	str	r3, [r2, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800697e:	f001 fa21 	bl	8007dc4 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 8006982:	e009      	b.n	8006998 <vTaskStartScheduler+0xb4>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698a:	d105      	bne.n	8006998 <vTaskStartScheduler+0xb4>
 800698c:	f640 022a 	movw	r2, #2090	@ 0x82a
 8006990:	490b      	ldr	r1, [pc, #44]	@ (80069c0 <vTaskStartScheduler+0xdc>)
 8006992:	480c      	ldr	r0, [pc, #48]	@ (80069c4 <vTaskStartScheduler+0xe0>)
 8006994:	f00b fd68 	bl	8012468 <assertFail>
}
 8006998:	bf00      	nop
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	08019fb0 	.word	0x08019fb0
 80069a4:	08007079 	.word	0x08007079
 80069a8:	2000037c 	.word	0x2000037c
 80069ac:	20000378 	.word	0x20000378
 80069b0:	20000364 	.word	0x20000364
 80069b4:	2000035c 	.word	0x2000035c
 80069b8:	2000026c 	.word	0x2000026c
 80069bc:	e0000004 	.word	0xe0000004
 80069c0:	08019e50 	.word	0x08019e50
 80069c4:	08019fb8 	.word	0x08019fb8

080069c8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80069cc:	4b04      	ldr	r3, [pc, #16]	@ (80069e0 <vTaskSuspendAll+0x18>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3301      	adds	r3, #1
 80069d2:	4a03      	ldr	r2, [pc, #12]	@ (80069e0 <vTaskSuspendAll+0x18>)
 80069d4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80069d6:	bf00      	nop
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	20000380 	.word	0x20000380

080069e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80069f2:	4b3f      	ldr	r3, [pc, #252]	@ (8006af0 <xTaskResumeAll+0x10c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d105      	bne.n	8006a06 <xTaskResumeAll+0x22>
 80069fa:	f640 0299 	movw	r2, #2201	@ 0x899
 80069fe:	493d      	ldr	r1, [pc, #244]	@ (8006af4 <xTaskResumeAll+0x110>)
 8006a00:	483d      	ldr	r0, [pc, #244]	@ (8006af8 <xTaskResumeAll+0x114>)
 8006a02:	f00b fd31 	bl	8012468 <assertFail>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006a06:	f001 fa69 	bl	8007edc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006a0a:	4b39      	ldr	r3, [pc, #228]	@ (8006af0 <xTaskResumeAll+0x10c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	4a37      	ldr	r2, [pc, #220]	@ (8006af0 <xTaskResumeAll+0x10c>)
 8006a12:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a14:	4b36      	ldr	r3, [pc, #216]	@ (8006af0 <xTaskResumeAll+0x10c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d161      	bne.n	8006ae0 <xTaskResumeAll+0xfc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a1c:	4b37      	ldr	r3, [pc, #220]	@ (8006afc <xTaskResumeAll+0x118>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d05d      	beq.n	8006ae0 <xTaskResumeAll+0xfc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a24:	e02e      	b.n	8006a84 <xTaskResumeAll+0xa0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a26:	4b36      	ldr	r3, [pc, #216]	@ (8006b00 <xTaskResumeAll+0x11c>)
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3318      	adds	r3, #24
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fe fdb0 	bl	8005598 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe fdab 	bl	8005598 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a46:	2201      	movs	r2, #1
 8006a48:	409a      	lsls	r2, r3
 8006a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8006b04 <xTaskResumeAll+0x120>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	4a2c      	ldr	r2, [pc, #176]	@ (8006b04 <xTaskResumeAll+0x120>)
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a58:	4613      	mov	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4a29      	ldr	r2, [pc, #164]	@ (8006b08 <xTaskResumeAll+0x124>)
 8006a62:	441a      	add	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3304      	adds	r3, #4
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f7fe fd37 	bl	80054de <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a74:	4b25      	ldr	r3, [pc, #148]	@ (8006b0c <xTaskResumeAll+0x128>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d302      	bcc.n	8006a84 <xTaskResumeAll+0xa0>
                    {
                        xYieldPending = pdTRUE;
 8006a7e:	4b24      	ldr	r3, [pc, #144]	@ (8006b10 <xTaskResumeAll+0x12c>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a84:	4b1e      	ldr	r3, [pc, #120]	@ (8006b00 <xTaskResumeAll+0x11c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1cc      	bne.n	8006a26 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <xTaskResumeAll+0xb2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006a92:	f000 fb97 	bl	80071c4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a96:	4b1f      	ldr	r3, [pc, #124]	@ (8006b14 <xTaskResumeAll+0x130>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d010      	beq.n	8006ac4 <xTaskResumeAll+0xe0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006aa2:	f000 f84b 	bl	8006b3c <xTaskIncrementTick>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <xTaskResumeAll+0xce>
                            {
                                xYieldPending = pdTRUE;
 8006aac:	4b18      	ldr	r3, [pc, #96]	@ (8006b10 <xTaskResumeAll+0x12c>)
 8006aae:	2201      	movs	r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f1      	bne.n	8006aa2 <xTaskResumeAll+0xbe>

                        xPendedTicks = 0;
 8006abe:	4b15      	ldr	r3, [pc, #84]	@ (8006b14 <xTaskResumeAll+0x130>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006ac4:	4b12      	ldr	r3, [pc, #72]	@ (8006b10 <xTaskResumeAll+0x12c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d009      	beq.n	8006ae0 <xTaskResumeAll+0xfc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006acc:	2301      	movs	r3, #1
 8006ace:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006ad0:	4b11      	ldr	r3, [pc, #68]	@ (8006b18 <xTaskResumeAll+0x134>)
 8006ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006ae0:	f001 fa2a 	bl	8007f38 <vPortExitCritical>

    return xAlreadyYielded;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000380 	.word	0x20000380
 8006af4:	08019e50 	.word	0x08019e50
 8006af8:	08019fec 	.word	0x08019fec
 8006afc:	20000358 	.word	0x20000358
 8006b00:	20000318 	.word	0x20000318
 8006b04:	20000360 	.word	0x20000360
 8006b08:	20000270 	.word	0x20000270
 8006b0c:	2000026c 	.word	0x2000026c
 8006b10:	2000036c 	.word	0x2000036c
 8006b14:	20000368 	.word	0x20000368
 8006b18:	e000ed04 	.word	0xe000ed04

08006b1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006b22:	4b05      	ldr	r3, [pc, #20]	@ (8006b38 <xTaskGetTickCount+0x1c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006b28:	687b      	ldr	r3, [r7, #4]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	2000035c 	.word	0x2000035c

08006b3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 8006b46:	4a4e      	ldr	r2, [pc, #312]	@ (8006c80 <xTaskIncrementTick+0x144>)
 8006b48:	4b4e      	ldr	r3, [pc, #312]	@ (8006c84 <xTaskIncrementTick+0x148>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6013      	str	r3, [r2, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8006c88 <xTaskIncrementTick+0x14c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f040 8089 	bne.w	8006c6a <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b58:	4b4a      	ldr	r3, [pc, #296]	@ (8006c84 <xTaskIncrementTick+0x148>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006b60:	4a48      	ldr	r2, [pc, #288]	@ (8006c84 <xTaskIncrementTick+0x148>)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d11b      	bne.n	8006ba4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8006b6c:	4b47      	ldr	r3, [pc, #284]	@ (8006c8c <xTaskIncrementTick+0x150>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <xTaskIncrementTick+0x46>
 8006b76:	f640 22ac 	movw	r2, #2732	@ 0xaac
 8006b7a:	4945      	ldr	r1, [pc, #276]	@ (8006c90 <xTaskIncrementTick+0x154>)
 8006b7c:	4845      	ldr	r0, [pc, #276]	@ (8006c94 <xTaskIncrementTick+0x158>)
 8006b7e:	f00b fc73 	bl	8012468 <assertFail>
 8006b82:	4b42      	ldr	r3, [pc, #264]	@ (8006c8c <xTaskIncrementTick+0x150>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	4b43      	ldr	r3, [pc, #268]	@ (8006c98 <xTaskIncrementTick+0x15c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a3f      	ldr	r2, [pc, #252]	@ (8006c8c <xTaskIncrementTick+0x150>)
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	4a41      	ldr	r2, [pc, #260]	@ (8006c98 <xTaskIncrementTick+0x15c>)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	4b41      	ldr	r3, [pc, #260]	@ (8006c9c <xTaskIncrementTick+0x160>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	4a3f      	ldr	r2, [pc, #252]	@ (8006c9c <xTaskIncrementTick+0x160>)
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	f000 fb10 	bl	80071c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8006ca0 <xTaskIncrementTick+0x164>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d348      	bcc.n	8006c40 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bae:	4b37      	ldr	r3, [pc, #220]	@ (8006c8c <xTaskIncrementTick+0x150>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d104      	bne.n	8006bc2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bb8:	4b39      	ldr	r3, [pc, #228]	@ (8006ca0 <xTaskIncrementTick+0x164>)
 8006bba:	f04f 32ff 	mov.w	r2, #4294967295
 8006bbe:	601a      	str	r2, [r3, #0]
                    break;
 8006bc0:	e03e      	b.n	8006c40 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc2:	4b32      	ldr	r3, [pc, #200]	@ (8006c8c <xTaskIncrementTick+0x150>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d203      	bcs.n	8006be2 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006bda:	4a31      	ldr	r2, [pc, #196]	@ (8006ca0 <xTaskIncrementTick+0x164>)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006be0:	e02e      	b.n	8006c40 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	3304      	adds	r3, #4
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe fcd6 	bl	8005598 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	3318      	adds	r3, #24
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fe fccd 	bl	8005598 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c02:	2201      	movs	r2, #1
 8006c04:	409a      	lsls	r2, r3
 8006c06:	4b27      	ldr	r3, [pc, #156]	@ (8006ca4 <xTaskIncrementTick+0x168>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	4a25      	ldr	r2, [pc, #148]	@ (8006ca4 <xTaskIncrementTick+0x168>)
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4a22      	ldr	r2, [pc, #136]	@ (8006ca8 <xTaskIncrementTick+0x16c>)
 8006c1e:	441a      	add	r2, r3
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	3304      	adds	r3, #4
 8006c24:	4619      	mov	r1, r3
 8006c26:	4610      	mov	r0, r2
 8006c28:	f7fe fc59 	bl	80054de <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c30:	4b1e      	ldr	r3, [pc, #120]	@ (8006cac <xTaskIncrementTick+0x170>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d3b9      	bcc.n	8006bae <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c3e:	e7b6      	b.n	8006bae <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c40:	4b1a      	ldr	r3, [pc, #104]	@ (8006cac <xTaskIncrementTick+0x170>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c46:	4918      	ldr	r1, [pc, #96]	@ (8006ca8 <xTaskIncrementTick+0x16c>)
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	440b      	add	r3, r1
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d901      	bls.n	8006c5c <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006c5c:	4b14      	ldr	r3, [pc, #80]	@ (8006cb0 <xTaskIncrementTick+0x174>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d007      	beq.n	8006c74 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8006c64:	2301      	movs	r3, #1
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	e004      	b.n	8006c74 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006c6a:	4b12      	ldr	r3, [pc, #72]	@ (8006cb4 <xTaskIncrementTick+0x178>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	4a10      	ldr	r2, [pc, #64]	@ (8006cb4 <xTaskIncrementTick+0x178>)
 8006c72:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006c74:	697b      	ldr	r3, [r7, #20]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	e0000008 	.word	0xe0000008
 8006c84:	2000035c 	.word	0x2000035c
 8006c88:	20000380 	.word	0x20000380
 8006c8c:	20000310 	.word	0x20000310
 8006c90:	08019e50 	.word	0x08019e50
 8006c94:	0801a020 	.word	0x0801a020
 8006c98:	20000314 	.word	0x20000314
 8006c9c:	20000370 	.word	0x20000370
 8006ca0:	20000378 	.word	0x20000378
 8006ca4:	20000360 	.word	0x20000360
 8006ca8:	20000270 	.word	0x20000270
 8006cac:	2000026c 	.word	0x2000026c
 8006cb0:	2000036c 	.word	0x2000036c
 8006cb4:	20000368 	.word	0x20000368

08006cb8 <vTaskSetApplicationTaskTag>:

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

    void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
                                     TaskHookFunction_t pxHookFunction )
    {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
        TCB_t * xTCB;

        /* If xTask is NULL then it is the task hook of the calling task that is
         * getting set. */
        if( xTask == NULL )
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d103      	bne.n	8006cd0 <vTaskSetApplicationTaskTag+0x18>
        {
            xTCB = ( TCB_t * ) pxCurrentTCB;
 8006cc8:	4b08      	ldr	r3, [pc, #32]	@ (8006cec <vTaskSetApplicationTaskTag+0x34>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e001      	b.n	8006cd4 <vTaskSetApplicationTaskTag+0x1c>
        }
        else
        {
            xTCB = xTask;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	60fb      	str	r3, [r7, #12]
        }

        /* Save the hook function in the TCB.  A critical section is required as
         * the value can be accessed from an interrupt. */
        taskENTER_CRITICAL();
 8006cd4:	f001 f902 	bl	8007edc <vPortEnterCritical>
        {
            xTCB->pxTaskTag = pxHookFunction;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        taskEXIT_CRITICAL();
 8006cde:	f001 f92b 	bl	8007f38 <vPortExitCritical>
    }
 8006ce2:	bf00      	nop
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	2000026c 	.word	0x2000026c

08006cf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8006de8 <vTaskSwitchContext+0xf8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8006dec <vTaskSwitchContext+0xfc>)
 8006d00:	2201      	movs	r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006d04:	e06b      	b.n	8006dde <vTaskSwitchContext+0xee>
        xYieldPending = pdFALSE;
 8006d06:	4b39      	ldr	r3, [pc, #228]	@ (8006dec <vTaskSwitchContext+0xfc>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006d0c:	f004 ff90 	bl	800bc30 <usecTimestamp>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4b36      	ldr	r3, [pc, #216]	@ (8006df0 <vTaskSwitchContext+0x100>)
 8006d16:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006d18:	4b35      	ldr	r3, [pc, #212]	@ (8006df0 <vTaskSwitchContext+0x100>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	4b35      	ldr	r3, [pc, #212]	@ (8006df4 <vTaskSwitchContext+0x104>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d909      	bls.n	8006d38 <vTaskSwitchContext+0x48>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006d24:	4b32      	ldr	r3, [pc, #200]	@ (8006df0 <vTaskSwitchContext+0x100>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	4b32      	ldr	r3, [pc, #200]	@ (8006df4 <vTaskSwitchContext+0x104>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	1ad1      	subs	r1, r2, r3
 8006d2e:	4b32      	ldr	r3, [pc, #200]	@ (8006df8 <vTaskSwitchContext+0x108>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006d34:	440a      	add	r2, r1
 8006d36:	659a      	str	r2, [r3, #88]	@ 0x58
                ulTaskSwitchedInTime = ulTotalRunTime;
 8006d38:	4b2d      	ldr	r3, [pc, #180]	@ (8006df0 <vTaskSwitchContext+0x100>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8006df4 <vTaskSwitchContext+0x104>)
 8006d3e:	6013      	str	r3, [r2, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8006d40:	4b2d      	ldr	r3, [pc, #180]	@ (8006df8 <vTaskSwitchContext+0x108>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	4b2c      	ldr	r3, [pc, #176]	@ (8006df8 <vTaskSwitchContext+0x108>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d808      	bhi.n	8006d62 <vTaskSwitchContext+0x72>
 8006d50:	4b29      	ldr	r3, [pc, #164]	@ (8006df8 <vTaskSwitchContext+0x108>)
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4b28      	ldr	r3, [pc, #160]	@ (8006df8 <vTaskSwitchContext+0x108>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3334      	adds	r3, #52	@ 0x34
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	f006 fa03 	bl	800d168 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d62:	4b26      	ldr	r3, [pc, #152]	@ (8006dfc <vTaskSwitchContext+0x10c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	fab3 f383 	clz	r3, r3
 8006d6e:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	f1c3 031f 	rsb	r3, r3, #31
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	4921      	ldr	r1, [pc, #132]	@ (8006e00 <vTaskSwitchContext+0x110>)
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d105      	bne.n	8006d98 <vTaskSwitchContext+0xa8>
 8006d8c:	f640 32e7 	movw	r2, #3047	@ 0xbe7
 8006d90:	491c      	ldr	r1, [pc, #112]	@ (8006e04 <vTaskSwitchContext+0x114>)
 8006d92:	481d      	ldr	r0, [pc, #116]	@ (8006e08 <vTaskSwitchContext+0x118>)
 8006d94:	f00b fb68 	bl	8012468 <assertFail>
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4a17      	ldr	r2, [pc, #92]	@ (8006e00 <vTaskSwitchContext+0x110>)
 8006da4:	4413      	add	r3, r2
 8006da6:	60bb      	str	r3, [r7, #8]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	605a      	str	r2, [r3, #4]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	3308      	adds	r3, #8
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d104      	bne.n	8006dc8 <vTaskSwitchContext+0xd8>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	605a      	str	r2, [r3, #4]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	4a0a      	ldr	r2, [pc, #40]	@ (8006df8 <vTaskSwitchContext+0x108>)
 8006dd0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006dd2:	4b09      	ldr	r3, [pc, #36]	@ (8006df8 <vTaskSwitchContext+0x108>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3334      	adds	r3, #52	@ 0x34
 8006dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8006e0c <vTaskSwitchContext+0x11c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6013      	str	r3, [r2, #0]
}
 8006dde:	bf00      	nop
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20000380 	.word	0x20000380
 8006dec:	2000036c 	.word	0x2000036c
 8006df0:	20000388 	.word	0x20000388
 8006df4:	20000384 	.word	0x20000384
 8006df8:	2000026c 	.word	0x2000026c
 8006dfc:	20000360 	.word	0x20000360
 8006e00:	20000270 	.word	0x20000270
 8006e04:	08019e50 	.word	0x08019e50
 8006e08:	0801a04c 	.word	0x0801a04c
 8006e0c:	e0000004 	.word	0xe0000004

08006e10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d105      	bne.n	8006e2c <vTaskPlaceOnEventList+0x1c>
 8006e20:	f640 4201 	movw	r2, #3073	@ 0xc01
 8006e24:	4909      	ldr	r1, [pc, #36]	@ (8006e4c <vTaskPlaceOnEventList+0x3c>)
 8006e26:	480a      	ldr	r0, [pc, #40]	@ (8006e50 <vTaskPlaceOnEventList+0x40>)
 8006e28:	f00b fb1e 	bl	8012468 <assertFail>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e2c:	4b09      	ldr	r3, [pc, #36]	@ (8006e54 <vTaskPlaceOnEventList+0x44>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3318      	adds	r3, #24
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7fe fb76 	bl	8005526 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	6838      	ldr	r0, [r7, #0]
 8006e3e:	f000 fb85 	bl	800754c <prvAddCurrentTaskToDelayedList>
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08019e50 	.word	0x08019e50
 8006e50:	0801a094 	.word	0x0801a094
 8006e54:	2000026c 	.word	0x2000026c

08006e58 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d105      	bne.n	8006e76 <vTaskPlaceOnEventListRestricted+0x1e>
 8006e6a:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8006e6e:	490c      	ldr	r1, [pc, #48]	@ (8006ea0 <vTaskPlaceOnEventListRestricted+0x48>)
 8006e70:	480c      	ldr	r0, [pc, #48]	@ (8006ea4 <vTaskPlaceOnEventListRestricted+0x4c>)
 8006e72:	f00b faf9 	bl	8012468 <assertFail>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea8 <vTaskPlaceOnEventListRestricted+0x50>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3318      	adds	r3, #24
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7fe fb2d 	bl	80054de <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <vTaskPlaceOnEventListRestricted+0x38>
        {
            xTicksToWait = portMAX_DELAY;
 8006e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e8e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	68b8      	ldr	r0, [r7, #8]
 8006e94:	f000 fb5a 	bl	800754c <prvAddCurrentTaskToDelayedList>
    }
 8006e98:	bf00      	nop
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	08019e50 	.word	0x08019e50
 8006ea4:	0801a094 	.word	0x0801a094
 8006ea8:	2000026c 	.word	0x2000026c

08006eac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d105      	bne.n	8006ece <xTaskRemoveFromEventList+0x22>
 8006ec2:	f44f 6246 	mov.w	r2, #3168	@ 0xc60
 8006ec6:	4922      	ldr	r1, [pc, #136]	@ (8006f50 <xTaskRemoveFromEventList+0xa4>)
 8006ec8:	4822      	ldr	r0, [pc, #136]	@ (8006f54 <xTaskRemoveFromEventList+0xa8>)
 8006eca:	f00b facd 	bl	8012468 <assertFail>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	3318      	adds	r3, #24
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe fb60 	bl	8005598 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8006f58 <xTaskRemoveFromEventList+0xac>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d11c      	bne.n	8006f1a <xTaskRemoveFromEventList+0x6e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fe fb57 	bl	8005598 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eee:	2201      	movs	r2, #1
 8006ef0:	409a      	lsls	r2, r3
 8006ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8006f5c <xTaskRemoveFromEventList+0xb0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	4a18      	ldr	r2, [pc, #96]	@ (8006f5c <xTaskRemoveFromEventList+0xb0>)
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4a15      	ldr	r2, [pc, #84]	@ (8006f60 <xTaskRemoveFromEventList+0xb4>)
 8006f0a:	441a      	add	r2, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4619      	mov	r1, r3
 8006f12:	4610      	mov	r0, r2
 8006f14:	f7fe fae3 	bl	80054de <vListInsertEnd>
 8006f18:	e005      	b.n	8006f26 <xTaskRemoveFromEventList+0x7a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	3318      	adds	r3, #24
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4810      	ldr	r0, [pc, #64]	@ (8006f64 <xTaskRemoveFromEventList+0xb8>)
 8006f22:	f7fe fadc 	bl	80054de <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f68 <xTaskRemoveFromEventList+0xbc>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d905      	bls.n	8006f40 <xTaskRemoveFromEventList+0x94>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006f34:	2301      	movs	r3, #1
 8006f36:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006f38:	4b0c      	ldr	r3, [pc, #48]	@ (8006f6c <xTaskRemoveFromEventList+0xc0>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e001      	b.n	8006f44 <xTaskRemoveFromEventList+0x98>
    }
    else
    {
        xReturn = pdFALSE;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8006f44:	68fb      	ldr	r3, [r7, #12]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	08019e50 	.word	0x08019e50
 8006f54:	0801a0bc 	.word	0x0801a0bc
 8006f58:	20000380 	.word	0x20000380
 8006f5c:	20000360 	.word	0x20000360
 8006f60:	20000270 	.word	0x20000270
 8006f64:	20000318 	.word	0x20000318
 8006f68:	2000026c 	.word	0x2000026c
 8006f6c:	2000036c 	.word	0x2000036c

08006f70 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f78:	4b06      	ldr	r3, [pc, #24]	@ (8006f94 <vTaskInternalSetTimeOutState+0x24>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006f80:	4b05      	ldr	r3, [pc, #20]	@ (8006f98 <vTaskInternalSetTimeOutState+0x28>)
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	605a      	str	r2, [r3, #4]
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	20000370 	.word	0x20000370
 8006f98:	2000035c 	.word	0x2000035c

08006f9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d105      	bne.n	8006fb8 <xTaskCheckForTimeOut+0x1c>
 8006fac:	f640 42db 	movw	r2, #3291	@ 0xcdb
 8006fb0:	4926      	ldr	r1, [pc, #152]	@ (800704c <xTaskCheckForTimeOut+0xb0>)
 8006fb2:	4827      	ldr	r0, [pc, #156]	@ (8007050 <xTaskCheckForTimeOut+0xb4>)
 8006fb4:	f00b fa58 	bl	8012468 <assertFail>
    configASSERT( pxTicksToWait );
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d105      	bne.n	8006fca <xTaskCheckForTimeOut+0x2e>
 8006fbe:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 8006fc2:	4922      	ldr	r1, [pc, #136]	@ (800704c <xTaskCheckForTimeOut+0xb0>)
 8006fc4:	4823      	ldr	r0, [pc, #140]	@ (8007054 <xTaskCheckForTimeOut+0xb8>)
 8006fc6:	f00b fa4f 	bl	8012468 <assertFail>

    taskENTER_CRITICAL();
 8006fca:	f000 ff87 	bl	8007edc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006fce:	4b22      	ldr	r3, [pc, #136]	@ (8007058 <xTaskCheckForTimeOut+0xbc>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe6:	d102      	bne.n	8006fee <xTaskCheckForTimeOut+0x52>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e026      	b.n	800703c <xTaskCheckForTimeOut+0xa0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800705c <xTaskCheckForTimeOut+0xc0>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d00a      	beq.n	8007010 <xTaskCheckForTimeOut+0x74>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	429a      	cmp	r2, r3
 8007002:	d305      	bcc.n	8007010 <xTaskCheckForTimeOut+0x74>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007004:	2301      	movs	r3, #1
 8007006:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	e015      	b.n	800703c <xTaskCheckForTimeOut+0xa0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	429a      	cmp	r2, r3
 8007018:	d20b      	bcs.n	8007032 <xTaskCheckForTimeOut+0x96>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	1ad2      	subs	r2, r2, r3
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff ffa2 	bl	8006f70 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800702c:	2300      	movs	r3, #0
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	e004      	b.n	800703c <xTaskCheckForTimeOut+0xa0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007038:	2301      	movs	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800703c:	f000 ff7c 	bl	8007f38 <vPortExitCritical>

    return xReturn;
 8007040:	697b      	ldr	r3, [r7, #20]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	08019e50 	.word	0x08019e50
 8007050:	0801a0ec 	.word	0x0801a0ec
 8007054:	0801a0f8 	.word	0x0801a0f8
 8007058:	2000035c 	.word	0x2000035c
 800705c:	20000370 	.word	0x20000370

08007060 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007064:	4b03      	ldr	r3, [pc, #12]	@ (8007074 <vTaskMissedYield+0x14>)
 8007066:	2201      	movs	r2, #1
 8007068:	601a      	str	r2, [r3, #0]
}
 800706a:	bf00      	nop
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	2000036c 	.word	0x2000036c

08007078 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007080:	f000 f844 	bl	800710c <prvCheckTasksWaitingTermination>
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8007084:	f006 f85a 	bl	800d13c <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8007088:	bf00      	nop
 800708a:	e7f9      	b.n	8007080 <prvIdleTask+0x8>

0800708c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007092:	2300      	movs	r3, #0
 8007094:	607b      	str	r3, [r7, #4]
 8007096:	e00c      	b.n	80070b2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4a12      	ldr	r2, [pc, #72]	@ (80070ec <prvInitialiseTaskLists+0x60>)
 80070a4:	4413      	add	r3, r2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe f9ec 	bl	8005484 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3301      	adds	r3, #1
 80070b0:	607b      	str	r3, [r7, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b05      	cmp	r3, #5
 80070b6:	d9ef      	bls.n	8007098 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80070b8:	480d      	ldr	r0, [pc, #52]	@ (80070f0 <prvInitialiseTaskLists+0x64>)
 80070ba:	f7fe f9e3 	bl	8005484 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80070be:	480d      	ldr	r0, [pc, #52]	@ (80070f4 <prvInitialiseTaskLists+0x68>)
 80070c0:	f7fe f9e0 	bl	8005484 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80070c4:	480c      	ldr	r0, [pc, #48]	@ (80070f8 <prvInitialiseTaskLists+0x6c>)
 80070c6:	f7fe f9dd 	bl	8005484 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80070ca:	480c      	ldr	r0, [pc, #48]	@ (80070fc <prvInitialiseTaskLists+0x70>)
 80070cc:	f7fe f9da 	bl	8005484 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80070d0:	480b      	ldr	r0, [pc, #44]	@ (8007100 <prvInitialiseTaskLists+0x74>)
 80070d2:	f7fe f9d7 	bl	8005484 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80070d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007104 <prvInitialiseTaskLists+0x78>)
 80070d8:	4a05      	ldr	r2, [pc, #20]	@ (80070f0 <prvInitialiseTaskLists+0x64>)
 80070da:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007108 <prvInitialiseTaskLists+0x7c>)
 80070de:	4a05      	ldr	r2, [pc, #20]	@ (80070f4 <prvInitialiseTaskLists+0x68>)
 80070e0:	601a      	str	r2, [r3, #0]
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000270 	.word	0x20000270
 80070f0:	200002e8 	.word	0x200002e8
 80070f4:	200002fc 	.word	0x200002fc
 80070f8:	20000318 	.word	0x20000318
 80070fc:	2000032c 	.word	0x2000032c
 8007100:	20000344 	.word	0x20000344
 8007104:	20000310 	.word	0x20000310
 8007108:	20000314 	.word	0x20000314

0800710c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007112:	e019      	b.n	8007148 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007114:	f000 fee2 	bl	8007edc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007118:	4b10      	ldr	r3, [pc, #64]	@ (800715c <prvCheckTasksWaitingTermination+0x50>)
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3304      	adds	r3, #4
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe fa37 	bl	8005598 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800712a:	4b0d      	ldr	r3, [pc, #52]	@ (8007160 <prvCheckTasksWaitingTermination+0x54>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3b01      	subs	r3, #1
 8007130:	4a0b      	ldr	r2, [pc, #44]	@ (8007160 <prvCheckTasksWaitingTermination+0x54>)
 8007132:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007134:	4b0b      	ldr	r3, [pc, #44]	@ (8007164 <prvCheckTasksWaitingTermination+0x58>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3b01      	subs	r3, #1
 800713a:	4a0a      	ldr	r2, [pc, #40]	@ (8007164 <prvCheckTasksWaitingTermination+0x58>)
 800713c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800713e:	f000 fefb 	bl	8007f38 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f810 	bl	8007168 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007148:	4b06      	ldr	r3, [pc, #24]	@ (8007164 <prvCheckTasksWaitingTermination+0x58>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e1      	bne.n	8007114 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	2000032c 	.word	0x2000032c
 8007160:	20000358 	.word	0x20000358
 8007164:	20000340 	.word	0x20000340

08007168 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007176:	2b00      	cmp	r3, #0
 8007178:	d108      	bne.n	800718c <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717e:	4618      	mov	r0, r3
 8007180:	f001 f886 	bl	8008290 <vPortFree>
                    vPortFree( pxTCB );
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 f883 	bl	8008290 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800718a:	e013      	b.n	80071b4 <prvDeleteTCB+0x4c>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007192:	2b01      	cmp	r3, #1
 8007194:	d103      	bne.n	800719e <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 f87a 	bl	8008290 <vPortFree>
    }
 800719c:	e00a      	b.n	80071b4 <prvDeleteTCB+0x4c>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d005      	beq.n	80071b4 <prvDeleteTCB+0x4c>
 80071a8:	f640 727a 	movw	r2, #3962	@ 0xf7a
 80071ac:	4903      	ldr	r1, [pc, #12]	@ (80071bc <prvDeleteTCB+0x54>)
 80071ae:	4804      	ldr	r0, [pc, #16]	@ (80071c0 <prvDeleteTCB+0x58>)
 80071b0:	f00b f95a 	bl	8012468 <assertFail>
    }
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	08019e50 	.word	0x08019e50
 80071c0:	0801a108 	.word	0x0801a108

080071c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071c8:	4b0a      	ldr	r3, [pc, #40]	@ (80071f4 <prvResetNextTaskUnblockTime+0x30>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d104      	bne.n	80071dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80071d2:	4b09      	ldr	r3, [pc, #36]	@ (80071f8 <prvResetNextTaskUnblockTime+0x34>)
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295
 80071d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80071da:	e005      	b.n	80071e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071dc:	4b05      	ldr	r3, [pc, #20]	@ (80071f4 <prvResetNextTaskUnblockTime+0x30>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a04      	ldr	r2, [pc, #16]	@ (80071f8 <prvResetNextTaskUnblockTime+0x34>)
 80071e6:	6013      	str	r3, [r2, #0]
}
 80071e8:	bf00      	nop
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20000310 	.word	0x20000310
 80071f8:	20000378 	.word	0x20000378

080071fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007202:	4b0b      	ldr	r3, [pc, #44]	@ (8007230 <xTaskGetSchedulerState+0x34>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d102      	bne.n	8007210 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800720a:	2301      	movs	r3, #1
 800720c:	607b      	str	r3, [r7, #4]
 800720e:	e008      	b.n	8007222 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007210:	4b08      	ldr	r3, [pc, #32]	@ (8007234 <xTaskGetSchedulerState+0x38>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007218:	2302      	movs	r3, #2
 800721a:	607b      	str	r3, [r7, #4]
 800721c:	e001      	b.n	8007222 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800721e:	2300      	movs	r3, #0
 8007220:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007222:	687b      	ldr	r3, [r7, #4]
    }
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	20000364 	.word	0x20000364
 8007234:	20000380 	.word	0x20000380

08007238 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d05e      	beq.n	800730c <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007252:	4b31      	ldr	r3, [pc, #196]	@ (8007318 <xTaskPriorityInherit+0xe0>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007258:	429a      	cmp	r2, r3
 800725a:	d24e      	bcs.n	80072fa <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	db06      	blt.n	8007272 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007264:	4b2c      	ldr	r3, [pc, #176]	@ (8007318 <xTaskPriorityInherit+0xe0>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726a:	f1c3 0206 	rsb	r2, r3, #6
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	6959      	ldr	r1, [r3, #20]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800727a:	4613      	mov	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4a26      	ldr	r2, [pc, #152]	@ (800731c <xTaskPriorityInherit+0xe4>)
 8007284:	4413      	add	r3, r2
 8007286:	4299      	cmp	r1, r3
 8007288:	d12f      	bne.n	80072ea <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	3304      	adds	r3, #4
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe f982 	bl	8005598 <uxListRemove>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10a      	bne.n	80072b0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729e:	2201      	movs	r2, #1
 80072a0:	fa02 f303 	lsl.w	r3, r2, r3
 80072a4:	43da      	mvns	r2, r3
 80072a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007320 <xTaskPriorityInherit+0xe8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4013      	ands	r3, r2
 80072ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007320 <xTaskPriorityInherit+0xe8>)
 80072ae:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072b0:	4b19      	ldr	r3, [pc, #100]	@ (8007318 <xTaskPriorityInherit+0xe0>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072be:	2201      	movs	r2, #1
 80072c0:	409a      	lsls	r2, r3
 80072c2:	4b17      	ldr	r3, [pc, #92]	@ (8007320 <xTaskPriorityInherit+0xe8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	4a15      	ldr	r2, [pc, #84]	@ (8007320 <xTaskPriorityInherit+0xe8>)
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d0:	4613      	mov	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4a10      	ldr	r2, [pc, #64]	@ (800731c <xTaskPriorityInherit+0xe4>)
 80072da:	441a      	add	r2, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3304      	adds	r3, #4
 80072e0:	4619      	mov	r1, r3
 80072e2:	4610      	mov	r0, r2
 80072e4:	f7fe f8fb 	bl	80054de <vListInsertEnd>
 80072e8:	e004      	b.n	80072f4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007318 <xTaskPriorityInherit+0xe0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80072f4:	2301      	movs	r3, #1
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	e008      	b.n	800730c <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072fe:	4b06      	ldr	r3, [pc, #24]	@ (8007318 <xTaskPriorityInherit+0xe0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007304:	429a      	cmp	r2, r3
 8007306:	d201      	bcs.n	800730c <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8007308:	2301      	movs	r3, #1
 800730a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800730c:	68fb      	ldr	r3, [r7, #12]
    }
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	2000026c 	.word	0x2000026c
 800731c:	20000270 	.word	0x20000270
 8007320:	20000360 	.word	0x20000360

08007324 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8007330:	2300      	movs	r3, #0
 8007332:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d059      	beq.n	80073ee <xTaskPriorityDisinherit+0xca>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800733a:	4b2f      	ldr	r3, [pc, #188]	@ (80073f8 <xTaskPriorityDisinherit+0xd4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	429a      	cmp	r2, r3
 8007342:	d005      	beq.n	8007350 <xTaskPriorityDisinherit+0x2c>
 8007344:	f241 022d 	movw	r2, #4141	@ 0x102d
 8007348:	492c      	ldr	r1, [pc, #176]	@ (80073fc <xTaskPriorityDisinherit+0xd8>)
 800734a:	482d      	ldr	r0, [pc, #180]	@ (8007400 <xTaskPriorityDisinherit+0xdc>)
 800734c:	f00b f88c 	bl	8012468 <assertFail>
            configASSERT( pxTCB->uxMutexesHeld );
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007354:	2b00      	cmp	r3, #0
 8007356:	d105      	bne.n	8007364 <xTaskPriorityDisinherit+0x40>
 8007358:	f241 022e 	movw	r2, #4142	@ 0x102e
 800735c:	4927      	ldr	r1, [pc, #156]	@ (80073fc <xTaskPriorityDisinherit+0xd8>)
 800735e:	4829      	ldr	r0, [pc, #164]	@ (8007404 <xTaskPriorityDisinherit+0xe0>)
 8007360:	f00b f882 	bl	8012468 <assertFail>
            ( pxTCB->uxMutexesHeld )--;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007368:	1e5a      	subs	r2, r3, #1
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007376:	429a      	cmp	r2, r3
 8007378:	d039      	beq.n	80073ee <xTaskPriorityDisinherit+0xca>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800737e:	2b00      	cmp	r3, #0
 8007380:	d135      	bne.n	80073ee <xTaskPriorityDisinherit+0xca>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	3304      	adds	r3, #4
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe f906 	bl	8005598 <uxListRemove>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10a      	bne.n	80073a8 <xTaskPriorityDisinherit+0x84>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007396:	2201      	movs	r2, #1
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	43da      	mvns	r2, r3
 800739e:	4b1a      	ldr	r3, [pc, #104]	@ (8007408 <xTaskPriorityDisinherit+0xe4>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4013      	ands	r3, r2
 80073a4:	4a18      	ldr	r2, [pc, #96]	@ (8007408 <xTaskPriorityDisinherit+0xe4>)
 80073a6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b4:	f1c3 0206 	rsb	r2, r3, #6
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	2201      	movs	r2, #1
 80073c2:	409a      	lsls	r2, r3
 80073c4:	4b10      	ldr	r3, [pc, #64]	@ (8007408 <xTaskPriorityDisinherit+0xe4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	4a0f      	ldr	r2, [pc, #60]	@ (8007408 <xTaskPriorityDisinherit+0xe4>)
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d2:	4613      	mov	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4a0c      	ldr	r2, [pc, #48]	@ (800740c <xTaskPriorityDisinherit+0xe8>)
 80073dc:	441a      	add	r2, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	3304      	adds	r3, #4
 80073e2:	4619      	mov	r1, r3
 80073e4:	4610      	mov	r0, r2
 80073e6:	f7fe f87a 	bl	80054de <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80073ea:	2301      	movs	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80073ee:	68fb      	ldr	r3, [r7, #12]
    }
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	2000026c 	.word	0x2000026c
 80073fc:	08019e50 	.word	0x08019e50
 8007400:	0801a150 	.word	0x0801a150
 8007404:	0801a168 	.word	0x0801a168
 8007408:	20000360 	.word	0x20000360
 800740c:	20000270 	.word	0x20000270

08007410 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	613b      	str	r3, [r7, #16]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800741e:	2301      	movs	r3, #1
 8007420:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d06d      	beq.n	8007504 <vTaskPriorityDisinheritAfterTimeout+0xf4>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800742c:	2b00      	cmp	r3, #0
 800742e:	d105      	bne.n	800743c <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8007430:	f241 027d 	movw	r2, #4221	@ 0x107d
 8007434:	4935      	ldr	r1, [pc, #212]	@ (800750c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007436:	4836      	ldr	r0, [pc, #216]	@ (8007510 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007438:	f00b f816 	bl	8012468 <assertFail>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d902      	bls.n	800744c <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	e002      	b.n	8007452 <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007450:	617b      	str	r3, [r7, #20]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	429a      	cmp	r2, r3
 800745a:	d053      	beq.n	8007504 <vTaskPriorityDisinheritAfterTimeout+0xf4>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	429a      	cmp	r2, r3
 8007464:	d14e      	bne.n	8007504 <vTaskPriorityDisinheritAfterTimeout+0xf4>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8007466:	4b2b      	ldr	r3, [pc, #172]	@ (8007514 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	429a      	cmp	r2, r3
 800746e:	d105      	bne.n	800747c <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8007470:	f241 0298 	movw	r2, #4248	@ 0x1098
 8007474:	4925      	ldr	r1, [pc, #148]	@ (800750c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007476:	4828      	ldr	r0, [pc, #160]	@ (8007518 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007478:	f00a fff6 	bl	8012468 <assertFail>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007480:	60bb      	str	r3, [r7, #8]
                    pxTCB->uxPriority = uxPriorityToUse;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	db04      	blt.n	800749a <vTaskPriorityDisinheritAfterTimeout+0x8a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f1c3 0206 	rsb	r2, r3, #6
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	6959      	ldr	r1, [r3, #20]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	4613      	mov	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4a1c      	ldr	r2, [pc, #112]	@ (800751c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80074aa:	4413      	add	r3, r2
 80074ac:	4299      	cmp	r1, r3
 80074ae:	d129      	bne.n	8007504 <vTaskPriorityDisinheritAfterTimeout+0xf4>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	3304      	adds	r3, #4
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe f86f 	bl	8005598 <uxListRemove>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10a      	bne.n	80074d6 <vTaskPriorityDisinheritAfterTimeout+0xc6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c4:	2201      	movs	r2, #1
 80074c6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ca:	43da      	mvns	r2, r3
 80074cc:	4b14      	ldr	r3, [pc, #80]	@ (8007520 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4013      	ands	r3, r2
 80074d2:	4a13      	ldr	r2, [pc, #76]	@ (8007520 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80074d4:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074da:	2201      	movs	r2, #1
 80074dc:	409a      	lsls	r2, r3
 80074de:	4b10      	ldr	r3, [pc, #64]	@ (8007520 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	4a0e      	ldr	r2, [pc, #56]	@ (8007520 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80074e6:	6013      	str	r3, [r2, #0]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ec:	4613      	mov	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4a09      	ldr	r2, [pc, #36]	@ (800751c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80074f6:	441a      	add	r2, r3
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	3304      	adds	r3, #4
 80074fc:	4619      	mov	r1, r3
 80074fe:	4610      	mov	r0, r2
 8007500:	f7fd ffed 	bl	80054de <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007504:	bf00      	nop
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	08019e50 	.word	0x08019e50
 8007510:	0801a168 	.word	0x0801a168
 8007514:	2000026c 	.word	0x2000026c
 8007518:	0801a180 	.word	0x0801a180
 800751c:	20000270 	.word	0x20000270
 8007520:	20000360 	.word	0x20000360

08007524 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8007528:	4b07      	ldr	r3, [pc, #28]	@ (8007548 <pvTaskIncrementMutexHeldCount+0x24>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d004      	beq.n	800753a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8007530:	4b05      	ldr	r3, [pc, #20]	@ (8007548 <pvTaskIncrementMutexHeldCount+0x24>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007536:	3201      	adds	r2, #1
 8007538:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 800753a:	4b03      	ldr	r3, [pc, #12]	@ (8007548 <pvTaskIncrementMutexHeldCount+0x24>)
 800753c:	681b      	ldr	r3, [r3, #0]
    }
 800753e:	4618      	mov	r0, r3
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	2000026c 	.word	0x2000026c

0800754c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007556:	4b29      	ldr	r3, [pc, #164]	@ (80075fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800755c:	4b28      	ldr	r3, [pc, #160]	@ (8007600 <prvAddCurrentTaskToDelayedList+0xb4>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3304      	adds	r3, #4
 8007562:	4618      	mov	r0, r3
 8007564:	f7fe f818 	bl	8005598 <uxListRemove>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10b      	bne.n	8007586 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800756e:	4b24      	ldr	r3, [pc, #144]	@ (8007600 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	2201      	movs	r2, #1
 8007576:	fa02 f303 	lsl.w	r3, r2, r3
 800757a:	43da      	mvns	r2, r3
 800757c:	4b21      	ldr	r3, [pc, #132]	@ (8007604 <prvAddCurrentTaskToDelayedList+0xb8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4013      	ands	r3, r2
 8007582:	4a20      	ldr	r2, [pc, #128]	@ (8007604 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007584:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758c:	d10a      	bne.n	80075a4 <prvAddCurrentTaskToDelayedList+0x58>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d007      	beq.n	80075a4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007594:	4b1a      	ldr	r3, [pc, #104]	@ (8007600 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3304      	adds	r3, #4
 800759a:	4619      	mov	r1, r3
 800759c:	481a      	ldr	r0, [pc, #104]	@ (8007608 <prvAddCurrentTaskToDelayedList+0xbc>)
 800759e:	f7fd ff9e 	bl	80054de <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80075a2:	e026      	b.n	80075f2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4413      	add	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075ac:	4b14      	ldr	r3, [pc, #80]	@ (8007600 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d209      	bcs.n	80075d0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075bc:	4b13      	ldr	r3, [pc, #76]	@ (800760c <prvAddCurrentTaskToDelayedList+0xc0>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007600 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3304      	adds	r3, #4
 80075c6:	4619      	mov	r1, r3
 80075c8:	4610      	mov	r0, r2
 80075ca:	f7fd ffac 	bl	8005526 <vListInsert>
}
 80075ce:	e010      	b.n	80075f2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007610 <prvAddCurrentTaskToDelayedList+0xc4>)
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007600 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3304      	adds	r3, #4
 80075da:	4619      	mov	r1, r3
 80075dc:	4610      	mov	r0, r2
 80075de:	f7fd ffa2 	bl	8005526 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80075e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007614 <prvAddCurrentTaskToDelayedList+0xc8>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d202      	bcs.n	80075f2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80075ec:	4a09      	ldr	r2, [pc, #36]	@ (8007614 <prvAddCurrentTaskToDelayedList+0xc8>)
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6013      	str	r3, [r2, #0]
}
 80075f2:	bf00      	nop
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	2000035c 	.word	0x2000035c
 8007600:	2000026c 	.word	0x2000026c
 8007604:	20000360 	.word	0x20000360
 8007608:	20000344 	.word	0x20000344
 800760c:	20000314 	.word	0x20000314
 8007610:	20000310 	.word	0x20000310
 8007614:	20000378 	.word	0x20000378

08007618 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007622:	f000 fb03 	bl	8007c2c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007626:	4b19      	ldr	r3, [pc, #100]	@ (800768c <xTimerCreateTimerTask+0x74>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d020      	beq.n	8007670 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	60bb      	str	r3, [r7, #8]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	607b      	str	r3, [r7, #4]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007636:	463a      	mov	r2, r7
 8007638:	1d39      	adds	r1, r7, #4
 800763a:	f107 0308 	add.w	r3, r7, #8
 800763e:	4618      	mov	r0, r3
 8007640:	f005 fc78 	bl	800cf34 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	9202      	str	r2, [sp, #8]
 800764c:	9301      	str	r3, [sp, #4]
 800764e:	2301      	movs	r3, #1
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	2300      	movs	r3, #0
 8007654:	460a      	mov	r2, r1
 8007656:	490e      	ldr	r1, [pc, #56]	@ (8007690 <xTimerCreateTimerTask+0x78>)
 8007658:	480e      	ldr	r0, [pc, #56]	@ (8007694 <xTimerCreateTimerTask+0x7c>)
 800765a:	f7fe fef1 	bl	8006440 <xTaskCreateStatic>
 800765e:	4603      	mov	r3, r0
 8007660:	4a0d      	ldr	r2, [pc, #52]	@ (8007698 <xTimerCreateTimerTask+0x80>)
 8007662:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8007664:	4b0c      	ldr	r3, [pc, #48]	@ (8007698 <xTimerCreateTimerTask+0x80>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <xTimerCreateTimerTask+0x58>
                    {
                        xReturn = pdPASS;
 800766c:	2301      	movs	r3, #1
 800766e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d105      	bne.n	8007682 <xTimerCreateTimerTask+0x6a>
 8007676:	f240 120d 	movw	r2, #269	@ 0x10d
 800767a:	4908      	ldr	r1, [pc, #32]	@ (800769c <xTimerCreateTimerTask+0x84>)
 800767c:	4808      	ldr	r0, [pc, #32]	@ (80076a0 <xTimerCreateTimerTask+0x88>)
 800767e:	f00a fef3 	bl	8012468 <assertFail>
        return xReturn;
 8007682:	68fb      	ldr	r3, [r7, #12]
    }
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200003bc 	.word	0x200003bc
 8007690:	0801a2b0 	.word	0x0801a2b0
 8007694:	080077d5 	.word	0x080077d5
 8007698:	200003c0 	.word	0x200003c0
 800769c:	0801a2b8 	.word	0x0801a2b8
 80076a0:	0801a2d0 	.word	0x0801a2d0

080076a4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08a      	sub	sp, #40	@ 0x28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
 80076b0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d105      	bne.n	80076c8 <xTimerGenericCommand+0x24>
 80076bc:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 80076c0:	491b      	ldr	r1, [pc, #108]	@ (8007730 <xTimerGenericCommand+0x8c>)
 80076c2:	481c      	ldr	r0, [pc, #112]	@ (8007734 <xTimerGenericCommand+0x90>)
 80076c4:	f00a fed0 	bl	8012468 <assertFail>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80076c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007738 <xTimerGenericCommand+0x94>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d02a      	beq.n	8007726 <xTimerGenericCommand+0x82>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2b05      	cmp	r3, #5
 80076e0:	dc18      	bgt.n	8007714 <xTimerGenericCommand+0x70>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80076e2:	f7ff fd8b 	bl	80071fc <xTaskGetSchedulerState>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d109      	bne.n	8007700 <xTimerGenericCommand+0x5c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076ec:	4b12      	ldr	r3, [pc, #72]	@ (8007738 <xTimerGenericCommand+0x94>)
 80076ee:	6818      	ldr	r0, [r3, #0]
 80076f0:	f107 0114 	add.w	r1, r7, #20
 80076f4:	2300      	movs	r3, #0
 80076f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076f8:	f7fe f8f4 	bl	80058e4 <xQueueGenericSend>
 80076fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80076fe:	e012      	b.n	8007726 <xTimerGenericCommand+0x82>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007700:	4b0d      	ldr	r3, [pc, #52]	@ (8007738 <xTimerGenericCommand+0x94>)
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	f107 0114 	add.w	r1, r7, #20
 8007708:	2300      	movs	r3, #0
 800770a:	2200      	movs	r2, #0
 800770c:	f7fe f8ea 	bl	80058e4 <xQueueGenericSend>
 8007710:	6278      	str	r0, [r7, #36]	@ 0x24
 8007712:	e008      	b.n	8007726 <xTimerGenericCommand+0x82>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007714:	4b08      	ldr	r3, [pc, #32]	@ (8007738 <xTimerGenericCommand+0x94>)
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	f107 0114 	add.w	r1, r7, #20
 800771c:	2300      	movs	r3, #0
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	f7fe f9ee 	bl	8005b00 <xQueueGenericSendFromISR>
 8007724:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8007728:	4618      	mov	r0, r3
 800772a:	3728      	adds	r7, #40	@ 0x28
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	0801a2b8 	.word	0x0801a2b8
 8007734:	0801a320 	.word	0x0801a320
 8007738:	200003bc 	.word	0x200003bc

0800773c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af02      	add	r7, sp, #8
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007746:	4b20      	ldr	r3, [pc, #128]	@ (80077c8 <prvProcessExpiredTimer+0x8c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3304      	adds	r3, #4
 8007754:	4618      	mov	r0, r3
 8007756:	f7fd ff1f 	bl	8005598 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01e      	beq.n	80077a6 <prvProcessExpiredTimer+0x6a>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	699a      	ldr	r2, [r3, #24]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	18d1      	adds	r1, r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f8d3 	bl	8007920 <prvInsertTimerInActiveList>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d01b      	beq.n	80077b8 <prvProcessExpiredTimer+0x7c>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007780:	2300      	movs	r3, #0
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	2300      	movs	r3, #0
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	2100      	movs	r1, #0
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f7ff ff8a 	bl	80076a4 <xTimerGenericCommand>
 8007790:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10f      	bne.n	80077b8 <prvProcessExpiredTimer+0x7c>
 8007798:	f44f 7205 	mov.w	r2, #532	@ 0x214
 800779c:	490b      	ldr	r1, [pc, #44]	@ (80077cc <prvProcessExpiredTimer+0x90>)
 800779e:	480c      	ldr	r0, [pc, #48]	@ (80077d0 <prvProcessExpiredTimer+0x94>)
 80077a0:	f00a fe62 	bl	8012468 <assertFail>
 80077a4:	e008      	b.n	80077b8 <prvProcessExpiredTimer+0x7c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077ac:	f023 0301 	bic.w	r3, r3, #1
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6a1b      	ldr	r3, [r3, #32]
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	4798      	blx	r3
    }
 80077c0:	bf00      	nop
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	200003b4 	.word	0x200003b4
 80077cc:	0801a2b8 	.word	0x0801a2b8
 80077d0:	0801a348 	.word	0x0801a348

080077d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077dc:	f107 0308 	add.w	r3, r7, #8
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 f859 	bl	8007898 <prvGetNextExpireTime>
 80077e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	4619      	mov	r1, r3
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 f805 	bl	80077fc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80077f2:	f000 f8d7 	bl	80079a4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077f6:	bf00      	nop
 80077f8:	e7f0      	b.n	80077dc <prvTimerTask+0x8>
	...

080077fc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007806:	f7ff f8df 	bl	80069c8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800780a:	f107 0308 	add.w	r3, r7, #8
 800780e:	4618      	mov	r0, r3
 8007810:	f000 f866 	bl	80078e0 <prvSampleTimeNow>
 8007814:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d130      	bne.n	800787e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <prvProcessTimerOrBlockTask+0x3c>
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	429a      	cmp	r2, r3
 8007828:	d806      	bhi.n	8007838 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800782a:	f7ff f8db 	bl	80069e4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800782e:	68f9      	ldr	r1, [r7, #12]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ff83 	bl	800773c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007836:	e024      	b.n	8007882 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d008      	beq.n	8007850 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800783e:	4b13      	ldr	r3, [pc, #76]	@ (800788c <prvProcessTimerOrBlockTask+0x90>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <prvProcessTimerOrBlockTask+0x50>
 8007848:	2301      	movs	r3, #1
 800784a:	e000      	b.n	800784e <prvProcessTimerOrBlockTask+0x52>
 800784c:	2300      	movs	r3, #0
 800784e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007850:	4b0f      	ldr	r3, [pc, #60]	@ (8007890 <prvProcessTimerOrBlockTask+0x94>)
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	4619      	mov	r1, r3
 800785e:	f7fe fdbb 	bl	80063d8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007862:	f7ff f8bf 	bl	80069e4 <xTaskResumeAll>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800786c:	4b09      	ldr	r3, [pc, #36]	@ (8007894 <prvProcessTimerOrBlockTask+0x98>)
 800786e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	f3bf 8f6f 	isb	sy
    }
 800787c:	e001      	b.n	8007882 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800787e:	f7ff f8b1 	bl	80069e4 <xTaskResumeAll>
    }
 8007882:	bf00      	nop
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	200003b8 	.word	0x200003b8
 8007890:	200003bc 	.word	0x200003bc
 8007894:	e000ed04 	.word	0xe000ed04

08007898 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078a0:	4b0e      	ldr	r3, [pc, #56]	@ (80078dc <prvGetNextExpireTime+0x44>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <prvGetNextExpireTime+0x16>
 80078aa:	2201      	movs	r2, #1
 80078ac:	e000      	b.n	80078b0 <prvGetNextExpireTime+0x18>
 80078ae:	2200      	movs	r2, #0
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d105      	bne.n	80078c8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078bc:	4b07      	ldr	r3, [pc, #28]	@ (80078dc <prvGetNextExpireTime+0x44>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	e001      	b.n	80078cc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80078cc:	68fb      	ldr	r3, [r7, #12]
    }
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	200003b4 	.word	0x200003b4

080078e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80078e8:	f7ff f918 	bl	8006b1c <xTaskGetTickCount>
 80078ec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80078ee:	4b0b      	ldr	r3, [pc, #44]	@ (800791c <prvSampleTimeNow+0x3c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d205      	bcs.n	8007904 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80078f8:	f000 f934 	bl	8007b64 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	e002      	b.n	800790a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800790a:	4a04      	ldr	r2, [pc, #16]	@ (800791c <prvSampleTimeNow+0x3c>)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007910:	68fb      	ldr	r3, [r7, #12]
    }
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	200003c4 	.word	0x200003c4

08007920 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800792e:	2300      	movs	r3, #0
 8007930:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	429a      	cmp	r2, r3
 8007944:	d812      	bhi.n	800796c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	1ad2      	subs	r2, r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	429a      	cmp	r2, r3
 8007952:	d302      	bcc.n	800795a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007954:	2301      	movs	r3, #1
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	e01b      	b.n	8007992 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800795a:	4b10      	ldr	r3, [pc, #64]	@ (800799c <prvInsertTimerInActiveList+0x7c>)
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3304      	adds	r3, #4
 8007962:	4619      	mov	r1, r3
 8007964:	4610      	mov	r0, r2
 8007966:	f7fd fdde 	bl	8005526 <vListInsert>
 800796a:	e012      	b.n	8007992 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	429a      	cmp	r2, r3
 8007972:	d206      	bcs.n	8007982 <prvInsertTimerInActiveList+0x62>
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	d302      	bcc.n	8007982 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800797c:	2301      	movs	r3, #1
 800797e:	617b      	str	r3, [r7, #20]
 8007980:	e007      	b.n	8007992 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007982:	4b07      	ldr	r3, [pc, #28]	@ (80079a0 <prvInsertTimerInActiveList+0x80>)
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3304      	adds	r3, #4
 800798a:	4619      	mov	r1, r3
 800798c:	4610      	mov	r0, r2
 800798e:	f7fd fdca 	bl	8005526 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007992:	697b      	ldr	r3, [r7, #20]
    }
 8007994:	4618      	mov	r0, r3
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	200003b8 	.word	0x200003b8
 80079a0:	200003b4 	.word	0x200003b4

080079a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08c      	sub	sp, #48	@ 0x30
 80079a8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079aa:	e0bf      	b.n	8007b2c <prvProcessReceivedCommands+0x188>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	da14      	bge.n	80079dc <prvProcessReceivedCommands+0x38>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079b2:	f107 0308 	add.w	r3, r7, #8
 80079b6:	3304      	adds	r3, #4
 80079b8:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d105      	bne.n	80079cc <prvProcessReceivedCommands+0x28>
 80079c0:	f240 22fa 	movw	r2, #762	@ 0x2fa
 80079c4:	4962      	ldr	r1, [pc, #392]	@ (8007b50 <prvProcessReceivedCommands+0x1ac>)
 80079c6:	4863      	ldr	r0, [pc, #396]	@ (8007b54 <prvProcessReceivedCommands+0x1b0>)
 80079c8:	f00a fd4e 	bl	8012468 <assertFail>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079d2:	6850      	ldr	r0, [r2, #4]
 80079d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079d6:	6892      	ldr	r2, [r2, #8]
 80079d8:	4611      	mov	r1, r2
 80079da:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f2c0 80a4 	blt.w	8007b2c <prvProcessReceivedCommands+0x188>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d004      	beq.n	80079fa <prvProcessReceivedCommands+0x56>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fd fdcf 	bl	8005598 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079fa:	1d3b      	adds	r3, r7, #4
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff ff6f 	bl	80078e0 <prvSampleTimeNow>
 8007a02:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2b09      	cmp	r3, #9
 8007a08:	f200 808d 	bhi.w	8007b26 <prvProcessReceivedCommands+0x182>
 8007a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a14 <prvProcessReceivedCommands+0x70>)
 8007a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a12:	bf00      	nop
 8007a14:	08007a3d 	.word	0x08007a3d
 8007a18:	08007a3d 	.word	0x08007a3d
 8007a1c:	08007a3d 	.word	0x08007a3d
 8007a20:	08007aa9 	.word	0x08007aa9
 8007a24:	08007abd 	.word	0x08007abd
 8007a28:	08007afd 	.word	0x08007afd
 8007a2c:	08007a3d 	.word	0x08007a3d
 8007a30:	08007a3d 	.word	0x08007a3d
 8007a34:	08007aa9 	.word	0x08007aa9
 8007a38:	08007abd 	.word	0x08007abd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a42:	f043 0301 	orr.w	r3, r3, #1
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	18d1      	adds	r1, r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	6a38      	ldr	r0, [r7, #32]
 8007a5c:	f7ff ff60 	bl	8007920 <prvInsertTimerInActiveList>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d061      	beq.n	8007b2a <prvProcessReceivedCommands+0x186>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	6a38      	ldr	r0, [r7, #32]
 8007a6c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d056      	beq.n	8007b2a <prvProcessReceivedCommands+0x186>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	441a      	add	r2, r3
 8007a84:	2300      	movs	r3, #0
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	6a38      	ldr	r0, [r7, #32]
 8007a8e:	f7ff fe09 	bl	80076a4 <xTimerGenericCommand>
 8007a92:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d147      	bne.n	8007b2a <prvProcessReceivedCommands+0x186>
 8007a9a:	f240 3236 	movw	r2, #822	@ 0x336
 8007a9e:	492c      	ldr	r1, [pc, #176]	@ (8007b50 <prvProcessReceivedCommands+0x1ac>)
 8007aa0:	482d      	ldr	r0, [pc, #180]	@ (8007b58 <prvProcessReceivedCommands+0x1b4>)
 8007aa2:	f00a fce1 	bl	8012468 <assertFail>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007aa6:	e040      	b.n	8007b2a <prvProcessReceivedCommands+0x186>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007aae:	f023 0301 	bic.w	r3, r3, #1
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007aba:	e037      	b.n	8007b2c <prvProcessReceivedCommands+0x188>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ac2:	f043 0301 	orr.w	r3, r3, #1
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d105      	bne.n	8007ae8 <prvProcessReceivedCommands+0x144>
 8007adc:	f240 324f 	movw	r2, #847	@ 0x34f
 8007ae0:	491b      	ldr	r1, [pc, #108]	@ (8007b50 <prvProcessReceivedCommands+0x1ac>)
 8007ae2:	481e      	ldr	r0, [pc, #120]	@ (8007b5c <prvProcessReceivedCommands+0x1b8>)
 8007ae4:	f00a fcc0 	bl	8012468 <assertFail>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	699a      	ldr	r2, [r3, #24]
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	18d1      	adds	r1, r2, r3
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	6a38      	ldr	r0, [r7, #32]
 8007af6:	f7ff ff13 	bl	8007920 <prvInsertTimerInActiveList>
                        break;
 8007afa:	e017      	b.n	8007b2c <prvProcessReceivedCommands+0x188>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d103      	bne.n	8007b12 <prvProcessReceivedCommands+0x16e>
                                {
                                    vPortFree( pxTimer );
 8007b0a:	6a38      	ldr	r0, [r7, #32]
 8007b0c:	f000 fbc0 	bl	8008290 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007b10:	e00c      	b.n	8007b2c <prvProcessReceivedCommands+0x188>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b18:	f023 0301 	bic.w	r3, r3, #1
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007b24:	e002      	b.n	8007b2c <prvProcessReceivedCommands+0x188>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007b26:	bf00      	nop
 8007b28:	e000      	b.n	8007b2c <prvProcessReceivedCommands+0x188>
                        break;
 8007b2a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b60 <prvProcessReceivedCommands+0x1bc>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f107 0108 	add.w	r1, r7, #8
 8007b34:	2200      	movs	r2, #0
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe f912 	bl	8005d60 <xQueueReceive>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f47f af34 	bne.w	80079ac <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	3728      	adds	r7, #40	@ 0x28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	0801a2b8 	.word	0x0801a2b8
 8007b54:	0801a350 	.word	0x0801a350
 8007b58:	0801a348 	.word	0x0801a348
 8007b5c:	0801a35c 	.word	0x0801a35c
 8007b60:	200003bc 	.word	0x200003bc

08007b64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b6a:	e043      	b.n	8007bf4 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8007c1c <prvSwitchTimerLists+0xb8>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b76:	4b29      	ldr	r3, [pc, #164]	@ (8007c1c <prvSwitchTimerLists+0xb8>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3304      	adds	r3, #4
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fd fd07 	bl	8005598 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d029      	beq.n	8007bf4 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d90e      	bls.n	8007bd0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bbe:	4b17      	ldr	r3, [pc, #92]	@ (8007c1c <prvSwitchTimerLists+0xb8>)
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4610      	mov	r0, r2
 8007bca:	f7fd fcac 	bl	8005526 <vListInsert>
 8007bce:	e011      	b.n	8007bf4 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	2100      	movs	r1, #0
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff fd62 	bl	80076a4 <xTimerGenericCommand>
 8007be0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d105      	bne.n	8007bf4 <prvSwitchTimerLists+0x90>
 8007be8:	f240 32a9 	movw	r2, #937	@ 0x3a9
 8007bec:	490c      	ldr	r1, [pc, #48]	@ (8007c20 <prvSwitchTimerLists+0xbc>)
 8007bee:	480d      	ldr	r0, [pc, #52]	@ (8007c24 <prvSwitchTimerLists+0xc0>)
 8007bf0:	f00a fc3a 	bl	8012468 <assertFail>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bf4:	4b09      	ldr	r3, [pc, #36]	@ (8007c1c <prvSwitchTimerLists+0xb8>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1b6      	bne.n	8007b6c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007bfe:	4b07      	ldr	r3, [pc, #28]	@ (8007c1c <prvSwitchTimerLists+0xb8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007c04:	4b08      	ldr	r3, [pc, #32]	@ (8007c28 <prvSwitchTimerLists+0xc4>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a04      	ldr	r2, [pc, #16]	@ (8007c1c <prvSwitchTimerLists+0xb8>)
 8007c0a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007c0c:	4a06      	ldr	r2, [pc, #24]	@ (8007c28 <prvSwitchTimerLists+0xc4>)
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	6013      	str	r3, [r2, #0]
    }
 8007c12:	bf00      	nop
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	200003b4 	.word	0x200003b4
 8007c20:	0801a2b8 	.word	0x0801a2b8
 8007c24:	0801a348 	.word	0x0801a348
 8007c28:	200003b8 	.word	0x200003b8

08007c2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007c32:	f000 f953 	bl	8007edc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007c36:	4b15      	ldr	r3, [pc, #84]	@ (8007c8c <prvCheckForValidListAndQueue+0x60>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d120      	bne.n	8007c80 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8007c3e:	4814      	ldr	r0, [pc, #80]	@ (8007c90 <prvCheckForValidListAndQueue+0x64>)
 8007c40:	f7fd fc20 	bl	8005484 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007c44:	4813      	ldr	r0, [pc, #76]	@ (8007c94 <prvCheckForValidListAndQueue+0x68>)
 8007c46:	f7fd fc1d 	bl	8005484 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007c4a:	4b13      	ldr	r3, [pc, #76]	@ (8007c98 <prvCheckForValidListAndQueue+0x6c>)
 8007c4c:	4a10      	ldr	r2, [pc, #64]	@ (8007c90 <prvCheckForValidListAndQueue+0x64>)
 8007c4e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007c50:	4b12      	ldr	r3, [pc, #72]	@ (8007c9c <prvCheckForValidListAndQueue+0x70>)
 8007c52:	4a10      	ldr	r2, [pc, #64]	@ (8007c94 <prvCheckForValidListAndQueue+0x68>)
 8007c54:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c56:	2300      	movs	r3, #0
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	4b11      	ldr	r3, [pc, #68]	@ (8007ca0 <prvCheckForValidListAndQueue+0x74>)
 8007c5c:	4a11      	ldr	r2, [pc, #68]	@ (8007ca4 <prvCheckForValidListAndQueue+0x78>)
 8007c5e:	2110      	movs	r1, #16
 8007c60:	2014      	movs	r0, #20
 8007c62:	f7fd fd2b 	bl	80056bc <xQueueGenericCreateStatic>
 8007c66:	4603      	mov	r3, r0
 8007c68:	4a08      	ldr	r2, [pc, #32]	@ (8007c8c <prvCheckForValidListAndQueue+0x60>)
 8007c6a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007c6c:	4b07      	ldr	r3, [pc, #28]	@ (8007c8c <prvCheckForValidListAndQueue+0x60>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c74:	4b05      	ldr	r3, [pc, #20]	@ (8007c8c <prvCheckForValidListAndQueue+0x60>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	490b      	ldr	r1, [pc, #44]	@ (8007ca8 <prvCheckForValidListAndQueue+0x7c>)
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fe fb82 	bl	8006384 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007c80:	f000 f95a 	bl	8007f38 <vPortExitCritical>
    }
 8007c84:	bf00      	nop
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	200003bc 	.word	0x200003bc
 8007c90:	2000038c 	.word	0x2000038c
 8007c94:	200003a0 	.word	0x200003a0
 8007c98:	200003b4 	.word	0x200003b4
 8007c9c:	200003b8 	.word	0x200003b8
 8007ca0:	20000508 	.word	0x20000508
 8007ca4:	200003c8 	.word	0x200003c8
 8007ca8:	0801a384 	.word	0x0801a384

08007cac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3b04      	subs	r3, #4
 8007cbc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007cc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	3b04      	subs	r3, #4
 8007cca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f023 0201 	bic.w	r2, r3, #1
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3b04      	subs	r3, #4
 8007cda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8007d10 <pxPortInitialiseStack+0x64>)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3b14      	subs	r3, #20
 8007ce6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3b04      	subs	r3, #4
 8007cf2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f06f 0202 	mvn.w	r2, #2
 8007cfa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3b20      	subs	r3, #32
 8007d00:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007d02:	68fb      	ldr	r3, [r7, #12]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	08007d15 	.word	0x08007d15

08007d14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007d58 <prvTaskExitError+0x44>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d26:	d004      	beq.n	8007d32 <prvTaskExitError+0x1e>
 8007d28:	22e5      	movs	r2, #229	@ 0xe5
 8007d2a:	490c      	ldr	r1, [pc, #48]	@ (8007d5c <prvTaskExitError+0x48>)
 8007d2c:	480c      	ldr	r0, [pc, #48]	@ (8007d60 <prvTaskExitError+0x4c>)
 8007d2e:	f00a fb9b 	bl	8012468 <assertFail>
        __asm volatile
 8007d32:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	607b      	str	r3, [r7, #4]
    }
 8007d44:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007d46:	bf00      	nop
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0fc      	beq.n	8007d48 <prvTaskExitError+0x34>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007d4e:	bf00      	nop
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	2000000c 	.word	0x2000000c
 8007d5c:	0801a398 	.word	0x0801a398
 8007d60:	0801a3c4 	.word	0x0801a3c4
	...

08007d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007d70:	4b07      	ldr	r3, [pc, #28]	@ (8007d90 <pxCurrentTCBConst2>)
 8007d72:	6819      	ldr	r1, [r3, #0]
 8007d74:	6808      	ldr	r0, [r1, #0]
 8007d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7a:	f380 8809 	msr	PSP, r0
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f04f 0000 	mov.w	r0, #0
 8007d86:	f380 8811 	msr	BASEPRI, r0
 8007d8a:	4770      	bx	lr
 8007d8c:	f3af 8000 	nop.w

08007d90 <pxCurrentTCBConst2>:
 8007d90:	2000026c 	.word	0x2000026c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop

08007d98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007d98:	4808      	ldr	r0, [pc, #32]	@ (8007dbc <prvPortStartFirstTask+0x24>)
 8007d9a:	6800      	ldr	r0, [r0, #0]
 8007d9c:	6800      	ldr	r0, [r0, #0]
 8007d9e:	f380 8808 	msr	MSP, r0
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f380 8814 	msr	CONTROL, r0
 8007daa:	b662      	cpsie	i
 8007dac:	b661      	cpsie	f
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	df00      	svc	0
 8007db8:	bf00      	nop
 8007dba:	0000      	.short	0x0000
 8007dbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007dc0:	bf00      	nop
 8007dc2:	bf00      	nop

08007dc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007dca:	4b38      	ldr	r3, [pc, #224]	@ (8007eac <xPortStartScheduler+0xe8>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a38      	ldr	r2, [pc, #224]	@ (8007eb0 <xPortStartScheduler+0xec>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d105      	bne.n	8007de0 <xPortStartScheduler+0x1c>
 8007dd4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007dd8:	4936      	ldr	r1, [pc, #216]	@ (8007eb4 <xPortStartScheduler+0xf0>)
 8007dda:	4837      	ldr	r0, [pc, #220]	@ (8007eb8 <xPortStartScheduler+0xf4>)
 8007ddc:	f00a fb44 	bl	8012468 <assertFail>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007de0:	4b32      	ldr	r3, [pc, #200]	@ (8007eac <xPortStartScheduler+0xe8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a35      	ldr	r2, [pc, #212]	@ (8007ebc <xPortStartScheduler+0xf8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d105      	bne.n	8007df6 <xPortStartScheduler+0x32>
 8007dea:	f240 122d 	movw	r2, #301	@ 0x12d
 8007dee:	4931      	ldr	r1, [pc, #196]	@ (8007eb4 <xPortStartScheduler+0xf0>)
 8007df0:	4833      	ldr	r0, [pc, #204]	@ (8007ec0 <xPortStartScheduler+0xfc>)
 8007df2:	f00a fb39 	bl	8012468 <assertFail>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007df6:	4b33      	ldr	r3, [pc, #204]	@ (8007ec4 <xPortStartScheduler+0x100>)
 8007df8:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	22ff      	movs	r2, #255	@ 0xff
 8007e06:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8007ec8 <xPortStartScheduler+0x104>)
 8007e1c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8007ecc <xPortStartScheduler+0x108>)
 8007e20:	2207      	movs	r2, #7
 8007e22:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e24:	e009      	b.n	8007e3a <xPortStartScheduler+0x76>
            {
                ulMaxPRIGROUPValue--;
 8007e26:	4b29      	ldr	r3, [pc, #164]	@ (8007ecc <xPortStartScheduler+0x108>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	4a27      	ldr	r2, [pc, #156]	@ (8007ecc <xPortStartScheduler+0x108>)
 8007e2e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e42:	2b80      	cmp	r3, #128	@ 0x80
 8007e44:	d0ef      	beq.n	8007e26 <xPortStartScheduler+0x62>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e46:	4b21      	ldr	r3, [pc, #132]	@ (8007ecc <xPortStartScheduler+0x108>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8007ecc <xPortStartScheduler+0x108>)
 8007e4e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e50:	4b1e      	ldr	r3, [pc, #120]	@ (8007ecc <xPortStartScheduler+0x108>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e58:	4a1c      	ldr	r2, [pc, #112]	@ (8007ecc <xPortStartScheduler+0x108>)
 8007e5a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007e64:	4b1a      	ldr	r3, [pc, #104]	@ (8007ed0 <xPortStartScheduler+0x10c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a19      	ldr	r2, [pc, #100]	@ (8007ed0 <xPortStartScheduler+0x10c>)
 8007e6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e6e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007e70:	4b17      	ldr	r3, [pc, #92]	@ (8007ed0 <xPortStartScheduler+0x10c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a16      	ldr	r2, [pc, #88]	@ (8007ed0 <xPortStartScheduler+0x10c>)
 8007e76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e7a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007e7c:	f000 f8de 	bl	800803c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007e80:	4b14      	ldr	r3, [pc, #80]	@ (8007ed4 <xPortStartScheduler+0x110>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007e86:	f000 f8f5 	bl	8008074 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e8a:	4b13      	ldr	r3, [pc, #76]	@ (8007ed8 <xPortStartScheduler+0x114>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a12      	ldr	r2, [pc, #72]	@ (8007ed8 <xPortStartScheduler+0x114>)
 8007e90:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007e94:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007e96:	f7ff ff7f 	bl	8007d98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007e9a:	f7fe ff29 	bl	8006cf0 <vTaskSwitchContext>
    prvTaskExitError();
 8007e9e:	f7ff ff39 	bl	8007d14 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	e000ed00 	.word	0xe000ed00
 8007eb0:	410fc271 	.word	0x410fc271
 8007eb4:	0801a398 	.word	0x0801a398
 8007eb8:	0801a3e0 	.word	0x0801a3e0
 8007ebc:	410fc270 	.word	0x410fc270
 8007ec0:	0801a404 	.word	0x0801a404
 8007ec4:	e000e400 	.word	0xe000e400
 8007ec8:	20000558 	.word	0x20000558
 8007ecc:	2000055c 	.word	0x2000055c
 8007ed0:	e000ed20 	.word	0xe000ed20
 8007ed4:	2000000c 	.word	0x2000000c
 8007ed8:	e000ef34 	.word	0xe000ef34

08007edc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
        __asm volatile
 8007ee2:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	607b      	str	r3, [r7, #4]
    }
 8007ef4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8007f28 <vPortEnterCritical+0x4c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3301      	adds	r3, #1
 8007efc:	4a0a      	ldr	r2, [pc, #40]	@ (8007f28 <vPortEnterCritical+0x4c>)
 8007efe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007f00:	4b09      	ldr	r3, [pc, #36]	@ (8007f28 <vPortEnterCritical+0x4c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d10a      	bne.n	8007f1e <vPortEnterCritical+0x42>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f08:	4b08      	ldr	r3, [pc, #32]	@ (8007f2c <vPortEnterCritical+0x50>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <vPortEnterCritical+0x42>
 8007f12:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8007f16:	4906      	ldr	r1, [pc, #24]	@ (8007f30 <vPortEnterCritical+0x54>)
 8007f18:	4806      	ldr	r0, [pc, #24]	@ (8007f34 <vPortEnterCritical+0x58>)
 8007f1a:	f00a faa5 	bl	8012468 <assertFail>
    }
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	2000000c 	.word	0x2000000c
 8007f2c:	e000ed04 	.word	0xe000ed04
 8007f30:	0801a398 	.word	0x0801a398
 8007f34:	0801a444 	.word	0x0801a444

08007f38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f78 <vPortExitCritical+0x40>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d105      	bne.n	8007f52 <vPortExitCritical+0x1a>
 8007f46:	f240 12ab 	movw	r2, #427	@ 0x1ab
 8007f4a:	490c      	ldr	r1, [pc, #48]	@ (8007f7c <vPortExitCritical+0x44>)
 8007f4c:	480c      	ldr	r0, [pc, #48]	@ (8007f80 <vPortExitCritical+0x48>)
 8007f4e:	f00a fa8b 	bl	8012468 <assertFail>
    uxCriticalNesting--;
 8007f52:	4b09      	ldr	r3, [pc, #36]	@ (8007f78 <vPortExitCritical+0x40>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	4a07      	ldr	r2, [pc, #28]	@ (8007f78 <vPortExitCritical+0x40>)
 8007f5a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007f5c:	4b06      	ldr	r3, [pc, #24]	@ (8007f78 <vPortExitCritical+0x40>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d105      	bne.n	8007f70 <vPortExitCritical+0x38>
 8007f64:	2300      	movs	r3, #0
 8007f66:	607b      	str	r3, [r7, #4]
        __asm volatile
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f383 8811 	msr	BASEPRI, r3
    }
 8007f6e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	2000000c 	.word	0x2000000c
 8007f7c:	0801a398 	.word	0x0801a398
 8007f80:	0801a47c 	.word	0x0801a47c
	...

08007f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007f90:	f3ef 8009 	mrs	r0, PSP
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	4b15      	ldr	r3, [pc, #84]	@ (8007ff0 <pxCurrentTCBConst>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	f01e 0f10 	tst.w	lr, #16
 8007fa0:	bf08      	it	eq
 8007fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007faa:	6010      	str	r0, [r2, #0]
 8007fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007fb0:	f04f 005f 	mov.w	r0, #95	@ 0x5f
 8007fb4:	f380 8811 	msr	BASEPRI, r0
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f7fe fe96 	bl	8006cf0 <vTaskSwitchContext>
 8007fc4:	f04f 0000 	mov.w	r0, #0
 8007fc8:	f380 8811 	msr	BASEPRI, r0
 8007fcc:	bc09      	pop	{r0, r3}
 8007fce:	6819      	ldr	r1, [r3, #0]
 8007fd0:	6808      	ldr	r0, [r1, #0]
 8007fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd6:	f01e 0f10 	tst.w	lr, #16
 8007fda:	bf08      	it	eq
 8007fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007fe0:	f380 8809 	msr	PSP, r0
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	f3af 8000 	nop.w

08007ff0 <pxCurrentTCBConst>:
 8007ff0:	2000026c 	.word	0x2000026c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop

08007ff8 <tickFreeRTOS>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
        __asm volatile
 8007ffe:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	607b      	str	r3, [r7, #4]
    }
 8008010:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008012:	f7fe fd93 	bl	8006b3c <xTaskIncrementTick>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <tickFreeRTOS+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800801c:	4b06      	ldr	r3, [pc, #24]	@ (8008038 <tickFreeRTOS+0x40>)
 800801e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	2300      	movs	r3, #0
 8008026:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	f383 8811 	msr	BASEPRI, r3
    }
 800802e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800803c:	b480      	push	{r7}
 800803e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008040:	4b08      	ldr	r3, [pc, #32]	@ (8008064 <vPortSetupTimerInterrupt+0x28>)
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008046:	4b08      	ldr	r3, [pc, #32]	@ (8008068 <vPortSetupTimerInterrupt+0x2c>)
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800804c:	4b07      	ldr	r3, [pc, #28]	@ (800806c <vPortSetupTimerInterrupt+0x30>)
 800804e:	4a08      	ldr	r2, [pc, #32]	@ (8008070 <vPortSetupTimerInterrupt+0x34>)
 8008050:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008052:	4b04      	ldr	r3, [pc, #16]	@ (8008064 <vPortSetupTimerInterrupt+0x28>)
 8008054:	2207      	movs	r2, #7
 8008056:	601a      	str	r2, [r3, #0]
}
 8008058:	bf00      	nop
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	e000e010 	.word	0xe000e010
 8008068:	e000e018 	.word	0xe000e018
 800806c:	e000e014 	.word	0xe000e014
 8008070:	0002903f 	.word	0x0002903f

08008074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008074:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008084 <vPortEnableVFP+0x10>
 8008078:	6801      	ldr	r1, [r0, #0]
 800807a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800807e:	6001      	str	r1, [r0, #0]
 8008080:	4770      	bx	lr
 8008082:	0000      	.short	0x0000
 8008084:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop

0800808c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008092:	f3ef 8305 	mrs	r3, IPSR
 8008096:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b0f      	cmp	r3, #15
 800809c:	d90f      	bls.n	80080be <vPortValidateInterruptPriority+0x32>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800809e:	4a11      	ldr	r2, [pc, #68]	@ (80080e4 <vPortValidateInterruptPriority+0x58>)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4413      	add	r3, r2
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080a8:	4b0f      	ldr	r3, [pc, #60]	@ (80080e8 <vPortValidateInterruptPriority+0x5c>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d205      	bcs.n	80080be <vPortValidateInterruptPriority+0x32>
 80080b2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80080b6:	490d      	ldr	r1, [pc, #52]	@ (80080ec <vPortValidateInterruptPriority+0x60>)
 80080b8:	480d      	ldr	r0, [pc, #52]	@ (80080f0 <vPortValidateInterruptPriority+0x64>)
 80080ba:	f00a f9d5 	bl	8012468 <assertFail>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080be:	4b0d      	ldr	r3, [pc, #52]	@ (80080f4 <vPortValidateInterruptPriority+0x68>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80080c6:	4b0c      	ldr	r3, [pc, #48]	@ (80080f8 <vPortValidateInterruptPriority+0x6c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d905      	bls.n	80080da <vPortValidateInterruptPriority+0x4e>
 80080ce:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80080d2:	4906      	ldr	r1, [pc, #24]	@ (80080ec <vPortValidateInterruptPriority+0x60>)
 80080d4:	4809      	ldr	r0, [pc, #36]	@ (80080fc <vPortValidateInterruptPriority+0x70>)
 80080d6:	f00a f9c7 	bl	8012468 <assertFail>
    }
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	e000e3f0 	.word	0xe000e3f0
 80080e8:	20000558 	.word	0x20000558
 80080ec:	0801a398 	.word	0x0801a398
 80080f0:	0801a490 	.word	0x0801a490
 80080f4:	e000ed0c 	.word	0xe000ed0c
 80080f8:	2000055c 	.word	0x2000055c
 80080fc:	0801a4bc 	.word	0x0801a4bc

08008100 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008108:	2300      	movs	r3, #0
 800810a:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 800810c:	f7fe fc5c 	bl	80069c8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008110:	4b55      	ldr	r3, [pc, #340]	@ (8008268 <pvPortMalloc+0x168>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008118:	f000 f918 	bl	800834c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800811c:	4b53      	ldr	r3, [pc, #332]	@ (800826c <pvPortMalloc+0x16c>)
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4013      	ands	r3, r2
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 8087 	bne.w	8008238 <pvPortMalloc+0x138>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d017      	beq.n	8008160 <pvPortMalloc+0x60>
            {
                xWantedSize += xHeapStructSize;
 8008130:	2208      	movs	r2, #8
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4413      	add	r3, r2
 8008136:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f003 0307 	and.w	r3, r3, #7
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00e      	beq.n	8008160 <pvPortMalloc+0x60>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f023 0307 	bic.w	r3, r3, #7
 8008148:	3308      	adds	r3, #8
 800814a:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f003 0307 	and.w	r3, r3, #7
 8008152:	2b00      	cmp	r3, #0
 8008154:	d004      	beq.n	8008160 <pvPortMalloc+0x60>
 8008156:	2297      	movs	r2, #151	@ 0x97
 8008158:	4945      	ldr	r1, [pc, #276]	@ (8008270 <pvPortMalloc+0x170>)
 800815a:	4846      	ldr	r0, [pc, #280]	@ (8008274 <pvPortMalloc+0x174>)
 800815c:	f00a f984 	bl	8012468 <assertFail>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d068      	beq.n	8008238 <pvPortMalloc+0x138>
 8008166:	4b44      	ldr	r3, [pc, #272]	@ (8008278 <pvPortMalloc+0x178>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	429a      	cmp	r2, r3
 800816e:	d863      	bhi.n	8008238 <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008170:	4b42      	ldr	r3, [pc, #264]	@ (800827c <pvPortMalloc+0x17c>)
 8008172:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8008174:	4b41      	ldr	r3, [pc, #260]	@ (800827c <pvPortMalloc+0x17c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800817a:	e004      	b.n	8008186 <pvPortMalloc+0x86>
                {
                    pxPreviousBlock = pxBlock;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	429a      	cmp	r2, r3
 800818e:	d903      	bls.n	8008198 <pvPortMalloc+0x98>
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1f1      	bne.n	800817c <pvPortMalloc+0x7c>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8008198:	4b33      	ldr	r3, [pc, #204]	@ (8008268 <pvPortMalloc+0x168>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d04a      	beq.n	8008238 <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2208      	movs	r2, #8
 80081a8:	4413      	add	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	1ad2      	subs	r2, r2, r3
 80081bc:	2308      	movs	r3, #8
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d919      	bls.n	80081f8 <pvPortMalloc+0xf8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4413      	add	r3, r2
 80081ca:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d004      	beq.n	80081e0 <pvPortMalloc+0xe0>
 80081d6:	22c5      	movs	r2, #197	@ 0xc5
 80081d8:	4925      	ldr	r1, [pc, #148]	@ (8008270 <pvPortMalloc+0x170>)
 80081da:	4829      	ldr	r0, [pc, #164]	@ (8008280 <pvPortMalloc+0x180>)
 80081dc:	f00a f944 	bl	8012468 <assertFail>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	1ad2      	subs	r2, r2, r3
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081f2:	68b8      	ldr	r0, [r7, #8]
 80081f4:	f000 f90c 	bl	8008410 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081f8:	4b1f      	ldr	r3, [pc, #124]	@ (8008278 <pvPortMalloc+0x178>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	4a1d      	ldr	r2, [pc, #116]	@ (8008278 <pvPortMalloc+0x178>)
 8008204:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008206:	4b1c      	ldr	r3, [pc, #112]	@ (8008278 <pvPortMalloc+0x178>)
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	4b1e      	ldr	r3, [pc, #120]	@ (8008284 <pvPortMalloc+0x184>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	429a      	cmp	r2, r3
 8008210:	d203      	bcs.n	800821a <pvPortMalloc+0x11a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008212:	4b19      	ldr	r3, [pc, #100]	@ (8008278 <pvPortMalloc+0x178>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a1b      	ldr	r2, [pc, #108]	@ (8008284 <pvPortMalloc+0x184>)
 8008218:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	4b13      	ldr	r3, [pc, #76]	@ (800826c <pvPortMalloc+0x16c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	431a      	orrs	r2, r3
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2200      	movs	r2, #0
 800822c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800822e:	4b16      	ldr	r3, [pc, #88]	@ (8008288 <pvPortMalloc+0x188>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	4a14      	ldr	r2, [pc, #80]	@ (8008288 <pvPortMalloc+0x188>)
 8008236:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008238:	f7fe fbd4 	bl	80069e4 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <pvPortMalloc+0x146>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 8008242:	f004 ff9c 	bl	800d17e <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f003 0307 	and.w	r3, r3, #7
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <pvPortMalloc+0x15c>
 8008250:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8008254:	4906      	ldr	r1, [pc, #24]	@ (8008270 <pvPortMalloc+0x170>)
 8008256:	480d      	ldr	r0, [pc, #52]	@ (800828c <pvPortMalloc+0x18c>)
 8008258:	f00a f906 	bl	8012468 <assertFail>
    return pvReturn;
 800825c:	68fb      	ldr	r3, [r7, #12]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20007a98 	.word	0x20007a98
 800826c:	20007aac 	.word	0x20007aac
 8008270:	0801a500 	.word	0x0801a500
 8008274:	0801a528 	.word	0x0801a528
 8008278:	20007a9c 	.word	0x20007a9c
 800827c:	20007a90 	.word	0x20007a90
 8008280:	0801a558 	.word	0x0801a558
 8008284:	20007aa0 	.word	0x20007aa0
 8008288:	20007aa4 	.word	0x20007aa4
 800828c:	0801a59c 	.word	0x0801a59c

08008290 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d043      	beq.n	800832a <vPortFree+0x9a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80082a2:	2308      	movs	r3, #8
 80082a4:	425b      	negs	r3, r3
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	4413      	add	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	4b1f      	ldr	r3, [pc, #124]	@ (8008334 <vPortFree+0xa4>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d105      	bne.n	80082ca <vPortFree+0x3a>
 80082be:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80082c2:	491d      	ldr	r1, [pc, #116]	@ (8008338 <vPortFree+0xa8>)
 80082c4:	481d      	ldr	r0, [pc, #116]	@ (800833c <vPortFree+0xac>)
 80082c6:	f00a f8cf 	bl	8012468 <assertFail>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d005      	beq.n	80082de <vPortFree+0x4e>
 80082d2:	f240 121b 	movw	r2, #283	@ 0x11b
 80082d6:	4918      	ldr	r1, [pc, #96]	@ (8008338 <vPortFree+0xa8>)
 80082d8:	4819      	ldr	r0, [pc, #100]	@ (8008340 <vPortFree+0xb0>)
 80082da:	f00a f8c5 	bl	8012468 <assertFail>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	4b14      	ldr	r3, [pc, #80]	@ (8008334 <vPortFree+0xa4>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4013      	ands	r3, r2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01e      	beq.n	800832a <vPortFree+0x9a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d11a      	bne.n	800832a <vPortFree+0x9a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008334 <vPortFree+0xa4>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	43db      	mvns	r3, r3
 80082fe:	401a      	ands	r2, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008304:	f7fe fb60 	bl	80069c8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	4b0d      	ldr	r3, [pc, #52]	@ (8008344 <vPortFree+0xb4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4413      	add	r3, r2
 8008312:	4a0c      	ldr	r2, [pc, #48]	@ (8008344 <vPortFree+0xb4>)
 8008314:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008316:	68b8      	ldr	r0, [r7, #8]
 8008318:	f000 f87a 	bl	8008410 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800831c:	4b0a      	ldr	r3, [pc, #40]	@ (8008348 <vPortFree+0xb8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3301      	adds	r3, #1
 8008322:	4a09      	ldr	r2, [pc, #36]	@ (8008348 <vPortFree+0xb8>)
 8008324:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008326:	f7fe fb5d 	bl	80069e4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800832a:	bf00      	nop
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20007aac 	.word	0x20007aac
 8008338:	0801a500 	.word	0x0801a500
 800833c:	0801a5e4 	.word	0x0801a5e4
 8008340:	0801a618 	.word	0x0801a618
 8008344:	20007a9c 	.word	0x20007a9c
 8008348:	20007aa8 	.word	0x20007aa8

0800834c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008352:	f247 5330 	movw	r3, #30000	@ 0x7530
 8008356:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008358:	4b27      	ldr	r3, [pc, #156]	@ (80083f8 <prvHeapInit+0xac>)
 800835a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00c      	beq.n	8008380 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3307      	adds	r3, #7
 800836a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f023 0307 	bic.w	r3, r3, #7
 8008372:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	4a1f      	ldr	r2, [pc, #124]	@ (80083f8 <prvHeapInit+0xac>)
 800837c:	4413      	add	r3, r2
 800837e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008384:	4a1d      	ldr	r2, [pc, #116]	@ (80083fc <prvHeapInit+0xb0>)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800838a:	4b1c      	ldr	r3, [pc, #112]	@ (80083fc <prvHeapInit+0xb0>)
 800838c:	2200      	movs	r2, #0
 800838e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	4413      	add	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008398:	2208      	movs	r2, #8
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	1a9b      	subs	r3, r3, r2
 800839e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 0307 	bic.w	r3, r3, #7
 80083a6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4a15      	ldr	r2, [pc, #84]	@ (8008400 <prvHeapInit+0xb4>)
 80083ac:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80083ae:	4b14      	ldr	r3, [pc, #80]	@ (8008400 <prvHeapInit+0xb4>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2200      	movs	r2, #0
 80083b4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80083b6:	4b12      	ldr	r3, [pc, #72]	@ (8008400 <prvHeapInit+0xb4>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2200      	movs	r2, #0
 80083bc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	1ad2      	subs	r2, r2, r3
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008400 <prvHeapInit+0xb4>)
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	4a0a      	ldr	r2, [pc, #40]	@ (8008404 <prvHeapInit+0xb8>)
 80083da:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	4a09      	ldr	r2, [pc, #36]	@ (8008408 <prvHeapInit+0xbc>)
 80083e2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083e4:	4b09      	ldr	r3, [pc, #36]	@ (800840c <prvHeapInit+0xc0>)
 80083e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80083ea:	601a      	str	r2, [r3, #0]
}
 80083ec:	bf00      	nop
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	20000560 	.word	0x20000560
 80083fc:	20007a90 	.word	0x20007a90
 8008400:	20007a98 	.word	0x20007a98
 8008404:	20007aa0 	.word	0x20007aa0
 8008408:	20007a9c 	.word	0x20007a9c
 800840c:	20007aac 	.word	0x20007aac

08008410 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008418:	4b28      	ldr	r3, [pc, #160]	@ (80084bc <prvInsertBlockIntoFreeList+0xac>)
 800841a:	60fb      	str	r3, [r7, #12]
 800841c:	e002      	b.n	8008424 <prvInsertBlockIntoFreeList+0x14>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	429a      	cmp	r2, r3
 800842c:	d8f7      	bhi.n	800841e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	4413      	add	r3, r2
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	429a      	cmp	r2, r3
 800843e:	d108      	bne.n	8008452 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	441a      	add	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	441a      	add	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	429a      	cmp	r2, r3
 8008464:	d118      	bne.n	8008498 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	4b15      	ldr	r3, [pc, #84]	@ (80084c0 <prvInsertBlockIntoFreeList+0xb0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d00d      	beq.n	800848e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	441a      	add	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	e008      	b.n	80084a0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800848e:	4b0c      	ldr	r3, [pc, #48]	@ (80084c0 <prvInsertBlockIntoFreeList+0xb0>)
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	e003      	b.n	80084a0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d002      	beq.n	80084ae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80084ae:	bf00      	nop
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	20007a90 	.word	0x20007a90
 80084c0:	20007a98 	.word	0x20007a98

080084c4 <main>:

void SystemClock_Config(void);


int main( void )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0

//	HAL_Init();
	SystemClock_Config();
 80084ca:	f000 f80f 	bl	80084ec <SystemClock_Config>

	int err = platformInit();
 80084ce:	f009 fec4 	bl	801225a <platformInit>
 80084d2:	6078      	str	r0, [r7, #4]
	if (err != 0) {
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <main+0x1a>
		// The firmware is running on the wrong hardware. Halt
		while (1);
 80084da:	bf00      	nop
 80084dc:	e7fd      	b.n	80084da <main+0x16>
	}

	systemLaunch();
 80084de:	f004 fd43 	bl	800cf68 <systemLaunch>
//	counter +=1;
//	cournter_timint = 1;
//	HAL_TIM_Base_Start_IT(&htim4);
//	cournter_timint = 2;
	//JH
	vTaskStartScheduler();
 80084e2:	f7fe f9ff 	bl	80068e4 <vTaskStartScheduler>
//	cournter_timint = 2;
	//NJH
//	counter +=1;

    for(;;)
 80084e6:	bf00      	nop
 80084e8:	e7fd      	b.n	80084e6 <main+0x22>
	...

080084ec <SystemClock_Config>:
//			counter +=1;
//		}
    }
}
void SystemClock_Config(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b094      	sub	sp, #80	@ 0x50
 80084f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80084f2:	f107 0320 	add.w	r3, r7, #32
 80084f6:	2230      	movs	r2, #48	@ 0x30
 80084f8:	2100      	movs	r1, #0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f00f fa46 	bl	801798c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008500:	f107 030c 	add.w	r3, r7, #12
 8008504:	2200      	movs	r2, #0
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	605a      	str	r2, [r3, #4]
 800850a:	609a      	str	r2, [r3, #8]
 800850c:	60da      	str	r2, [r3, #12]
 800850e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008510:	2300      	movs	r3, #0
 8008512:	60bb      	str	r3, [r7, #8]
 8008514:	4b28      	ldr	r3, [pc, #160]	@ (80085b8 <SystemClock_Config+0xcc>)
 8008516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008518:	4a27      	ldr	r2, [pc, #156]	@ (80085b8 <SystemClock_Config+0xcc>)
 800851a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800851e:	6413      	str	r3, [r2, #64]	@ 0x40
 8008520:	4b25      	ldr	r3, [pc, #148]	@ (80085b8 <SystemClock_Config+0xcc>)
 8008522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008528:	60bb      	str	r3, [r7, #8]
 800852a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800852c:	2300      	movs	r3, #0
 800852e:	607b      	str	r3, [r7, #4]
 8008530:	4b22      	ldr	r3, [pc, #136]	@ (80085bc <SystemClock_Config+0xd0>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a21      	ldr	r2, [pc, #132]	@ (80085bc <SystemClock_Config+0xd0>)
 8008536:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	4b1f      	ldr	r3, [pc, #124]	@ (80085bc <SystemClock_Config+0xd0>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008544:	607b      	str	r3, [r7, #4]
 8008546:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008548:	2301      	movs	r3, #1
 800854a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800854c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008550:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008552:	2302      	movs	r3, #2
 8008554:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008556:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800855a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800855c:	2304      	movs	r3, #4
 800855e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8008560:	23a8      	movs	r3, #168	@ 0xa8
 8008562:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008564:	2302      	movs	r3, #2
 8008566:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008568:	2304      	movs	r3, #4
 800856a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800856c:	f107 0320 	add.w	r3, r7, #32
 8008570:	4618      	mov	r0, r3
 8008572:	f7fa fc83 	bl	8002e7c <HAL_RCC_OscConfig>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800857c:	f000 f838 	bl	80085f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008580:	230f      	movs	r3, #15
 8008582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008584:	2302      	movs	r3, #2
 8008586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008588:	2300      	movs	r3, #0
 800858a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800858c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8008590:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008592:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008598:	f107 030c 	add.w	r3, r7, #12
 800859c:	2105      	movs	r1, #5
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fa fee4 	bl	800336c <HAL_RCC_ClockConfig>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80085aa:	f000 f821 	bl	80085f0 <Error_Handler>
  }
}
 80085ae:	bf00      	nop
 80085b0:	3750      	adds	r7, #80	@ 0x50
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	40023800 	.word	0x40023800
 80085bc:	40007000 	.word	0x40007000

080085c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a06      	ldr	r2, [pc, #24]	@ (80085e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d104      	bne.n	80085dc <HAL_TIM_PeriodElapsedCallback+0x1c>
//		cournter += 1;
//		  hal_dshot_write(my_motor_values);
		  cournter_timint += 1;
 80085d2:	4b06      	ldr	r3, [pc, #24]	@ (80085ec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3301      	adds	r3, #1
 80085d8:	4a04      	ldr	r2, [pc, #16]	@ (80085ec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80085da:	6013      	str	r3, [r2, #0]
//		  HAL_Delay(1);
	}
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	40000800 	.word	0x40000800
 80085ec:	20007ab0 	.word	0x20007ab0

080085f0 <Error_Handler>:



void Error_Handler(void)
{
 80085f0:	b480      	push	{r7}
 80085f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80085f4:	b672      	cpsid	i
}
 80085f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80085f8:	bf00      	nop
 80085fa:	e7fd      	b.n	80085f8 <Error_Handler+0x8>

080085fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80085fc:	480d      	ldr	r0, [pc, #52]	@ (8008634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80085fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008600:	f7f8 fd82 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008604:	480c      	ldr	r0, [pc, #48]	@ (8008638 <LoopForever+0x6>)
  ldr r1, =_edata
 8008606:	490d      	ldr	r1, [pc, #52]	@ (800863c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008608:	4a0d      	ldr	r2, [pc, #52]	@ (8008640 <LoopForever+0xe>)
  movs r3, #0
 800860a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800860c:	e002      	b.n	8008614 <LoopCopyDataInit>

0800860e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800860e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008612:	3304      	adds	r3, #4

08008614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008618:	d3f9      	bcc.n	800860e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800861a:	4a0a      	ldr	r2, [pc, #40]	@ (8008644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800861c:	4c0a      	ldr	r4, [pc, #40]	@ (8008648 <LoopForever+0x16>)
  movs r3, #0
 800861e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008620:	e001      	b.n	8008626 <LoopFillZerobss>

08008622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008624:	3204      	adds	r2, #4

08008626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008628:	d3fb      	bcc.n	8008622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800862a:	f00f f9d1 	bl	80179d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800862e:	f7ff ff49 	bl	80084c4 <main>

08008632 <LoopForever>:

LoopForever:
  b LoopForever
 8008632:	e7fe      	b.n	8008632 <LoopForever>
  ldr   r0, =_estack
 8008634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800863c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8008640:	0801b594 	.word	0x0801b594
  ldr r2, =_sbss
 8008644:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8008648:	2000a3ac 	.word	0x2000a3ac

0800864c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800864c:	e7fe      	b.n	800864c <ADC_IRQHandler>
	...

08008650 <SPI3_IRQHandler>:
//	}
//
//
//}
void SPI3_IRQHandler(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0

  HAL_SPI_IRQHandler(&hspi3);
 8008654:	4802      	ldr	r0, [pc, #8]	@ (8008660 <SPI3_IRQHandler+0x10>)
 8008656:	f7fb fc9b 	bl	8003f90 <HAL_SPI_IRQHandler>

}
 800865a:	bf00      	nop
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20007d04 	.word	0x20007d04

08008664 <zRanger2GetMeasurementAndRestart>:
bool checkRangeID;

NO_DMA_CCM_SAFE_ZERO_INIT static VL53L1_Dev_t dev;

static uint16_t zRanger2GetMeasurementAndRestart(VL53L1_Dev_t *dev)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b08c      	sub	sp, #48	@ 0x30
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
    VL53L1_Error status = VL53L1_ERROR_NONE;
 800866c:	2300      	movs	r3, #0
 800866e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    VL53L1_RangingMeasurementData_t rangingData;
    uint8_t dataReady = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
    uint16_t range;

    while (dataReady == 0)
 8008676:	e00b      	b.n	8008690 <zRanger2GetMeasurementAndRestart+0x2c>
    {
        status = VL53L1_GetMeasurementDataReady(dev, &dataReady);
 8008678:	f107 030f 	add.w	r3, r7, #15
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f00a fd84 	bl	801318c <VL53L1_GetMeasurementDataReady>
 8008684:	4603      	mov	r3, r0
 8008686:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        vTaskDelay(M2T(1));
 800868a:	2001      	movs	r0, #1
 800868c:	f7fe f8f6 	bl	800687c <vTaskDelay>
    while (dataReady == 0)
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d0f0      	beq.n	8008678 <zRanger2GetMeasurementAndRestart+0x14>
    }

    status = VL53L1_GetRangingMeasurementData(dev, &rangingData);
 8008696:	f107 0310 	add.w	r3, r7, #16
 800869a:	4619      	mov	r1, r3
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f00a ff31 	bl	8013504 <VL53L1_GetRangingMeasurementData>
 80086a2:	4603      	mov	r3, r0
 80086a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    range = rangingData.RangeMilliMeter;
 80086a8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80086ac:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    VL53L1_StopMeasurement(dev);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f00a fd53 	bl	801315a <VL53L1_StopMeasurement>
    status = VL53L1_StartMeasurement(dev);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f00a fd11 	bl	80130dc <VL53L1_StartMeasurement>
 80086ba:	4603      	mov	r3, r0
 80086bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    status = status;

    return range;
 80086c0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3730      	adds	r7, #48	@ 0x30
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <zRanger2Init>:

void zRanger2Init()
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af02      	add	r7, sp, #8
  if (isInit)
 80086d2:	4b1a      	ldr	r3, [pc, #104]	@ (800873c <zRanger2Init+0x70>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d12d      	bne.n	8008736 <zRanger2Init+0x6a>
    return;

  checkRangeID = vl53l1xInit(&dev, &hi2c2);
 80086da:	4919      	ldr	r1, [pc, #100]	@ (8008740 <zRanger2Init+0x74>)
 80086dc:	4819      	ldr	r0, [pc, #100]	@ (8008744 <zRanger2Init+0x78>)
 80086de:	f001 fd55 	bl	800a18c <vl53l1xInit>
 80086e2:	4603      	mov	r3, r0
 80086e4:	461a      	mov	r2, r3
 80086e6:	4b18      	ldr	r3, [pc, #96]	@ (8008748 <zRanger2Init+0x7c>)
 80086e8:	701a      	strb	r2, [r3, #0]


  xTaskCreate(zRanger2Task, ZRANGER2_TASK_NAME, ZRANGER2_TASK_STACKSIZE, NULL, ZRANGER2_TASK_PRI, NULL);
 80086ea:	2300      	movs	r3, #0
 80086ec:	9301      	str	r3, [sp, #4]
 80086ee:	2302      	movs	r3, #2
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	2300      	movs	r3, #0
 80086f4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80086f8:	4914      	ldr	r1, [pc, #80]	@ (800874c <zRanger2Init+0x80>)
 80086fa:	4815      	ldr	r0, [pc, #84]	@ (8008750 <zRanger2Init+0x84>)
 80086fc:	f7fd fef6 	bl	80064ec <xTaskCreate>

  // pre-compute constant in the measurement noise model for kalman
  expCoeff = logf(expStdB / expStdA) / (expPointB - expPointA);
 8008700:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8008754 <zRanger2Init+0x88>
 8008704:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008758 <zRanger2Init+0x8c>
 8008708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800870c:	eeb0 0a67 	vmov.f32	s0, s15
 8008710:	f00f fa20 	bl	8017b54 <logf>
 8008714:	eef0 6a40 	vmov.f32	s13, s0
 8008718:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800871c:	eef0 7a04 	vmov.f32	s15, #4	@ 0x40200000  2.5
 8008720:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008728:	4b0c      	ldr	r3, [pc, #48]	@ (800875c <zRanger2Init+0x90>)
 800872a:	edc3 7a00 	vstr	s15, [r3]

  isInit = true;
 800872e:	4b03      	ldr	r3, [pc, #12]	@ (800873c <zRanger2Init+0x70>)
 8008730:	2201      	movs	r2, #1
 8008732:	701a      	strb	r2, [r3, #0]
 8008734:	e000      	b.n	8008738 <zRanger2Init+0x6c>
    return;
 8008736:	bf00      	nop
}
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	20007aba 	.word	0x20007aba
 8008740:	20007c54 	.word	0x20007c54
 8008744:	10000000 	.word	0x10000000
 8008748:	20007ac0 	.word	0x20007ac0
 800874c:	0801a638 	.word	0x0801a638
 8008750:	08008761 	.word	0x08008761
 8008754:	3e4ccccd 	.word	0x3e4ccccd
 8008758:	3b23d70a 	.word	0x3b23d70a
 800875c:	20007ab4 	.word	0x20007ab4

08008760 <zRanger2Task>:

  return true;
}

void zRanger2Task(void* arg)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  TickType_t lastWakeTime;

  systemWaitStart();
 8008768:	f004 fcc6 	bl	800d0f8 <systemWaitStart>

  // Restart sensor
  VL53L1_StopMeasurement(&dev);
 800876c:	4835      	ldr	r0, [pc, #212]	@ (8008844 <zRanger2Task+0xe4>)
 800876e:	f00a fcf4 	bl	801315a <VL53L1_StopMeasurement>
  VL53L1_SetDistanceMode(&dev, VL53L1_DISTANCEMODE_MEDIUM);
 8008772:	2102      	movs	r1, #2
 8008774:	4833      	ldr	r0, [pc, #204]	@ (8008844 <zRanger2Task+0xe4>)
 8008776:	f00a fa10 	bl	8012b9a <VL53L1_SetDistanceMode>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds(&dev, 25000);
 800877a:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800877e:	4831      	ldr	r0, [pc, #196]	@ (8008844 <zRanger2Task+0xe4>)
 8008780:	f00a fa92 	bl	8012ca8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>

  VL53L1_StartMeasurement(&dev);
 8008784:	482f      	ldr	r0, [pc, #188]	@ (8008844 <zRanger2Task+0xe4>)
 8008786:	f00a fca9 	bl	80130dc <VL53L1_StartMeasurement>

  lastWakeTime = xTaskGetTickCount();
 800878a:	f7fe f9c7 	bl	8006b1c <xTaskGetTickCount>
 800878e:	4603      	mov	r3, r0
 8008790:	60fb      	str	r3, [r7, #12]

  while (1) {
    vTaskDelayUntil(&lastWakeTime, M2T(25));
 8008792:	f107 030c 	add.w	r3, r7, #12
 8008796:	2119      	movs	r1, #25
 8008798:	4618      	mov	r0, r3
 800879a:	f7fd fff9 	bl	8006790 <vTaskDelayUntil>
    rangeCounter++;
 800879e:	4b2a      	ldr	r3, [pc, #168]	@ (8008848 <zRanger2Task+0xe8>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3301      	adds	r3, #1
 80087a4:	4a28      	ldr	r2, [pc, #160]	@ (8008848 <zRanger2Task+0xe8>)
 80087a6:	6013      	str	r3, [r2, #0]
    range_last = zRanger2GetMeasurementAndRestart(&dev);
 80087a8:	4826      	ldr	r0, [pc, #152]	@ (8008844 <zRanger2Task+0xe4>)
 80087aa:	f7ff ff5b 	bl	8008664 <zRanger2GetMeasurementAndRestart>
 80087ae:	4603      	mov	r3, r0
 80087b0:	461a      	mov	r2, r3
 80087b2:	4b26      	ldr	r3, [pc, #152]	@ (800884c <zRanger2Task+0xec>)
 80087b4:	801a      	strh	r2, [r3, #0]
    rangeSet(rangeDown, range_last / 1000.0f);
 80087b6:	4b25      	ldr	r3, [pc, #148]	@ (800884c <zRanger2Task+0xec>)
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	ee07 3a90 	vmov	s15, r3
 80087be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087c2:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8008850 <zRanger2Task+0xf0>
 80087c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80087ca:	eeb0 0a47 	vmov.f32	s0, s14
 80087ce:	2005      	movs	r0, #5
 80087d0:	f003 fbd2 	bl	800bf78 <rangeSet>

    // check if range is feasible and push into the estimator
    // the sensor should not be able to measure >5 [m], and outliers typically
    // occur as >8 [m] measurements
    if (range_last < RANGE_OUTLIER_LIMIT) {
 80087d4:	4b1d      	ldr	r3, [pc, #116]	@ (800884c <zRanger2Task+0xec>)
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80087dc:	4293      	cmp	r3, r2
 80087de:	d8d8      	bhi.n	8008792 <zRanger2Task+0x32>
      float distance = (float)range_last * 0.001f; // Scale from [mm] to [m]
 80087e0:	4b1a      	ldr	r3, [pc, #104]	@ (800884c <zRanger2Task+0xec>)
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	ee07 3a90 	vmov	s15, r3
 80087e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ec:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008854 <zRanger2Task+0xf4>
 80087f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087f4:	edc7 7a05 	vstr	s15, [r7, #20]
      float stdDev = expStdA * (1.0f  + expf( expCoeff * (distance - expPointA)));
 80087f8:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 80087fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008800:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008804:	4b14      	ldr	r3, [pc, #80]	@ (8008858 <zRanger2Task+0xf8>)
 8008806:	edd3 7a00 	vldr	s15, [r3]
 800880a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880e:	eeb0 0a67 	vmov.f32	s0, s15
 8008812:	f00f f969 	bl	8017ae8 <expf>
 8008816:	eef0 7a40 	vmov.f32	s15, s0
 800881a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800881e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008822:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800885c <zRanger2Task+0xfc>
 8008826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800882a:	edc7 7a04 	vstr	s15, [r7, #16]
      rangeEnqueueDownRangeInEstimator(distance, stdDev, xTaskGetTickCount());
 800882e:	f7fe f975 	bl	8006b1c <xTaskGetTickCount>
 8008832:	4603      	mov	r3, r0
 8008834:	4618      	mov	r0, r3
 8008836:	edd7 0a04 	vldr	s1, [r7, #16]
 800883a:	ed97 0a05 	vldr	s0, [r7, #20]
 800883e:	f003 fbbf 	bl	800bfc0 <rangeEnqueueDownRangeInEstimator>
    vTaskDelayUntil(&lastWakeTime, M2T(25));
 8008842:	e7a6      	b.n	8008792 <zRanger2Task+0x32>
 8008844:	10000000 	.word	0x10000000
 8008848:	20007abc 	.word	0x20007abc
 800884c:	20007ab8 	.word	0x20007ab8
 8008850:	447a0000 	.word	0x447a0000
 8008854:	3a83126f 	.word	0x3a83126f
 8008858:	20007ab4 	.word	0x20007ab4
 800885c:	3b23d70a 	.word	0x3b23d70a

08008860 <bmp280_StartUp>:

static int16_t t2, t3, p2, p3, p4, p5, p6, p7, p8, p9;
static uint16_t t1, p1;
static int32_t t_fine;

static void bmp280_StartUp(){
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8008864:	2200      	movs	r2, #0
 8008866:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800886a:	4807      	ldr	r0, [pc, #28]	@ (8008888 <bmp280_StartUp+0x28>)
 800886c:	f7f9 faaa 	bl	8001dc4 <HAL_GPIO_WritePin>
	vTaskDelay(5);
 8008870:	2005      	movs	r0, #5
 8008872:	f7fe f803 	bl	800687c <vTaskDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8008876:	2201      	movs	r2, #1
 8008878:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800887c:	4802      	ldr	r0, [pc, #8]	@ (8008888 <bmp280_StartUp+0x28>)
 800887e:	f7f9 faa1 	bl	8001dc4 <HAL_GPIO_WritePin>

}
 8008882:	bf00      	nop
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	40020400 	.word	0x40020400

0800888c <bmp280_WriteReg>:
static void bmp280_WriteReg(uint8_t reg, uint8_t val){
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	460a      	mov	r2, r1
 8008896:	71fb      	strb	r3, [r7, #7]
 8008898:	4613      	mov	r3, r2
 800889a:	71bb      	strb	r3, [r7, #6]

	uint8_t buf[2];
	buf[0] = reg;
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	733b      	strb	r3, [r7, #12]
	buf[0] &= ~(1<<7);
 80088a0:	7b3b      	ldrb	r3, [r7, #12]
 80088a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	733b      	strb	r3, [r7, #12]
	buf[1] = val;
 80088aa:	79bb      	ldrb	r3, [r7, #6]
 80088ac:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80088ae:	2200      	movs	r2, #0
 80088b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80088b4:	4809      	ldr	r0, [pc, #36]	@ (80088dc <bmp280_WriteReg+0x50>)
 80088b6:	f7f9 fa85 	bl	8001dc4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, buf, 2, 100);
 80088ba:	f107 010c 	add.w	r1, r7, #12
 80088be:	2364      	movs	r3, #100	@ 0x64
 80088c0:	2202      	movs	r2, #2
 80088c2:	4807      	ldr	r0, [pc, #28]	@ (80088e0 <bmp280_WriteReg+0x54>)
 80088c4:	f7fa ff5e 	bl	8003784 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80088c8:	2201      	movs	r2, #1
 80088ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80088ce:	4803      	ldr	r0, [pc, #12]	@ (80088dc <bmp280_WriteReg+0x50>)
 80088d0:	f7f9 fa78 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 80088d4:	bf00      	nop
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	40020400 	.word	0x40020400
 80088e0:	20007cac 	.word	0x20007cac

080088e4 <bmp280_ReadReg>:
void bmp280_ReadReg(uint8_t reg, uint8_t *buffer, uint8_t len){
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	6039      	str	r1, [r7, #0]
 80088ee:	71fb      	strb	r3, [r7, #7]
 80088f0:	4613      	mov	r3, r2
 80088f2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf = reg | 0x80;
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80088fe:	2200      	movs	r2, #0
 8008900:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008904:	480d      	ldr	r0, [pc, #52]	@ (800893c <bmp280_ReadReg+0x58>)
 8008906:	f7f9 fa5d 	bl	8001dc4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &buf, 1, 100);
 800890a:	f107 010f 	add.w	r1, r7, #15
 800890e:	2364      	movs	r3, #100	@ 0x64
 8008910:	2201      	movs	r2, #1
 8008912:	480b      	ldr	r0, [pc, #44]	@ (8008940 <bmp280_ReadReg+0x5c>)
 8008914:	f7fa ff36 	bl	8003784 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, buffer, len, 100);
 8008918:	79bb      	ldrb	r3, [r7, #6]
 800891a:	b29a      	uxth	r2, r3
 800891c:	2364      	movs	r3, #100	@ 0x64
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	4807      	ldr	r0, [pc, #28]	@ (8008940 <bmp280_ReadReg+0x5c>)
 8008922:	f7fb f873 	bl	8003a0c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8008926:	2201      	movs	r2, #1
 8008928:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800892c:	4803      	ldr	r0, [pc, #12]	@ (800893c <bmp280_ReadReg+0x58>)
 800892e:	f7f9 fa49 	bl	8001dc4 <HAL_GPIO_WritePin>

}
 8008932:	bf00      	nop
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	40020400 	.word	0x40020400
 8008940:	20007cac 	.word	0x20007cac

08008944 <bmp280_ReadCalibrateValue>:
static void bmp280_ReadCalibrateValue(){
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0

	uint8_t buf[24];
	bmp280_ReadReg(DIG_T1, buf, 24);
 800894a:	463b      	mov	r3, r7
 800894c:	2218      	movs	r2, #24
 800894e:	4619      	mov	r1, r3
 8008950:	2088      	movs	r0, #136	@ 0x88
 8008952:	f7ff ffc7 	bl	80088e4 <bmp280_ReadReg>

	t1 = buf[1] << 8 | buf[0];
 8008956:	787b      	ldrb	r3, [r7, #1]
 8008958:	021b      	lsls	r3, r3, #8
 800895a:	b21a      	sxth	r2, r3
 800895c:	783b      	ldrb	r3, [r7, #0]
 800895e:	b21b      	sxth	r3, r3
 8008960:	4313      	orrs	r3, r2
 8008962:	b21b      	sxth	r3, r3
 8008964:	b29a      	uxth	r2, r3
 8008966:	4b35      	ldr	r3, [pc, #212]	@ (8008a3c <bmp280_ReadCalibrateValue+0xf8>)
 8008968:	801a      	strh	r2, [r3, #0]
	t2 = buf[3] << 8 | buf[2];
 800896a:	78fb      	ldrb	r3, [r7, #3]
 800896c:	021b      	lsls	r3, r3, #8
 800896e:	b21a      	sxth	r2, r3
 8008970:	78bb      	ldrb	r3, [r7, #2]
 8008972:	b21b      	sxth	r3, r3
 8008974:	4313      	orrs	r3, r2
 8008976:	b21a      	sxth	r2, r3
 8008978:	4b31      	ldr	r3, [pc, #196]	@ (8008a40 <bmp280_ReadCalibrateValue+0xfc>)
 800897a:	801a      	strh	r2, [r3, #0]
	t3 = buf[5] << 8 | buf[4];
 800897c:	797b      	ldrb	r3, [r7, #5]
 800897e:	021b      	lsls	r3, r3, #8
 8008980:	b21a      	sxth	r2, r3
 8008982:	793b      	ldrb	r3, [r7, #4]
 8008984:	b21b      	sxth	r3, r3
 8008986:	4313      	orrs	r3, r2
 8008988:	b21a      	sxth	r2, r3
 800898a:	4b2e      	ldr	r3, [pc, #184]	@ (8008a44 <bmp280_ReadCalibrateValue+0x100>)
 800898c:	801a      	strh	r2, [r3, #0]

	p1 = buf[7] << 8 | buf[6];
 800898e:	79fb      	ldrb	r3, [r7, #7]
 8008990:	021b      	lsls	r3, r3, #8
 8008992:	b21a      	sxth	r2, r3
 8008994:	79bb      	ldrb	r3, [r7, #6]
 8008996:	b21b      	sxth	r3, r3
 8008998:	4313      	orrs	r3, r2
 800899a:	b21b      	sxth	r3, r3
 800899c:	b29a      	uxth	r2, r3
 800899e:	4b2a      	ldr	r3, [pc, #168]	@ (8008a48 <bmp280_ReadCalibrateValue+0x104>)
 80089a0:	801a      	strh	r2, [r3, #0]
	p2 = buf[9] << 8 | buf[8];
 80089a2:	7a7b      	ldrb	r3, [r7, #9]
 80089a4:	021b      	lsls	r3, r3, #8
 80089a6:	b21a      	sxth	r2, r3
 80089a8:	7a3b      	ldrb	r3, [r7, #8]
 80089aa:	b21b      	sxth	r3, r3
 80089ac:	4313      	orrs	r3, r2
 80089ae:	b21a      	sxth	r2, r3
 80089b0:	4b26      	ldr	r3, [pc, #152]	@ (8008a4c <bmp280_ReadCalibrateValue+0x108>)
 80089b2:	801a      	strh	r2, [r3, #0]
	p3 = buf[11]<< 8 | buf[10];
 80089b4:	7afb      	ldrb	r3, [r7, #11]
 80089b6:	021b      	lsls	r3, r3, #8
 80089b8:	b21a      	sxth	r2, r3
 80089ba:	7abb      	ldrb	r3, [r7, #10]
 80089bc:	b21b      	sxth	r3, r3
 80089be:	4313      	orrs	r3, r2
 80089c0:	b21a      	sxth	r2, r3
 80089c2:	4b23      	ldr	r3, [pc, #140]	@ (8008a50 <bmp280_ReadCalibrateValue+0x10c>)
 80089c4:	801a      	strh	r2, [r3, #0]
	p4 = buf[13]<< 8 | buf[12];
 80089c6:	7b7b      	ldrb	r3, [r7, #13]
 80089c8:	021b      	lsls	r3, r3, #8
 80089ca:	b21a      	sxth	r2, r3
 80089cc:	7b3b      	ldrb	r3, [r7, #12]
 80089ce:	b21b      	sxth	r3, r3
 80089d0:	4313      	orrs	r3, r2
 80089d2:	b21a      	sxth	r2, r3
 80089d4:	4b1f      	ldr	r3, [pc, #124]	@ (8008a54 <bmp280_ReadCalibrateValue+0x110>)
 80089d6:	801a      	strh	r2, [r3, #0]
	p5 = buf[15]<< 8 | buf[14];
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	b21a      	sxth	r2, r3
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	b21b      	sxth	r3, r3
 80089e2:	4313      	orrs	r3, r2
 80089e4:	b21a      	sxth	r2, r3
 80089e6:	4b1c      	ldr	r3, [pc, #112]	@ (8008a58 <bmp280_ReadCalibrateValue+0x114>)
 80089e8:	801a      	strh	r2, [r3, #0]
	p6 = buf[17]<< 8 | buf[16];
 80089ea:	7c7b      	ldrb	r3, [r7, #17]
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	b21a      	sxth	r2, r3
 80089f0:	7c3b      	ldrb	r3, [r7, #16]
 80089f2:	b21b      	sxth	r3, r3
 80089f4:	4313      	orrs	r3, r2
 80089f6:	b21a      	sxth	r2, r3
 80089f8:	4b18      	ldr	r3, [pc, #96]	@ (8008a5c <bmp280_ReadCalibrateValue+0x118>)
 80089fa:	801a      	strh	r2, [r3, #0]
	p7 = buf[19]<< 8 | buf[18];
 80089fc:	7cfb      	ldrb	r3, [r7, #19]
 80089fe:	021b      	lsls	r3, r3, #8
 8008a00:	b21a      	sxth	r2, r3
 8008a02:	7cbb      	ldrb	r3, [r7, #18]
 8008a04:	b21b      	sxth	r3, r3
 8008a06:	4313      	orrs	r3, r2
 8008a08:	b21a      	sxth	r2, r3
 8008a0a:	4b15      	ldr	r3, [pc, #84]	@ (8008a60 <bmp280_ReadCalibrateValue+0x11c>)
 8008a0c:	801a      	strh	r2, [r3, #0]
	p8 = buf[21]<< 8 | buf[20];
 8008a0e:	7d7b      	ldrb	r3, [r7, #21]
 8008a10:	021b      	lsls	r3, r3, #8
 8008a12:	b21a      	sxth	r2, r3
 8008a14:	7d3b      	ldrb	r3, [r7, #20]
 8008a16:	b21b      	sxth	r3, r3
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	b21a      	sxth	r2, r3
 8008a1c:	4b11      	ldr	r3, [pc, #68]	@ (8008a64 <bmp280_ReadCalibrateValue+0x120>)
 8008a1e:	801a      	strh	r2, [r3, #0]
	p9 = buf[23]<< 8 | buf[22];
 8008a20:	7dfb      	ldrb	r3, [r7, #23]
 8008a22:	021b      	lsls	r3, r3, #8
 8008a24:	b21a      	sxth	r2, r3
 8008a26:	7dbb      	ldrb	r3, [r7, #22]
 8008a28:	b21b      	sxth	r3, r3
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	b21a      	sxth	r2, r3
 8008a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a68 <bmp280_ReadCalibrateValue+0x124>)
 8008a30:	801a      	strh	r2, [r3, #0]

}
 8008a32:	bf00      	nop
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20007ad6 	.word	0x20007ad6
 8008a40:	20007ac2 	.word	0x20007ac2
 8008a44:	20007ac4 	.word	0x20007ac4
 8008a48:	20007ad8 	.word	0x20007ad8
 8008a4c:	20007ac6 	.word	0x20007ac6
 8008a50:	20007ac8 	.word	0x20007ac8
 8008a54:	20007aca 	.word	0x20007aca
 8008a58:	20007acc 	.word	0x20007acc
 8008a5c:	20007ace 	.word	0x20007ace
 8008a60:	20007ad0 	.word	0x20007ad0
 8008a64:	20007ad2 	.word	0x20007ad2
 8008a68:	20007ad4 	.word	0x20007ad4

08008a6c <bmp280GetTemperature>:
static void bmp280GetTemperature(float* temperature)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
	uint8_t temp_buf[3];
	int32_t temp_adc;
	int32_t var1, var2;

	bmp280_ReadReg(BMP280_TEMP_REG_DATA, temp_buf, 3);
 8008a74:	f107 0308 	add.w	r3, r7, #8
 8008a78:	2203      	movs	r2, #3
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	20fa      	movs	r0, #250	@ 0xfa
 8008a7e:	f7ff ff31 	bl	80088e4 <bmp280_ReadReg>
	temp_adc = (temp_buf[0] << 16) | (temp_buf[1] << 8) | temp_buf[2];
 8008a82:	7a3b      	ldrb	r3, [r7, #8]
 8008a84:	041a      	lsls	r2, r3, #16
 8008a86:	7a7b      	ldrb	r3, [r7, #9]
 8008a88:	021b      	lsls	r3, r3, #8
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	7aba      	ldrb	r2, [r7, #10]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	617b      	str	r3, [r7, #20]
	temp_adc >>= 4;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	111b      	asrs	r3, r3, #4
 8008a96:	617b      	str	r3, [r7, #20]

	var1  = ((((temp_adc>>3) - ((int32_t)t1 <<1))) * ((int32_t)t2)) >> 11;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	10da      	asrs	r2, r3, #3
 8008a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8008b10 <bmp280GetTemperature+0xa4>)
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8008b14 <bmp280GetTemperature+0xa8>)
 8008aa6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008aaa:	fb02 f303 	mul.w	r3, r2, r3
 8008aae:	12db      	asrs	r3, r3, #11
 8008ab0:	613b      	str	r3, [r7, #16]
	var2  = (((((temp_adc >> 4) - ((int32_t) t1)) * ((temp_adc >> 4) - ((int32_t) t1))) >> 12) * ((int32_t) t3)) >> 14;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	111b      	asrs	r3, r3, #4
 8008ab6:	4a16      	ldr	r2, [pc, #88]	@ (8008b10 <bmp280GetTemperature+0xa4>)
 8008ab8:	8812      	ldrh	r2, [r2, #0]
 8008aba:	1a9b      	subs	r3, r3, r2
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	1112      	asrs	r2, r2, #4
 8008ac0:	4913      	ldr	r1, [pc, #76]	@ (8008b10 <bmp280GetTemperature+0xa4>)
 8008ac2:	8809      	ldrh	r1, [r1, #0]
 8008ac4:	1a52      	subs	r2, r2, r1
 8008ac6:	fb02 f303 	mul.w	r3, r2, r3
 8008aca:	131b      	asrs	r3, r3, #12
 8008acc:	4a12      	ldr	r2, [pc, #72]	@ (8008b18 <bmp280GetTemperature+0xac>)
 8008ace:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008ad2:	fb02 f303 	mul.w	r3, r2, r3
 8008ad6:	139b      	asrs	r3, r3, #14
 8008ad8:	60fb      	str	r3, [r7, #12]

	t_fine = (var1 + var2);
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4413      	add	r3, r2
 8008ae0:	4a0e      	ldr	r2, [pc, #56]	@ (8008b1c <bmp280GetTemperature+0xb0>)
 8008ae2:	6013      	str	r3, [r2, #0]

	*temperature = (((t_fine * 5) + 128 ) >> 8) /100.0f;
 8008ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8008b1c <bmp280GetTemperature+0xb0>)
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	3380      	adds	r3, #128	@ 0x80
 8008af0:	121b      	asrs	r3, r3, #8
 8008af2:	ee07 3a90 	vmov	s15, r3
 8008af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008afa:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8008b20 <bmp280GetTemperature+0xb4>
 8008afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	edc3 7a00 	vstr	s15, [r3]
}
 8008b08:	bf00      	nop
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20007ad6 	.word	0x20007ad6
 8008b14:	20007ac2 	.word	0x20007ac2
 8008b18:	20007ac4 	.word	0x20007ac4
 8008b1c:	20007adc 	.word	0x20007adc
 8008b20:	42c80000 	.word	0x42c80000

08008b24 <bmp280GetPressure>:
static void bmp280GetPressure(float *pressure)
{
 8008b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b28:	b0ce      	sub	sp, #312	@ 0x138
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	uint8_t pres_buf[3];
	int32_t pres_adc;
	int64_t var1, var2, p;
	float temp;

	bmp280GetTemperature(&temp);
 8008b30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7ff ff99 	bl	8008a6c <bmp280GetTemperature>
	bmp280_ReadReg(BMP280_PRESSURE_REG_DAT, pres_buf, 3);
 8008b3a:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8008b3e:	2203      	movs	r2, #3
 8008b40:	4619      	mov	r1, r3
 8008b42:	20f7      	movs	r0, #247	@ 0xf7
 8008b44:	f7ff fece 	bl	80088e4 <bmp280_ReadReg>

	pres_adc = (pres_buf[0] << 16) | (pres_buf[1] << 8) | pres_buf[2];
 8008b48:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8008b4c:	041a      	lsls	r2, r3, #16
 8008b4e:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8008b52:	021b      	lsls	r3, r3, #8
 8008b54:	431a      	orrs	r2, r3
 8008b56:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	pres_adc >>= 4;
 8008b60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b64:	111b      	asrs	r3, r3, #4
 8008b66:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

	var1 = ((int64_t)t_fine) - 128000;
 8008b6a:	4baa      	ldr	r3, [pc, #680]	@ (8008e14 <bmp280GetPressure+0x2f0>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	17da      	asrs	r2, r3, #31
 8008b70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b74:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8008b78:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8008b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b84:	4613      	mov	r3, r2
 8008b86:	f143 33ff 	adc.w	r3, r3, #4294967295
 8008b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008b90:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t)p6;
 8008b94:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8008b98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b9c:	fb03 f102 	mul.w	r1, r3, r2
 8008ba0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8008ba4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008ba8:	fb02 f303 	mul.w	r3, r2, r3
 8008bac:	18ca      	adds	r2, r1, r3
 8008bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008bb2:	fba3 4503 	umull	r4, r5, r3, r3
 8008bb6:	1953      	adds	r3, r2, r5
 8008bb8:	461d      	mov	r5, r3
 8008bba:	4b97      	ldr	r3, [pc, #604]	@ (8008e18 <bmp280GetPressure+0x2f4>)
 8008bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bc0:	b21b      	sxth	r3, r3
 8008bc2:	17da      	asrs	r2, r3, #31
 8008bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008bc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008bcc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	fb03 f205 	mul.w	r2, r3, r5
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	fb04 f303 	mul.w	r3, r4, r3
 8008bdc:	4413      	add	r3, r2
 8008bde:	4602      	mov	r2, r0
 8008be0:	fba4 8902 	umull	r8, r9, r4, r2
 8008be4:	444b      	add	r3, r9
 8008be6:	4699      	mov	r9, r3
 8008be8:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
 8008bec:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 8008bf0:	4b8a      	ldr	r3, [pc, #552]	@ (8008e1c <bmp280GetPressure+0x2f8>)
 8008bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bf6:	b21b      	sxth	r3, r3
 8008bf8:	17da      	asrs	r2, r3, #31
 8008bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008bfe:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008c02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c06:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	fb02 f203 	mul.w	r2, r2, r3
 8008c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c14:	4621      	mov	r1, r4
 8008c16:	fb01 f303 	mul.w	r3, r1, r3
 8008c1a:	441a      	add	r2, r3
 8008c1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c20:	4621      	mov	r1, r4
 8008c22:	fba3 ab01 	umull	sl, fp, r3, r1
 8008c26:	eb02 030b 	add.w	r3, r2, fp
 8008c2a:	469b      	mov	fp, r3
 8008c2c:	f04f 0000 	mov.w	r0, #0
 8008c30:	f04f 0100 	mov.w	r1, #0
 8008c34:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8008c38:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8008c3c:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8008c40:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8008c44:	1814      	adds	r4, r2, r0
 8008c46:	643c      	str	r4, [r7, #64]	@ 0x40
 8008c48:	414b      	adcs	r3, r1
 8008c4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c4c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8008c50:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t)p4)<<35);
 8008c54:	4b72      	ldr	r3, [pc, #456]	@ (8008e20 <bmp280GetPressure+0x2fc>)
 8008c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c5a:	b21b      	sxth	r3, r3
 8008c5c:	17da      	asrs	r2, r3, #31
 8008c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c62:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8008c66:	f04f 0000 	mov.w	r0, #0
 8008c6a:	f04f 0100 	mov.w	r1, #0
 8008c6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008c72:	00d9      	lsls	r1, r3, #3
 8008c74:	2000      	movs	r0, #0
 8008c76:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8008c7a:	1814      	adds	r4, r2, r0
 8008c7c:	63bc      	str	r4, [r7, #56]	@ 0x38
 8008c7e:	414b      	adcs	r3, r1
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c82:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8008c86:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t)p3)>>8) + ((var1 * (int64_t)p2)<<12);
 8008c8a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8008c8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c92:	fb03 f102 	mul.w	r1, r3, r2
 8008c96:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8008c9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ca2:	18ca      	adds	r2, r1, r3
 8008ca4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008ca8:	fba3 1303 	umull	r1, r3, r3, r3
 8008cac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cba:	18d3      	adds	r3, r2, r3
 8008cbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008cc0:	4b58      	ldr	r3, [pc, #352]	@ (8008e24 <bmp280GetPressure+0x300>)
 8008cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cc6:	b21b      	sxth	r3, r3
 8008cc8:	17da      	asrs	r2, r3, #31
 8008cca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cce:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008cd2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8008cd6:	462b      	mov	r3, r5
 8008cd8:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8008cdc:	4642      	mov	r2, r8
 8008cde:	fb02 f203 	mul.w	r2, r2, r3
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	fb01 f303 	mul.w	r3, r1, r3
 8008cea:	4413      	add	r3, r2
 8008cec:	4622      	mov	r2, r4
 8008cee:	4641      	mov	r1, r8
 8008cf0:	fba2 1201 	umull	r1, r2, r2, r1
 8008cf4:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8008cf8:	460a      	mov	r2, r1
 8008cfa:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8008cfe:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8008d02:	4413      	add	r3, r2
 8008d04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008d08:	f04f 0000 	mov.w	r0, #0
 8008d0c:	f04f 0100 	mov.w	r1, #0
 8008d10:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8008d14:	4623      	mov	r3, r4
 8008d16:	0a18      	lsrs	r0, r3, #8
 8008d18:	462b      	mov	r3, r5
 8008d1a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8008d1e:	462b      	mov	r3, r5
 8008d20:	1219      	asrs	r1, r3, #8
 8008d22:	4b41      	ldr	r3, [pc, #260]	@ (8008e28 <bmp280GetPressure+0x304>)
 8008d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d28:	b21b      	sxth	r3, r3
 8008d2a:	17da      	asrs	r2, r3, #31
 8008d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d30:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008d34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d38:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008d3c:	464a      	mov	r2, r9
 8008d3e:	fb02 f203 	mul.w	r2, r2, r3
 8008d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d46:	4644      	mov	r4, r8
 8008d48:	fb04 f303 	mul.w	r3, r4, r3
 8008d4c:	441a      	add	r2, r3
 8008d4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d52:	4644      	mov	r4, r8
 8008d54:	fba3 4304 	umull	r4, r3, r3, r4
 8008d58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008d5c:	4623      	mov	r3, r4
 8008d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d66:	18d3      	adds	r3, r2, r3
 8008d68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008d6c:	f04f 0200 	mov.w	r2, #0
 8008d70:	f04f 0300 	mov.w	r3, #0
 8008d74:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8008d78:	464c      	mov	r4, r9
 8008d7a:	0323      	lsls	r3, r4, #12
 8008d7c:	4644      	mov	r4, r8
 8008d7e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8008d82:	4644      	mov	r4, r8
 8008d84:	0322      	lsls	r2, r4, #12
 8008d86:	1884      	adds	r4, r0, r2
 8008d88:	633c      	str	r4, [r7, #48]	@ 0x30
 8008d8a:	eb41 0303 	adc.w	r3, r1, r3
 8008d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d90:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8008d94:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8008d98:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8008d9c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8008da0:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8008da4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8008da8:	4b20      	ldr	r3, [pc, #128]	@ (8008e2c <bmp280GetPressure+0x308>)
 8008daa:	881b      	ldrh	r3, [r3, #0]
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008db4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008db8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8008dbc:	462b      	mov	r3, r5
 8008dbe:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8008dc2:	4642      	mov	r2, r8
 8008dc4:	fb02 f203 	mul.w	r2, r2, r3
 8008dc8:	464b      	mov	r3, r9
 8008dca:	4621      	mov	r1, r4
 8008dcc:	fb01 f303 	mul.w	r3, r1, r3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	4641      	mov	r1, r8
 8008dd6:	fba2 1201 	umull	r1, r2, r2, r1
 8008dda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008dde:	460a      	mov	r2, r1
 8008de0:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8008de4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8008de8:	4413      	add	r3, r2
 8008dea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008dee:	f04f 0200 	mov.w	r2, #0
 8008df2:	f04f 0300 	mov.w	r3, #0
 8008df6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	104a      	asrs	r2, r1, #1
 8008dfe:	4629      	mov	r1, r5
 8008e00:	17cb      	asrs	r3, r1, #31
 8008e02:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if ( var1 == 0 ) return;
 8008e06:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	f000 8165 	beq.w	80090da <bmp280GetPressure+0x5b6>
 8008e10:	e00e      	b.n	8008e30 <bmp280GetPressure+0x30c>
 8008e12:	bf00      	nop
 8008e14:	20007adc 	.word	0x20007adc
 8008e18:	20007ace 	.word	0x20007ace
 8008e1c:	20007acc 	.word	0x20007acc
 8008e20:	20007aca 	.word	0x20007aca
 8008e24:	20007ac8 	.word	0x20007ac8
 8008e28:	20007ac6 	.word	0x20007ac6
 8008e2c:	20007ad8 	.word	0x20007ad8

	p = 1048576 - pres_adc;
 8008e30:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008e34:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8008e38:	17da      	asrs	r2, r3, #31
 8008e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e3e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8008e42:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p<<31) - var2)*3125) / var1;
 8008e46:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008e4a:	105b      	asrs	r3, r3, #1
 8008e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e50:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008e54:	07db      	lsls	r3, r3, #31
 8008e56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e5a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8008e5e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8008e62:	4621      	mov	r1, r4
 8008e64:	1a89      	subs	r1, r1, r2
 8008e66:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	eb61 0303 	sbc.w	r3, r1, r3
 8008e70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e74:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8008e78:	4622      	mov	r2, r4
 8008e7a:	462b      	mov	r3, r5
 8008e7c:	1891      	adds	r1, r2, r2
 8008e7e:	6239      	str	r1, [r7, #32]
 8008e80:	415b      	adcs	r3, r3
 8008e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e88:	4621      	mov	r1, r4
 8008e8a:	1851      	adds	r1, r2, r1
 8008e8c:	61b9      	str	r1, [r7, #24]
 8008e8e:	4629      	mov	r1, r5
 8008e90:	414b      	adcs	r3, r1
 8008e92:	61fb      	str	r3, [r7, #28]
 8008e94:	f04f 0200 	mov.w	r2, #0
 8008e98:	f04f 0300 	mov.w	r3, #0
 8008e9c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8008ea0:	4649      	mov	r1, r9
 8008ea2:	018b      	lsls	r3, r1, #6
 8008ea4:	4641      	mov	r1, r8
 8008ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008eaa:	4641      	mov	r1, r8
 8008eac:	018a      	lsls	r2, r1, #6
 8008eae:	4641      	mov	r1, r8
 8008eb0:	1889      	adds	r1, r1, r2
 8008eb2:	6139      	str	r1, [r7, #16]
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	eb43 0101 	adc.w	r1, r3, r1
 8008eba:	6179      	str	r1, [r7, #20]
 8008ebc:	f04f 0200 	mov.w	r2, #0
 8008ec0:	f04f 0300 	mov.w	r3, #0
 8008ec4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8008ec8:	4649      	mov	r1, r9
 8008eca:	008b      	lsls	r3, r1, #2
 8008ecc:	4641      	mov	r1, r8
 8008ece:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ed2:	4641      	mov	r1, r8
 8008ed4:	008a      	lsls	r2, r1, #2
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4603      	mov	r3, r0
 8008edc:	4622      	mov	r2, r4
 8008ede:	189b      	adds	r3, r3, r2
 8008ee0:	60bb      	str	r3, [r7, #8]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	462a      	mov	r2, r5
 8008ee6:	eb42 0303 	adc.w	r3, r2, r3
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	f04f 0200 	mov.w	r2, #0
 8008ef0:	f04f 0300 	mov.w	r3, #0
 8008ef4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8008ef8:	4649      	mov	r1, r9
 8008efa:	008b      	lsls	r3, r1, #2
 8008efc:	4641      	mov	r1, r8
 8008efe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f02:	4641      	mov	r1, r8
 8008f04:	008a      	lsls	r2, r1, #2
 8008f06:	4610      	mov	r0, r2
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4622      	mov	r2, r4
 8008f0e:	189b      	adds	r3, r3, r2
 8008f10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f12:	462b      	mov	r3, r5
 8008f14:	460a      	mov	r2, r1
 8008f16:	eb42 0303 	adc.w	r3, r2, r3
 8008f1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f1c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8008f20:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8008f24:	f7f7 ff28 	bl	8000d78 <__aeabi_ldivmod>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8008f30:	4b6d      	ldr	r3, [pc, #436]	@ (80090e8 <bmp280GetPressure+0x5c4>)
 8008f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f36:	b21b      	sxth	r3, r3
 8008f38:	17da      	asrs	r2, r3, #31
 8008f3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f3c:	677a      	str	r2, [r7, #116]	@ 0x74
 8008f3e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8008f42:	f04f 0000 	mov.w	r0, #0
 8008f46:	f04f 0100 	mov.w	r1, #0
 8008f4a:	0b50      	lsrs	r0, r2, #13
 8008f4c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8008f50:	1359      	asrs	r1, r3, #13
 8008f52:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8008f56:	462b      	mov	r3, r5
 8008f58:	fb00 f203 	mul.w	r2, r0, r3
 8008f5c:	4623      	mov	r3, r4
 8008f5e:	fb03 f301 	mul.w	r3, r3, r1
 8008f62:	4413      	add	r3, r2
 8008f64:	4622      	mov	r2, r4
 8008f66:	fba2 1200 	umull	r1, r2, r2, r0
 8008f6a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8008f6e:	460a      	mov	r2, r1
 8008f70:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8008f74:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008f78:	4413      	add	r3, r2
 8008f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f7e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8008f82:	f04f 0000 	mov.w	r0, #0
 8008f86:	f04f 0100 	mov.w	r1, #0
 8008f8a:	0b50      	lsrs	r0, r2, #13
 8008f8c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8008f90:	1359      	asrs	r1, r3, #13
 8008f92:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8008f96:	462b      	mov	r3, r5
 8008f98:	fb00 f203 	mul.w	r2, r0, r3
 8008f9c:	4623      	mov	r3, r4
 8008f9e:	fb03 f301 	mul.w	r3, r3, r1
 8008fa2:	4413      	add	r3, r2
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	fba2 1200 	umull	r1, r2, r2, r0
 8008faa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008fae:	460a      	mov	r2, r1
 8008fb0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8008fb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008fb8:	4413      	add	r3, r2
 8008fba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008fbe:	f04f 0200 	mov.w	r2, #0
 8008fc2:	f04f 0300 	mov.w	r3, #0
 8008fc6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8008fca:	4621      	mov	r1, r4
 8008fcc:	0e4a      	lsrs	r2, r1, #25
 8008fce:	4629      	mov	r1, r5
 8008fd0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	164b      	asrs	r3, r1, #25
 8008fd8:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = (((int64_t)p8) * p) >> 19;
 8008fdc:	4b43      	ldr	r3, [pc, #268]	@ (80090ec <bmp280GetPressure+0x5c8>)
 8008fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fe2:	b21b      	sxth	r3, r3
 8008fe4:	17da      	asrs	r2, r3, #31
 8008fe6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008fe8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008fea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008fee:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8008ff2:	462a      	mov	r2, r5
 8008ff4:	fb02 f203 	mul.w	r2, r2, r3
 8008ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	fb01 f303 	mul.w	r3, r1, r3
 8009002:	4413      	add	r3, r2
 8009004:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009008:	4621      	mov	r1, r4
 800900a:	fba2 1201 	umull	r1, r2, r2, r1
 800900e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009012:	460a      	mov	r2, r1
 8009014:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8009018:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800901c:	4413      	add	r3, r2
 800901e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009022:	f04f 0200 	mov.w	r2, #0
 8009026:	f04f 0300 	mov.w	r3, #0
 800902a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800902e:	4621      	mov	r1, r4
 8009030:	0cca      	lsrs	r2, r1, #19
 8009032:	4629      	mov	r1, r5
 8009034:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8009038:	4629      	mov	r1, r5
 800903a:	14cb      	asrs	r3, r1, #19
 800903c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8009040:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8009044:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8009048:	1884      	adds	r4, r0, r2
 800904a:	663c      	str	r4, [r7, #96]	@ 0x60
 800904c:	eb41 0303 	adc.w	r3, r1, r3
 8009050:	667b      	str	r3, [r7, #100]	@ 0x64
 8009052:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009056:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800905a:	4621      	mov	r1, r4
 800905c:	1889      	adds	r1, r1, r2
 800905e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009060:	4629      	mov	r1, r5
 8009062:	eb43 0101 	adc.w	r1, r3, r1
 8009066:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8009068:	f04f 0000 	mov.w	r0, #0
 800906c:	f04f 0100 	mov.w	r1, #0
 8009070:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8009074:	4623      	mov	r3, r4
 8009076:	0a18      	lsrs	r0, r3, #8
 8009078:	462b      	mov	r3, r5
 800907a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800907e:	462b      	mov	r3, r5
 8009080:	1219      	asrs	r1, r3, #8
 8009082:	4b1b      	ldr	r3, [pc, #108]	@ (80090f0 <bmp280GetPressure+0x5cc>)
 8009084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009088:	b21b      	sxth	r3, r3
 800908a:	17da      	asrs	r2, r3, #31
 800908c:	653b      	str	r3, [r7, #80]	@ 0x50
 800908e:	657a      	str	r2, [r7, #84]	@ 0x54
 8009090:	f04f 0200 	mov.w	r2, #0
 8009094:	f04f 0300 	mov.w	r3, #0
 8009098:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800909c:	464c      	mov	r4, r9
 800909e:	0123      	lsls	r3, r4, #4
 80090a0:	4644      	mov	r4, r8
 80090a2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80090a6:	4644      	mov	r4, r8
 80090a8:	0122      	lsls	r2, r4, #4
 80090aa:	1884      	adds	r4, r0, r2
 80090ac:	603c      	str	r4, [r7, #0]
 80090ae:	eb41 0303 	adc.w	r3, r1, r3
 80090b2:	607b      	str	r3, [r7, #4]
 80090b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80090b8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	*pressure = (float) p / 256.0f;
 80090bc:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80090c0:	f7f7 fe1c 	bl	8000cfc <__aeabi_l2f>
 80090c4:	ee06 0a90 	vmov	s13, r0
 80090c8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80090f4 <bmp280GetPressure+0x5d0>
 80090cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090d4:	edc3 7a00 	vstr	s15, [r3]
 80090d8:	e000      	b.n	80090dc <bmp280GetPressure+0x5b8>
	if ( var1 == 0 ) return;
 80090da:	bf00      	nop

}
 80090dc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80090e0:	46bd      	mov	sp, r7
 80090e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090e6:	bf00      	nop
 80090e8:	20007ad4 	.word	0x20007ad4
 80090ec:	20007ad2 	.word	0x20007ad2
 80090f0:	20007ad0 	.word	0x20007ad0
 80090f4:	43800000 	.word	0x43800000

080090f8 <bmp280Init>:
void bmp280Init()
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0

	bmp280_StartUp();
 80090fc:	f7ff fbb0 	bl	8008860 <bmp280_StartUp>
	vTaskDelay(5);
 8009100:	2005      	movs	r0, #5
 8009102:	f7fd fbbb 	bl	800687c <vTaskDelay>
	bmp280_ReadCalibrateValue();
 8009106:	f7ff fc1d 	bl	8008944 <bmp280_ReadCalibrateValue>
	vTaskDelay(5);
 800910a:	2005      	movs	r0, #5
 800910c:	f7fd fbb6 	bl	800687c <vTaskDelay>
	bmp280_WriteReg(BMP280_REG_CTRL, ( (TEMP_18BIT_RES<<5) | (PRES_18BIT_RES<<2) | BMP280_NORMAL_MODE));
 8009110:	216f      	movs	r1, #111	@ 0x6f
 8009112:	20f4      	movs	r0, #244	@ 0xf4
 8009114:	f7ff fbba 	bl	800888c <bmp280_WriteReg>
	isInit = true;
 8009118:	4b02      	ldr	r3, [pc, #8]	@ (8009124 <bmp280Init+0x2c>)
 800911a:	2201      	movs	r2, #1
 800911c:	701a      	strb	r2, [r3, #0]
}
 800911e:	bf00      	nop
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	20007ac1 	.word	0x20007ac1

08009128 <bmp280TestConnection>:
{

	return true;
}
bool bmp280TestConnection()
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
	uint8_t checkID;

	if (!isInit) return false;
 800912e:	4b0d      	ldr	r3, [pc, #52]	@ (8009164 <bmp280TestConnection+0x3c>)
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	f083 0301 	eor.w	r3, r3, #1
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <bmp280TestConnection+0x18>
 800913c:	2300      	movs	r3, #0
 800913e:	e00d      	b.n	800915c <bmp280TestConnection+0x34>

	bmp280_StartUp();
 8009140:	f7ff fb8e 	bl	8008860 <bmp280_StartUp>
	bmp280_ReadReg(BMP280_REG_ID, &checkID, 1);
 8009144:	1dfb      	adds	r3, r7, #7
 8009146:	2201      	movs	r2, #1
 8009148:	4619      	mov	r1, r3
 800914a:	20d0      	movs	r0, #208	@ 0xd0
 800914c:	f7ff fbca 	bl	80088e4 <bmp280_ReadReg>

	if ( checkID != 0x58 ) return false;
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	2b58      	cmp	r3, #88	@ 0x58
 8009154:	d001      	beq.n	800915a <bmp280TestConnection+0x32>
 8009156:	2300      	movs	r3, #0
 8009158:	e000      	b.n	800915c <bmp280TestConnection+0x34>

	return true;
 800915a:	2301      	movs	r3, #1
}
 800915c:	4618      	mov	r0, r3
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20007ac1 	.word	0x20007ac1

08009168 <bmp280GetData>:
void bmp280GetData(float* pressure, float* temperature, float* asl)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
	bmp280GetTemperature(temperature);
 8009174:	68b8      	ldr	r0, [r7, #8]
 8009176:	f7ff fc79 	bl	8008a6c <bmp280GetTemperature>
	bmp280GetPressure(pressure);
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f7ff fcd2 	bl	8008b24 <bmp280GetPressure>
	*asl = bmp280PressureToAltitude(pressure);
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 f809 	bl	8009198 <bmp280PressureToAltitude>
 8009186:	eef0 7a40 	vmov.f32	s15, s0
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	edc3 7a00 	vstr	s15, [r3]

}
 8009190:	bf00      	nop
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <bmp280PressureToAltitude>:
#define CONST_PF2 44330.0f
#define FIX_TEMP 25         // Fixed Temperature. ASL is a function of pressure and temperature, but as the temperature changes so much (blow a little towards the flie and watch it drop 5 degrees) it corrupts the ASL estimates.
                            // TLDR: Adjusting for temp changes does more harm than good.

float bmp280PressureToAltitude(float* pressure)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
    if (*pressure > 0)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	edd3 7a00 	vldr	s15, [r3]
 80091a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ae:	dd1b      	ble.n	80091e8 <bmp280PressureToAltitude+0x50>
    {
        //return (1.f - pow(*pressure / CONST_SEA_PRESSURE, CONST_PF)) * CONST_PF2;
        //return ((pow((1015.7 / *pressure), CONST_PF) - 1.0) * (25. + 273.15)) / 0.0065;
        return ((powf((1015.7f / *pressure), CONST_PF) - 1.0f) * (FIX_TEMP + 273.15f)) / 0.0065f;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	edd3 7a00 	vldr	s15, [r3]
 80091b6:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80091fc <bmp280PressureToAltitude+0x64>
 80091ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091be:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8009200 <bmp280PressureToAltitude+0x68>
 80091c2:	eeb0 0a47 	vmov.f32	s0, s14
 80091c6:	f00e fcf3 	bl	8017bb0 <powf>
 80091ca:	eef0 7a40 	vmov.f32	s15, s0
 80091ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091d6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8009204 <bmp280PressureToAltitude+0x6c>
 80091da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80091de:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8009208 <bmp280PressureToAltitude+0x70>
 80091e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80091e6:	e001      	b.n	80091ec <bmp280PressureToAltitude+0x54>
    }
    else
    {
        return 0;
 80091e8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800920c <bmp280PressureToAltitude+0x74>
    }
}
 80091ec:	eef0 7a47 	vmov.f32	s15, s14
 80091f0:	eeb0 0a67 	vmov.f32	s0, s15
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	447deccd 	.word	0x447deccd
 8009200:	3e42d454 	.word	0x3e42d454
 8009204:	43951333 	.word	0x43951333
 8009208:	3bd4fdf4 	.word	0x3bd4fdf4
 800920c:	00000000 	.word	0x00000000

08009210 <hal_dshot_init>:
static void dshot_enable_dma_request();

/*
 * Functions
 */
void hal_dshot_init(dshot_type dshot_type){
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800921a:	79fb      	ldrb	r3, [r7, #7]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 f833 	bl	8009288 <dshot_set_timer>
	dshot_put_tc_callback_function();
 8009222:	f000 f8d1 	bl	80093c8 <dshot_put_tc_callback_function>
	// tc tranfer complet = disable dma( if chang to circular mode maybe modify this )
	dshot_start_pwm();
 8009226:	f000 f8eb 	bl	8009400 <dshot_start_pwm>
}
 800922a:	bf00      	nop
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <hal_dshot_write>:

void hal_dshot_write(uint16_t* motor_value){
 8009232:	b580      	push	{r7, lr}
 8009234:	b082      	sub	sp, #8
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f95c 	bl	80094f8 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8009240:	f000 f986 	bl	8009550 <dshot_dma_start>
	dshot_enable_dma_request();
 8009244:	f000 f9ba 	bl	80095bc <dshot_enable_dma_request>
//	step_after = 1;
}
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <dshot_choose_type>:
/*
 * Static Functions
 */

static uint32_t dshot_choose_type(dshot_type dshot_type)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	4603      	mov	r3, r0
 8009258:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 800925a:	79fb      	ldrb	r3, [r7, #7]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d003      	beq.n	8009268 <dshot_choose_type+0x18>
 8009260:	2b02      	cmp	r3, #2
 8009262:	d103      	bne.n	800926c <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return dshot600_hz;
 8009264:	4b05      	ldr	r3, [pc, #20]	@ (800927c <dshot_choose_type+0x2c>)
 8009266:	e002      	b.n	800926e <dshot_choose_type+0x1e>

		case(DSHOT300):
				return dshot300_hz;
 8009268:	4b05      	ldr	r3, [pc, #20]	@ (8009280 <dshot_choose_type+0x30>)
 800926a:	e000      	b.n	800926e <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return dshot150_hz;
 800926c:	4b05      	ldr	r3, [pc, #20]	@ (8009284 <dshot_choose_type+0x34>)
	}
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	00b71b00 	.word	0x00b71b00
 8009280:	005b8d80 	.word	0x005b8d80
 8009284:	002dc6c0 	.word	0x002dc6c0

08009288 <dshot_set_timer>:


static void dshot_set_timer(dshot_type dshot_type)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	ed2d 8b02 	vpush	{d8}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 8009296:	4b27      	ldr	r3, [pc, #156]	@ (8009334 <dshot_set_timer+0xac>)
 8009298:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	ee07 3a90 	vmov	s15, r3
 80092a0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7ff ffd2 	bl	8009250 <dshot_choose_type>
 80092ac:	ee07 0a90 	vmov	s15, r0
 80092b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80092b4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80092b8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8009338 <dshot_set_timer+0xb0>
 80092bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092c0:	eeb0 0a67 	vmov.f32	s0, s15
 80092c4:	f00e fdb8 	bl	8017e38 <lrintf>
 80092c8:	4603      	mov	r3, r0
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	3b01      	subs	r3, #1
 80092ce:	817b      	strh	r3, [r7, #10]
	//if we choose dshot600 = 12 Mhz => time clock / 12Mhzh -1 = 6
	// dshot prescalar = 6 and atore load = 20
	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 80092d0:	4b1a      	ldr	r3, [pc, #104]	@ (800933c <dshot_set_timer+0xb4>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	897a      	ldrh	r2, [r7, #10]
 80092d6:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 80092d8:	4b18      	ldr	r3, [pc, #96]	@ (800933c <dshot_set_timer+0xb4>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2214      	movs	r2, #20
 80092de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80092e0:	4b16      	ldr	r3, [pc, #88]	@ (800933c <dshot_set_timer+0xb4>)
 80092e2:	2214      	movs	r2, #20
 80092e4:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 80092e6:	4b15      	ldr	r3, [pc, #84]	@ (800933c <dshot_set_timer+0xb4>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	897a      	ldrh	r2, [r7, #10]
 80092ec:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 80092ee:	4b13      	ldr	r3, [pc, #76]	@ (800933c <dshot_set_timer+0xb4>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2214      	movs	r2, #20
 80092f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80092f6:	4b11      	ldr	r3, [pc, #68]	@ (800933c <dshot_set_timer+0xb4>)
 80092f8:	2214      	movs	r2, #20
 80092fa:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 80092fc:	4b0f      	ldr	r3, [pc, #60]	@ (800933c <dshot_set_timer+0xb4>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	897a      	ldrh	r2, [r7, #10]
 8009302:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8009304:	4b0d      	ldr	r3, [pc, #52]	@ (800933c <dshot_set_timer+0xb4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2214      	movs	r2, #20
 800930a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800930c:	4b0b      	ldr	r3, [pc, #44]	@ (800933c <dshot_set_timer+0xb4>)
 800930e:	2214      	movs	r2, #20
 8009310:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8009312:	4b0a      	ldr	r3, [pc, #40]	@ (800933c <dshot_set_timer+0xb4>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	897a      	ldrh	r2, [r7, #10]
 8009318:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 800931a:	4b08      	ldr	r3, [pc, #32]	@ (800933c <dshot_set_timer+0xb4>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2214      	movs	r2, #20
 8009320:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009322:	4b06      	ldr	r3, [pc, #24]	@ (800933c <dshot_set_timer+0xb4>)
 8009324:	2214      	movs	r2, #20
 8009326:	60da      	str	r2, [r3, #12]
}
 8009328:	bf00      	nop
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	ecbd 8b02 	vpop	{d8}
 8009332:	bd80      	pop	{r7, pc}
 8009334:	0501bd00 	.word	0x0501bd00
 8009338:	3c23d70a 	.word	0x3c23d70a
 800933c:	20007d5c 	.word	0x20007d5c

08009340 <dshot_dma_tc_callback>:


static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800934c:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d108      	bne.n	800936a <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009366:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8009368:	e028      	b.n	80093bc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	429a      	cmp	r2, r3
 8009372:	d108      	bne.n	8009386 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68da      	ldr	r2, [r3, #12]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009382:	60da      	str	r2, [r3, #12]
}
 8009384:	e01a      	b.n	80093bc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	429a      	cmp	r2, r3
 800938e:	d108      	bne.n	80093a2 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800939e:	60da      	str	r2, [r3, #12]
}
 80093a0:	e00c      	b.n	80093bc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d107      	bne.n	80093bc <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80093ba:	60da      	str	r2, [r3, #12]
}
 80093bc:	bf00      	nop
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 80093c8:	b480      	push	{r7}
 80093ca:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 80093cc:	4b0a      	ldr	r3, [pc, #40]	@ (80093f8 <dshot_put_tc_callback_function+0x30>)
 80093ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d0:	4a0a      	ldr	r2, [pc, #40]	@ (80093fc <dshot_put_tc_callback_function+0x34>)
 80093d2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 80093d4:	4b08      	ldr	r3, [pc, #32]	@ (80093f8 <dshot_put_tc_callback_function+0x30>)
 80093d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d8:	4a08      	ldr	r2, [pc, #32]	@ (80093fc <dshot_put_tc_callback_function+0x34>)
 80093da:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 80093dc:	4b06      	ldr	r3, [pc, #24]	@ (80093f8 <dshot_put_tc_callback_function+0x30>)
 80093de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e0:	4a06      	ldr	r2, [pc, #24]	@ (80093fc <dshot_put_tc_callback_function+0x34>)
 80093e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 80093e4:	4b04      	ldr	r3, [pc, #16]	@ (80093f8 <dshot_put_tc_callback_function+0x30>)
 80093e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e8:	4a04      	ldr	r2, [pc, #16]	@ (80093fc <dshot_put_tc_callback_function+0x34>)
 80093ea:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80093ec:	bf00      	nop
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	20007d5c 	.word	0x20007d5c
 80093fc:	08009341 	.word	0x08009341

08009400 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8009400:	b580      	push	{r7, lr}
 8009402:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8009404:	2100      	movs	r1, #0
 8009406:	4808      	ldr	r0, [pc, #32]	@ (8009428 <dshot_start_pwm+0x28>)
 8009408:	f7fb f926 	bl	8004658 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 800940c:	2104      	movs	r1, #4
 800940e:	4806      	ldr	r0, [pc, #24]	@ (8009428 <dshot_start_pwm+0x28>)
 8009410:	f7fb f922 	bl	8004658 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8009414:	2108      	movs	r1, #8
 8009416:	4804      	ldr	r0, [pc, #16]	@ (8009428 <dshot_start_pwm+0x28>)
 8009418:	f7fb f91e 	bl	8004658 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 800941c:	210c      	movs	r1, #12
 800941e:	4802      	ldr	r0, [pc, #8]	@ (8009428 <dshot_start_pwm+0x28>)
 8009420:	f7fb f91a 	bl	8004658 <HAL_TIM_PWM_Start>
}
 8009424:	bf00      	nop
 8009426:	bd80      	pop	{r7, pc}
 8009428:	20007d5c 	.word	0x20007d5c

0800942c <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 800942c:	b480      	push	{r7}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8009436:	2300      	movs	r3, #0
 8009438:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 800943a:	88fb      	ldrh	r3, [r7, #6]
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	b21a      	sxth	r2, r3
 8009440:	7afb      	ldrb	r3, [r7, #11]
 8009442:	b21b      	sxth	r3, r3
 8009444:	4313      	orrs	r3, r2
 8009446:	b21b      	sxth	r3, r3
 8009448:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet; // if value = 50 => packet = 100
 800944e:	893b      	ldrh	r3, [r7, #8]
 8009450:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8009452:	2300      	movs	r3, #0
 8009454:	60fb      	str	r3, [r7, #12]
 8009456:	e009      	b.n	800946c <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	4053      	eors	r3, r2
 800945e:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	091b      	lsrs	r3, r3, #4
 8009464:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	3301      	adds	r3, #1
 800946a:	60fb      	str	r3, [r7, #12]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2b02      	cmp	r3, #2
 8009470:	ddf2      	ble.n	8009458 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;// 0 1111
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	f003 030f 	and.w	r3, r3, #15
 8009478:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 800947a:	893b      	ldrh	r3, [r7, #8]
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	b29a      	uxth	r2, r3
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	b29b      	uxth	r3, r3
 8009484:	4313      	orrs	r3, r2
 8009486:	813b      	strh	r3, [r7, #8]

	return packet;
 8009488:	893b      	ldrh	r3, [r7, #8]
}
 800948a:	4618      	mov	r0, r3
 800948c:	371c      	adds	r7, #28
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr

08009496 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b084      	sub	sp, #16
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	460b      	mov	r3, r1
 80094a0:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 80094a2:	887b      	ldrh	r3, [r7, #2]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7ff ffc1 	bl	800942c <dshot_prepare_packet>
 80094aa:	4603      	mov	r3, r0
 80094ac:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 80094ae:	2300      	movs	r3, #0
 80094b0:	60bb      	str	r3, [r7, #8]
 80094b2:	e011      	b.n	80094d8 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 80094b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	da01      	bge.n	80094c0 <dshot_prepare_dmabuffer+0x2a>
 80094bc:	220e      	movs	r2, #14
 80094be:	e000      	b.n	80094c2 <dshot_prepare_dmabuffer+0x2c>
 80094c0:	2207      	movs	r2, #7
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	440b      	add	r3, r1
 80094ca:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 80094cc:	89fb      	ldrh	r3, [r7, #14]
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	3301      	adds	r3, #1
 80094d6:	60bb      	str	r3, [r7, #8]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2b0f      	cmp	r3, #15
 80094dc:	ddea      	ble.n	80094b4 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3340      	adds	r3, #64	@ 0x40
 80094e2:	2200      	movs	r2, #0
 80094e4:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	3344      	adds	r3, #68	@ 0x44
 80094ea:	2200      	movs	r2, #0
 80094ec:	601a      	str	r2, [r3, #0]
}
 80094ee:	bf00      	nop
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	881b      	ldrh	r3, [r3, #0]
 8009504:	4619      	mov	r1, r3
 8009506:	480e      	ldr	r0, [pc, #56]	@ (8009540 <dshot_prepare_dmabuffer_all+0x48>)
 8009508:	f7ff ffc5 	bl	8009496 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	3302      	adds	r3, #2
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	4619      	mov	r1, r3
 8009514:	480b      	ldr	r0, [pc, #44]	@ (8009544 <dshot_prepare_dmabuffer_all+0x4c>)
 8009516:	f7ff ffbe 	bl	8009496 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3304      	adds	r3, #4
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	4619      	mov	r1, r3
 8009522:	4809      	ldr	r0, [pc, #36]	@ (8009548 <dshot_prepare_dmabuffer_all+0x50>)
 8009524:	f7ff ffb7 	bl	8009496 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3306      	adds	r3, #6
 800952c:	881b      	ldrh	r3, [r3, #0]
 800952e:	4619      	mov	r1, r3
 8009530:	4806      	ldr	r0, [pc, #24]	@ (800954c <dshot_prepare_dmabuffer_all+0x54>)
 8009532:	f7ff ffb0 	bl	8009496 <dshot_prepare_dmabuffer>
}
 8009536:	bf00      	nop
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20007ae0 	.word	0x20007ae0
 8009544:	20007b28 	.word	0x20007b28
 8009548:	20007b70 	.word	0x20007b70
 800954c:	20007bb8 	.word	0x20007bb8

08009550 <dshot_dma_start>:

static void dshot_dma_start()
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8009554:	4b14      	ldr	r3, [pc, #80]	@ (80095a8 <dshot_dma_start+0x58>)
 8009556:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8009558:	4914      	ldr	r1, [pc, #80]	@ (80095ac <dshot_dma_start+0x5c>)
 800955a:	4b13      	ldr	r3, [pc, #76]	@ (80095a8 <dshot_dma_start+0x58>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	3334      	adds	r3, #52	@ 0x34
 8009560:	461a      	mov	r2, r3
 8009562:	2312      	movs	r3, #18
 8009564:	f7f7 ffae 	bl	80014c4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8009568:	4b0f      	ldr	r3, [pc, #60]	@ (80095a8 <dshot_dma_start+0x58>)
 800956a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800956c:	4910      	ldr	r1, [pc, #64]	@ (80095b0 <dshot_dma_start+0x60>)
 800956e:	4b0e      	ldr	r3, [pc, #56]	@ (80095a8 <dshot_dma_start+0x58>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3338      	adds	r3, #56	@ 0x38
 8009574:	461a      	mov	r2, r3
 8009576:	2312      	movs	r3, #18
 8009578:	f7f7 ffa4 	bl	80014c4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 800957c:	4b0a      	ldr	r3, [pc, #40]	@ (80095a8 <dshot_dma_start+0x58>)
 800957e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8009580:	490c      	ldr	r1, [pc, #48]	@ (80095b4 <dshot_dma_start+0x64>)
 8009582:	4b09      	ldr	r3, [pc, #36]	@ (80095a8 <dshot_dma_start+0x58>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	333c      	adds	r3, #60	@ 0x3c
 8009588:	461a      	mov	r2, r3
 800958a:	2312      	movs	r3, #18
 800958c:	f7f7 ff9a 	bl	80014c4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8009590:	4b05      	ldr	r3, [pc, #20]	@ (80095a8 <dshot_dma_start+0x58>)
 8009592:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009594:	4908      	ldr	r1, [pc, #32]	@ (80095b8 <dshot_dma_start+0x68>)
 8009596:	4b04      	ldr	r3, [pc, #16]	@ (80095a8 <dshot_dma_start+0x58>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3340      	adds	r3, #64	@ 0x40
 800959c:	461a      	mov	r2, r3
 800959e:	2312      	movs	r3, #18
 80095a0:	f7f7 ff90 	bl	80014c4 <HAL_DMA_Start_IT>
}
 80095a4:	bf00      	nop
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20007d5c 	.word	0x20007d5c
 80095ac:	20007ae0 	.word	0x20007ae0
 80095b0:	20007b28 	.word	0x20007b28
 80095b4:	20007b70 	.word	0x20007b70
 80095b8:	20007bb8 	.word	0x20007bb8

080095bc <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC1);
 80095c0:	4b12      	ldr	r3, [pc, #72]	@ (800960c <dshot_enable_dma_request+0x50>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68da      	ldr	r2, [r3, #12]
 80095c6:	4b11      	ldr	r3, [pc, #68]	@ (800960c <dshot_enable_dma_request+0x50>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095ce:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC2);
 80095d0:	4b0e      	ldr	r3, [pc, #56]	@ (800960c <dshot_enable_dma_request+0x50>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68da      	ldr	r2, [r3, #12]
 80095d6:	4b0d      	ldr	r3, [pc, #52]	@ (800960c <dshot_enable_dma_request+0x50>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80095de:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC3);
 80095e0:	4b0a      	ldr	r3, [pc, #40]	@ (800960c <dshot_enable_dma_request+0x50>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68da      	ldr	r2, [r3, #12]
 80095e6:	4b09      	ldr	r3, [pc, #36]	@ (800960c <dshot_enable_dma_request+0x50>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095ee:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC4);
 80095f0:	4b06      	ldr	r3, [pc, #24]	@ (800960c <dshot_enable_dma_request+0x50>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	4b05      	ldr	r3, [pc, #20]	@ (800960c <dshot_enable_dma_request+0x50>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80095fe:	60da      	str	r2, [r3, #12]
}
 8009600:	bf00      	nop
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	20007d5c 	.word	0x20007d5c

08009610 <GPIO_Init>:
 *      Author: AI FARM
 */

#include "gpio_drv.h"

void GPIO_Init(void){
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009616:	2300      	movs	r3, #0
 8009618:	60fb      	str	r3, [r7, #12]
 800961a:	4b17      	ldr	r3, [pc, #92]	@ (8009678 <GPIO_Init+0x68>)
 800961c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800961e:	4a16      	ldr	r2, [pc, #88]	@ (8009678 <GPIO_Init+0x68>)
 8009620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009624:	6313      	str	r3, [r2, #48]	@ 0x30
 8009626:	4b14      	ldr	r3, [pc, #80]	@ (8009678 <GPIO_Init+0x68>)
 8009628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800962a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009632:	2300      	movs	r3, #0
 8009634:	60bb      	str	r3, [r7, #8]
 8009636:	4b10      	ldr	r3, [pc, #64]	@ (8009678 <GPIO_Init+0x68>)
 8009638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800963a:	4a0f      	ldr	r2, [pc, #60]	@ (8009678 <GPIO_Init+0x68>)
 800963c:	f043 0304 	orr.w	r3, r3, #4
 8009640:	6313      	str	r3, [r2, #48]	@ 0x30
 8009642:	4b0d      	ldr	r3, [pc, #52]	@ (8009678 <GPIO_Init+0x68>)
 8009644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009646:	f003 0304 	and.w	r3, r3, #4
 800964a:	60bb      	str	r3, [r7, #8]
 800964c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800964e:	2300      	movs	r3, #0
 8009650:	607b      	str	r3, [r7, #4]
 8009652:	4b09      	ldr	r3, [pc, #36]	@ (8009678 <GPIO_Init+0x68>)
 8009654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009656:	4a08      	ldr	r2, [pc, #32]	@ (8009678 <GPIO_Init+0x68>)
 8009658:	f043 0301 	orr.w	r3, r3, #1
 800965c:	6313      	str	r3, [r2, #48]	@ 0x30
 800965e:	4b06      	ldr	r3, [pc, #24]	@ (8009678 <GPIO_Init+0x68>)
 8009660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	607b      	str	r3, [r7, #4]
 8009668:	687b      	ldr	r3, [r7, #4]
}
 800966a:	bf00      	nop
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	40023800 	.word	0x40023800

0800967c <I2C1_Init>:
#include "i2c_drv.h"

I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;
void I2C1_Init(void)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	af00      	add	r7, sp, #0

	hi2c1.Instance = I2C1;
 8009680:	4b12      	ldr	r3, [pc, #72]	@ (80096cc <I2C1_Init+0x50>)
 8009682:	4a13      	ldr	r2, [pc, #76]	@ (80096d0 <I2C1_Init+0x54>)
 8009684:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8009686:	4b11      	ldr	r3, [pc, #68]	@ (80096cc <I2C1_Init+0x50>)
 8009688:	4a12      	ldr	r2, [pc, #72]	@ (80096d4 <I2C1_Init+0x58>)
 800968a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800968c:	4b0f      	ldr	r3, [pc, #60]	@ (80096cc <I2C1_Init+0x50>)
 800968e:	2200      	movs	r2, #0
 8009690:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8009692:	4b0e      	ldr	r3, [pc, #56]	@ (80096cc <I2C1_Init+0x50>)
 8009694:	2200      	movs	r2, #0
 8009696:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009698:	4b0c      	ldr	r3, [pc, #48]	@ (80096cc <I2C1_Init+0x50>)
 800969a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800969e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80096a0:	4b0a      	ldr	r3, [pc, #40]	@ (80096cc <I2C1_Init+0x50>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80096a6:	4b09      	ldr	r3, [pc, #36]	@ (80096cc <I2C1_Init+0x50>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80096ac:	4b07      	ldr	r3, [pc, #28]	@ (80096cc <I2C1_Init+0x50>)
 80096ae:	2200      	movs	r2, #0
 80096b0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80096b2:	4b06      	ldr	r3, [pc, #24]	@ (80096cc <I2C1_Init+0x50>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80096b8:	4804      	ldr	r0, [pc, #16]	@ (80096cc <I2C1_Init+0x50>)
 80096ba:	f7f8 fbb7 	bl	8001e2c <HAL_I2C_Init>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <I2C1_Init+0x4c>
		Error_Handler();
 80096c4:	f7fe ff94 	bl	80085f0 <Error_Handler>
	}

}
 80096c8:	bf00      	nop
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	20007c00 	.word	0x20007c00
 80096d0:	40005400 	.word	0x40005400
 80096d4:	00061a80 	.word	0x00061a80

080096d8 <I2C2_Init>:
void I2C2_Init(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80096dc:	4b12      	ldr	r3, [pc, #72]	@ (8009728 <I2C2_Init+0x50>)
 80096de:	4a13      	ldr	r2, [pc, #76]	@ (800972c <I2C2_Init+0x54>)
 80096e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80096e2:	4b11      	ldr	r3, [pc, #68]	@ (8009728 <I2C2_Init+0x50>)
 80096e4:	4a12      	ldr	r2, [pc, #72]	@ (8009730 <I2C2_Init+0x58>)
 80096e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80096e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009728 <I2C2_Init+0x50>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80096ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009728 <I2C2_Init+0x50>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80096f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009728 <I2C2_Init+0x50>)
 80096f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80096fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80096fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009728 <I2C2_Init+0x50>)
 80096fe:	2200      	movs	r2, #0
 8009700:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8009702:	4b09      	ldr	r3, [pc, #36]	@ (8009728 <I2C2_Init+0x50>)
 8009704:	2200      	movs	r2, #0
 8009706:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009708:	4b07      	ldr	r3, [pc, #28]	@ (8009728 <I2C2_Init+0x50>)
 800970a:	2200      	movs	r2, #0
 800970c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800970e:	4b06      	ldr	r3, [pc, #24]	@ (8009728 <I2C2_Init+0x50>)
 8009710:	2200      	movs	r2, #0
 8009712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009714:	4804      	ldr	r0, [pc, #16]	@ (8009728 <I2C2_Init+0x50>)
 8009716:	f7f8 fb89 	bl	8001e2c <HAL_I2C_Init>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <I2C2_Init+0x4c>
  {
    Error_Handler();
 8009720:	f7fe ff66 	bl	80085f0 <Error_Handler>
  }

}
 8009724:	bf00      	nop
 8009726:	bd80      	pop	{r7, pc}
 8009728:	20007c54 	.word	0x20007c54
 800972c:	40005800 	.word	0x40005800
 8009730:	00061a80 	.word	0x00061a80

08009734 <HAL_I2C_MspInit>:
void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b08c      	sub	sp, #48	@ 0x30
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800973c:	f107 031c 	add.w	r3, r7, #28
 8009740:	2200      	movs	r2, #0
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	605a      	str	r2, [r3, #4]
 8009746:	609a      	str	r2, [r3, #8]
 8009748:	60da      	str	r2, [r3, #12]
 800974a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a32      	ldr	r2, [pc, #200]	@ (800981c <HAL_I2C_MspInit+0xe8>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d12b      	bne.n	80097ae <HAL_I2C_MspInit+0x7a>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009756:	2300      	movs	r3, #0
 8009758:	61bb      	str	r3, [r7, #24]
 800975a:	4b31      	ldr	r3, [pc, #196]	@ (8009820 <HAL_I2C_MspInit+0xec>)
 800975c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800975e:	4a30      	ldr	r2, [pc, #192]	@ (8009820 <HAL_I2C_MspInit+0xec>)
 8009760:	f043 0302 	orr.w	r3, r3, #2
 8009764:	6313      	str	r3, [r2, #48]	@ 0x30
 8009766:	4b2e      	ldr	r3, [pc, #184]	@ (8009820 <HAL_I2C_MspInit+0xec>)
 8009768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800976a:	f003 0302 	and.w	r3, r3, #2
 800976e:	61bb      	str	r3, [r7, #24]
 8009770:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009772:	23c0      	movs	r3, #192	@ 0xc0
 8009774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009776:	2312      	movs	r3, #18
 8009778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800977a:	2300      	movs	r3, #0
 800977c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800977e:	2303      	movs	r3, #3
 8009780:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009782:	2304      	movs	r3, #4
 8009784:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009786:	f107 031c 	add.w	r3, r7, #28
 800978a:	4619      	mov	r1, r3
 800978c:	4825      	ldr	r0, [pc, #148]	@ (8009824 <HAL_I2C_MspInit+0xf0>)
 800978e:	f7f8 f97d 	bl	8001a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009792:	2300      	movs	r3, #0
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	4b22      	ldr	r3, [pc, #136]	@ (8009820 <HAL_I2C_MspInit+0xec>)
 8009798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800979a:	4a21      	ldr	r2, [pc, #132]	@ (8009820 <HAL_I2C_MspInit+0xec>)
 800979c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80097a2:	4b1f      	ldr	r3, [pc, #124]	@ (8009820 <HAL_I2C_MspInit+0xec>)
 80097a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097aa:	617b      	str	r3, [r7, #20]
 80097ac:	697b      	ldr	r3, [r7, #20]

  }
  if(i2cHandle->Instance==I2C2)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009828 <HAL_I2C_MspInit+0xf4>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d12c      	bne.n	8009812 <HAL_I2C_MspInit+0xde>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80097b8:	2300      	movs	r3, #0
 80097ba:	613b      	str	r3, [r7, #16]
 80097bc:	4b18      	ldr	r3, [pc, #96]	@ (8009820 <HAL_I2C_MspInit+0xec>)
 80097be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097c0:	4a17      	ldr	r2, [pc, #92]	@ (8009820 <HAL_I2C_MspInit+0xec>)
 80097c2:	f043 0302 	orr.w	r3, r3, #2
 80097c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80097c8:	4b15      	ldr	r3, [pc, #84]	@ (8009820 <HAL_I2C_MspInit+0xec>)
 80097ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097cc:	f003 0302 	and.w	r3, r3, #2
 80097d0:	613b      	str	r3, [r7, #16]
 80097d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80097d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80097d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80097da:	2312      	movs	r3, #18
 80097dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097de:	2300      	movs	r3, #0
 80097e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097e2:	2303      	movs	r3, #3
 80097e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80097e6:	2304      	movs	r3, #4
 80097e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097ea:	f107 031c 	add.w	r3, r7, #28
 80097ee:	4619      	mov	r1, r3
 80097f0:	480c      	ldr	r0, [pc, #48]	@ (8009824 <HAL_I2C_MspInit+0xf0>)
 80097f2:	f7f8 f94b 	bl	8001a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80097f6:	2300      	movs	r3, #0
 80097f8:	60fb      	str	r3, [r7, #12]
 80097fa:	4b09      	ldr	r3, [pc, #36]	@ (8009820 <HAL_I2C_MspInit+0xec>)
 80097fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097fe:	4a08      	ldr	r2, [pc, #32]	@ (8009820 <HAL_I2C_MspInit+0xec>)
 8009800:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009804:	6413      	str	r3, [r2, #64]	@ 0x40
 8009806:	4b06      	ldr	r3, [pc, #24]	@ (8009820 <HAL_I2C_MspInit+0xec>)
 8009808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800980a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800980e:	60fb      	str	r3, [r7, #12]
 8009810:	68fb      	ldr	r3, [r7, #12]

  }
}
 8009812:	bf00      	nop
 8009814:	3730      	adds	r7, #48	@ 0x30
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	40005400 	.word	0x40005400
 8009820:	40023800 	.word	0x40023800
 8009824:	40020400 	.word	0x40020400
 8009828:	40005800 	.word	0x40005800

0800982c <i2cdevReadReg16>:
#include "i2cdev.h"
#include "stdbool.h"


bool i2cdevReadReg16(I2C_HandleTypeDef *dev, uint8_t devAddress, uint16_t memAddress, uint16_t len, uint8_t *data)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b08a      	sub	sp, #40	@ 0x28
 8009830:	af04      	add	r7, sp, #16
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	4608      	mov	r0, r1
 8009836:	4611      	mov	r1, r2
 8009838:	461a      	mov	r2, r3
 800983a:	4603      	mov	r3, r0
 800983c:	72fb      	strb	r3, [r7, #11]
 800983e:	460b      	mov	r3, r1
 8009840:	813b      	strh	r3, [r7, #8]
 8009842:	4613      	mov	r3, r2
 8009844:	80fb      	strh	r3, [r7, #6]
	UNUSED(dev);
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c2, devAddress<<1, memAddress, I2C_MEMADD_SIZE_16BIT, data, len, 100);
 8009846:	7afb      	ldrb	r3, [r7, #11]
 8009848:	b29b      	uxth	r3, r3
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	b299      	uxth	r1, r3
 800984e:	893a      	ldrh	r2, [r7, #8]
 8009850:	2364      	movs	r3, #100	@ 0x64
 8009852:	9302      	str	r3, [sp, #8]
 8009854:	88fb      	ldrh	r3, [r7, #6]
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	2310      	movs	r3, #16
 800985e:	4807      	ldr	r0, [pc, #28]	@ (800987c <i2cdevReadReg16+0x50>)
 8009860:	f7f8 fd22 	bl	80022a8 <HAL_I2C_Mem_Read>
 8009864:	4603      	mov	r3, r0
 8009866:	75fb      	strb	r3, [r7, #23]

	if ( status == HAL_OK) return true;
 8009868:	7dfb      	ldrb	r3, [r7, #23]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <i2cdevReadReg16+0x46>
 800986e:	2301      	movs	r3, #1
 8009870:	e000      	b.n	8009874 <i2cdevReadReg16+0x48>
	else return false;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	20007c54 	.word	0x20007c54

08009880 <i2cdevWriteReg16>:
bool i2cdevWriteReg16(I2C_HandleTypeDef *dev, uint8_t devAddress, uint16_t memAddress, uint16_t len, uint8_t *data)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b08a      	sub	sp, #40	@ 0x28
 8009884:	af04      	add	r7, sp, #16
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	4608      	mov	r0, r1
 800988a:	4611      	mov	r1, r2
 800988c:	461a      	mov	r2, r3
 800988e:	4603      	mov	r3, r0
 8009890:	72fb      	strb	r3, [r7, #11]
 8009892:	460b      	mov	r3, r1
 8009894:	813b      	strh	r3, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	80fb      	strh	r3, [r7, #6]
	UNUSED(dev);
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c2, devAddress<<1, memAddress, I2C_MEMADD_SIZE_16BIT, data, len, 100);
 800989a:	7afb      	ldrb	r3, [r7, #11]
 800989c:	b29b      	uxth	r3, r3
 800989e:	005b      	lsls	r3, r3, #1
 80098a0:	b299      	uxth	r1, r3
 80098a2:	893a      	ldrh	r2, [r7, #8]
 80098a4:	2364      	movs	r3, #100	@ 0x64
 80098a6:	9302      	str	r3, [sp, #8]
 80098a8:	88fb      	ldrh	r3, [r7, #6]
 80098aa:	9301      	str	r3, [sp, #4]
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	2310      	movs	r3, #16
 80098b2:	4807      	ldr	r0, [pc, #28]	@ (80098d0 <i2cdevWriteReg16+0x50>)
 80098b4:	f7f8 fbfe 	bl	80020b4 <HAL_I2C_Mem_Write>
 80098b8:	4603      	mov	r3, r0
 80098ba:	75fb      	strb	r3, [r7, #23]

	if ( status == HAL_OK) return true;
 80098bc:	7dfb      	ldrb	r3, [r7, #23]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d101      	bne.n	80098c6 <i2cdevWriteReg16+0x46>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e000      	b.n	80098c8 <i2cdevWriteReg16+0x48>
	else return false;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3718      	adds	r7, #24
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	20007c54 	.word	0x20007c54

080098d4 <ledInit>:

static bool isInit;


void ledInit()
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0

	if (isInit)
 80098da:	4b1a      	ldr	r3, [pc, #104]	@ (8009944 <ledInit+0x70>)
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d12c      	bne.n	800993c <ledInit+0x68>
		return;
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80098e2:	1d3b      	adds	r3, r7, #4
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	605a      	str	r2, [r3, #4]
 80098ea:	609a      	str	r2, [r3, #8]
 80098ec:	60da      	str	r2, [r3, #12]
 80098ee:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80098f0:	2300      	movs	r3, #0
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	4b14      	ldr	r3, [pc, #80]	@ (8009948 <ledInit+0x74>)
 80098f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f8:	4a13      	ldr	r2, [pc, #76]	@ (8009948 <ledInit+0x74>)
 80098fa:	f043 0304 	orr.w	r3, r3, #4
 80098fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8009900:	4b11      	ldr	r3, [pc, #68]	@ (8009948 <ledInit+0x74>)
 8009902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009904:	f003 0304 	and.w	r3, r3, #4
 8009908:	603b      	str	r3, [r7, #0]
 800990a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 800990c:	2200      	movs	r2, #0
 800990e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009912:	480e      	ldr	r0, [pc, #56]	@ (800994c <ledInit+0x78>)
 8009914:	f7f8 fa56 	bl	8001dc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = LED_PIN;
 8009918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800991c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800991e:	2301      	movs	r3, #1
 8009920:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009922:	2300      	movs	r3, #0
 8009924:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009926:	2300      	movs	r3, #0
 8009928:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 800992a:	1d3b      	adds	r3, r7, #4
 800992c:	4619      	mov	r1, r3
 800992e:	4807      	ldr	r0, [pc, #28]	@ (800994c <ledInit+0x78>)
 8009930:	f7f8 f8ac 	bl	8001a8c <HAL_GPIO_Init>

	isInit = true;
 8009934:	4b03      	ldr	r3, [pc, #12]	@ (8009944 <ledInit+0x70>)
 8009936:	2201      	movs	r2, #1
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	e000      	b.n	800993e <ledInit+0x6a>
		return;
 800993c:	bf00      	nop
}
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	20007ca8 	.word	0x20007ca8
 8009948:	40023800 	.word	0x40023800
 800994c:	40020800 	.word	0x40020800

08009950 <ledSet>:


void ledSet(bool value)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	71fb      	strb	r3, [r7, #7]
	if ( value == 0 ) HAL_GPIO_WritePin(LED_PORT, LED_PIN, 0);
 800995a:	79fb      	ldrb	r3, [r7, #7]
 800995c:	f083 0301 	eor.w	r3, r3, #1
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b00      	cmp	r3, #0
 8009964:	d006      	beq.n	8009974 <ledSet+0x24>
 8009966:	2200      	movs	r2, #0
 8009968:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800996c:	4806      	ldr	r0, [pc, #24]	@ (8009988 <ledSet+0x38>)
 800996e:	f7f8 fa29 	bl	8001dc4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);

}
 8009972:	e005      	b.n	8009980 <ledSet+0x30>
	else HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);
 8009974:	2201      	movs	r2, #1
 8009976:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800997a:	4803      	ldr	r0, [pc, #12]	@ (8009988 <ledSet+0x38>)
 800997c:	f7f8 fa22 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	40020800 	.word	0x40020800

0800998c <mpu6500TestConnection>:
#include "mpu6500.h"
#include "i2c_drv.h"

uint8_t walk = 0;

bool mpu6500TestConnection() {
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af04      	add	r7, sp, #16
	uint8_t mpuID;
//	walk = 1;//JH
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, WHO_AM_I_REG, 1, &mpuID, 1, 100);
 8009992:	2364      	movs	r3, #100	@ 0x64
 8009994:	9302      	str	r3, [sp, #8]
 8009996:	2301      	movs	r3, #1
 8009998:	9301      	str	r3, [sp, #4]
 800999a:	1dfb      	adds	r3, r7, #7
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	2301      	movs	r3, #1
 80099a0:	2275      	movs	r2, #117	@ 0x75
 80099a2:	21d0      	movs	r1, #208	@ 0xd0
 80099a4:	4806      	ldr	r0, [pc, #24]	@ (80099c0 <mpu6500TestConnection+0x34>)
 80099a6:	f7f8 fc7f 	bl	80022a8 <HAL_I2C_Mem_Read>
//	walk =1;//NJH
	if (mpuID != 0x75)
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	2b75      	cmp	r3, #117	@ 0x75
 80099ae:	d001      	beq.n	80099b4 <mpu6500TestConnection+0x28>
		return false;
 80099b0:	2300      	movs	r3, #0
 80099b2:	e000      	b.n	80099b6 <mpu6500TestConnection+0x2a>
//	walk = 1;//NJH
	return true;
 80099b4:	2301      	movs	r3, #1
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20007c00 	.word	0x20007c00

080099c4 <mpu6500SelfTest>:
		//                string, (double)low, (double)high, (double)value);
		return false;
	}
	return true;
}
bool mpu6500SelfTest() {
 80099c4:	b480      	push	{r7}
 80099c6:	af00      	add	r7, sp, #0
	return true;
 80099c8:	2301      	movs	r3, #1
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <mpu6500Init>:
void mpu6500Init(void) {
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af04      	add	r7, sp, #16
	uint8_t data;
	data = 0x00;
 80099da:	2300      	movs	r3, #0
 80099dc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, PWR_MGMT_1_REG, 1, &data, 1,
 80099de:	2364      	movs	r3, #100	@ 0x64
 80099e0:	9302      	str	r3, [sp, #8]
 80099e2:	2301      	movs	r3, #1
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	1dfb      	adds	r3, r7, #7
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	2301      	movs	r3, #1
 80099ec:	226b      	movs	r2, #107	@ 0x6b
 80099ee:	21d0      	movs	r1, #208	@ 0xd0
 80099f0:	482d      	ldr	r0, [pc, #180]	@ (8009aa8 <mpu6500Init+0xd4>)
 80099f2:	f7f8 fb5f 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(500);
 80099f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80099fa:	f7fc ff3f 	bl	800687c <vTaskDelay>
	// Set ACCEL to +-16g, GYRO to +-2000dps
	data = 0x18;
 80099fe:	2318      	movs	r3, #24
 8009a00:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, GYRO_CONFIG_REG, 1, &data, 1,
 8009a02:	2364      	movs	r3, #100	@ 0x64
 8009a04:	9302      	str	r3, [sp, #8]
 8009a06:	2301      	movs	r3, #1
 8009a08:	9301      	str	r3, [sp, #4]
 8009a0a:	1dfb      	adds	r3, r7, #7
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	2301      	movs	r3, #1
 8009a10:	221b      	movs	r2, #27
 8009a12:	21d0      	movs	r1, #208	@ 0xd0
 8009a14:	4824      	ldr	r0, [pc, #144]	@ (8009aa8 <mpu6500Init+0xd4>)
 8009a16:	f7f8 fb4d 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(10);
 8009a1a:	200a      	movs	r0, #10
 8009a1c:	f7fc ff2e 	bl	800687c <vTaskDelay>
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, ACCEL_CONFIG_REG, 1, &data, 1,
 8009a20:	2364      	movs	r3, #100	@ 0x64
 8009a22:	9302      	str	r3, [sp, #8]
 8009a24:	2301      	movs	r3, #1
 8009a26:	9301      	str	r3, [sp, #4]
 8009a28:	1dfb      	adds	r3, r7, #7
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	221c      	movs	r2, #28
 8009a30:	21d0      	movs	r1, #208	@ 0xd0
 8009a32:	481d      	ldr	r0, [pc, #116]	@ (8009aa8 <mpu6500Init+0xd4>)
 8009a34:	f7f8 fb3e 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(10);
 8009a38:	200a      	movs	r0, #10
 8009a3a:	f7fc ff1f 	bl	800687c <vTaskDelay>
	// Set sampling rate to 1khz
	data = 0x07;
 8009a3e:	2307      	movs	r3, #7
 8009a40:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, SMPLRT_DIV_REG, 1, &data, 1,
 8009a42:	2364      	movs	r3, #100	@ 0x64
 8009a44:	9302      	str	r3, [sp, #8]
 8009a46:	2301      	movs	r3, #1
 8009a48:	9301      	str	r3, [sp, #4]
 8009a4a:	1dfb      	adds	r3, r7, #7
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	2301      	movs	r3, #1
 8009a50:	2219      	movs	r2, #25
 8009a52:	21d0      	movs	r1, #208	@ 0xd0
 8009a54:	4814      	ldr	r0, [pc, #80]	@ (8009aa8 <mpu6500Init+0xd4>)
 8009a56:	f7f8 fb2d 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);

	vTaskDelay(10);
 8009a5a:	200a      	movs	r0, #10
 8009a5c:	f7fc ff0e 	bl	800687c <vTaskDelay>
	// Set GYRO to 41hz bandwidth
	data = 0x03;
 8009a60:	2303      	movs	r3, #3
 8009a62:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, CONFIG_REG, 1, &data, 1, 100);
 8009a64:	2364      	movs	r3, #100	@ 0x64
 8009a66:	9302      	str	r3, [sp, #8]
 8009a68:	2301      	movs	r3, #1
 8009a6a:	9301      	str	r3, [sp, #4]
 8009a6c:	1dfb      	adds	r3, r7, #7
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	2301      	movs	r3, #1
 8009a72:	221a      	movs	r2, #26
 8009a74:	21d0      	movs	r1, #208	@ 0xd0
 8009a76:	480c      	ldr	r0, [pc, #48]	@ (8009aa8 <mpu6500Init+0xd4>)
 8009a78:	f7f8 fb1c 	bl	80020b4 <HAL_I2C_Mem_Write>

	// Enable data ready interrupt to propagate to interrupt pin
	vTaskDelay(10);
 8009a7c:	200a      	movs	r0, #10
 8009a7e:	f7fc fefd 	bl	800687c <vTaskDelay>
	data = 0x01;
 8009a82:	2301      	movs	r3, #1
 8009a84:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, INT_ENABLE_REG, 1, &data, 1,
 8009a86:	2364      	movs	r3, #100	@ 0x64
 8009a88:	9302      	str	r3, [sp, #8]
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	9301      	str	r3, [sp, #4]
 8009a8e:	1dfb      	adds	r3, r7, #7
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	2301      	movs	r3, #1
 8009a94:	2238      	movs	r2, #56	@ 0x38
 8009a96:	21d0      	movs	r1, #208	@ 0xd0
 8009a98:	4803      	ldr	r0, [pc, #12]	@ (8009aa8 <mpu6500Init+0xd4>)
 8009a9a:	f7f8 fb0b 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
}
 8009a9e:	bf00      	nop
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	20007c00 	.word	0x20007c00

08009aac <mpu6500SetAccelDLPF>:

void mpu6500SetAccelDLPF(uint8_t range) {
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af04      	add	r7, sp, #16
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, ACCEL_CONFIG_2_REG, 1, &range, 1,
 8009ab6:	2364      	movs	r3, #100	@ 0x64
 8009ab8:	9302      	str	r3, [sp, #8]
 8009aba:	2301      	movs	r3, #1
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	1dfb      	adds	r3, r7, #7
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	221d      	movs	r2, #29
 8009ac6:	21d0      	movs	r1, #208	@ 0xd0
 8009ac8:	4803      	ldr	r0, [pc, #12]	@ (8009ad8 <mpu6500SetAccelDLPF+0x2c>)
 8009aca:	f7f8 faf3 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20007c00 	.word	0x20007c00

08009adc <mpu6500GetAccelGyroData>:
void mpu6500GetAccelGyroData(mpu6500_t *mpu6500TypeDef) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af04      	add	r7, sp, #16
 8009ae2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1,
			mpu6500TypeDef->buf, sizeof(mpu6500_t), 100);
 8009ae4:	687b      	ldr	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1,
 8009ae6:	2264      	movs	r2, #100	@ 0x64
 8009ae8:	9202      	str	r2, [sp, #8]
 8009aea:	220e      	movs	r2, #14
 8009aec:	9201      	str	r2, [sp, #4]
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	2301      	movs	r3, #1
 8009af2:	223b      	movs	r2, #59	@ 0x3b
 8009af4:	21d0      	movs	r1, #208	@ 0xd0
 8009af6:	4803      	ldr	r0, [pc, #12]	@ (8009b04 <mpu6500GetAccelGyroData+0x28>)
 8009af8:	f7f8 fbd6 	bl	80022a8 <HAL_I2C_Mem_Read>
}
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	20007c00 	.word	0x20007c00

08009b08 <mpu6500GetMotion6>:
void mpu6500GetMotion6(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx,
		int16_t *gy, int16_t *gz) {
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08c      	sub	sp, #48	@ 0x30
 8009b0c:	af04      	add	r7, sp, #16
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
	uint8_t buf[14];
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1, buf, 14,
 8009b16:	2364      	movs	r3, #100	@ 0x64
 8009b18:	9302      	str	r3, [sp, #8]
 8009b1a:	230e      	movs	r3, #14
 8009b1c:	9301      	str	r3, [sp, #4]
 8009b1e:	f107 0310 	add.w	r3, r7, #16
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	2301      	movs	r3, #1
 8009b26:	223b      	movs	r2, #59	@ 0x3b
 8009b28:	21d0      	movs	r1, #208	@ 0xd0
 8009b2a:	481e      	ldr	r0, [pc, #120]	@ (8009ba4 <mpu6500GetMotion6+0x9c>)
 8009b2c:	f7f8 fbbc 	bl	80022a8 <HAL_I2C_Mem_Read>
			100);
	*ax = (((int16_t) buf[0]) << 8) | buf[1];
 8009b30:	7c3b      	ldrb	r3, [r7, #16]
 8009b32:	021b      	lsls	r3, r3, #8
 8009b34:	b21a      	sxth	r2, r3
 8009b36:	7c7b      	ldrb	r3, [r7, #17]
 8009b38:	b21b      	sxth	r3, r3
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	b21a      	sxth	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	801a      	strh	r2, [r3, #0]
	*ay = (((int16_t) buf[2]) << 8) | buf[3];
 8009b42:	7cbb      	ldrb	r3, [r7, #18]
 8009b44:	021b      	lsls	r3, r3, #8
 8009b46:	b21a      	sxth	r2, r3
 8009b48:	7cfb      	ldrb	r3, [r7, #19]
 8009b4a:	b21b      	sxth	r3, r3
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	b21a      	sxth	r2, r3
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	801a      	strh	r2, [r3, #0]
	*az = (((int16_t) buf[4]) << 8) | buf[5];
 8009b54:	7d3b      	ldrb	r3, [r7, #20]
 8009b56:	021b      	lsls	r3, r3, #8
 8009b58:	b21a      	sxth	r2, r3
 8009b5a:	7d7b      	ldrb	r3, [r7, #21]
 8009b5c:	b21b      	sxth	r3, r3
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	b21a      	sxth	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	801a      	strh	r2, [r3, #0]
	*gx = (((int16_t) buf[8]) << 8) | buf[9];
 8009b66:	7e3b      	ldrb	r3, [r7, #24]
 8009b68:	021b      	lsls	r3, r3, #8
 8009b6a:	b21a      	sxth	r2, r3
 8009b6c:	7e7b      	ldrb	r3, [r7, #25]
 8009b6e:	b21b      	sxth	r3, r3
 8009b70:	4313      	orrs	r3, r2
 8009b72:	b21a      	sxth	r2, r3
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	801a      	strh	r2, [r3, #0]
	*gy = (((int16_t) buf[10]) << 8) | buf[11];
 8009b78:	7ebb      	ldrb	r3, [r7, #26]
 8009b7a:	021b      	lsls	r3, r3, #8
 8009b7c:	b21a      	sxth	r2, r3
 8009b7e:	7efb      	ldrb	r3, [r7, #27]
 8009b80:	b21b      	sxth	r3, r3
 8009b82:	4313      	orrs	r3, r2
 8009b84:	b21a      	sxth	r2, r3
 8009b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b88:	801a      	strh	r2, [r3, #0]
	*gz = (((int16_t) buf[12]) << 8) | buf[13];
 8009b8a:	7f3b      	ldrb	r3, [r7, #28]
 8009b8c:	021b      	lsls	r3, r3, #8
 8009b8e:	b21a      	sxth	r2, r3
 8009b90:	7f7b      	ldrb	r3, [r7, #29]
 8009b92:	b21b      	sxth	r3, r3
 8009b94:	4313      	orrs	r3, r2
 8009b96:	b21a      	sxth	r2, r3
 8009b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9a:	801a      	strh	r2, [r3, #0]
}
 8009b9c:	bf00      	nop
 8009b9e:	3720      	adds	r7, #32
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20007c00 	.word	0x20007c00

08009ba8 <nvicInit>:
extern TIM_HandleTypeDef htim4;

#define DONT_DISCARD __attribute__((used))

void nvicInit(void)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	af00      	add	r7, sp, #0
//  NVIC_PriorityGroupConfig((uint32_t)0x300);
}
 8009bac:	bf00      	nop
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr

08009bb6 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 */
extern void tickFreeRTOS(void);

void DONT_DISCARD SysTick_Handler(void)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	af00      	add	r7, sp, #0
    tickFreeRTOS();
 8009bba:	f7fe fa1d 	bl	8007ff8 <tickFreeRTOS>
}
 8009bbe:	bf00      	nop
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <NMI_Handler>:

/**
  * @brief  This function handles NMI exception.
  */
void DONT_DISCARD NMI_Handler(void)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	af00      	add	r7, sp, #0
}
 8009bc6:	bf00      	nop
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <HardFault_Handler>:

/**
 * @brief  This function handles Hard Fault exception.
 */
void DONT_DISCARD HardFault_Handler(void)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	af00      	add	r7, sp, #0
  //To test this application, you can use this snippet anywhere:
  // //Let's crash the MCU!
  // asm (" MOVS r0, #1 \n"
  // " LDM r0,{r1-r2} \n"
  // " BX LR; \n");
  asm( "TST LR, #4 \n"
 8009bd4:	f01e 0f04 	tst.w	lr, #4
 8009bd8:	bf0c      	ite	eq
 8009bda:	f3ef 8008 	mrseq	r0, MSP
 8009bde:	f3ef 8009 	mrsne	r0, PSP
 8009be2:	f000 b805 	b.w	8009bf0 <printHardFault>
  "ITE EQ \n"
  "MRSEQ R0, MSP \n"
  "MRSNE R0, PSP \n"
  "B printHardFault");
}
 8009be6:	bf00      	nop
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <printHardFault>:

void DONT_DISCARD printHardFault(uint32_t* hardfaultArgs)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
//    stacked_r3,
//    stacked_r12,
//    stacked_lr,
//    stacked_pc,
//    stacked_psr);
  while (1)
 8009bf8:	bf00      	nop
 8009bfa:	e7fd      	b.n	8009bf8 <printHardFault+0x8>

08009bfc <BusFault_Handler>:

/**
 * @brief  This function handles Bus Fault exception.
 */
void DONT_DISCARD BusFault_Handler(void)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
//  motorsStop();
//  ledShowFaultPattern();
//
//  storeAssertTextData("BusFault");
  while (1)
 8009c00:	bf00      	nop
 8009c02:	e7fd      	b.n	8009c00 <BusFault_Handler+0x4>

08009c04 <UsageFault_Handler>:

/**
 * @brief  This function handles Usage Fault exception.
 */
void DONT_DISCARD UsageFault_Handler(void)
{
 8009c04:	b480      	push	{r7}
 8009c06:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
//  motorsStop();
//  ledShowFaultPattern();
//
//  storeAssertTextData("UsageFault");
  while (1)
 8009c08:	bf00      	nop
 8009c0a:	e7fd      	b.n	8009c08 <UsageFault_Handler+0x4>

08009c0c <DebugMon_Handler>:

/**
 * @brief  This function handles Debug Monitor exception.
 */
void DONT_DISCARD DebugMon_Handler(void)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	af00      	add	r7, sp, #0
}
 8009c10:	bf00      	nop
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
	...

08009c1c <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8009c20:	4802      	ldr	r0, [pc, #8]	@ (8009c2c <DMA1_Stream2_IRQHandler+0x10>)
 8009c22:	f7f7 fcc9 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 8009c26:	bf00      	nop
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	20007ec4 	.word	0x20007ec4

08009c30 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8009c34:	4802      	ldr	r0, [pc, #8]	@ (8009c40 <DMA1_Stream4_IRQHandler+0x10>)
 8009c36:	f7f7 fcbf 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 8009c3a:	bf00      	nop
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20007da4 	.word	0x20007da4

08009c44 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8009c48:	4802      	ldr	r0, [pc, #8]	@ (8009c54 <DMA1_Stream5_IRQHandler+0x10>)
 8009c4a:	f7f7 fcb5 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 8009c4e:	bf00      	nop
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	20007e04 	.word	0x20007e04

08009c58 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8009c5c:	4802      	ldr	r0, [pc, #8]	@ (8009c68 <DMA1_Stream7_IRQHandler+0x10>)
 8009c5e:	f7f7 fcab 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 8009c62:	bf00      	nop
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	20007e64 	.word	0x20007e64

08009c6c <TIM4_IRQHandler>:


void TIM4_IRQHandler(void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8009c70:	4802      	ldr	r0, [pc, #8]	@ (8009c7c <TIM4_IRQHandler+0x10>)
 8009c72:	f7fa fdb9 	bl	80047e8 <HAL_TIM_IRQHandler>
}
 8009c76:	bf00      	nop
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20007f24 	.word	0x20007f24

08009c80 <TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch4_up;

TIM_HandleTypeDef htim4;

void TIM3_Init(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08a      	sub	sp, #40	@ 0x28
 8009c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c86:	f107 0320 	add.w	r3, r7, #32
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009c90:	1d3b      	adds	r3, r7, #4
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	605a      	str	r2, [r3, #4]
 8009c98:	609a      	str	r2, [r3, #8]
 8009c9a:	60da      	str	r2, [r3, #12]
 8009c9c:	611a      	str	r2, [r3, #16]
 8009c9e:	615a      	str	r2, [r3, #20]
 8009ca0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009ca2:	4b32      	ldr	r3, [pc, #200]	@ (8009d6c <TIM3_Init+0xec>)
 8009ca4:	4a32      	ldr	r2, [pc, #200]	@ (8009d70 <TIM3_Init+0xf0>)
 8009ca6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009ca8:	4b30      	ldr	r3, [pc, #192]	@ (8009d6c <TIM3_Init+0xec>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cae:	4b2f      	ldr	r3, [pc, #188]	@ (8009d6c <TIM3_Init+0xec>)
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8009cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8009d6c <TIM3_Init+0xec>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009cba:	4b2c      	ldr	r3, [pc, #176]	@ (8009d6c <TIM3_Init+0xec>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8009d6c <TIM3_Init+0xec>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009cc6:	4829      	ldr	r0, [pc, #164]	@ (8009d6c <TIM3_Init+0xec>)
 8009cc8:	f7fa fc76 	bl	80045b8 <HAL_TIM_PWM_Init>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <TIM3_Init+0x56>
  {
    Error_Handler();
 8009cd2:	f7fe fc8d 	bl	80085f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009cde:	f107 0320 	add.w	r3, r7, #32
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	4821      	ldr	r0, [pc, #132]	@ (8009d6c <TIM3_Init+0xec>)
 8009ce6:	f7fb fb3d 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <TIM3_Init+0x74>
  {
    Error_Handler();
 8009cf0:	f7fe fc7e 	bl	80085f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009cf4:	2360      	movs	r3, #96	@ 0x60
 8009cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009d00:	2300      	movs	r3, #0
 8009d02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009d04:	1d3b      	adds	r3, r7, #4
 8009d06:	2200      	movs	r2, #0
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4818      	ldr	r0, [pc, #96]	@ (8009d6c <TIM3_Init+0xec>)
 8009d0c:	f7fa fe5c 	bl	80049c8 <HAL_TIM_PWM_ConfigChannel>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <TIM3_Init+0x9a>
  {
    Error_Handler();
 8009d16:	f7fe fc6b 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009d1a:	1d3b      	adds	r3, r7, #4
 8009d1c:	2204      	movs	r2, #4
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4812      	ldr	r0, [pc, #72]	@ (8009d6c <TIM3_Init+0xec>)
 8009d22:	f7fa fe51 	bl	80049c8 <HAL_TIM_PWM_ConfigChannel>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <TIM3_Init+0xb0>
  {
    Error_Handler();
 8009d2c:	f7fe fc60 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009d30:	1d3b      	adds	r3, r7, #4
 8009d32:	2208      	movs	r2, #8
 8009d34:	4619      	mov	r1, r3
 8009d36:	480d      	ldr	r0, [pc, #52]	@ (8009d6c <TIM3_Init+0xec>)
 8009d38:	f7fa fe46 	bl	80049c8 <HAL_TIM_PWM_ConfigChannel>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <TIM3_Init+0xc6>
  {
    Error_Handler();
 8009d42:	f7fe fc55 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009d46:	1d3b      	adds	r3, r7, #4
 8009d48:	220c      	movs	r2, #12
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	4807      	ldr	r0, [pc, #28]	@ (8009d6c <TIM3_Init+0xec>)
 8009d4e:	f7fa fe3b 	bl	80049c8 <HAL_TIM_PWM_ConfigChannel>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <TIM3_Init+0xdc>
  {
    Error_Handler();
 8009d58:	f7fe fc4a 	bl	80085f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009d5c:	4803      	ldr	r0, [pc, #12]	@ (8009d6c <TIM3_Init+0xec>)
 8009d5e:	f000 f92d 	bl	8009fbc <HAL_TIM_MspPostInit>

}
 8009d62:	bf00      	nop
 8009d64:	3728      	adds	r7, #40	@ 0x28
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20007d5c 	.word	0x20007d5c
 8009d70:	40000400 	.word	0x40000400

08009d74 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a84      	ldr	r2, [pc, #528]	@ (8009f94 <HAL_TIM_PWM_MspInit+0x220>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	f040 8102 	bne.w	8009f8c <HAL_TIM_PWM_MspInit+0x218>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009d88:	2300      	movs	r3, #0
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	4b82      	ldr	r3, [pc, #520]	@ (8009f98 <HAL_TIM_PWM_MspInit+0x224>)
 8009d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d90:	4a81      	ldr	r2, [pc, #516]	@ (8009f98 <HAL_TIM_PWM_MspInit+0x224>)
 8009d92:	f043 0302 	orr.w	r3, r3, #2
 8009d96:	6413      	str	r3, [r2, #64]	@ 0x40
 8009d98:	4b7f      	ldr	r3, [pc, #508]	@ (8009f98 <HAL_TIM_PWM_MspInit+0x224>)
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d9c:	f003 0302 	and.w	r3, r3, #2
 8009da0:	60fb      	str	r3, [r7, #12]
 8009da2:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8009da4:	4b7d      	ldr	r3, [pc, #500]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009da6:	4a7e      	ldr	r2, [pc, #504]	@ (8009fa0 <HAL_TIM_PWM_MspInit+0x22c>)
 8009da8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8009daa:	4b7c      	ldr	r3, [pc, #496]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009dac:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8009db0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009db2:	4b7a      	ldr	r3, [pc, #488]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009db4:	2240      	movs	r2, #64	@ 0x40
 8009db6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8009db8:	4b78      	ldr	r3, [pc, #480]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8009dbe:	4b77      	ldr	r3, [pc, #476]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009dc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009dc4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009dc6:	4b75      	ldr	r3, [pc, #468]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009dc8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009dcc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009dce:	4b73      	ldr	r3, [pc, #460]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009dd0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009dd4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8009dd6:	4b71      	ldr	r3, [pc, #452]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8009ddc:	4b6f      	ldr	r3, [pc, #444]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009dde:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009de2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009de4:	4b6d      	ldr	r3, [pc, #436]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009de6:	2204      	movs	r2, #4
 8009de8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch1_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8009dea:	4b6c      	ldr	r3, [pc, #432]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch1_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 8009df0:	4b6a      	ldr	r3, [pc, #424]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch1_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009df6:	4b69      	ldr	r3, [pc, #420]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8009dfc:	4867      	ldr	r0, [pc, #412]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009dfe:	f7f7 fab3 	bl	8001368 <HAL_DMA_Init>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 8009e08:	f7fe fbf2 	bl	80085f0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a63      	ldr	r2, [pc, #396]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009e10:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e12:	4a62      	ldr	r2, [pc, #392]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a60      	ldr	r2, [pc, #384]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009e1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8009e1e:	4a5f      	ldr	r2, [pc, #380]	@ (8009f9c <HAL_TIM_PWM_MspInit+0x228>)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8009e24:	4b5f      	ldr	r3, [pc, #380]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e26:	4a60      	ldr	r2, [pc, #384]	@ (8009fa8 <HAL_TIM_PWM_MspInit+0x234>)
 8009e28:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8009e2a:	4b5e      	ldr	r3, [pc, #376]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e2c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8009e30:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e32:	4b5c      	ldr	r3, [pc, #368]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e34:	2240      	movs	r2, #64	@ 0x40
 8009e36:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e38:	4b5a      	ldr	r3, [pc, #360]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8009e3e:	4b59      	ldr	r3, [pc, #356]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009e44:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009e46:	4b57      	ldr	r3, [pc, #348]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009e4c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009e4e:	4b55      	ldr	r3, [pc, #340]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e50:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009e54:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8009e56:	4b53      	ldr	r3, [pc, #332]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8009e5c:	4b51      	ldr	r3, [pc, #324]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009e62:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009e64:	4b4f      	ldr	r3, [pc, #316]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e66:	2204      	movs	r2, #4
 8009e68:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8009e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8009e70:	4b4c      	ldr	r3, [pc, #304]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009e76:	4b4b      	ldr	r3, [pc, #300]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8009e7c:	4849      	ldr	r0, [pc, #292]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e7e:	f7f7 fa73 	bl	8001368 <HAL_DMA_Init>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <HAL_TIM_PWM_MspInit+0x118>
    {
      Error_Handler();
 8009e88:	f7fe fbb2 	bl	80085f0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a45      	ldr	r2, [pc, #276]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e90:	629a      	str	r2, [r3, #40]	@ 0x28
 8009e92:	4a44      	ldr	r2, [pc, #272]	@ (8009fa4 <HAL_TIM_PWM_MspInit+0x230>)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8009e98:	4b44      	ldr	r3, [pc, #272]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009e9a:	4a45      	ldr	r2, [pc, #276]	@ (8009fb0 <HAL_TIM_PWM_MspInit+0x23c>)
 8009e9c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8009e9e:	4b43      	ldr	r3, [pc, #268]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009ea0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8009ea4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009ea6:	4b41      	ldr	r3, [pc, #260]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009ea8:	2240      	movs	r2, #64	@ 0x40
 8009eaa:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8009eac:	4b3f      	ldr	r3, [pc, #252]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8009eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009eb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009eb8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009eba:	4b3c      	ldr	r3, [pc, #240]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009ebc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009ec0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009ec4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009ec8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8009eca:	4b38      	ldr	r3, [pc, #224]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8009ed0:	4b36      	ldr	r3, [pc, #216]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009ed2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009ed6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009ed8:	4b34      	ldr	r3, [pc, #208]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009eda:	2204      	movs	r2, #4
 8009edc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8009ede:	4b33      	ldr	r3, [pc, #204]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8009ee4:	4b31      	ldr	r3, [pc, #196]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009eea:	4b30      	ldr	r3, [pc, #192]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8009ef0:	482e      	ldr	r0, [pc, #184]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009ef2:	f7f7 fa39 	bl	8001368 <HAL_DMA_Init>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <HAL_TIM_PWM_MspInit+0x18c>
    {
      Error_Handler();
 8009efc:	f7fe fb78 	bl	80085f0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a2a      	ldr	r2, [pc, #168]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009f04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009f06:	4a29      	ldr	r2, [pc, #164]	@ (8009fac <HAL_TIM_PWM_MspInit+0x238>)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8009f0c:	4b29      	ldr	r3, [pc, #164]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8009fb8 <HAL_TIM_PWM_MspInit+0x244>)
 8009f10:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8009f12:	4b28      	ldr	r3, [pc, #160]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f14:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8009f18:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f1a:	4b26      	ldr	r3, [pc, #152]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f1c:	2240      	movs	r2, #64	@ 0x40
 8009f1e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f20:	4b24      	ldr	r3, [pc, #144]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8009f26:	4b23      	ldr	r3, [pc, #140]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009f2c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009f2e:	4b21      	ldr	r3, [pc, #132]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009f34:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009f36:	4b1f      	ldr	r3, [pc, #124]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f38:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009f3c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8009f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 8009f44:	4b1b      	ldr	r3, [pc, #108]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009f4a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009f4c:	4b19      	ldr	r3, [pc, #100]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f4e:	2204      	movs	r2, #4
 8009f50:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch4_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8009f52:	4b18      	ldr	r3, [pc, #96]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch4_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8009f58:	4b16      	ldr	r3, [pc, #88]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch4_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009f5e:	4b15      	ldr	r3, [pc, #84]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8009f64:	4813      	ldr	r0, [pc, #76]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f66:	f7f7 f9ff 	bl	8001368 <HAL_DMA_Init>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <HAL_TIM_PWM_MspInit+0x200>
    {
      Error_Handler();
 8009f70:	f7fe fb3e 	bl	80085f0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a0f      	ldr	r2, [pc, #60]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f78:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a0c      	ldr	r2, [pc, #48]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f84:	621a      	str	r2, [r3, #32]
 8009f86:	4a0b      	ldr	r2, [pc, #44]	@ (8009fb4 <HAL_TIM_PWM_MspInit+0x240>)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8009f8c:	bf00      	nop
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	40000400 	.word	0x40000400
 8009f98:	40023800 	.word	0x40023800
 8009f9c:	20007da4 	.word	0x20007da4
 8009fa0:	40026070 	.word	0x40026070
 8009fa4:	20007e04 	.word	0x20007e04
 8009fa8:	40026088 	.word	0x40026088
 8009fac:	20007e64 	.word	0x20007e64
 8009fb0:	400260b8 	.word	0x400260b8
 8009fb4:	20007ec4 	.word	0x20007ec4
 8009fb8:	40026040 	.word	0x40026040

08009fbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fc4:	f107 030c 	add.w	r3, r7, #12
 8009fc8:	2200      	movs	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]
 8009fcc:	605a      	str	r2, [r3, #4]
 8009fce:	609a      	str	r2, [r3, #8]
 8009fd0:	60da      	str	r2, [r3, #12]
 8009fd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a12      	ldr	r2, [pc, #72]	@ (800a024 <HAL_TIM_MspPostInit+0x68>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d11e      	bne.n	800a01c <HAL_TIM_MspPostInit+0x60>
  {
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009fde:	2300      	movs	r3, #0
 8009fe0:	60bb      	str	r3, [r7, #8]
 8009fe2:	4b11      	ldr	r3, [pc, #68]	@ (800a028 <HAL_TIM_MspPostInit+0x6c>)
 8009fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fe6:	4a10      	ldr	r2, [pc, #64]	@ (800a028 <HAL_TIM_MspPostInit+0x6c>)
 8009fe8:	f043 0304 	orr.w	r3, r3, #4
 8009fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8009fee:	4b0e      	ldr	r3, [pc, #56]	@ (800a028 <HAL_TIM_MspPostInit+0x6c>)
 8009ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ff2:	f003 0304 	and.w	r3, r3, #4
 8009ff6:	60bb      	str	r3, [r7, #8]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8009ffa:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8009ffe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a000:	2302      	movs	r3, #2
 800a002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a004:	2300      	movs	r3, #0
 800a006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a008:	2300      	movs	r3, #0
 800a00a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a00c:	2302      	movs	r3, #2
 800a00e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a010:	f107 030c 	add.w	r3, r7, #12
 800a014:	4619      	mov	r1, r3
 800a016:	4805      	ldr	r0, [pc, #20]	@ (800a02c <HAL_TIM_MspPostInit+0x70>)
 800a018:	f7f7 fd38 	bl	8001a8c <HAL_GPIO_Init>
  }

}
 800a01c:	bf00      	nop
 800a01e:	3720      	adds	r7, #32
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	40000400 	.word	0x40000400
 800a028:	40023800 	.word	0x40023800
 800a02c:	40020800 	.word	0x40020800

0800a030 <TIM3_DMA_Init>:
    HAL_DMA_DeInit(tim_pwmHandle->hdma[TIM_DMA_ID_UPDATE]);
  }
}

void TIM3_DMA_Init(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a036:	2300      	movs	r3, #0
 800a038:	607b      	str	r3, [r7, #4]
 800a03a:	4b18      	ldr	r3, [pc, #96]	@ (800a09c <TIM3_DMA_Init+0x6c>)
 800a03c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a03e:	4a17      	ldr	r2, [pc, #92]	@ (800a09c <TIM3_DMA_Init+0x6c>)
 800a040:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a044:	6313      	str	r3, [r2, #48]	@ 0x30
 800a046:	4b15      	ldr	r3, [pc, #84]	@ (800a09c <TIM3_DMA_Init+0x6c>)
 800a048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a04a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a04e:	607b      	str	r3, [r7, #4]
 800a050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800a052:	2200      	movs	r2, #0
 800a054:	2100      	movs	r1, #0
 800a056:	200d      	movs	r0, #13
 800a058:	f7f7 f950 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800a05c:	200d      	movs	r0, #13
 800a05e:	f7f7 f969 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800a062:	2200      	movs	r2, #0
 800a064:	2100      	movs	r1, #0
 800a066:	200f      	movs	r0, #15
 800a068:	f7f7 f948 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800a06c:	200f      	movs	r0, #15
 800a06e:	f7f7 f961 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800a072:	2200      	movs	r2, #0
 800a074:	2100      	movs	r1, #0
 800a076:	2010      	movs	r0, #16
 800a078:	f7f7 f940 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800a07c:	2010      	movs	r0, #16
 800a07e:	f7f7 f959 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800a082:	2200      	movs	r2, #0
 800a084:	2100      	movs	r1, #0
 800a086:	202f      	movs	r0, #47	@ 0x2f
 800a088:	f7f7 f938 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800a08c:	202f      	movs	r0, #47	@ 0x2f
 800a08e:	f7f7 f951 	bl	8001334 <HAL_NVIC_EnableIRQ>

}
 800a092:	bf00      	nop
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	40023800 	.word	0x40023800

0800a0a0 <TIM4_Init>:

void TIM4_Init(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a0a6:	f107 0308 	add.w	r3, r7, #8
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	605a      	str	r2, [r3, #4]
 800a0b0:	609a      	str	r2, [r3, #8]
 800a0b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a0b4:	463b      	mov	r3, r7
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	601a      	str	r2, [r3, #0]
 800a0ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a0bc:	4b1d      	ldr	r3, [pc, #116]	@ (800a134 <TIM4_Init+0x94>)
 800a0be:	4a1e      	ldr	r2, [pc, #120]	@ (800a138 <TIM4_Init+0x98>)
 800a0c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800a0c2:	4b1c      	ldr	r3, [pc, #112]	@ (800a134 <TIM4_Init+0x94>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0c8:	4b1a      	ldr	r3, [pc, #104]	@ (800a134 <TIM4_Init+0x94>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800a0ce:	4b19      	ldr	r3, [pc, #100]	@ (800a134 <TIM4_Init+0x94>)
 800a0d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a0d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0d6:	4b17      	ldr	r3, [pc, #92]	@ (800a134 <TIM4_Init+0x94>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0dc:	4b15      	ldr	r3, [pc, #84]	@ (800a134 <TIM4_Init+0x94>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800a0e2:	4814      	ldr	r0, [pc, #80]	@ (800a134 <TIM4_Init+0x94>)
 800a0e4:	f7fa f9a8 	bl	8004438 <HAL_TIM_Base_Init>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <TIM4_Init+0x52>
  {
    Error_Handler();
 800a0ee:	f7fe fa7f 	bl	80085f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a0f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800a0f8:	f107 0308 	add.w	r3, r7, #8
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	480d      	ldr	r0, [pc, #52]	@ (800a134 <TIM4_Init+0x94>)
 800a100:	f7fa fd24 	bl	8004b4c <HAL_TIM_ConfigClockSource>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <TIM4_Init+0x6e>
  {
    Error_Handler();
 800a10a:	f7fe fa71 	bl	80085f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a10e:	2300      	movs	r3, #0
 800a110:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a112:	2300      	movs	r3, #0
 800a114:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a116:	463b      	mov	r3, r7
 800a118:	4619      	mov	r1, r3
 800a11a:	4806      	ldr	r0, [pc, #24]	@ (800a134 <TIM4_Init+0x94>)
 800a11c:	f7fb f922 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <TIM4_Init+0x8a>
  {
    Error_Handler();
 800a126:	f7fe fa63 	bl	80085f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a12a:	bf00      	nop
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20007f24 	.word	0x20007f24
 800a138:	40000800 	.word	0x40000800

0800a13c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a0e      	ldr	r2, [pc, #56]	@ (800a184 <HAL_TIM_Base_MspInit+0x48>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d115      	bne.n	800a17a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a14e:	2300      	movs	r3, #0
 800a150:	60fb      	str	r3, [r7, #12]
 800a152:	4b0d      	ldr	r3, [pc, #52]	@ (800a188 <HAL_TIM_Base_MspInit+0x4c>)
 800a154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a156:	4a0c      	ldr	r2, [pc, #48]	@ (800a188 <HAL_TIM_Base_MspInit+0x4c>)
 800a158:	f043 0304 	orr.w	r3, r3, #4
 800a15c:	6413      	str	r3, [r2, #64]	@ 0x40
 800a15e:	4b0a      	ldr	r3, [pc, #40]	@ (800a188 <HAL_TIM_Base_MspInit+0x4c>)
 800a160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a162:	f003 0304 	and.w	r3, r3, #4
 800a166:	60fb      	str	r3, [r7, #12]
 800a168:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800a16a:	2200      	movs	r2, #0
 800a16c:	2100      	movs	r1, #0
 800a16e:	201e      	movs	r0, #30
 800a170:	f7f7 f8c4 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a174:	201e      	movs	r0, #30
 800a176:	f7f7 f8dd 	bl	8001334 <HAL_NVIC_EnableIRQ>
  }
}
 800a17a:	bf00      	nop
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	40000800 	.word	0x40000800
 800a188:	40023800 	.word	0x40023800

0800a18c <vl53l1xInit>:
// Set the start address 1 step after the VL53L0 dynamic addresses
static int nextI2CAddress = VL53L1X_DEFAULT_ADDRESS+1;


bool vl53l1xInit(VL53L1_Dev_t *pdev, I2C_HandleTypeDef *I2Cx)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  VL53L1_Error status = VL53L1_ERROR_NONE;
 800a196:	2300      	movs	r3, #0
 800a198:	73fb      	strb	r3, [r7, #15]

  pdev->I2Cx = I2Cx;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	f8c3 239c 	str.w	r2, [r3, #924]	@ 0x39c
  pdev->devAddr = VL53L1X_DEFAULT_ADDRESS;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2229      	movs	r2, #41	@ 0x29
 800a1a6:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398

  /* Move initialized sensor to a new I2C address */
  int newAddress;

  taskENTER_CRITICAL();
 800a1aa:	f7fd fe97 	bl	8007edc <vPortEnterCritical>
  newAddress = nextI2CAddress++;
 800a1ae:	4b13      	ldr	r3, [pc, #76]	@ (800a1fc <vl53l1xInit+0x70>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	1c5a      	adds	r2, r3, #1
 800a1b4:	4911      	ldr	r1, [pc, #68]	@ (800a1fc <vl53l1xInit+0x70>)
 800a1b6:	600a      	str	r2, [r1, #0]
 800a1b8:	60bb      	str	r3, [r7, #8]
  taskEXIT_CRITICAL();
 800a1ba:	f7fd febd 	bl	8007f38 <vPortExitCritical>

  vl53l1xSetI2CAddress(pdev, newAddress);
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f81b 	bl	800a200 <vl53l1xSetI2CAddress>

  status = VL53L1_DataInit(pdev);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f008 fb37 	bl	801283e <VL53L1_DataInit>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73fb      	strb	r3, [r7, #15]

  if (status == VL53L1_ERROR_NONE)
 800a1d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d104      	bne.n	800a1e6 <vl53l1xInit+0x5a>
  {
    status = VL53L1_StaticInit(pdev);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f008 fb9d 	bl	801291c <VL53L1_StaticInit>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	73fb      	strb	r3, [r7, #15]
  }

  return status == VL53L1_ERROR_NONE;
 800a1e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	bf0c      	ite	eq
 800a1ee:	2301      	moveq	r3, #1
 800a1f0:	2300      	movne	r3, #0
 800a1f2:	b2db      	uxtb	r3, r3
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20000010 	.word	0x20000010

0800a200 <vl53l1xSetI2CAddress>:
 * Any subsequent communication will be on the new address
 * The address passed is the 7bit I2C address from LSB (ie. without the
 * read/write bit)
 */
VL53L1_Error vl53l1xSetI2CAddress(VL53L1_Dev_t* pdev, uint8_t address)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	460b      	mov	r3, r1
 800a20a:	70fb      	strb	r3, [r7, #3]
  VL53L1_Error status = VL53L1_ERROR_NONE;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73fb      	strb	r3, [r7, #15]

  status = VL53L1_SetDeviceAddress(pdev, address);
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	4619      	mov	r1, r3
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f008 fafc 	bl	8012812 <VL53L1_SetDeviceAddress>
 800a21a:	4603      	mov	r3, r0
 800a21c:	73fb      	strb	r3, [r7, #15]
  pdev->devAddr = address;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	78fa      	ldrb	r2, [r7, #3]
 800a222:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398
  return  status;
 800a226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <VL53L1_WriteMulti>:
VL53L1_Error VL53L1_WriteMulti(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata,
	uint32_t      count)
{
 800a232:	b590      	push	{r4, r7, lr}
 800a234:	b089      	sub	sp, #36	@ 0x24
 800a236:	af02      	add	r7, sp, #8
 800a238:	60f8      	str	r0, [r7, #12]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]
 800a23e:	460b      	mov	r3, r1
 800a240:	817b      	strh	r3, [r7, #10]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800a242:	2300      	movs	r3, #0
 800a244:	75fb      	strb	r3, [r7, #23]

  if (!i2cdevWriteReg16(pdev->I2Cx, pdev->devAddr, index, count, pdata))
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	b29c      	uxth	r4, r3
 800a256:	897a      	ldrh	r2, [r7, #10]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	4623      	mov	r3, r4
 800a25e:	f7ff fb0f 	bl	8009880 <i2cdevWriteReg16>
 800a262:	4603      	mov	r3, r0
 800a264:	f083 0301 	eor.w	r3, r3, #1
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <VL53L1_WriteMulti+0x40>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800a26e:	23f3      	movs	r3, #243	@ 0xf3
 800a270:	75fb      	strb	r3, [r7, #23]
  }

	return status;
 800a272:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a276:	4618      	mov	r0, r3
 800a278:	371c      	adds	r7, #28
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd90      	pop	{r4, r7, pc}

0800a27e <VL53L1_ReadMulti>:
VL53L1_Error VL53L1_ReadMulti(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata,
	uint32_t      count)
{
 800a27e:	b590      	push	{r4, r7, lr}
 800a280:	b089      	sub	sp, #36	@ 0x24
 800a282:	af02      	add	r7, sp, #8
 800a284:	60f8      	str	r0, [r7, #12]
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
 800a28a:	460b      	mov	r3, r1
 800a28c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800a28e:	2300      	movs	r3, #0
 800a290:	75fb      	strb	r3, [r7, #23]

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, count, pdata))
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	b29c      	uxth	r4, r3
 800a2a2:	897a      	ldrh	r2, [r7, #10]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	4623      	mov	r3, r4
 800a2aa:	f7ff fabf 	bl	800982c <i2cdevReadReg16>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	f083 0301 	eor.w	r3, r3, #1
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <VL53L1_ReadMulti+0x40>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800a2ba:	23f3      	movs	r3, #243	@ 0xf3
 800a2bc:	75fb      	strb	r3, [r7, #23]
  }

	return status;
 800a2be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	371c      	adds	r7, #28
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd90      	pop	{r4, r7, pc}

0800a2ca <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t       data)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b086      	sub	sp, #24
 800a2ce:	af02      	add	r7, sp, #8
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	807b      	strh	r3, [r7, #2]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	707b      	strb	r3, [r7, #1]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73fb      	strb	r3, [r7, #15]

	if (!i2cdevWriteReg16(pdev->I2Cx, pdev->devAddr, index, 1, &data))
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800a2ea:	887a      	ldrh	r2, [r7, #2]
 800a2ec:	1c7b      	adds	r3, r7, #1
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	f7ff fac5 	bl	8009880 <i2cdevWriteReg16>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	f083 0301 	eor.w	r3, r3, #1
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <VL53L1_WrByte+0x3c>
	{
	  status = VL53L1_ERROR_CONTROL_INTERFACE;
 800a302:	23f3      	movs	r3, #243	@ 0xf3
 800a304:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800a306:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
	...

0800a314 <VL53L1_RdByte>:

VL53L1_Error VL53L1_RdByte(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b088      	sub	sp, #32
 800a318:	af02      	add	r7, sp, #8
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	460b      	mov	r3, r1
 800a31e:	607a      	str	r2, [r7, #4]
 800a320:	817b      	strh	r3, [r7, #10]
  VL53L1_Error status         = VL53L1_ERROR_NONE;
 800a322:	2300      	movs	r3, #0
 800a324:	75fb      	strb	r3, [r7, #23]
  static uint8_t r8data;

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, 1, &r8data))
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800a332:	897a      	ldrh	r2, [r7, #10]
 800a334:	4b0b      	ldr	r3, [pc, #44]	@ (800a364 <VL53L1_RdByte+0x50>)
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	2301      	movs	r3, #1
 800a33a:	f7ff fa77 	bl	800982c <i2cdevReadReg16>
 800a33e:	4603      	mov	r3, r0
 800a340:	f083 0301 	eor.w	r3, r3, #1
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <VL53L1_RdByte+0x3a>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800a34a:	23f3      	movs	r3, #243	@ 0xf3
 800a34c:	75fb      	strb	r3, [r7, #23]
  }
  *pdata = r8data;
 800a34e:	4b05      	ldr	r3, [pc, #20]	@ (800a364 <VL53L1_RdByte+0x50>)
 800a350:	781a      	ldrb	r2, [r3, #0]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	701a      	strb	r2, [r3, #0]

  return status;
 800a356:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20007f6c 	.word	0x20007f6c

0800a368 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint16_t     *pdata)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b088      	sub	sp, #32
 800a36c:	af02      	add	r7, sp, #8
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	460b      	mov	r3, r1
 800a372:	607a      	str	r2, [r7, #4]
 800a374:	817b      	strh	r3, [r7, #10]
  VL53L1_Error status         = VL53L1_ERROR_NONE;
 800a376:	2300      	movs	r3, #0
 800a378:	75fb      	strb	r3, [r7, #23]
  static uint16_t r16data;

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, 2, (uint8_t *)&r16data))
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800a386:	897a      	ldrh	r2, [r7, #10]
 800a388:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b8 <VL53L1_RdWord+0x50>)
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	2302      	movs	r3, #2
 800a38e:	f7ff fa4d 	bl	800982c <i2cdevReadReg16>
 800a392:	4603      	mov	r3, r0
 800a394:	f083 0301 	eor.w	r3, r3, #1
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <VL53L1_RdWord+0x3a>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800a39e:	23f3      	movs	r3, #243	@ 0xf3
 800a3a0:	75fb      	strb	r3, [r7, #23]
  }
  *pdata = r16data;
 800a3a2:	4b05      	ldr	r3, [pc, #20]	@ (800a3b8 <VL53L1_RdWord+0x50>)
 800a3a4:	881a      	ldrh	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	801a      	strh	r2, [r3, #0]
  
  return status;
 800a3aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3718      	adds	r7, #24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20007f6e 	.word	0x20007f6e

0800a3bc <led_task_test>:
#include <stdlib.h>

uint32_t counter_led_task = 0;


static void led_task_test(void *param){
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
//	systemWaitStart();
//	uint64_t lastTime  = usecTimestamp();
// Open made code belowe not work

	while(1){
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 800a3c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a3c8:	4803      	ldr	r0, [pc, #12]	@ (800a3d8 <led_task_test+0x1c>)
 800a3ca:	f7f7 fd14 	bl	8001df6 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 800a3ce:	2064      	movs	r0, #100	@ 0x64
 800a3d0:	f7fc fa54 	bl	800687c <vTaskDelay>
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 800a3d4:	bf00      	nop
 800a3d6:	e7f5      	b.n	800a3c4 <led_task_test+0x8>
 800a3d8:	40020800 	.word	0x40020800

0800a3dc <ledblink_test>:
	}
}
void ledblink_test(){
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af02      	add	r7, sp, #8
	xTaskCreate(led_task_test, LED_TASK_NAME, LED_TASK_STACKSIZE, NULL, LED_TASK_PRI_TEST, NULL);
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	9301      	str	r3, [sp, #4]
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	2296      	movs	r2, #150	@ 0x96
 800a3ee:	4903      	ldr	r1, [pc, #12]	@ (800a3fc <ledblink_test+0x20>)
 800a3f0:	4803      	ldr	r0, [pc, #12]	@ (800a400 <ledblink_test+0x24>)
 800a3f2:	f7fc f87b 	bl	80064ec <xTaskCreate>
}
 800a3f6:	bf00      	nop
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	0801a644 	.word	0x0801a644
 800a400:	0800a3bd 	.word	0x0800a3bd

0800a404 <motors_task_test>:
uint32_t motors_value = 0;
uint16_t my_motor_value[4] = {0, 0, 0, 0};
uint8_t next_state = 0;


static void motors_task_test(void *param) {
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
//	hal_dshot_init(DSHOT600);
//	vTaskDelay(100);
	//JH
	while(1){
		motors_value += 1;
 800a40c:	4b06      	ldr	r3, [pc, #24]	@ (800a428 <motors_task_test+0x24>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3301      	adds	r3, #1
 800a412:	4a05      	ldr	r2, [pc, #20]	@ (800a428 <motors_task_test+0x24>)
 800a414:	6013      	str	r3, [r2, #0]
		hal_dshot_write(my_motor_value);
 800a416:	4805      	ldr	r0, [pc, #20]	@ (800a42c <motors_task_test+0x28>)
 800a418:	f7fe ff0b 	bl	8009232 <hal_dshot_write>
		//JH only a round
//		next_state = 1;
		vTaskDelay(1);
 800a41c:	2001      	movs	r0, #1
 800a41e:	f7fc fa2d 	bl	800687c <vTaskDelay>
	while(1){
 800a422:	bf00      	nop
 800a424:	e7f2      	b.n	800a40c <motors_task_test+0x8>
 800a426:	bf00      	nop
 800a428:	20007f70 	.word	0x20007f70
 800a42c:	20007f74 	.word	0x20007f74

0800a430 <motors_test>:
	}
}
void motors_test(){
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af02      	add	r7, sp, #8
	xTaskCreate(motors_task_test, MOTORS_TASK_NAME_TEST, MOTORS_TASK_STACKSIZE_TEST, NULL, MOTORS_TASK_PRI_TEST, NULL);
 800a436:	2300      	movs	r3, #0
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	2303      	movs	r3, #3
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	2300      	movs	r3, #0
 800a440:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a444:	4903      	ldr	r1, [pc, #12]	@ (800a454 <motors_test+0x24>)
 800a446:	4804      	ldr	r0, [pc, #16]	@ (800a458 <motors_test+0x28>)
 800a448:	f7fc f850 	bl	80064ec <xTaskCreate>
}
 800a44c:	bf00      	nop
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	0801a650 	.word	0x0801a650
 800a458:	0800a405 	.word	0x0800a405

0800a45c <nullFunction>:
  void (*dataAvailableCallback)(void);
} sensorsImplementation_t;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
static void nullFunction(void) {}
 800a45c:	b480      	push	{r7}
 800a45e:	af00      	add	r7, sp, #0
 800a460:	bf00      	nop
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
	...

0800a46c <sensorsInit>:

static const sensorsImplementation_t* activeImplementation;
static bool isInit = false;
static const sensorsImplementation_t* findImplementation(SensorImplementation_t implementation);

void sensorsInit(void) {
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
  if (isInit) {
 800a472:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a8 <sensorsInit+0x3c>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d112      	bne.n	800a4a0 <sensorsInit+0x34>
    return;
  }

#ifndef SENSORS_FORCE
  SensorImplementation_t sensorImplementation = platformConfigGetSensorImplementation();
 800a47a:	f007 ff8f 	bl	801239c <platformConfigGetSensorImplementation>
 800a47e:	4603      	mov	r3, r0
 800a480:	71fb      	strb	r3, [r7, #7]
  SensorImplementation_t sensorImplementation = SENSORS_FORCE;
  DEBUG_PRINT("Forcing sensors to " xstr(SENSORS_FORCE) "\n");
#endif
//run = 1;//JH

  activeImplementation = findImplementation(sensorImplementation);
 800a482:	79fb      	ldrb	r3, [r7, #7]
 800a484:	4618      	mov	r0, r3
 800a486:	f000 f879 	bl	800a57c <findImplementation>
 800a48a:	4603      	mov	r3, r0
 800a48c:	4a07      	ldr	r2, [pc, #28]	@ (800a4ac <sensorsInit+0x40>)
 800a48e:	6013      	str	r3, [r2, #0]
//  run = 1;//JH

  activeImplementation->init();
 800a490:	4b06      	ldr	r3, [pc, #24]	@ (800a4ac <sensorsInit+0x40>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	4798      	blx	r3
//  run = 1; // NJH

  isInit = true;
 800a498:	4b03      	ldr	r3, [pc, #12]	@ (800a4a8 <sensorsInit+0x3c>)
 800a49a:	2201      	movs	r2, #1
 800a49c:	701a      	strb	r2, [r3, #0]
 800a49e:	e000      	b.n	800a4a2 <sensorsInit+0x36>
    return;
 800a4a0:	bf00      	nop
}
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	20007f80 	.word	0x20007f80
 800a4ac:	20007f7c 	.word	0x20007f7c

0800a4b0 <sensorsAreCalibrated>:
bool sensorsTest(void) {
  return activeImplementation->test();
}

bool sensorsAreCalibrated(void) {
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	af00      	add	r7, sp, #0
  return activeImplementation->areCalibrated();
 800a4b4:	4b03      	ldr	r3, [pc, #12]	@ (800a4c4 <sensorsAreCalibrated+0x14>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	4798      	blx	r3
 800a4bc:	4603      	mov	r3, r0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20007f7c 	.word	0x20007f7c

0800a4c8 <sensorsAcquire>:

bool sensorsManufacturingTest(void){
  return activeImplementation->manufacturingTest;
}

void sensorsAcquire(sensorData_t *sensors) {
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  activeImplementation->acquire(sensors);
 800a4d0:	4b04      	ldr	r3, [pc, #16]	@ (800a4e4 <sensorsAcquire+0x1c>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	4798      	blx	r3
}
 800a4da:	bf00      	nop
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20007f7c 	.word	0x20007f7c

0800a4e8 <sensorsWaitDataReady>:

void sensorsWaitDataReady(void) {
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	af00      	add	r7, sp, #0
  activeImplementation->waitDataReady();
 800a4ec:	4b02      	ldr	r3, [pc, #8]	@ (800a4f8 <sensorsWaitDataReady+0x10>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	4798      	blx	r3
}
 800a4f4:	bf00      	nop
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	20007f7c 	.word	0x20007f7c

0800a4fc <sensorsReadGyro>:

bool sensorsReadGyro(Axis3f *gyro) {
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  return activeImplementation->readGyro(gyro);
 800a504:	4b04      	ldr	r3, [pc, #16]	@ (800a518 <sensorsReadGyro+0x1c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	69db      	ldr	r3, [r3, #28]
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	4798      	blx	r3
 800a50e:	4603      	mov	r3, r0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	20007f7c 	.word	0x20007f7c

0800a51c <sensorsReadAcc>:

bool sensorsReadAcc(Axis3f *acc) {
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  return activeImplementation->readAcc(acc);
 800a524:	4b04      	ldr	r3, [pc, #16]	@ (800a538 <sensorsReadAcc+0x1c>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	4798      	blx	r3
 800a52e:	4603      	mov	r3, r0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	20007f7c 	.word	0x20007f7c

0800a53c <sensorsReadMag>:

bool sensorsReadMag(Axis3f *mag) {
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  return activeImplementation->readMag(mag);
 800a544:	4b04      	ldr	r3, [pc, #16]	@ (800a558 <sensorsReadMag+0x1c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	4798      	blx	r3
 800a54e:	4603      	mov	r3, r0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20007f7c 	.word	0x20007f7c

0800a55c <sensorsReadBaro>:

bool sensorsReadBaro(baro_t *baro) {
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  return activeImplementation->readBaro(baro);
 800a564:	4b04      	ldr	r3, [pc, #16]	@ (800a578 <sensorsReadBaro+0x1c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	4798      	blx	r3
 800a56e:	4603      	mov	r3, r0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	20007f7c 	.word	0x20007f7c

0800a57c <findImplementation>:

void __attribute__((used)) EXTI1_Callback(void) {
  activeImplementation->dataAvailableCallback();
}

static const sensorsImplementation_t* findImplementation(SensorImplementation_t implementation) {
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	71fb      	strb	r3, [r7, #7]
  const sensorsImplementation_t* result = 0;
 800a586:	2300      	movs	r3, #0
 800a588:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < SensorImplementation_COUNT; i++) {
 800a58a:	2300      	movs	r3, #0
 800a58c:	60bb      	str	r3, [r7, #8]
 800a58e:	e014      	b.n	800a5ba <findImplementation+0x3e>
    if (sensorImplementations[i].implements == implementation) {
 800a590:	4a0f      	ldr	r2, [pc, #60]	@ (800a5d0 <findImplementation+0x54>)
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2134      	movs	r1, #52	@ 0x34
 800a596:	fb01 f303 	mul.w	r3, r1, r3
 800a59a:	4413      	add	r3, r2
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	79fa      	ldrb	r2, [r7, #7]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d107      	bne.n	800a5b4 <findImplementation+0x38>
      result = &sensorImplementations[i];
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2234      	movs	r2, #52	@ 0x34
 800a5a8:	fb02 f303 	mul.w	r3, r2, r3
 800a5ac:	4a08      	ldr	r2, [pc, #32]	@ (800a5d0 <findImplementation+0x54>)
 800a5ae:	4413      	add	r3, r2
 800a5b0:	60fb      	str	r3, [r7, #12]
      break;
 800a5b2:	e005      	b.n	800a5c0 <findImplementation+0x44>
  for (int i = 0; i < SensorImplementation_COUNT; i++) {
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	60bb      	str	r3, [r7, #8]
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	dde7      	ble.n	800a590 <findImplementation+0x14>
    }
  }

  return result;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	0801a908 	.word	0x0801a908

0800a5d4 <sensorsMpu6500Bmp280ReadGyro>:

STATIC_MEM_TASK_ALLOC(sensorsTask, SENSORS_TASK_STACKSIZE);


bool sensorsMpu6500Bmp280ReadGyro(Axis3f *gyro)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(gyroDataQueue, gyro, 0));
 800a5dc:	4b08      	ldr	r3, [pc, #32]	@ (800a600 <sensorsMpu6500Bmp280ReadGyro+0x2c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	6879      	ldr	r1, [r7, #4]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fb fbbb 	bl	8005d60 <xQueueReceive>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	bf0c      	ite	eq
 800a5f0:	2301      	moveq	r3, #1
 800a5f2:	2300      	movne	r3, #0
 800a5f4:	b2db      	uxtb	r3, r3
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	20007f88 	.word	0x20007f88

0800a604 <sensorsMpu6500Bmp280ReadAcc>:
bool sensorsMpu6500Bmp280ReadAcc(Axis3f *acc)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(accelerometerDataQueue, acc, 0));
 800a60c:	4b08      	ldr	r3, [pc, #32]	@ (800a630 <sensorsMpu6500Bmp280ReadAcc+0x2c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2200      	movs	r2, #0
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	4618      	mov	r0, r3
 800a616:	f7fb fba3 	bl	8005d60 <xQueueReceive>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	bf0c      	ite	eq
 800a620:	2301      	moveq	r3, #1
 800a622:	2300      	movne	r3, #0
 800a624:	b2db      	uxtb	r3, r3
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	20007f84 	.word	0x20007f84

0800a634 <sensorsMpu6500Bmp280ReadMag>:
bool sensorsMpu6500Bmp280ReadMag(Axis3f *mag)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(magnetometerDataQueue, mag, 0));
 800a63c:	4b08      	ldr	r3, [pc, #32]	@ (800a660 <sensorsMpu6500Bmp280ReadMag+0x2c>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2200      	movs	r2, #0
 800a642:	6879      	ldr	r1, [r7, #4]
 800a644:	4618      	mov	r0, r3
 800a646:	f7fb fb8b 	bl	8005d60 <xQueueReceive>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	bf0c      	ite	eq
 800a650:	2301      	moveq	r3, #1
 800a652:	2300      	movne	r3, #0
 800a654:	b2db      	uxtb	r3, r3
}
 800a656:	4618      	mov	r0, r3
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20007f8c 	.word	0x20007f8c

0800a664 <sensorsMpu6500Bmp280ReadBaro>:
bool sensorsMpu6500Bmp280ReadBaro(baro_t *baro)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(barometerDataQueue, baro, 0));
 800a66c:	4b08      	ldr	r3, [pc, #32]	@ (800a690 <sensorsMpu6500Bmp280ReadBaro+0x2c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2200      	movs	r2, #0
 800a672:	6879      	ldr	r1, [r7, #4]
 800a674:	4618      	mov	r0, r3
 800a676:	f7fb fb73 	bl	8005d60 <xQueueReceive>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	bf0c      	ite	eq
 800a680:	2301      	moveq	r3, #1
 800a682:	2300      	movne	r3, #0
 800a684:	b2db      	uxtb	r3, r3
}
 800a686:	4618      	mov	r0, r3
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	20007f90 	.word	0x20007f90

0800a694 <sensorsMpu6500Bmp280Acquire>:
void sensorsMpu6500Bmp280Acquire(sensorData_t *sensors)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
	sensorsReadGyro(&sensors->gyro);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	330c      	adds	r3, #12
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff ff2b 	bl	800a4fc <sensorsReadGyro>
	sensorsReadAcc(&sensors->acc);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7ff ff37 	bl	800a51c <sensorsReadAcc>
	sensorsReadMag(&sensors->mag);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3318      	adds	r3, #24
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7ff ff42 	bl	800a53c <sensorsReadMag>
	sensorsReadBaro(&sensors->baro);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	3324      	adds	r3, #36	@ 0x24
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7ff ff4d 	bl	800a55c <sensorsReadBaro>
	sensors->interruptTimestamp = sensorData.interruptTimestamp;
 800a6c2:	4b05      	ldr	r3, [pc, #20]	@ (800a6d8 <sensorsMpu6500Bmp280Acquire+0x44>)
 800a6c4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800a6c8:	6879      	ldr	r1, [r7, #4]
 800a6ca:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	20008040 	.word	0x20008040

0800a6dc <sensorsMpu6500Bmp280AreCalibrated>:
bool sensorsMpu6500Bmp280AreCalibrated(void)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	af00      	add	r7, sp, #0
	return gyroBiasFound;
 800a6e0:	4b03      	ldr	r3, [pc, #12]	@ (800a6f0 <sensorsMpu6500Bmp280AreCalibrated+0x14>)
 800a6e2:	781b      	ldrb	r3, [r3, #0]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	200080a8 	.word	0x200080a8

0800a6f4 <sensorsTask>:

static void sensorsTask(void *param)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08e      	sub	sp, #56	@ 0x38
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
	measurement_t measurement;
	vTaskDelay(10);
 800a6fc:	200a      	movs	r0, #10
 800a6fe:	f7fc f8bd 	bl	800687c <vTaskDelay>

	systemWaitStart();
 800a702:	f002 fcf9 	bl	800d0f8 <systemWaitStart>

	while (1) {


	    if (pdTRUE == xSemaphoreTake(sensorsDataReady, portMAX_DELAY))
 800a706:	4b45      	ldr	r3, [pc, #276]	@ (800a81c <sensorsTask+0x128>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f04f 31ff 	mov.w	r1, #4294967295
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fb fc06 	bl	8005f20 <xQueueSemaphoreTake>
 800a714:	4603      	mov	r3, r0
 800a716:	2b01      	cmp	r3, #1
 800a718:	d1f5      	bne.n	800a706 <sensorsTask+0x12>
	    {
	    	sensorData.interruptTimestamp = imuIntTimestamp;
 800a71a:	4b41      	ldr	r3, [pc, #260]	@ (800a820 <sensorsTask+0x12c>)
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	4940      	ldr	r1, [pc, #256]	@ (800a824 <sensorsTask+0x130>)
 800a722:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	    	sysCounter++;
 800a726:	4b40      	ldr	r3, [pc, #256]	@ (800a828 <sensorsTask+0x134>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3301      	adds	r3, #1
 800a72c:	4a3e      	ldr	r2, [pc, #248]	@ (800a828 <sensorsTask+0x134>)
 800a72e:	6013      	str	r3, [r2, #0]
	    	mpu6500GetAccelGyroData(&imu);
 800a730:	483e      	ldr	r0, [pc, #248]	@ (800a82c <sensorsTask+0x138>)
 800a732:	f7ff f9d3 	bl	8009adc <mpu6500GetAccelGyroData>
	    	processAccGyroMeasurements();
 800a736:	f000 f8a7 	bl	800a888 <processAccGyroMeasurements>
	    	if (isBarometerPresent)
 800a73a:	4b3d      	ldr	r3, [pc, #244]	@ (800a830 <sensorsTask+0x13c>)
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <sensorsTask+0x52>
	    	{
	    		processBarometerMeasurements();
 800a742:	f000 f9b1 	bl	800aaa8 <processBarometerMeasurements>

	    	}

	        measurement.type = MeasurementTypeAcceleration;
 800a746:	230a      	movs	r3, #10
 800a748:	723b      	strb	r3, [r7, #8]
	        measurement.data.acceleration.acc = sensorData.acc;
 800a74a:	4a36      	ldr	r2, [pc, #216]	@ (800a824 <sensorsTask+0x130>)
 800a74c:	f107 030c 	add.w	r3, r7, #12
 800a750:	ca07      	ldmia	r2, {r0, r1, r2}
 800a752:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        ax = sensorData.acc.x;
 800a756:	4b33      	ldr	r3, [pc, #204]	@ (800a824 <sensorsTask+0x130>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a36      	ldr	r2, [pc, #216]	@ (800a834 <sensorsTask+0x140>)
 800a75c:	6013      	str	r3, [r2, #0]
	        ay = sensorData.acc.y;
 800a75e:	4b31      	ldr	r3, [pc, #196]	@ (800a824 <sensorsTask+0x130>)
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	4a35      	ldr	r2, [pc, #212]	@ (800a838 <sensorsTask+0x144>)
 800a764:	6013      	str	r3, [r2, #0]
	        az = sensorData.acc.z;
 800a766:	4b2f      	ldr	r3, [pc, #188]	@ (800a824 <sensorsTask+0x130>)
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	4a34      	ldr	r2, [pc, #208]	@ (800a83c <sensorsTask+0x148>)
 800a76c:	6013      	str	r3, [r2, #0]
	        estimatorEnqueue(&measurement);
 800a76e:	f107 0308 	add.w	r3, r7, #8
 800a772:	4618      	mov	r0, r3
 800a774:	f002 fe1c 	bl	800d3b0 <estimatorEnqueue>
	        xQueueOverwrite(accelerometerDataQueue, &sensorData.acc);
 800a778:	4b31      	ldr	r3, [pc, #196]	@ (800a840 <sensorsTask+0x14c>)
 800a77a:	6818      	ldr	r0, [r3, #0]
 800a77c:	2302      	movs	r3, #2
 800a77e:	2200      	movs	r2, #0
 800a780:	4928      	ldr	r1, [pc, #160]	@ (800a824 <sensorsTask+0x130>)
 800a782:	f7fb f8af 	bl	80058e4 <xQueueGenericSend>

	        measurement.type = MeasurementTypeGyroscope;
 800a786:	2309      	movs	r3, #9
 800a788:	723b      	strb	r3, [r7, #8]
	        measurement.data.gyroscope.gyro = sensorData.gyro;
 800a78a:	4a26      	ldr	r2, [pc, #152]	@ (800a824 <sensorsTask+0x130>)
 800a78c:	f107 030c 	add.w	r3, r7, #12
 800a790:	320c      	adds	r2, #12
 800a792:	ca07      	ldmia	r2, {r0, r1, r2}
 800a794:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        gx = sensorData.gyro.x;
 800a798:	4b22      	ldr	r3, [pc, #136]	@ (800a824 <sensorsTask+0x130>)
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	4a29      	ldr	r2, [pc, #164]	@ (800a844 <sensorsTask+0x150>)
 800a79e:	6013      	str	r3, [r2, #0]
	        gy = sensorData.gyro.y;
 800a7a0:	4b20      	ldr	r3, [pc, #128]	@ (800a824 <sensorsTask+0x130>)
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	4a28      	ldr	r2, [pc, #160]	@ (800a848 <sensorsTask+0x154>)
 800a7a6:	6013      	str	r3, [r2, #0]
	        gz = sensorData.gyro.z;
 800a7a8:	4b1e      	ldr	r3, [pc, #120]	@ (800a824 <sensorsTask+0x130>)
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	4a27      	ldr	r2, [pc, #156]	@ (800a84c <sensorsTask+0x158>)
 800a7ae:	6013      	str	r3, [r2, #0]
	        estimatorEnqueue(&measurement);
 800a7b0:	f107 0308 	add.w	r3, r7, #8
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f002 fdfb 	bl	800d3b0 <estimatorEnqueue>
	        xQueueOverwrite(gyroDataQueue, &sensorData.gyro);
 800a7ba:	4b25      	ldr	r3, [pc, #148]	@ (800a850 <sensorsTask+0x15c>)
 800a7bc:	6818      	ldr	r0, [r3, #0]
 800a7be:	2302      	movs	r3, #2
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	4924      	ldr	r1, [pc, #144]	@ (800a854 <sensorsTask+0x160>)
 800a7c4:	f7fb f88e 	bl	80058e4 <xQueueGenericSend>

			if (isBarometerPresent) {
 800a7c8:	4b19      	ldr	r3, [pc, #100]	@ (800a830 <sensorsTask+0x13c>)
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d01c      	beq.n	800a80a <sensorsTask+0x116>
				measurement.type = MeasurementTypeBarometer;
 800a7d0:	230b      	movs	r3, #11
 800a7d2:	723b      	strb	r3, [r7, #8]
				measurement.data.barometer.baro = sensorData.baro;
 800a7d4:	4a13      	ldr	r2, [pc, #76]	@ (800a824 <sensorsTask+0x130>)
 800a7d6:	f107 030c 	add.w	r3, r7, #12
 800a7da:	3224      	adds	r2, #36	@ 0x24
 800a7dc:	ca07      	ldmia	r2, {r0, r1, r2}
 800a7de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				press = sensorData.baro.pressure;
 800a7e2:	4b10      	ldr	r3, [pc, #64]	@ (800a824 <sensorsTask+0x130>)
 800a7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e6:	4a1c      	ldr	r2, [pc, #112]	@ (800a858 <sensorsTask+0x164>)
 800a7e8:	6013      	str	r3, [r2, #0]
				asl = sensorData.baro.asl;
 800a7ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a824 <sensorsTask+0x130>)
 800a7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ee:	4a1b      	ldr	r2, [pc, #108]	@ (800a85c <sensorsTask+0x168>)
 800a7f0:	6013      	str	r3, [r2, #0]
				estimatorEnqueue(&measurement);
 800a7f2:	f107 0308 	add.w	r3, r7, #8
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f002 fdda 	bl	800d3b0 <estimatorEnqueue>
				xQueueOverwrite(barometerDataQueue, &sensorData.baro);
 800a7fc:	4b18      	ldr	r3, [pc, #96]	@ (800a860 <sensorsTask+0x16c>)
 800a7fe:	6818      	ldr	r0, [r3, #0]
 800a800:	2302      	movs	r3, #2
 800a802:	2200      	movs	r2, #0
 800a804:	4917      	ldr	r1, [pc, #92]	@ (800a864 <sensorsTask+0x170>)
 800a806:	f7fb f86d 	bl	80058e4 <xQueueGenericSend>
			}

	    	xSemaphoreGive(dataReady);
 800a80a:	4b17      	ldr	r3, [pc, #92]	@ (800a868 <sensorsTask+0x174>)
 800a80c:	6818      	ldr	r0, [r3, #0]
 800a80e:	2300      	movs	r3, #0
 800a810:	2200      	movs	r2, #0
 800a812:	2100      	movs	r1, #0
 800a814:	f7fb f866 	bl	80058e4 <xQueueGenericSend>
	    if (pdTRUE == xSemaphoreTake(sensorsDataReady, portMAX_DELAY))
 800a818:	e775      	b.n	800a706 <sensorsTask+0x12>
 800a81a:	bf00      	nop
 800a81c:	20007f94 	.word	0x20007f94
 800a820:	20008078 	.word	0x20008078
 800a824:	20008040 	.word	0x20008040
 800a828:	2000819c 	.word	0x2000819c
 800a82c:	2000818c 	.word	0x2000818c
 800a830:	20008158 	.word	0x20008158
 800a834:	200081b4 	.word	0x200081b4
 800a838:	200081b8 	.word	0x200081b8
 800a83c:	200081bc 	.word	0x200081bc
 800a840:	20007f84 	.word	0x20007f84
 800a844:	200081a8 	.word	0x200081a8
 800a848:	200081ac 	.word	0x200081ac
 800a84c:	200081b0 	.word	0x200081b0
 800a850:	20007f88 	.word	0x20007f88
 800a854:	2000804c 	.word	0x2000804c
 800a858:	200081a0 	.word	0x200081a0
 800a85c:	200081a4 	.word	0x200081a4
 800a860:	20007f90 	.word	0x20007f90
 800a864:	20008064 	.word	0x20008064
 800a868:	20007fe8 	.word	0x20007fe8

0800a86c <sensorsMpu6500Bmp280WaitDataReady>:
	    }
	}

}
void sensorsMpu6500Bmp280WaitDataReady(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
	xSemaphoreTake(dataReady, portMAX_DELAY);
 800a870:	4b04      	ldr	r3, [pc, #16]	@ (800a884 <sensorsMpu6500Bmp280WaitDataReady+0x18>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f04f 31ff 	mov.w	r1, #4294967295
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fb fb51 	bl	8005f20 <xQueueSemaphoreTake>
}
 800a87e:	bf00      	nop
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	20007fe8 	.word	0x20007fe8

0800a888 <processAccGyroMeasurements>:
void processAccGyroMeasurements()
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b086      	sub	sp, #24
 800a88c:	af00      	add	r7, sp, #0
	Axis3f gyroScaledIMU;
	Axis3f accScaledIMU;
//	Axis3f accScaled;
	accelRaw.x = ((int16_t) imu.buf[0] << 8 | imu.buf[1]);
 800a88e:	4b79      	ldr	r3, [pc, #484]	@ (800aa74 <processAccGyroMeasurements+0x1ec>)
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	021b      	lsls	r3, r3, #8
 800a894:	b21a      	sxth	r2, r3
 800a896:	4b77      	ldr	r3, [pc, #476]	@ (800aa74 <processAccGyroMeasurements+0x1ec>)
 800a898:	785b      	ldrb	r3, [r3, #1]
 800a89a:	b21b      	sxth	r3, r3
 800a89c:	4313      	orrs	r3, r2
 800a89e:	b21a      	sxth	r2, r3
 800a8a0:	4b75      	ldr	r3, [pc, #468]	@ (800aa78 <processAccGyroMeasurements+0x1f0>)
 800a8a2:	801a      	strh	r2, [r3, #0]
	accelRaw.y = ((int16_t) imu.buf[2] << 8 | imu.buf[3]);
 800a8a4:	4b73      	ldr	r3, [pc, #460]	@ (800aa74 <processAccGyroMeasurements+0x1ec>)
 800a8a6:	789b      	ldrb	r3, [r3, #2]
 800a8a8:	021b      	lsls	r3, r3, #8
 800a8aa:	b21a      	sxth	r2, r3
 800a8ac:	4b71      	ldr	r3, [pc, #452]	@ (800aa74 <processAccGyroMeasurements+0x1ec>)
 800a8ae:	78db      	ldrb	r3, [r3, #3]
 800a8b0:	b21b      	sxth	r3, r3
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	b21a      	sxth	r2, r3
 800a8b6:	4b70      	ldr	r3, [pc, #448]	@ (800aa78 <processAccGyroMeasurements+0x1f0>)
 800a8b8:	805a      	strh	r2, [r3, #2]
	accelRaw.z = ((int16_t) imu.buf[4] << 8 | imu.buf[5]);
 800a8ba:	4b6e      	ldr	r3, [pc, #440]	@ (800aa74 <processAccGyroMeasurements+0x1ec>)
 800a8bc:	791b      	ldrb	r3, [r3, #4]
 800a8be:	021b      	lsls	r3, r3, #8
 800a8c0:	b21a      	sxth	r2, r3
 800a8c2:	4b6c      	ldr	r3, [pc, #432]	@ (800aa74 <processAccGyroMeasurements+0x1ec>)
 800a8c4:	795b      	ldrb	r3, [r3, #5]
 800a8c6:	b21b      	sxth	r3, r3
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	b21a      	sxth	r2, r3
 800a8cc:	4b6a      	ldr	r3, [pc, #424]	@ (800aa78 <processAccGyroMeasurements+0x1f0>)
 800a8ce:	809a      	strh	r2, [r3, #4]
	gyroRaw.x = ((int16_t) imu.buf[8] << 8 | imu.buf[9]);
 800a8d0:	4b68      	ldr	r3, [pc, #416]	@ (800aa74 <processAccGyroMeasurements+0x1ec>)
 800a8d2:	7a1b      	ldrb	r3, [r3, #8]
 800a8d4:	021b      	lsls	r3, r3, #8
 800a8d6:	b21a      	sxth	r2, r3
 800a8d8:	4b66      	ldr	r3, [pc, #408]	@ (800aa74 <processAccGyroMeasurements+0x1ec>)
 800a8da:	7a5b      	ldrb	r3, [r3, #9]
 800a8dc:	b21b      	sxth	r3, r3
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	b21a      	sxth	r2, r3
 800a8e2:	4b66      	ldr	r3, [pc, #408]	@ (800aa7c <processAccGyroMeasurements+0x1f4>)
 800a8e4:	801a      	strh	r2, [r3, #0]
	gyroRaw.y = ((int16_t) imu.buf[10] << 8 | imu.buf[11]);
 800a8e6:	4b63      	ldr	r3, [pc, #396]	@ (800aa74 <processAccGyroMeasurements+0x1ec>)
 800a8e8:	7a9b      	ldrb	r3, [r3, #10]
 800a8ea:	021b      	lsls	r3, r3, #8
 800a8ec:	b21a      	sxth	r2, r3
 800a8ee:	4b61      	ldr	r3, [pc, #388]	@ (800aa74 <processAccGyroMeasurements+0x1ec>)
 800a8f0:	7adb      	ldrb	r3, [r3, #11]
 800a8f2:	b21b      	sxth	r3, r3
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	b21a      	sxth	r2, r3
 800a8f8:	4b60      	ldr	r3, [pc, #384]	@ (800aa7c <processAccGyroMeasurements+0x1f4>)
 800a8fa:	805a      	strh	r2, [r3, #2]
	gyroRaw.z = ((int16_t) imu.buf[12] << 8 | imu.buf[13]);
 800a8fc:	4b5d      	ldr	r3, [pc, #372]	@ (800aa74 <processAccGyroMeasurements+0x1ec>)
 800a8fe:	7b1b      	ldrb	r3, [r3, #12]
 800a900:	021b      	lsls	r3, r3, #8
 800a902:	b21a      	sxth	r2, r3
 800a904:	4b5b      	ldr	r3, [pc, #364]	@ (800aa74 <processAccGyroMeasurements+0x1ec>)
 800a906:	7b5b      	ldrb	r3, [r3, #13]
 800a908:	b21b      	sxth	r3, r3
 800a90a:	4313      	orrs	r3, r2
 800a90c:	b21a      	sxth	r2, r3
 800a90e:	4b5b      	ldr	r3, [pc, #364]	@ (800aa7c <processAccGyroMeasurements+0x1f4>)
 800a910:	809a      	strh	r2, [r3, #4]

	gyroBiasFound = processGyroBias(gyroRaw.x, gyroRaw.y, gyroRaw.z, &gyroBias);
 800a912:	4b5a      	ldr	r3, [pc, #360]	@ (800aa7c <processAccGyroMeasurements+0x1f4>)
 800a914:	f9b3 0000 	ldrsh.w	r0, [r3]
 800a918:	4b58      	ldr	r3, [pc, #352]	@ (800aa7c <processAccGyroMeasurements+0x1f4>)
 800a91a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800a91e:	4b57      	ldr	r3, [pc, #348]	@ (800aa7c <processAccGyroMeasurements+0x1f4>)
 800a920:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800a924:	4b56      	ldr	r3, [pc, #344]	@ (800aa80 <processAccGyroMeasurements+0x1f8>)
 800a926:	f000 fb53 	bl	800afd0 <processGyroBias>
 800a92a:	4603      	mov	r3, r0
 800a92c:	461a      	mov	r2, r3
 800a92e:	4b55      	ldr	r3, [pc, #340]	@ (800aa84 <processAccGyroMeasurements+0x1fc>)
 800a930:	701a      	strb	r2, [r3, #0]

	if (gyroBiasFound) {
 800a932:	4b54      	ldr	r3, [pc, #336]	@ (800aa84 <processAccGyroMeasurements+0x1fc>)
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00b      	beq.n	800a952 <processAccGyroMeasurements+0xca>
		processAccScale(accelRaw.x, accelRaw.y, accelRaw.z);
 800a93a:	4b4f      	ldr	r3, [pc, #316]	@ (800aa78 <processAccGyroMeasurements+0x1f0>)
 800a93c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a940:	4a4d      	ldr	r2, [pc, #308]	@ (800aa78 <processAccGyroMeasurements+0x1f0>)
 800a942:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800a946:	4a4c      	ldr	r2, [pc, #304]	@ (800aa78 <processAccGyroMeasurements+0x1f0>)
 800a948:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 fa4d 	bl	800adec <processAccScale>
	}

	gyroScaledIMU.x = -(gyroRaw.x - gyroBias.x) * SENSORS_DEG_PER_LSB_CFG;
 800a952:	4b4a      	ldr	r3, [pc, #296]	@ (800aa7c <processAccGyroMeasurements+0x1f4>)
 800a954:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a958:	ee07 3a90 	vmov	s15, r3
 800a95c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a960:	4b47      	ldr	r3, [pc, #284]	@ (800aa80 <processAccGyroMeasurements+0x1f8>)
 800a962:	edd3 7a00 	vldr	s15, [r3]
 800a966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a96a:	eef1 7a67 	vneg.f32	s15, s15
 800a96e:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800aa88 <processAccGyroMeasurements+0x200>
 800a972:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a976:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroScaledIMU.y = (gyroRaw.y - gyroBias.y) * SENSORS_DEG_PER_LSB_CFG;
 800a97a:	4b40      	ldr	r3, [pc, #256]	@ (800aa7c <processAccGyroMeasurements+0x1f4>)
 800a97c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a980:	ee07 3a90 	vmov	s15, r3
 800a984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a988:	4b3d      	ldr	r3, [pc, #244]	@ (800aa80 <processAccGyroMeasurements+0x1f8>)
 800a98a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a98e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a992:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800aa88 <processAccGyroMeasurements+0x200>
 800a996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a99a:	edc7 7a04 	vstr	s15, [r7, #16]
	gyroScaledIMU.z = (gyroRaw.z - gyroBias.z) * SENSORS_DEG_PER_LSB_CFG;
 800a99e:	4b37      	ldr	r3, [pc, #220]	@ (800aa7c <processAccGyroMeasurements+0x1f4>)
 800a9a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a9a4:	ee07 3a90 	vmov	s15, r3
 800a9a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9ac:	4b34      	ldr	r3, [pc, #208]	@ (800aa80 <processAccGyroMeasurements+0x1f8>)
 800a9ae:	edd3 7a02 	vldr	s15, [r3, #8]
 800a9b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9b6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800aa88 <processAccGyroMeasurements+0x200>
 800a9ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9be:	edc7 7a05 	vstr	s15, [r7, #20]
	sensorsAlignToAirframe(&gyroScaledIMU, &sensorData.gyro);
 800a9c2:	f107 030c 	add.w	r3, r7, #12
 800a9c6:	4931      	ldr	r1, [pc, #196]	@ (800aa8c <processAccGyroMeasurements+0x204>)
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 fe6f 	bl	800b6ac <sensorsAlignToAirframe>
	applyAxis3fLpf((lpf2pData*) (&gyroLpf), &sensorData.gyro);
 800a9ce:	492f      	ldr	r1, [pc, #188]	@ (800aa8c <processAccGyroMeasurements+0x204>)
 800a9d0:	482f      	ldr	r0, [pc, #188]	@ (800aa90 <processAccGyroMeasurements+0x208>)
 800a9d2:	f001 f845 	bl	800ba60 <applyAxis3fLpf>

	accScaledIMU.x = -(accelRaw.x - accBias.x) * SENSORS_G_PER_LSB_CFG / accScale;
 800a9d6:	4b28      	ldr	r3, [pc, #160]	@ (800aa78 <processAccGyroMeasurements+0x1f0>)
 800a9d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9dc:	ee07 3a90 	vmov	s15, r3
 800a9e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9e4:	4b2b      	ldr	r3, [pc, #172]	@ (800aa94 <processAccGyroMeasurements+0x20c>)
 800a9e6:	edd3 7a00 	vldr	s15, [r3]
 800a9ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9ee:	eef1 7a67 	vneg.f32	s15, s15
 800a9f2:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800aa98 <processAccGyroMeasurements+0x210>
 800a9f6:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a9fa:	4b28      	ldr	r3, [pc, #160]	@ (800aa9c <processAccGyroMeasurements+0x214>)
 800a9fc:	ed93 7a00 	vldr	s14, [r3]
 800aa00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa04:	edc7 7a00 	vstr	s15, [r7]
	accScaledIMU.y = (accelRaw.y - accBias.y) * SENSORS_G_PER_LSB_CFG / accScale;
 800aa08:	4b1b      	ldr	r3, [pc, #108]	@ (800aa78 <processAccGyroMeasurements+0x1f0>)
 800aa0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa16:	4b1f      	ldr	r3, [pc, #124]	@ (800aa94 <processAccGyroMeasurements+0x20c>)
 800aa18:	edd3 7a01 	vldr	s15, [r3, #4]
 800aa1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa20:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800aa98 <processAccGyroMeasurements+0x210>
 800aa24:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa28:	4b1c      	ldr	r3, [pc, #112]	@ (800aa9c <processAccGyroMeasurements+0x214>)
 800aa2a:	ed93 7a00 	vldr	s14, [r3]
 800aa2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa32:	edc7 7a01 	vstr	s15, [r7, #4]
	accScaledIMU.z = (accelRaw.z) * SENSORS_G_PER_LSB_CFG / accScale;
 800aa36:	4b10      	ldr	r3, [pc, #64]	@ (800aa78 <processAccGyroMeasurements+0x1f0>)
 800aa38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800aa3c:	ee07 3a90 	vmov	s15, r3
 800aa40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa44:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800aa98 <processAccGyroMeasurements+0x210>
 800aa48:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa4c:	4b13      	ldr	r3, [pc, #76]	@ (800aa9c <processAccGyroMeasurements+0x214>)
 800aa4e:	ed93 7a00 	vldr	s14, [r3]
 800aa52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa56:	edc7 7a02 	vstr	s15, [r7, #8]
	sensorsAlignToAirframe(&accScaledIMU, &sensorData.acc);
 800aa5a:	463b      	mov	r3, r7
 800aa5c:	4910      	ldr	r1, [pc, #64]	@ (800aaa0 <processAccGyroMeasurements+0x218>)
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fe24 	bl	800b6ac <sensorsAlignToAirframe>
//	sensorsAccAlignToGravity(&accScaled, &sensorData.acc);
	applyAxis3fLpf((lpf2pData*) (&accLpf), &sensorData.acc);
 800aa64:	490e      	ldr	r1, [pc, #56]	@ (800aaa0 <processAccGyroMeasurements+0x218>)
 800aa66:	480f      	ldr	r0, [pc, #60]	@ (800aaa4 <processAccGyroMeasurements+0x21c>)
 800aa68:	f000 fffa 	bl	800ba60 <applyAxis3fLpf>


}
 800aa6c:	bf00      	nop
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	2000818c 	.word	0x2000818c
 800aa78:	20008088 	.word	0x20008088
 800aa7c:	20008080 	.word	0x20008080
 800aa80:	20008090 	.word	0x20008090
 800aa84:	200080a8 	.word	0x200080a8
 800aa88:	3d7a0000 	.word	0x3d7a0000
 800aa8c:	2000804c 	.word	0x2000804c
 800aa90:	20008104 	.word	0x20008104
 800aa94:	2000809c 	.word	0x2000809c
 800aa98:	3a000000 	.word	0x3a000000
 800aa9c:	20000014 	.word	0x20000014
 800aaa0:	20008040 	.word	0x20008040
 800aaa4:	200080b0 	.word	0x200080b0

0800aaa8 <processBarometerMeasurements>:
static void processBarometerMeasurements()
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
	float pressure, temperature,asl;
	bmp280GetData(&pressure, &temperature, &asl);
 800aaae:	1d3a      	adds	r2, r7, #4
 800aab0:	f107 0108 	add.w	r1, r7, #8
 800aab4:	f107 030c 	add.w	r3, r7, #12
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fe fb55 	bl	8009168 <bmp280GetData>

	sensorData.baro.pressure = pressure / 100.0f;
 800aabe:	ed97 7a03 	vldr	s14, [r7, #12]
 800aac2:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800aaf0 <processBarometerMeasurements+0x48>
 800aac6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aaca:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf4 <processBarometerMeasurements+0x4c>)
 800aacc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	sensorData.baro.temperature = temperature;
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	4a08      	ldr	r2, [pc, #32]	@ (800aaf4 <processBarometerMeasurements+0x4c>)
 800aad4:	6293      	str	r3, [r2, #40]	@ 0x28
	sensorData.baro.asl = bmp280PressureToAltitude(&sensorData.baro.pressure);
 800aad6:	4808      	ldr	r0, [pc, #32]	@ (800aaf8 <processBarometerMeasurements+0x50>)
 800aad8:	f7fe fb5e 	bl	8009198 <bmp280PressureToAltitude>
 800aadc:	eef0 7a40 	vmov.f32	s15, s0
 800aae0:	4b04      	ldr	r3, [pc, #16]	@ (800aaf4 <processBarometerMeasurements+0x4c>)
 800aae2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 800aae6:	bf00      	nop
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	42c80000 	.word	0x42c80000
 800aaf4:	20008040 	.word	0x20008040
 800aaf8:	20008064 	.word	0x20008064

0800aafc <sensorsDeviceInit>:
static void sensorsDeviceInit(void)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
	isMagnetometerPresent = false;
 800ab02:	4b2f      	ldr	r3, [pc, #188]	@ (800abc0 <sensorsDeviceInit+0xc4>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	701a      	strb	r2, [r3, #0]
	isBarometerPresent = false;
 800ab08:	4b2e      	ldr	r3, [pc, #184]	@ (800abc4 <sensorsDeviceInit+0xc8>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	701a      	strb	r2, [r3, #0]
	TickType_t xStartTime = 0;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	603b      	str	r3, [r7, #0]
	vTaskDelayUntil(&xStartTime, T2M(1000));
 800ab12:	463b      	mov	r3, r7
 800ab14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fb fe39 	bl	8006790 <vTaskDelayUntil>
//	stand = 1;// JH

	if ( mpu6500TestConnection() == false ){
 800ab1e:	f7fe ff35 	bl	800998c <mpu6500TestConnection>
 800ab22:	4603      	mov	r3, r0
 800ab24:	f083 0301 	eor.w	r3, r3, #1
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <sensorsDeviceInit+0x36>
//		stand = 1;//NJH
		while(1);
 800ab2e:	bf00      	nop
 800ab30:	e7fd      	b.n	800ab2e <sensorsDeviceInit+0x32>
	}
	vTaskDelay(100);
 800ab32:	2064      	movs	r0, #100	@ 0x64
 800ab34:	f7fb fea2 	bl	800687c <vTaskDelay>
//	stand = 1;// NJH
	mpu6500Init();
 800ab38:	f7fe ff4c 	bl	80099d4 <mpu6500Init>
//	stand = 1;// NJH

	vTaskDelay(100);
 800ab3c:	2064      	movs	r0, #100	@ 0x64
 800ab3e:	f7fb fe9d 	bl	800687c <vTaskDelay>
	for (uint8_t i = 0; i < 3; i++) {
 800ab42:	2300      	movs	r3, #0
 800ab44:	71fb      	strb	r3, [r7, #7]
 800ab46:	e01e      	b.n	800ab86 <sensorsDeviceInit+0x8a>
		lpf2pInit(&gyroLpf[i], 1000, GYRO_LPF_CUTOFF_FREQ);
 800ab48:	79fa      	ldrb	r2, [r7, #7]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	00db      	lsls	r3, r3, #3
 800ab4e:	1a9b      	subs	r3, r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4a1d      	ldr	r2, [pc, #116]	@ (800abc8 <sensorsDeviceInit+0xcc>)
 800ab54:	4413      	add	r3, r2
 800ab56:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800abcc <sensorsDeviceInit+0xd0>
 800ab5a:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800abd0 <sensorsDeviceInit+0xd4>
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f007 fcbc 	bl	80124dc <lpf2pInit>
		lpf2pInit(&accLpf[i], 1000, ACCEL_LPF_CUTOFF_FREQ);
 800ab64:	79fa      	ldrb	r2, [r7, #7]
 800ab66:	4613      	mov	r3, r2
 800ab68:	00db      	lsls	r3, r3, #3
 800ab6a:	1a9b      	subs	r3, r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	4a19      	ldr	r2, [pc, #100]	@ (800abd4 <sensorsDeviceInit+0xd8>)
 800ab70:	4413      	add	r3, r2
 800ab72:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800ab76:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800abd0 <sensorsDeviceInit+0xd4>
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f007 fcae 	bl	80124dc <lpf2pInit>
	for (uint8_t i = 0; i < 3; i++) {
 800ab80:	79fb      	ldrb	r3, [r7, #7]
 800ab82:	3301      	adds	r3, #1
 800ab84:	71fb      	strb	r3, [r7, #7]
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d9dd      	bls.n	800ab48 <sensorsDeviceInit+0x4c>
	}

	vTaskDelay(10);
 800ab8c:	200a      	movs	r0, #10
 800ab8e:	f7fb fe75 	bl	800687c <vTaskDelay>
	bmp280Init();
 800ab92:	f7fe fab1 	bl	80090f8 <bmp280Init>
	if (bmp280TestConnection() == true){
 800ab96:	f7fe fac7 	bl	8009128 <bmp280TestConnection>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <sensorsDeviceInit+0xac>
		isBarometerPresent = true;
 800aba0:	4b08      	ldr	r3, [pc, #32]	@ (800abc4 <sensorsDeviceInit+0xc8>)
 800aba2:	2201      	movs	r2, #1
 800aba4:	701a      	strb	r2, [r3, #0]
 800aba6:	e004      	b.n	800abb2 <sensorsDeviceInit+0xb6>
	}
	else{
		isBarometerPresent = false;
 800aba8:	4b06      	ldr	r3, [pc, #24]	@ (800abc4 <sensorsDeviceInit+0xc8>)
 800abaa:	2200      	movs	r2, #0
 800abac:	701a      	strb	r2, [r3, #0]
		while(1);
 800abae:	bf00      	nop
 800abb0:	e7fd      	b.n	800abae <sensorsDeviceInit+0xb2>
	}
	vTaskDelay(10);
 800abb2:	200a      	movs	r0, #10
 800abb4:	f7fb fe62 	bl	800687c <vTaskDelay>

}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	20008159 	.word	0x20008159
 800abc4:	20008158 	.word	0x20008158
 800abc8:	20008104 	.word	0x20008104
 800abcc:	42a00000 	.word	0x42a00000
 800abd0:	447a0000 	.word	0x447a0000
 800abd4:	200080b0 	.word	0x200080b0

0800abd8 <sensorsTaskInit>:
static void sensorsTaskInit(void)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af04      	add	r7, sp, #16
	accelerometerDataQueue = STATIC_MEM_QUEUE_CREATE(accelerometerDataQueue);
 800abde:	2301      	movs	r3, #1
 800abe0:	4618      	mov	r0, r3
 800abe2:	230c      	movs	r3, #12
 800abe4:	4619      	mov	r1, r3
 800abe6:	2300      	movs	r3, #0
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	4b1f      	ldr	r3, [pc, #124]	@ (800ac68 <sensorsTaskInit+0x90>)
 800abec:	4a1f      	ldr	r2, [pc, #124]	@ (800ac6c <sensorsTaskInit+0x94>)
 800abee:	f7fa fd65 	bl	80056bc <xQueueGenericCreateStatic>
 800abf2:	4603      	mov	r3, r0
 800abf4:	4a1e      	ldr	r2, [pc, #120]	@ (800ac70 <sensorsTaskInit+0x98>)
 800abf6:	6013      	str	r3, [r2, #0]
	gyroDataQueue = STATIC_MEM_QUEUE_CREATE(gyroDataQueue);
 800abf8:	2301      	movs	r3, #1
 800abfa:	4618      	mov	r0, r3
 800abfc:	230c      	movs	r3, #12
 800abfe:	4619      	mov	r1, r3
 800ac00:	2300      	movs	r3, #0
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	4b1b      	ldr	r3, [pc, #108]	@ (800ac74 <sensorsTaskInit+0x9c>)
 800ac06:	4a1c      	ldr	r2, [pc, #112]	@ (800ac78 <sensorsTaskInit+0xa0>)
 800ac08:	f7fa fd58 	bl	80056bc <xQueueGenericCreateStatic>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	4a1b      	ldr	r2, [pc, #108]	@ (800ac7c <sensorsTaskInit+0xa4>)
 800ac10:	6013      	str	r3, [r2, #0]
	magnetometerDataQueue = STATIC_MEM_QUEUE_CREATE(magnetometerDataQueue);
 800ac12:	2301      	movs	r3, #1
 800ac14:	4618      	mov	r0, r3
 800ac16:	230c      	movs	r3, #12
 800ac18:	4619      	mov	r1, r3
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	4b18      	ldr	r3, [pc, #96]	@ (800ac80 <sensorsTaskInit+0xa8>)
 800ac20:	4a18      	ldr	r2, [pc, #96]	@ (800ac84 <sensorsTaskInit+0xac>)
 800ac22:	f7fa fd4b 	bl	80056bc <xQueueGenericCreateStatic>
 800ac26:	4603      	mov	r3, r0
 800ac28:	4a17      	ldr	r2, [pc, #92]	@ (800ac88 <sensorsTaskInit+0xb0>)
 800ac2a:	6013      	str	r3, [r2, #0]
	barometerDataQueue = STATIC_MEM_QUEUE_CREATE(barometerDataQueue);
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	4618      	mov	r0, r3
 800ac30:	230c      	movs	r3, #12
 800ac32:	4619      	mov	r1, r3
 800ac34:	2300      	movs	r3, #0
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	4b14      	ldr	r3, [pc, #80]	@ (800ac8c <sensorsTaskInit+0xb4>)
 800ac3a:	4a15      	ldr	r2, [pc, #84]	@ (800ac90 <sensorsTaskInit+0xb8>)
 800ac3c:	f7fa fd3e 	bl	80056bc <xQueueGenericCreateStatic>
 800ac40:	4603      	mov	r3, r0
 800ac42:	4a14      	ldr	r2, [pc, #80]	@ (800ac94 <sensorsTaskInit+0xbc>)
 800ac44:	6013      	str	r3, [r2, #0]

	STATIC_MEM_TASK_CREATE(sensorsTask, sensorsTask, SENSORS_TASK_NAME, NULL, SENSORS_TASK_PRI);
 800ac46:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	4b12      	ldr	r3, [pc, #72]	@ (800ac98 <sensorsTaskInit+0xc0>)
 800ac4e:	9302      	str	r3, [sp, #8]
 800ac50:	4b12      	ldr	r3, [pc, #72]	@ (800ac9c <sensorsTaskInit+0xc4>)
 800ac52:	9301      	str	r3, [sp, #4]
 800ac54:	2304      	movs	r3, #4
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	2300      	movs	r3, #0
 800ac5a:	4911      	ldr	r1, [pc, #68]	@ (800aca0 <sensorsTaskInit+0xc8>)
 800ac5c:	4811      	ldr	r0, [pc, #68]	@ (800aca4 <sensorsTaskInit+0xcc>)
 800ac5e:	f7fb fbef 	bl	8006440 <xTaskCreateStatic>

}
 800ac62:	bf00      	nop
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	100003b0 	.word	0x100003b0
 800ac6c:	100003a4 	.word	0x100003a4
 800ac70:	20007f84 	.word	0x20007f84
 800ac74:	1000040c 	.word	0x1000040c
 800ac78:	10000400 	.word	0x10000400
 800ac7c:	20007f88 	.word	0x20007f88
 800ac80:	10000468 	.word	0x10000468
 800ac84:	1000045c 	.word	0x1000045c
 800ac88:	20007f8c 	.word	0x20007f8c
 800ac8c:	100004c4 	.word	0x100004c4
 800ac90:	100004b8 	.word	0x100004b8
 800ac94:	20007f90 	.word	0x20007f90
 800ac98:	10001d40 	.word	0x10001d40
 800ac9c:	200081c0 	.word	0x200081c0
 800aca0:	0801a65c 	.word	0x0801a65c
 800aca4:	0800a6f5 	.word	0x0800a6f5

0800aca8 <sensorsInterruptInit>:

static void sensorsInterruptInit(void)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acae:	1d3b      	adds	r3, r7, #4
 800acb0:	2200      	movs	r2, #0
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	605a      	str	r2, [r3, #4]
 800acb6:	609a      	str	r2, [r3, #8]
 800acb8:	60da      	str	r2, [r3, #12]
 800acba:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800acbc:	2300      	movs	r3, #0
 800acbe:	603b      	str	r3, [r7, #0]
 800acc0:	4b1c      	ldr	r3, [pc, #112]	@ (800ad34 <sensorsInterruptInit+0x8c>)
 800acc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acc4:	4a1b      	ldr	r2, [pc, #108]	@ (800ad34 <sensorsInterruptInit+0x8c>)
 800acc6:	f043 0301 	orr.w	r3, r3, #1
 800acca:	6313      	str	r3, [r2, #48]	@ 0x30
 800accc:	4b19      	ldr	r3, [pc, #100]	@ (800ad34 <sensorsInterruptInit+0x8c>)
 800acce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	603b      	str	r3, [r7, #0]
 800acd6:	683b      	ldr	r3, [r7, #0]

	sensorsDataReady = xSemaphoreCreateBinaryStatic(&sensorsDataReadyBuffer);
 800acd8:	2303      	movs	r3, #3
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	4b16      	ldr	r3, [pc, #88]	@ (800ad38 <sensorsInterruptInit+0x90>)
 800acde:	2200      	movs	r2, #0
 800ace0:	2100      	movs	r1, #0
 800ace2:	2001      	movs	r0, #1
 800ace4:	f7fa fcea 	bl	80056bc <xQueueGenericCreateStatic>
 800ace8:	4603      	mov	r3, r0
 800acea:	4a14      	ldr	r2, [pc, #80]	@ (800ad3c <sensorsInterruptInit+0x94>)
 800acec:	6013      	str	r3, [r2, #0]
	dataReady = xSemaphoreCreateBinaryStatic(&dataReadyBuffer);
 800acee:	2303      	movs	r3, #3
 800acf0:	9300      	str	r3, [sp, #0]
 800acf2:	4b13      	ldr	r3, [pc, #76]	@ (800ad40 <sensorsInterruptInit+0x98>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	2100      	movs	r1, #0
 800acf8:	2001      	movs	r0, #1
 800acfa:	f7fa fcdf 	bl	80056bc <xQueueGenericCreateStatic>
 800acfe:	4603      	mov	r3, r0
 800ad00:	4a10      	ldr	r2, [pc, #64]	@ (800ad44 <sensorsInterruptInit+0x9c>)
 800ad02:	6013      	str	r3, [r2, #0]


	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ad04:	2302      	movs	r3, #2
 800ad06:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ad08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800ad0c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad12:	1d3b      	adds	r3, r7, #4
 800ad14:	4619      	mov	r1, r3
 800ad16:	480c      	ldr	r0, [pc, #48]	@ (800ad48 <sensorsInterruptInit+0xa0>)
 800ad18:	f7f6 feb8 	bl	8001a8c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	2107      	movs	r1, #7
 800ad20:	2007      	movs	r0, #7
 800ad22:	f7f6 faeb 	bl	80012fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800ad26:	2007      	movs	r0, #7
 800ad28:	f7f6 fb04 	bl	8001334 <HAL_NVIC_EnableIRQ>
}
 800ad2c:	bf00      	nop
 800ad2e:	3718      	adds	r7, #24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	40023800 	.word	0x40023800
 800ad38:	20007f98 	.word	0x20007f98
 800ad3c:	20007f94 	.word	0x20007f94
 800ad40:	20007fec 	.word	0x20007fec
 800ad44:	20007fe8 	.word	0x20007fe8
 800ad48:	40020000 	.word	0x40020000

0800ad4c <sensorsMpu6500Bmp280Init>:

void sensorsMpu6500Bmp280Init(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
	if (isInit) {
 800ad50:	4b09      	ldr	r3, [pc, #36]	@ (800ad78 <sensorsMpu6500Bmp280Init+0x2c>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10c      	bne.n	800ad72 <sensorsMpu6500Bmp280Init+0x26>
		return;
	}
	sensorsBiasObjInit(&gyroBiasRunning);
 800ad58:	4808      	ldr	r0, [pc, #32]	@ (800ad7c <sensorsMpu6500Bmp280Init+0x30>)
 800ad5a:	f000 f96d 	bl	800b038 <sensorsBiasObjInit>
//	stand = 1;//JH

	sensorsDeviceInit();
 800ad5e:	f7ff fecd 	bl	800aafc <sensorsDeviceInit>
//	stand = 1;//NJH

	sensorsInterruptInit();
 800ad62:	f7ff ffa1 	bl	800aca8 <sensorsInterruptInit>
	sensorsTaskInit();
 800ad66:	f7ff ff37 	bl	800abd8 <sensorsTaskInit>

	isInit = true;
 800ad6a:	4b03      	ldr	r3, [pc, #12]	@ (800ad78 <sensorsMpu6500Bmp280Init+0x2c>)
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	701a      	strb	r2, [r3, #0]
 800ad70:	e000      	b.n	800ad74 <sensorsMpu6500Bmp280Init+0x28>
		return;
 800ad72:	bf00      	nop
}
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	2000803c 	.word	0x2000803c
 800ad7c:	10000514 	.word	0x10000514

0800ad80 <sensorsMpu6500Bmp280Test>:
bool sensorsMpu6500Bmp280Test(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
	  bool testStatus = true;
 800ad86:	2301      	movs	r3, #1
 800ad88:	71fb      	strb	r3, [r7, #7]

	  if (!isInit)
 800ad8a:	4b16      	ldr	r3, [pc, #88]	@ (800ade4 <sensorsMpu6500Bmp280Test+0x64>)
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	f083 0301 	eor.w	r3, r3, #1
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d001      	beq.n	800ad9c <sensorsMpu6500Bmp280Test+0x1c>
	  {
	    testStatus = false;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	71fb      	strb	r3, [r7, #7]
	  }

	  // Try for 3 seconds so the quad has stabilized enough to pass the test
	  for (int i = 0; i < 300; i++)
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	603b      	str	r3, [r7, #0]
 800ada0:	e00e      	b.n	800adc0 <sensorsMpu6500Bmp280Test+0x40>
	  {
	    if(mpu6500SelfTest() == true)
 800ada2:	f7fe fe0f 	bl	80099c4 <mpu6500SelfTest>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <sensorsMpu6500Bmp280Test+0x34>
	    {
	    	isMpu6500TestPassed = true;
 800adac:	4b0e      	ldr	r3, [pc, #56]	@ (800ade8 <sensorsMpu6500Bmp280Test+0x68>)
 800adae:	2201      	movs	r2, #1
 800adb0:	701a      	strb	r2, [r3, #0]
	      break;
 800adb2:	e009      	b.n	800adc8 <sensorsMpu6500Bmp280Test+0x48>
	    }
	    else
	    {
	      vTaskDelay(M2T(10));
 800adb4:	200a      	movs	r0, #10
 800adb6:	f7fb fd61 	bl	800687c <vTaskDelay>
	  for (int i = 0; i < 300; i++)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	3301      	adds	r3, #1
 800adbe:	603b      	str	r3, [r7, #0]
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800adc6:	dbec      	blt.n	800ada2 <sensorsMpu6500Bmp280Test+0x22>
	    }
	  }
	  testStatus &= isMpu6500TestPassed;
 800adc8:	79fb      	ldrb	r3, [r7, #7]
 800adca:	4a07      	ldr	r2, [pc, #28]	@ (800ade8 <sensorsMpu6500Bmp280Test+0x68>)
 800adcc:	7812      	ldrb	r2, [r2, #0]
 800adce:	4013      	ands	r3, r2
 800add0:	2b00      	cmp	r3, #0
 800add2:	bf14      	ite	ne
 800add4:	2301      	movne	r3, #1
 800add6:	2300      	moveq	r3, #0
 800add8:	71fb      	strb	r3, [r7, #7]
	    isLPS25HTestPassed = lps25hSelfTest();
	    testStatus = isLPS25HTestPassed;
	  }
	#endif

	  return true;
 800adda:	2301      	movs	r3, #1
//	  return testStatus;
}
 800addc:	4618      	mov	r0, r3
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	2000803c 	.word	0x2000803c
 800ade8:	2000815a 	.word	0x2000815a

0800adec <processAccScale>:

static bool processAccScale(int16_t ax, int16_t ay, int16_t az)
{
 800adec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800adf0:	ed2d 8b02 	vpush	{d8}
 800adf4:	b088      	sub	sp, #32
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	4603      	mov	r3, r0
 800adfa:	83fb      	strh	r3, [r7, #30]
 800adfc:	460b      	mov	r3, r1
 800adfe:	83bb      	strh	r3, [r7, #28]
 800ae00:	4613      	mov	r3, r2
 800ae02:	837b      	strh	r3, [r7, #26]
  static bool accBiasFound = false;
  static uint32_t accScaleSumCount = 0;
  static int64_t accSum[GYRO_NBR_OF_AXES] = {0};


  if (!accBiasFound)
 800ae04:	4b6a      	ldr	r3, [pc, #424]	@ (800afb0 <processAccScale+0x1c4>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	f083 0301 	eor.w	r3, r3, #1
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f000 80c5 	beq.w	800af9e <processAccScale+0x1b2>
  {
    accScaleSum += sqrtf(powf(ax * SENSORS_G_PER_LSB_CFG, 2) + powf(ay * SENSORS_G_PER_LSB_CFG, 2) + powf(az * SENSORS_G_PER_LSB_CFG, 2));
 800ae14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ae18:	ee07 3a90 	vmov	s15, r3
 800ae1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae20:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 800afb4 <processAccScale+0x1c8>
 800ae24:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae28:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800ae2c:	eeb0 0a67 	vmov.f32	s0, s15
 800ae30:	f00c febe 	bl	8017bb0 <powf>
 800ae34:	eeb0 8a40 	vmov.f32	s16, s0
 800ae38:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ae3c:	ee07 3a90 	vmov	s15, r3
 800ae40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae44:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800afb4 <processAccScale+0x1c8>
 800ae48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae4c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800ae50:	eeb0 0a67 	vmov.f32	s0, s15
 800ae54:	f00c feac 	bl	8017bb0 <powf>
 800ae58:	eef0 7a40 	vmov.f32	s15, s0
 800ae5c:	ee38 8a27 	vadd.f32	s16, s16, s15
 800ae60:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ae64:	ee07 3a90 	vmov	s15, r3
 800ae68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae6c:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800afb4 <processAccScale+0x1c8>
 800ae70:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae74:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800ae78:	eeb0 0a67 	vmov.f32	s0, s15
 800ae7c:	f00c fe98 	bl	8017bb0 <powf>
 800ae80:	eef0 7a40 	vmov.f32	s15, s0
 800ae84:	ee78 7a27 	vadd.f32	s15, s16, s15
 800ae88:	eeb0 0a67 	vmov.f32	s0, s15
 800ae8c:	f00c fee8 	bl	8017c60 <sqrtf>
 800ae90:	eeb0 7a40 	vmov.f32	s14, s0
 800ae94:	4b48      	ldr	r3, [pc, #288]	@ (800afb8 <processAccScale+0x1cc>)
 800ae96:	edd3 7a00 	vldr	s15, [r3]
 800ae9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae9e:	4b46      	ldr	r3, [pc, #280]	@ (800afb8 <processAccScale+0x1cc>)
 800aea0:	edc3 7a00 	vstr	s15, [r3]
    accScaleSumCount++;
 800aea4:	4b45      	ldr	r3, [pc, #276]	@ (800afbc <processAccScale+0x1d0>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	4a44      	ldr	r2, [pc, #272]	@ (800afbc <processAccScale+0x1d0>)
 800aeac:	6013      	str	r3, [r2, #0]
    accSum[0] += ax;
 800aeae:	4b44      	ldr	r3, [pc, #272]	@ (800afc0 <processAccScale+0x1d4>)
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800aeb8:	17c8      	asrs	r0, r1, #31
 800aeba:	468a      	mov	sl, r1
 800aebc:	4683      	mov	fp, r0
 800aebe:	eb12 010a 	adds.w	r1, r2, sl
 800aec2:	6139      	str	r1, [r7, #16]
 800aec4:	eb43 030b 	adc.w	r3, r3, fp
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	4b3d      	ldr	r3, [pc, #244]	@ (800afc0 <processAccScale+0x1d4>)
 800aecc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aed0:	e9c3 1200 	strd	r1, r2, [r3]
    accSum[1] += ay;
 800aed4:	4b3a      	ldr	r3, [pc, #232]	@ (800afc0 <processAccScale+0x1d4>)
 800aed6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800aeda:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800aede:	17c8      	asrs	r0, r1, #31
 800aee0:	4688      	mov	r8, r1
 800aee2:	4681      	mov	r9, r0
 800aee4:	eb12 0108 	adds.w	r1, r2, r8
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	eb43 0309 	adc.w	r3, r3, r9
 800aeee:	60fb      	str	r3, [r7, #12]
 800aef0:	4b33      	ldr	r3, [pc, #204]	@ (800afc0 <processAccScale+0x1d4>)
 800aef2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aef6:	e9c3 1202 	strd	r1, r2, [r3, #8]
    accSum[2] += az;
 800aefa:	4b31      	ldr	r3, [pc, #196]	@ (800afc0 <processAccScale+0x1d4>)
 800aefc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800af00:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800af04:	17c8      	asrs	r0, r1, #31
 800af06:	460c      	mov	r4, r1
 800af08:	4605      	mov	r5, r0
 800af0a:	1911      	adds	r1, r2, r4
 800af0c:	6039      	str	r1, [r7, #0]
 800af0e:	416b      	adcs	r3, r5
 800af10:	607b      	str	r3, [r7, #4]
 800af12:	4b2b      	ldr	r3, [pc, #172]	@ (800afc0 <processAccScale+0x1d4>)
 800af14:	e9d7 1200 	ldrd	r1, r2, [r7]
 800af18:	e9c3 1204 	strd	r1, r2, [r3, #16]

    if (accScaleSumCount == SENSORS_ACC_SCALE_SAMPLES)
 800af1c:	4b27      	ldr	r3, [pc, #156]	@ (800afbc <processAccScale+0x1d0>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2bc8      	cmp	r3, #200	@ 0xc8
 800af22:	d13c      	bne.n	800af9e <processAccScale+0x1b2>
    {
      accScale = accScaleSum / SENSORS_ACC_SCALE_SAMPLES;
 800af24:	4b24      	ldr	r3, [pc, #144]	@ (800afb8 <processAccScale+0x1cc>)
 800af26:	ed93 7a00 	vldr	s14, [r3]
 800af2a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800afc4 <processAccScale+0x1d8>
 800af2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800af32:	4b25      	ldr	r3, [pc, #148]	@ (800afc8 <processAccScale+0x1dc>)
 800af34:	edc3 7a00 	vstr	s15, [r3]
      accBias.x = (float) accSum[0] / SENSORS_ACC_SCALE_SAMPLES;
 800af38:	4b21      	ldr	r3, [pc, #132]	@ (800afc0 <processAccScale+0x1d4>)
 800af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3e:	4610      	mov	r0, r2
 800af40:	4619      	mov	r1, r3
 800af42:	f7f5 fedb 	bl	8000cfc <__aeabi_l2f>
 800af46:	ee06 0a90 	vmov	s13, r0
 800af4a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800afc4 <processAccScale+0x1d8>
 800af4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af52:	4b1e      	ldr	r3, [pc, #120]	@ (800afcc <processAccScale+0x1e0>)
 800af54:	edc3 7a00 	vstr	s15, [r3]
      accBias.y = (float) accSum[1] / SENSORS_ACC_SCALE_SAMPLES;
 800af58:	4b19      	ldr	r3, [pc, #100]	@ (800afc0 <processAccScale+0x1d4>)
 800af5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800af5e:	4610      	mov	r0, r2
 800af60:	4619      	mov	r1, r3
 800af62:	f7f5 fecb 	bl	8000cfc <__aeabi_l2f>
 800af66:	ee06 0a90 	vmov	s13, r0
 800af6a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800afc4 <processAccScale+0x1d8>
 800af6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af72:	4b16      	ldr	r3, [pc, #88]	@ (800afcc <processAccScale+0x1e0>)
 800af74:	edc3 7a01 	vstr	s15, [r3, #4]
      accBias.z = (float) accSum[2] / SENSORS_ACC_SCALE_SAMPLES;
 800af78:	4b11      	ldr	r3, [pc, #68]	@ (800afc0 <processAccScale+0x1d4>)
 800af7a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800af7e:	4610      	mov	r0, r2
 800af80:	4619      	mov	r1, r3
 800af82:	f7f5 febb 	bl	8000cfc <__aeabi_l2f>
 800af86:	ee06 0a90 	vmov	s13, r0
 800af8a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800afc4 <processAccScale+0x1d8>
 800af8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af92:	4b0e      	ldr	r3, [pc, #56]	@ (800afcc <processAccScale+0x1e0>)
 800af94:	edc3 7a02 	vstr	s15, [r3, #8]
      accBiasFound = true;
 800af98:	4b05      	ldr	r3, [pc, #20]	@ (800afb0 <processAccScale+0x1c4>)
 800af9a:	2201      	movs	r2, #1
 800af9c:	701a      	strb	r2, [r3, #0]
    }
  }

  return accBiasFound;
 800af9e:	4b04      	ldr	r3, [pc, #16]	@ (800afb0 <processAccScale+0x1c4>)
 800afa0:	781b      	ldrb	r3, [r3, #0]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3720      	adds	r7, #32
 800afa6:	46bd      	mov	sp, r7
 800afa8:	ecbd 8b02 	vpop	{d8}
 800afac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afb0:	20008670 	.word	0x20008670
 800afb4:	3a000000 	.word	0x3a000000
 800afb8:	200080ac 	.word	0x200080ac
 800afbc:	20008674 	.word	0x20008674
 800afc0:	20008678 	.word	0x20008678
 800afc4:	43480000 	.word	0x43480000
 800afc8:	20000014 	.word	0x20000014
 800afcc:	2000809c 	.word	0x2000809c

0800afd0 <processGyroBias>:
static bool processGyroBias(int16_t gx, int16_t gy, int16_t gz,  Axis3f *gyroBiasOut)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	607b      	str	r3, [r7, #4]
 800afd8:	4603      	mov	r3, r0
 800afda:	81fb      	strh	r3, [r7, #14]
 800afdc:	460b      	mov	r3, r1
 800afde:	81bb      	strh	r3, [r7, #12]
 800afe0:	4613      	mov	r3, r2
 800afe2:	817b      	strh	r3, [r7, #10]
	sensorsAddBiasValue(&gyroBiasRunning, gx, gy, gz);
 800afe4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800afe8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800afec:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800aff0:	4810      	ldr	r0, [pc, #64]	@ (800b034 <processGyroBias+0x64>)
 800aff2:	f000 f9e3 	bl	800b3bc <sensorsAddBiasValue>

	if (!gyroBiasRunning.isBiasValueFound)
 800aff6:	4b0f      	ldr	r3, [pc, #60]	@ (800b034 <processGyroBias+0x64>)
 800aff8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800affc:	f083 0301 	eor.w	r3, r3, #1
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b00      	cmp	r3, #0
 800b004:	d002      	beq.n	800b00c <processGyroBias+0x3c>
	{
		sensorsFindBiasValue(&gyroBiasRunning);
 800b006:	480b      	ldr	r0, [pc, #44]	@ (800b034 <processGyroBias+0x64>)
 800b008:	f000 fa0e 	bl	800b428 <sensorsFindBiasValue>
	}

	gyroBiasOut->x = gyroBiasRunning.bias.x;
 800b00c:	4b09      	ldr	r3, [pc, #36]	@ (800b034 <processGyroBias+0x64>)
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	601a      	str	r2, [r3, #0]
	gyroBiasOut->y = gyroBiasRunning.bias.y;
 800b014:	4b07      	ldr	r3, [pc, #28]	@ (800b034 <processGyroBias+0x64>)
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	605a      	str	r2, [r3, #4]
	gyroBiasOut->z = gyroBiasRunning.bias.z;
 800b01c:	4b05      	ldr	r3, [pc, #20]	@ (800b034 <processGyroBias+0x64>)
 800b01e:	689a      	ldr	r2, [r3, #8]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	609a      	str	r2, [r3, #8]

	return gyroBiasRunning.isBiasValueFound;
 800b024:	4b03      	ldr	r3, [pc, #12]	@ (800b034 <processGyroBias+0x64>)
 800b026:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	10000514 	.word	0x10000514

0800b038 <sensorsBiasObjInit>:
static void sensorsBiasObjInit(BiasObj* bias)
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  bias->isBufferFilled = false;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  bias->bufHead = bias->buffer;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b052:	bf00      	nop
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr
	...

0800b060 <sensorsCalculateVarianceAndMean>:

static void sensorsCalculateVarianceAndMean(BiasObj* bias, Axis3f* varOut, Axis3f* meanOut)
{
 800b060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b064:	b0ac      	sub	sp, #176	@ 0xb0
 800b066:	af00      	add	r7, sp, #0
 800b068:	6778      	str	r0, [r7, #116]	@ 0x74
 800b06a:	6739      	str	r1, [r7, #112]	@ 0x70
 800b06c:	66fa      	str	r2, [r7, #108]	@ 0x6c
  uint32_t i;
  int64_t sum[GYRO_NBR_OF_AXES] = {0};
 800b06e:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800b072:	2300      	movs	r3, #0
 800b074:	6013      	str	r3, [r2, #0]
 800b076:	6053      	str	r3, [r2, #4]
 800b078:	6093      	str	r3, [r2, #8]
 800b07a:	60d3      	str	r3, [r2, #12]
 800b07c:	6113      	str	r3, [r2, #16]
 800b07e:	6153      	str	r3, [r2, #20]
  int64_t sumSq[GYRO_NBR_OF_AXES] = {0};
 800b080:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800b084:	2300      	movs	r3, #0
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	6053      	str	r3, [r2, #4]
 800b08a:	6093      	str	r3, [r2, #8]
 800b08c:	60d3      	str	r3, [r2, #12]
 800b08e:	6113      	str	r3, [r2, #16]
 800b090:	6153      	str	r3, [r2, #20]

  for (i = 0; i < SENSORS_NBR_OF_BIAS_SAMPLES; i++)
 800b092:	2300      	movs	r3, #0
 800b094:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b098:	e0d8      	b.n	800b24c <sensorsCalculateVarianceAndMean+0x1ec>
  {
		sum[0] += bias->buffer[i].x;
 800b09a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800b09e:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800b0a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	005b      	lsls	r3, r3, #1
 800b0a8:	4413      	add	r3, r2
 800b0aa:	005b      	lsls	r3, r3, #1
 800b0ac:	4423      	add	r3, r4
 800b0ae:	332c      	adds	r3, #44	@ 0x2c
 800b0b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0b4:	b21b      	sxth	r3, r3
 800b0b6:	17da      	asrs	r2, r3, #31
 800b0b8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0ba:	667a      	str	r2, [r7, #100]	@ 0x64
 800b0bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800b0c0:	4623      	mov	r3, r4
 800b0c2:	18c3      	adds	r3, r0, r3
 800b0c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0c6:	462b      	mov	r3, r5
 800b0c8:	eb41 0303 	adc.w	r3, r1, r3
 800b0cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0ce:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800b0d2:	e9c7 3424 	strd	r3, r4, [r7, #144]	@ 0x90
		sum[1] += bias->buffer[i].y;
 800b0d6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b0da:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800b0dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	005b      	lsls	r3, r3, #1
 800b0e4:	4413      	add	r3, r2
 800b0e6:	005b      	lsls	r3, r3, #1
 800b0e8:	4423      	add	r3, r4
 800b0ea:	332e      	adds	r3, #46	@ 0x2e
 800b0ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0f0:	b21b      	sxth	r3, r3
 800b0f2:	17da      	asrs	r2, r3, #31
 800b0f4:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0f6:	657a      	str	r2, [r7, #84]	@ 0x54
 800b0f8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800b0fc:	4623      	mov	r3, r4
 800b0fe:	18c3      	adds	r3, r0, r3
 800b100:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b102:	462b      	mov	r3, r5
 800b104:	eb41 0303 	adc.w	r3, r1, r3
 800b108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b10a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800b10e:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
		sum[2] += bias->buffer[i].z;
 800b112:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800b116:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800b118:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b11c:	4613      	mov	r3, r2
 800b11e:	005b      	lsls	r3, r3, #1
 800b120:	4413      	add	r3, r2
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	4423      	add	r3, r4
 800b126:	3330      	adds	r3, #48	@ 0x30
 800b128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b12c:	b21b      	sxth	r3, r3
 800b12e:	17da      	asrs	r2, r3, #31
 800b130:	643b      	str	r3, [r7, #64]	@ 0x40
 800b132:	647a      	str	r2, [r7, #68]	@ 0x44
 800b134:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800b138:	4623      	mov	r3, r4
 800b13a:	18c3      	adds	r3, r0, r3
 800b13c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b13e:	462b      	mov	r3, r5
 800b140:	eb41 0303 	adc.w	r3, r1, r3
 800b144:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b146:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800b14a:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
		sumSq[0] += bias->buffer[i].x * bias->buffer[i].x;
 800b14e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800b152:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800b154:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b158:	4613      	mov	r3, r2
 800b15a:	005b      	lsls	r3, r3, #1
 800b15c:	4413      	add	r3, r2
 800b15e:	005b      	lsls	r3, r3, #1
 800b160:	4423      	add	r3, r4
 800b162:	332c      	adds	r3, #44	@ 0x2c
 800b164:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b168:	461d      	mov	r5, r3
 800b16a:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800b16c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b170:	4613      	mov	r3, r2
 800b172:	005b      	lsls	r3, r3, #1
 800b174:	4413      	add	r3, r2
 800b176:	005b      	lsls	r3, r3, #1
 800b178:	4423      	add	r3, r4
 800b17a:	332c      	adds	r3, #44	@ 0x2c
 800b17c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b180:	fb05 f303 	mul.w	r3, r5, r3
 800b184:	17da      	asrs	r2, r3, #31
 800b186:	633b      	str	r3, [r7, #48]	@ 0x30
 800b188:	637a      	str	r2, [r7, #52]	@ 0x34
 800b18a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b18e:	4623      	mov	r3, r4
 800b190:	18c3      	adds	r3, r0, r3
 800b192:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b194:	462b      	mov	r3, r5
 800b196:	eb41 0303 	adc.w	r3, r1, r3
 800b19a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b19c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800b1a0:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
		sumSq[1] += bias->buffer[i].y * bias->buffer[i].y;
 800b1a4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b1a8:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800b1aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	4413      	add	r3, r2
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	4423      	add	r3, r4
 800b1b8:	332e      	adds	r3, #46	@ 0x2e
 800b1ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b1be:	461d      	mov	r5, r3
 800b1c0:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800b1c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	005b      	lsls	r3, r3, #1
 800b1ca:	4413      	add	r3, r2
 800b1cc:	005b      	lsls	r3, r3, #1
 800b1ce:	4423      	add	r3, r4
 800b1d0:	332e      	adds	r3, #46	@ 0x2e
 800b1d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b1d6:	fb05 f303 	mul.w	r3, r5, r3
 800b1da:	17da      	asrs	r2, r3, #31
 800b1dc:	623b      	str	r3, [r7, #32]
 800b1de:	627a      	str	r2, [r7, #36]	@ 0x24
 800b1e0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800b1e4:	4623      	mov	r3, r4
 800b1e6:	18c3      	adds	r3, r0, r3
 800b1e8:	61bb      	str	r3, [r7, #24]
 800b1ea:	462b      	mov	r3, r5
 800b1ec:	eb41 0303 	adc.w	r3, r1, r3
 800b1f0:	61fb      	str	r3, [r7, #28]
 800b1f2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b1f6:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
		sumSq[2] += bias->buffer[i].z * bias->buffer[i].z;
 800b1fa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800b1fe:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800b200:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b204:	4613      	mov	r3, r2
 800b206:	005b      	lsls	r3, r3, #1
 800b208:	4413      	add	r3, r2
 800b20a:	005b      	lsls	r3, r3, #1
 800b20c:	4423      	add	r3, r4
 800b20e:	3330      	adds	r3, #48	@ 0x30
 800b210:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b214:	461d      	mov	r5, r3
 800b216:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800b218:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b21c:	4613      	mov	r3, r2
 800b21e:	005b      	lsls	r3, r3, #1
 800b220:	4413      	add	r3, r2
 800b222:	005b      	lsls	r3, r3, #1
 800b224:	4423      	add	r3, r4
 800b226:	3330      	adds	r3, #48	@ 0x30
 800b228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b22c:	fb05 f303 	mul.w	r3, r5, r3
 800b230:	17da      	asrs	r2, r3, #31
 800b232:	4698      	mov	r8, r3
 800b234:	4691      	mov	r9, r2
 800b236:	eb10 0a08 	adds.w	sl, r0, r8
 800b23a:	eb41 0b09 	adc.w	fp, r1, r9
 800b23e:	e9c7 ab22 	strd	sl, fp, [r7, #136]	@ 0x88
  for (i = 0; i < SENSORS_NBR_OF_BIAS_SAMPLES; i++)
 800b242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b246:	3301      	adds	r3, #1
 800b248:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b24c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b254:	f4ff af21 	bcc.w	800b09a <sensorsCalculateVarianceAndMean+0x3a>

  }



  meanOut->x = (float) sum[0] / SENSORS_NBR_OF_BIAS_SAMPLES;
 800b258:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800b25c:	4610      	mov	r0, r2
 800b25e:	4619      	mov	r1, r3
 800b260:	f7f5 fd4c 	bl	8000cfc <__aeabi_l2f>
 800b264:	ee06 0a90 	vmov	s13, r0
 800b268:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800b3b8 <sensorsCalculateVarianceAndMean+0x358>
 800b26c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b272:	edc3 7a00 	vstr	s15, [r3]
  meanOut->y = (float) sum[1] / SENSORS_NBR_OF_BIAS_SAMPLES;
 800b276:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800b27a:	4610      	mov	r0, r2
 800b27c:	4619      	mov	r1, r3
 800b27e:	f7f5 fd3d 	bl	8000cfc <__aeabi_l2f>
 800b282:	ee06 0a90 	vmov	s13, r0
 800b286:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 800b3b8 <sensorsCalculateVarianceAndMean+0x358>
 800b28a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b28e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b290:	edc3 7a01 	vstr	s15, [r3, #4]
  meanOut->z = (float) sum[2] / SENSORS_NBR_OF_BIAS_SAMPLES;
 800b294:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800b298:	4610      	mov	r0, r2
 800b29a:	4619      	mov	r1, r3
 800b29c:	f7f5 fd2e 	bl	8000cfc <__aeabi_l2f>
 800b2a0:	ee06 0a90 	vmov	s13, r0
 800b2a4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800b3b8 <sensorsCalculateVarianceAndMean+0x358>
 800b2a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2ae:	edc3 7a02 	vstr	s15, [r3, #8]

  varOut->x = sumSq[0] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->x * meanOut->x;
 800b2b2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	da08      	bge.n	800b2cc <sensorsCalculateVarianceAndMean+0x26c>
 800b2ba:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800b2be:	1851      	adds	r1, r2, r1
 800b2c0:	6139      	str	r1, [r7, #16]
 800b2c2:	f143 0300 	adc.w	r3, r3, #0
 800b2c6:	617b      	str	r3, [r7, #20]
 800b2c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b2cc:	f04f 0000 	mov.w	r0, #0
 800b2d0:	f04f 0100 	mov.w	r1, #0
 800b2d4:	0a90      	lsrs	r0, r2, #10
 800b2d6:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800b2da:	1299      	asrs	r1, r3, #10
 800b2dc:	4602      	mov	r2, r0
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	f7f5 fd0a 	bl	8000cfc <__aeabi_l2f>
 800b2e8:	ee06 0a90 	vmov	s13, r0
 800b2ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2ee:	ed93 7a00 	vldr	s14, [r3]
 800b2f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2f4:	edd3 7a00 	vldr	s15, [r3]
 800b2f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b300:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b302:	edc3 7a00 	vstr	s15, [r3]
  varOut->y = sumSq[1] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->y * meanOut->y;
 800b306:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	da08      	bge.n	800b320 <sensorsCalculateVarianceAndMean+0x2c0>
 800b30e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800b312:	1851      	adds	r1, r2, r1
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	f143 0300 	adc.w	r3, r3, #0
 800b31a:	60fb      	str	r3, [r7, #12]
 800b31c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b320:	f04f 0000 	mov.w	r0, #0
 800b324:	f04f 0100 	mov.w	r1, #0
 800b328:	0a90      	lsrs	r0, r2, #10
 800b32a:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800b32e:	1299      	asrs	r1, r3, #10
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4610      	mov	r0, r2
 800b336:	4619      	mov	r1, r3
 800b338:	f7f5 fce0 	bl	8000cfc <__aeabi_l2f>
 800b33c:	ee06 0a90 	vmov	s13, r0
 800b340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b342:	ed93 7a01 	vldr	s14, [r3, #4]
 800b346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b348:	edd3 7a01 	vldr	s15, [r3, #4]
 800b34c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b350:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b354:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b356:	edc3 7a01 	vstr	s15, [r3, #4]
  varOut->z = sumSq[2] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->z * meanOut->z;
 800b35a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800b35e:	2b00      	cmp	r3, #0
 800b360:	da08      	bge.n	800b374 <sensorsCalculateVarianceAndMean+0x314>
 800b362:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800b366:	1851      	adds	r1, r2, r1
 800b368:	6039      	str	r1, [r7, #0]
 800b36a:	f143 0300 	adc.w	r3, r3, #0
 800b36e:	607b      	str	r3, [r7, #4]
 800b370:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b374:	f04f 0000 	mov.w	r0, #0
 800b378:	f04f 0100 	mov.w	r1, #0
 800b37c:	0a90      	lsrs	r0, r2, #10
 800b37e:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800b382:	1299      	asrs	r1, r3, #10
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4610      	mov	r0, r2
 800b38a:	4619      	mov	r1, r3
 800b38c:	f7f5 fcb6 	bl	8000cfc <__aeabi_l2f>
 800b390:	ee06 0a90 	vmov	s13, r0
 800b394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b396:	ed93 7a02 	vldr	s14, [r3, #8]
 800b39a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b39c:	edd3 7a02 	vldr	s15, [r3, #8]
 800b3a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b3a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3aa:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800b3ae:	bf00      	nop
 800b3b0:	37b0      	adds	r7, #176	@ 0xb0
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3b8:	44800000 	.word	0x44800000

0800b3bc <sensorsAddBiasValue>:
  meanOut->x = sum[0] / SENSORS_NBR_OF_BIAS_SAMPLES;
  meanOut->y = sum[1] / SENSORS_NBR_OF_BIAS_SAMPLES;
  meanOut->z = sum[2] / SENSORS_NBR_OF_BIAS_SAMPLES;
}
static void sensorsAddBiasValue(BiasObj* bias, int16_t x, int16_t y, int16_t z)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	4608      	mov	r0, r1
 800b3c6:	4611      	mov	r1, r2
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	817b      	strh	r3, [r7, #10]
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	813b      	strh	r3, [r7, #8]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	80fb      	strh	r3, [r7, #6]
  bias->bufHead->x = x;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3da:	897a      	ldrh	r2, [r7, #10]
 800b3dc:	801a      	strh	r2, [r3, #0]
  bias->bufHead->y = y;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3e2:	893a      	ldrh	r2, [r7, #8]
 800b3e4:	805a      	strh	r2, [r3, #2]
  bias->bufHead->z = z;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ea:	88fa      	ldrh	r2, [r7, #6]
 800b3ec:	809a      	strh	r2, [r3, #4]
  bias->bufHead++;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f2:	1d9a      	adds	r2, r3, #6
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (bias->bufHead >= &bias->buffer[SENSORS_NBR_OF_BIAS_SAMPLES])
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f503 53c1 	add.w	r3, r3, #6176	@ 0x1820
 800b402:	330c      	adds	r3, #12
 800b404:	429a      	cmp	r2, r3
 800b406:	d308      	bcc.n	800b41a <sensorsAddBiasValue+0x5e>
  {
    bias->bufHead = bias->buffer;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	629a      	str	r2, [r3, #40]	@ 0x28
    bias->isBufferFilled = true;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }
}
 800b41a:	bf00      	nop
 800b41c:	3714      	adds	r7, #20
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
	...

0800b428 <sensorsFindBiasValue>:
static bool sensorsFindBiasValue(BiasObj* bias)
{
 800b428:	b590      	push	{r4, r7, lr}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  static int32_t varianceSampleTime;
  bool foundBias = false;
 800b430:	2300      	movs	r3, #0
 800b432:	73fb      	strb	r3, [r7, #15]

  if (bias->isBufferFilled)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d047      	beq.n	800b4ce <sensorsFindBiasValue+0xa6>
  {
    sensorsCalculateVarianceAndMean(bias, &bias->variance, &bias->mean);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f103 010c 	add.w	r1, r3, #12
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	3318      	adds	r3, #24
 800b448:	461a      	mov	r2, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7ff fe08 	bl	800b060 <sensorsCalculateVarianceAndMean>

    if (bias->variance.x < GYRO_VARIANCE_THRESHOLD_X &&
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	edd3 7a03 	vldr	s15, [r3, #12]
 800b456:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800b4d8 <sensorsFindBiasValue+0xb0>
 800b45a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b462:	d534      	bpl.n	800b4ce <sensorsFindBiasValue+0xa6>
        bias->variance.y < GYRO_VARIANCE_THRESHOLD_Y &&
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	edd3 7a04 	vldr	s15, [r3, #16]
    if (bias->variance.x < GYRO_VARIANCE_THRESHOLD_X &&
 800b46a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800b4d8 <sensorsFindBiasValue+0xb0>
 800b46e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b476:	d52a      	bpl.n	800b4ce <sensorsFindBiasValue+0xa6>
        bias->variance.z < GYRO_VARIANCE_THRESHOLD_Z &&
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	edd3 7a05 	vldr	s15, [r3, #20]
        bias->variance.y < GYRO_VARIANCE_THRESHOLD_Y &&
 800b47e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800b4d8 <sensorsFindBiasValue+0xb0>
 800b482:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b48a:	d520      	bpl.n	800b4ce <sensorsFindBiasValue+0xa6>
        (varianceSampleTime + GYRO_MIN_BIAS_TIMEOUT_MS < xTaskGetTickCount()))
 800b48c:	4b13      	ldr	r3, [pc, #76]	@ (800b4dc <sensorsFindBiasValue+0xb4>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f503 747a 	add.w	r4, r3, #1000	@ 0x3e8
 800b494:	f7fb fb42 	bl	8006b1c <xTaskGetTickCount>
 800b498:	4603      	mov	r3, r0
        bias->variance.z < GYRO_VARIANCE_THRESHOLD_Z &&
 800b49a:	429c      	cmp	r4, r3
 800b49c:	d217      	bcs.n	800b4ce <sensorsFindBiasValue+0xa6>
    {
      varianceSampleTime = xTaskGetTickCount();
 800b49e:	f7fb fb3d 	bl	8006b1c <xTaskGetTickCount>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b4dc <sensorsFindBiasValue+0xb4>)
 800b4a8:	601a      	str	r2, [r3, #0]
      bias->bias.x = bias->mean.x;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	699a      	ldr	r2, [r3, #24]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	601a      	str	r2, [r3, #0]
      bias->bias.y = bias->mean.y;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	69da      	ldr	r2, [r3, #28]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	605a      	str	r2, [r3, #4]
      bias->bias.z = bias->mean.z;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a1a      	ldr	r2, [r3, #32]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	609a      	str	r2, [r3, #8]
      foundBias = true;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	73fb      	strb	r3, [r7, #15]
      bias->isBiasValueFound = true;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
  }

  return foundBias;
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd90      	pop	{r4, r7, pc}
 800b4d8:	42480000 	.word	0x42480000
 800b4dc:	20008690 	.word	0x20008690

0800b4e0 <sensorsMpu6500Bmp280ManufacturingTest>:

bool sensorsMpu6500Bmp280ManufacturingTest(void)
{
 800b4e0:	b590      	push	{r4, r7, lr}
 800b4e2:	ed2d 8b02 	vpush	{d8}
 800b4e6:	b08f      	sub	sp, #60	@ 0x3c
 800b4e8:	af02      	add	r7, sp, #8
	bool testStatus = false;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	Axis3i16 g;
	Axis3i16 a;
	Axis3f acc;  // Accelerometer axis data in mG
	float pitch, roll;
	uint32_t startTick = xTaskGetTickCount();
 800b4f0:	f7fb fb14 	bl	8006b1c <xTaskGetTickCount>
 800b4f4:	62b8      	str	r0, [r7, #40]	@ 0x28

	testStatus = mpu6500SelfTest();
 800b4f6:	f7fe fa65 	bl	80099c4 <mpu6500SelfTest>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (testStatus)
 800b500:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 80bc 	beq.w	800b682 <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
	{
		sensorsBiasObjInit(&gyroBiasRunning);
 800b50a:	4862      	ldr	r0, [pc, #392]	@ (800b694 <sensorsMpu6500Bmp280ManufacturingTest+0x1b4>)
 800b50c:	f7ff fd94 	bl	800b038 <sensorsBiasObjInit>
		while (xTaskGetTickCount() - startTick < SENSORS_VARIANCE_MAN_TEST_TIMEOUT)
 800b510:	e024      	b.n	800b55c <sensorsMpu6500Bmp280ManufacturingTest+0x7c>
		{
			mpu6500GetMotion6(&a.y, &a.x, &a.z, &g.y, &g.x, &g.z);
 800b512:	f107 0318 	add.w	r3, r7, #24
 800b516:	1c9c      	adds	r4, r3, #2
 800b518:	f107 0310 	add.w	r3, r7, #16
 800b51c:	1d1a      	adds	r2, r3, #4
 800b51e:	f107 0110 	add.w	r1, r7, #16
 800b522:	f107 0310 	add.w	r3, r7, #16
 800b526:	1c98      	adds	r0, r3, #2
 800b528:	f107 0318 	add.w	r3, r7, #24
 800b52c:	3304      	adds	r3, #4
 800b52e:	9301      	str	r3, [sp, #4]
 800b530:	f107 0318 	add.w	r3, r7, #24
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	4623      	mov	r3, r4
 800b538:	f7fe fae6 	bl	8009b08 <mpu6500GetMotion6>
			if (processGyroBias(g.x, g.y, g.z, &gyroBias))
 800b53c:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800b540:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800b544:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b548:	4b53      	ldr	r3, [pc, #332]	@ (800b698 <sensorsMpu6500Bmp280ManufacturingTest+0x1b8>)
 800b54a:	f7ff fd41 	bl	800afd0 <processGyroBias>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d003      	beq.n	800b55c <sensorsMpu6500Bmp280ManufacturingTest+0x7c>
			{
				gyroBiasFound = true;
 800b554:	4b51      	ldr	r3, [pc, #324]	@ (800b69c <sensorsMpu6500Bmp280ManufacturingTest+0x1bc>)
 800b556:	2201      	movs	r2, #1
 800b558:	701a      	strb	r2, [r3, #0]
				break;
 800b55a:	e007      	b.n	800b56c <sensorsMpu6500Bmp280ManufacturingTest+0x8c>
		while (xTaskGetTickCount() - startTick < SENSORS_VARIANCE_MAN_TEST_TIMEOUT)
 800b55c:	f7fb fade 	bl	8006b1c <xTaskGetTickCount>
 800b560:	4602      	mov	r2, r0
 800b562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b564:	1ad3      	subs	r3, r2, r3
 800b566:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b56a:	d3d2      	bcc.n	800b512 <sensorsMpu6500Bmp280ManufacturingTest+0x32>
			}
		}

		if (gyroBiasFound) {
 800b56c:	4b4b      	ldr	r3, [pc, #300]	@ (800b69c <sensorsMpu6500Bmp280ManufacturingTest+0x1bc>)
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	f000 8083 	beq.w	800b67c <sensorsMpu6500Bmp280ManufacturingTest+0x19c>
			acc.x = -(a.x) * SENSORS_G_PER_LSB_CFG;
 800b576:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b57a:	425b      	negs	r3, r3
 800b57c:	ee07 3a90 	vmov	s15, r3
 800b580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b584:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800b6a0 <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 800b588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b58c:	edc7 7a01 	vstr	s15, [r7, #4]
			acc.y = (a.y) * SENSORS_G_PER_LSB_CFG;
 800b590:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b594:	ee07 3a90 	vmov	s15, r3
 800b598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b59c:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800b6a0 <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 800b5a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5a4:	edc7 7a02 	vstr	s15, [r7, #8]
			acc.z = (a.z) * SENSORS_G_PER_LSB_CFG;
 800b5a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b5ac:	ee07 3a90 	vmov	s15, r3
 800b5b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5b4:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800b6a0 <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 800b5b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5bc:	edc7 7a03 	vstr	s15, [r7, #12]

			// Calculate pitch and roll based on accelerometer. Board must be level
			pitch = tanf(-acc.x / (sqrtf(acc.y * acc.y + acc.z * acc.z)))
 800b5c0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b5c4:	eeb1 8a67 	vneg.f32	s16, s15
 800b5c8:	ed97 7a02 	vldr	s14, [r7, #8]
 800b5cc:	edd7 7a02 	vldr	s15, [r7, #8]
 800b5d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5d4:	edd7 6a03 	vldr	s13, [r7, #12]
 800b5d8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b5dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b5e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5e4:	eeb0 0a67 	vmov.f32	s0, s15
 800b5e8:	f00c fb3a 	bl	8017c60 <sqrtf>
 800b5ec:	eeb0 7a40 	vmov.f32	s14, s0
 800b5f0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800b5f4:	eeb0 0a67 	vmov.f32	s0, s15
 800b5f8:	f00c fbe2 	bl	8017dc0 <tanf>
 800b5fc:	eef0 7a40 	vmov.f32	s15, s0
					* 180/(float) M_PI;
 800b600:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800b6a4 <sensorsMpu6500Bmp280ManufacturingTest+0x1c4>
 800b604:	ee27 7a87 	vmul.f32	s14, s15, s14
			pitch = tanf(-acc.x / (sqrtf(acc.y * acc.y + acc.z * acc.z)))
 800b608:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800b6a8 <sensorsMpu6500Bmp280ManufacturingTest+0x1c8>
 800b60c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b610:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			roll = tanf(acc.y / acc.z) * 180 / (float) M_PI;
 800b614:	ed97 7a02 	vldr	s14, [r7, #8]
 800b618:	edd7 7a03 	vldr	s15, [r7, #12]
 800b61c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b620:	eeb0 0a66 	vmov.f32	s0, s13
 800b624:	f00c fbcc 	bl	8017dc0 <tanf>
 800b628:	eef0 7a40 	vmov.f32	s15, s0
 800b62c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b6a4 <sensorsMpu6500Bmp280ManufacturingTest+0x1c4>
 800b630:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b634:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800b6a8 <sensorsMpu6500Bmp280ManufacturingTest+0x1c8>
 800b638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b63c:	edc7 7a08 	vstr	s15, [r7, #32]

			if ((fabsf(roll) < SENSORS_MAN_TEST_LEVEL_MAX) && (fabsf(pitch) < SENSORS_MAN_TEST_LEVEL_MAX))
 800b640:	edd7 7a08 	vldr	s15, [r7, #32]
 800b644:	eef0 7ae7 	vabs.f32	s15, s15
 800b648:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800b64c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b654:	d50e      	bpl.n	800b674 <sensorsMpu6500Bmp280ManufacturingTest+0x194>
 800b656:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b65a:	eef0 7ae7 	vabs.f32	s15, s15
 800b65e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800b662:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b66a:	d503      	bpl.n	800b674 <sensorsMpu6500Bmp280ManufacturingTest+0x194>
			{
				testStatus = true;
 800b66c:	2301      	movs	r3, #1
 800b66e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b672:	e006      	b.n	800b682 <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
			}
			else
			{
				testStatus = false;
 800b674:	2300      	movs	r3, #0
 800b676:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b67a:	e002      	b.n	800b682 <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
			}
		} else {

			testStatus = false;
 800b67c:	2300      	movs	r3, #0
 800b67e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
	}

	return testStatus;
 800b682:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f

}
 800b686:	4618      	mov	r0, r3
 800b688:	3734      	adds	r7, #52	@ 0x34
 800b68a:	46bd      	mov	sp, r7
 800b68c:	ecbd 8b02 	vpop	{d8}
 800b690:	bd90      	pop	{r4, r7, pc}
 800b692:	bf00      	nop
 800b694:	10000514 	.word	0x10000514
 800b698:	20008090 	.word	0x20008090
 800b69c:	200080a8 	.word	0x200080a8
 800b6a0:	3a000000 	.word	0x3a000000
 800b6a4:	43340000 	.word	0x43340000
 800b6a8:	40490fdb 	.word	0x40490fdb

0800b6ac <sensorsAlignToAirframe>:
	}

}

static void sensorsAlignToAirframe(Axis3f* in, Axis3f* out)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  // IMU alignment
  static float sphi, cphi, stheta, ctheta, spsi, cpsi;

  sphi   = sinf(imuPhi * (float) M_PI / 180);
 800b6b6:	4bba      	ldr	r3, [pc, #744]	@ (800b9a0 <sensorsAlignToAirframe+0x2f4>)
 800b6b8:	edd3 7a00 	vldr	s15, [r3]
 800b6bc:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 800b9a4 <sensorsAlignToAirframe+0x2f8>
 800b6c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6c4:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 800b9a8 <sensorsAlignToAirframe+0x2fc>
 800b6c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b6cc:	eeb0 0a47 	vmov.f32	s0, s14
 800b6d0:	f00c fb30 	bl	8017d34 <sinf>
 800b6d4:	eef0 7a40 	vmov.f32	s15, s0
 800b6d8:	4bb4      	ldr	r3, [pc, #720]	@ (800b9ac <sensorsAlignToAirframe+0x300>)
 800b6da:	edc3 7a00 	vstr	s15, [r3]
  cphi   = cosf(imuPhi * (float) M_PI / 180);
 800b6de:	4bb0      	ldr	r3, [pc, #704]	@ (800b9a0 <sensorsAlignToAirframe+0x2f4>)
 800b6e0:	edd3 7a00 	vldr	s15, [r3]
 800b6e4:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 800b9a4 <sensorsAlignToAirframe+0x2f8>
 800b6e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6ec:	eddf 6aae 	vldr	s13, [pc, #696]	@ 800b9a8 <sensorsAlignToAirframe+0x2fc>
 800b6f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b6f4:	eeb0 0a47 	vmov.f32	s0, s14
 800b6f8:	f00c fad0 	bl	8017c9c <cosf>
 800b6fc:	eef0 7a40 	vmov.f32	s15, s0
 800b700:	4bab      	ldr	r3, [pc, #684]	@ (800b9b0 <sensorsAlignToAirframe+0x304>)
 800b702:	edc3 7a00 	vstr	s15, [r3]
  stheta = sinf(imuTheta * (float) M_PI / 180);
 800b706:	4bab      	ldr	r3, [pc, #684]	@ (800b9b4 <sensorsAlignToAirframe+0x308>)
 800b708:	edd3 7a00 	vldr	s15, [r3]
 800b70c:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 800b9a4 <sensorsAlignToAirframe+0x2f8>
 800b710:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b714:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 800b9a8 <sensorsAlignToAirframe+0x2fc>
 800b718:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b71c:	eeb0 0a47 	vmov.f32	s0, s14
 800b720:	f00c fb08 	bl	8017d34 <sinf>
 800b724:	eef0 7a40 	vmov.f32	s15, s0
 800b728:	4ba3      	ldr	r3, [pc, #652]	@ (800b9b8 <sensorsAlignToAirframe+0x30c>)
 800b72a:	edc3 7a00 	vstr	s15, [r3]
  ctheta = cosf(imuTheta * (float) M_PI / 180);
 800b72e:	4ba1      	ldr	r3, [pc, #644]	@ (800b9b4 <sensorsAlignToAirframe+0x308>)
 800b730:	edd3 7a00 	vldr	s15, [r3]
 800b734:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 800b9a4 <sensorsAlignToAirframe+0x2f8>
 800b738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b73c:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 800b9a8 <sensorsAlignToAirframe+0x2fc>
 800b740:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b744:	eeb0 0a47 	vmov.f32	s0, s14
 800b748:	f00c faa8 	bl	8017c9c <cosf>
 800b74c:	eef0 7a40 	vmov.f32	s15, s0
 800b750:	4b9a      	ldr	r3, [pc, #616]	@ (800b9bc <sensorsAlignToAirframe+0x310>)
 800b752:	edc3 7a00 	vstr	s15, [r3]
  spsi   = sinf(imuPsi * (float) M_PI / 180);
 800b756:	4b9a      	ldr	r3, [pc, #616]	@ (800b9c0 <sensorsAlignToAirframe+0x314>)
 800b758:	edd3 7a00 	vldr	s15, [r3]
 800b75c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800b9a4 <sensorsAlignToAirframe+0x2f8>
 800b760:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b764:	eddf 6a90 	vldr	s13, [pc, #576]	@ 800b9a8 <sensorsAlignToAirframe+0x2fc>
 800b768:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b76c:	eeb0 0a47 	vmov.f32	s0, s14
 800b770:	f00c fae0 	bl	8017d34 <sinf>
 800b774:	eef0 7a40 	vmov.f32	s15, s0
 800b778:	4b92      	ldr	r3, [pc, #584]	@ (800b9c4 <sensorsAlignToAirframe+0x318>)
 800b77a:	edc3 7a00 	vstr	s15, [r3]
  cpsi   = cosf(imuPsi * (float) M_PI / 180);
 800b77e:	4b90      	ldr	r3, [pc, #576]	@ (800b9c0 <sensorsAlignToAirframe+0x314>)
 800b780:	edd3 7a00 	vldr	s15, [r3]
 800b784:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800b9a4 <sensorsAlignToAirframe+0x2f8>
 800b788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b78c:	eddf 6a86 	vldr	s13, [pc, #536]	@ 800b9a8 <sensorsAlignToAirframe+0x2fc>
 800b790:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b794:	eeb0 0a47 	vmov.f32	s0, s14
 800b798:	f00c fa80 	bl	8017c9c <cosf>
 800b79c:	eef0 7a40 	vmov.f32	s15, s0
 800b7a0:	4b89      	ldr	r3, [pc, #548]	@ (800b9c8 <sensorsAlignToAirframe+0x31c>)
 800b7a2:	edc3 7a00 	vstr	s15, [r3]

  // tait-bryan passive rotation in order: yaw, psi (1) -> pitch, theta (2) ->  roll, phi (3) [https://en.wikipedia.org/wiki/Euler_angles#cite_note-3]
  // mathematically R = R_x(phi)^T . R_y(theta)^T . R_z(psi)^T  [http://eecs.qmul.ac.uk/~gslabaugh/publications/euler.pdf]
  // transpose because it's a passive rotation not active [https://en.wikipedia.org/wiki/Active_and_passive_transformation]
  R[0][0] = ctheta * cpsi;
 800b7a6:	4b85      	ldr	r3, [pc, #532]	@ (800b9bc <sensorsAlignToAirframe+0x310>)
 800b7a8:	ed93 7a00 	vldr	s14, [r3]
 800b7ac:	4b86      	ldr	r3, [pc, #536]	@ (800b9c8 <sensorsAlignToAirframe+0x31c>)
 800b7ae:	edd3 7a00 	vldr	s15, [r3]
 800b7b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b6:	4b85      	ldr	r3, [pc, #532]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b7b8:	edc3 7a00 	vstr	s15, [r3]
  R[0][1] = ctheta * spsi;
 800b7bc:	4b7f      	ldr	r3, [pc, #508]	@ (800b9bc <sensorsAlignToAirframe+0x310>)
 800b7be:	ed93 7a00 	vldr	s14, [r3]
 800b7c2:	4b80      	ldr	r3, [pc, #512]	@ (800b9c4 <sensorsAlignToAirframe+0x318>)
 800b7c4:	edd3 7a00 	vldr	s15, [r3]
 800b7c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7cc:	4b7f      	ldr	r3, [pc, #508]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b7ce:	edc3 7a01 	vstr	s15, [r3, #4]
  R[0][2] = -stheta;
 800b7d2:	4b79      	ldr	r3, [pc, #484]	@ (800b9b8 <sensorsAlignToAirframe+0x30c>)
 800b7d4:	edd3 7a00 	vldr	s15, [r3]
 800b7d8:	eef1 7a67 	vneg.f32	s15, s15
 800b7dc:	4b7b      	ldr	r3, [pc, #492]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b7de:	edc3 7a02 	vstr	s15, [r3, #8]
  R[1][0] = sphi * stheta * cpsi - cphi * spsi;
 800b7e2:	4b72      	ldr	r3, [pc, #456]	@ (800b9ac <sensorsAlignToAirframe+0x300>)
 800b7e4:	ed93 7a00 	vldr	s14, [r3]
 800b7e8:	4b73      	ldr	r3, [pc, #460]	@ (800b9b8 <sensorsAlignToAirframe+0x30c>)
 800b7ea:	edd3 7a00 	vldr	s15, [r3]
 800b7ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b7f2:	4b75      	ldr	r3, [pc, #468]	@ (800b9c8 <sensorsAlignToAirframe+0x31c>)
 800b7f4:	edd3 7a00 	vldr	s15, [r3]
 800b7f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b7fc:	4b6c      	ldr	r3, [pc, #432]	@ (800b9b0 <sensorsAlignToAirframe+0x304>)
 800b7fe:	edd3 6a00 	vldr	s13, [r3]
 800b802:	4b70      	ldr	r3, [pc, #448]	@ (800b9c4 <sensorsAlignToAirframe+0x318>)
 800b804:	edd3 7a00 	vldr	s15, [r3]
 800b808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b80c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b810:	4b6e      	ldr	r3, [pc, #440]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b812:	edc3 7a03 	vstr	s15, [r3, #12]
  R[1][1] = sphi * stheta * spsi + cphi * cpsi;
 800b816:	4b65      	ldr	r3, [pc, #404]	@ (800b9ac <sensorsAlignToAirframe+0x300>)
 800b818:	ed93 7a00 	vldr	s14, [r3]
 800b81c:	4b66      	ldr	r3, [pc, #408]	@ (800b9b8 <sensorsAlignToAirframe+0x30c>)
 800b81e:	edd3 7a00 	vldr	s15, [r3]
 800b822:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b826:	4b67      	ldr	r3, [pc, #412]	@ (800b9c4 <sensorsAlignToAirframe+0x318>)
 800b828:	edd3 7a00 	vldr	s15, [r3]
 800b82c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b830:	4b5f      	ldr	r3, [pc, #380]	@ (800b9b0 <sensorsAlignToAirframe+0x304>)
 800b832:	edd3 6a00 	vldr	s13, [r3]
 800b836:	4b64      	ldr	r3, [pc, #400]	@ (800b9c8 <sensorsAlignToAirframe+0x31c>)
 800b838:	edd3 7a00 	vldr	s15, [r3]
 800b83c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b840:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b844:	4b61      	ldr	r3, [pc, #388]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b846:	edc3 7a04 	vstr	s15, [r3, #16]
  R[1][2] = sphi * ctheta;
 800b84a:	4b58      	ldr	r3, [pc, #352]	@ (800b9ac <sensorsAlignToAirframe+0x300>)
 800b84c:	ed93 7a00 	vldr	s14, [r3]
 800b850:	4b5a      	ldr	r3, [pc, #360]	@ (800b9bc <sensorsAlignToAirframe+0x310>)
 800b852:	edd3 7a00 	vldr	s15, [r3]
 800b856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b85a:	4b5c      	ldr	r3, [pc, #368]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b85c:	edc3 7a05 	vstr	s15, [r3, #20]
  R[2][0] = cphi * stheta * cpsi + sphi * spsi;
 800b860:	4b53      	ldr	r3, [pc, #332]	@ (800b9b0 <sensorsAlignToAirframe+0x304>)
 800b862:	ed93 7a00 	vldr	s14, [r3]
 800b866:	4b54      	ldr	r3, [pc, #336]	@ (800b9b8 <sensorsAlignToAirframe+0x30c>)
 800b868:	edd3 7a00 	vldr	s15, [r3]
 800b86c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b870:	4b55      	ldr	r3, [pc, #340]	@ (800b9c8 <sensorsAlignToAirframe+0x31c>)
 800b872:	edd3 7a00 	vldr	s15, [r3]
 800b876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b87a:	4b4c      	ldr	r3, [pc, #304]	@ (800b9ac <sensorsAlignToAirframe+0x300>)
 800b87c:	edd3 6a00 	vldr	s13, [r3]
 800b880:	4b50      	ldr	r3, [pc, #320]	@ (800b9c4 <sensorsAlignToAirframe+0x318>)
 800b882:	edd3 7a00 	vldr	s15, [r3]
 800b886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b88a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b88e:	4b4f      	ldr	r3, [pc, #316]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b890:	edc3 7a06 	vstr	s15, [r3, #24]
  R[2][1] = cphi * stheta * spsi - sphi * cpsi;
 800b894:	4b46      	ldr	r3, [pc, #280]	@ (800b9b0 <sensorsAlignToAirframe+0x304>)
 800b896:	ed93 7a00 	vldr	s14, [r3]
 800b89a:	4b47      	ldr	r3, [pc, #284]	@ (800b9b8 <sensorsAlignToAirframe+0x30c>)
 800b89c:	edd3 7a00 	vldr	s15, [r3]
 800b8a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8a4:	4b47      	ldr	r3, [pc, #284]	@ (800b9c4 <sensorsAlignToAirframe+0x318>)
 800b8a6:	edd3 7a00 	vldr	s15, [r3]
 800b8aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8ae:	4b3f      	ldr	r3, [pc, #252]	@ (800b9ac <sensorsAlignToAirframe+0x300>)
 800b8b0:	edd3 6a00 	vldr	s13, [r3]
 800b8b4:	4b44      	ldr	r3, [pc, #272]	@ (800b9c8 <sensorsAlignToAirframe+0x31c>)
 800b8b6:	edd3 7a00 	vldr	s15, [r3]
 800b8ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b8be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8c2:	4b42      	ldr	r3, [pc, #264]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b8c4:	edc3 7a07 	vstr	s15, [r3, #28]
  R[2][2] = cphi * ctheta;
 800b8c8:	4b39      	ldr	r3, [pc, #228]	@ (800b9b0 <sensorsAlignToAirframe+0x304>)
 800b8ca:	ed93 7a00 	vldr	s14, [r3]
 800b8ce:	4b3b      	ldr	r3, [pc, #236]	@ (800b9bc <sensorsAlignToAirframe+0x310>)
 800b8d0:	edd3 7a00 	vldr	s15, [r3]
 800b8d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8d8:	4b3c      	ldr	r3, [pc, #240]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b8da:	edc3 7a08 	vstr	s15, [r3, #32]

  out->x = in->x*R[0][0] + in->y*R[0][1] + in->z*R[0][2];
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	ed93 7a00 	vldr	s14, [r3]
 800b8e4:	4b39      	ldr	r3, [pc, #228]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b8e6:	edd3 7a00 	vldr	s15, [r3]
 800b8ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	edd3 6a01 	vldr	s13, [r3, #4]
 800b8f4:	4b35      	ldr	r3, [pc, #212]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b8f6:	edd3 7a01 	vldr	s15, [r3, #4]
 800b8fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b8fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	edd3 6a02 	vldr	s13, [r3, #8]
 800b908:	4b30      	ldr	r3, [pc, #192]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b90a:	edd3 7a02 	vldr	s15, [r3, #8]
 800b90e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b912:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	edc3 7a00 	vstr	s15, [r3]
  out->y = in->x*R[1][0] + in->y*R[1][1] + in->z*R[1][2];
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	ed93 7a00 	vldr	s14, [r3]
 800b922:	4b2a      	ldr	r3, [pc, #168]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b924:	edd3 7a03 	vldr	s15, [r3, #12]
 800b928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	edd3 6a01 	vldr	s13, [r3, #4]
 800b932:	4b26      	ldr	r3, [pc, #152]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b934:	edd3 7a04 	vldr	s15, [r3, #16]
 800b938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b93c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	edd3 6a02 	vldr	s13, [r3, #8]
 800b946:	4b21      	ldr	r3, [pc, #132]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b948:	edd3 7a05 	vldr	s15, [r3, #20]
 800b94c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b950:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	edc3 7a01 	vstr	s15, [r3, #4]
  out->z = in->x*R[2][0] + in->y*R[2][1] + in->z*R[2][2];
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	ed93 7a00 	vldr	s14, [r3]
 800b960:	4b1a      	ldr	r3, [pc, #104]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b962:	edd3 7a06 	vldr	s15, [r3, #24]
 800b966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	edd3 6a01 	vldr	s13, [r3, #4]
 800b970:	4b16      	ldr	r3, [pc, #88]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b972:	edd3 7a07 	vldr	s15, [r3, #28]
 800b976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b97a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	edd3 6a02 	vldr	s13, [r3, #8]
 800b984:	4b11      	ldr	r3, [pc, #68]	@ (800b9cc <sensorsAlignToAirframe+0x320>)
 800b986:	edd3 7a08 	vldr	s15, [r3, #32]
 800b98a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b98e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800b998:	bf00      	nop
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	2000815c 	.word	0x2000815c
 800b9a4:	40490fdb 	.word	0x40490fdb
 800b9a8:	43340000 	.word	0x43340000
 800b9ac:	20008694 	.word	0x20008694
 800b9b0:	20008698 	.word	0x20008698
 800b9b4:	20008160 	.word	0x20008160
 800b9b8:	2000869c 	.word	0x2000869c
 800b9bc:	200086a0 	.word	0x200086a0
 800b9c0:	20008164 	.word	0x20008164
 800b9c4:	200086a4 	.word	0x200086a4
 800b9c8:	200086a8 	.word	0x200086a8
 800b9cc:	20008168 	.word	0x20008168

0800b9d0 <sensorsMpu6500Bmp280SetAccMode>:
//  out->x = ry.x;
//  out->y = ry.y;
//  out->z = ry.z;
//}
void sensorsMpu6500Bmp280SetAccMode(accModes accMode)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	71fb      	strb	r3, [r7, #7]
  switch (accMode)
 800b9da:	79fb      	ldrb	r3, [r7, #7]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d11a      	bne.n	800ba16 <sensorsMpu6500Bmp280SetAccMode+0x46>
  {
    case ACC_MODE_PROPTEST:
    	mpu6500SetAccelDLPF(MPU6500_ACCEL_DLPF_BW_460);
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	f7fe f863 	bl	8009aac <mpu6500SetAccelDLPF>
      for (uint8_t i = 0; i < 3; i++)
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73fb      	strb	r3, [r7, #15]
 800b9ea:	e010      	b.n	800ba0e <sensorsMpu6500Bmp280SetAccMode+0x3e>
      {
        lpf2pInit(&accLpf[i],  1000, 500);
 800b9ec:	7bfa      	ldrb	r2, [r7, #15]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	00db      	lsls	r3, r3, #3
 800b9f2:	1a9b      	subs	r3, r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4a17      	ldr	r2, [pc, #92]	@ (800ba54 <sensorsMpu6500Bmp280SetAccMode+0x84>)
 800b9f8:	4413      	add	r3, r2
 800b9fa:	eddf 0a17 	vldr	s1, [pc, #92]	@ 800ba58 <sensorsMpu6500Bmp280SetAccMode+0x88>
 800b9fe:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800ba5c <sensorsMpu6500Bmp280SetAccMode+0x8c>
 800ba02:	4618      	mov	r0, r3
 800ba04:	f006 fd6a 	bl	80124dc <lpf2pInit>
      for (uint8_t i = 0; i < 3; i++)
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	73fb      	strb	r3, [r7, #15]
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d9eb      	bls.n	800b9ec <sensorsMpu6500Bmp280SetAccMode+0x1c>
      }
      break;
 800ba14:	e01a      	b.n	800ba4c <sensorsMpu6500Bmp280SetAccMode+0x7c>
    case ACC_MODE_FLIGHT:
    default:
    	mpu6500SetAccelDLPF(MPU6500_ACCEL_DLPF_BW_44);
 800ba16:	2003      	movs	r0, #3
 800ba18:	f7fe f848 	bl	8009aac <mpu6500SetAccelDLPF>
      for (uint8_t i = 0; i < 3; i++)
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	73bb      	strb	r3, [r7, #14]
 800ba20:	e010      	b.n	800ba44 <sensorsMpu6500Bmp280SetAccMode+0x74>
      {
        lpf2pInit(&accLpf[i],  1000, ACCEL_LPF_CUTOFF_FREQ);
 800ba22:	7bba      	ldrb	r2, [r7, #14]
 800ba24:	4613      	mov	r3, r2
 800ba26:	00db      	lsls	r3, r3, #3
 800ba28:	1a9b      	subs	r3, r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4a09      	ldr	r2, [pc, #36]	@ (800ba54 <sensorsMpu6500Bmp280SetAccMode+0x84>)
 800ba2e:	4413      	add	r3, r2
 800ba30:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800ba34:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800ba5c <sensorsMpu6500Bmp280SetAccMode+0x8c>
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f006 fd4f 	bl	80124dc <lpf2pInit>
      for (uint8_t i = 0; i < 3; i++)
 800ba3e:	7bbb      	ldrb	r3, [r7, #14]
 800ba40:	3301      	adds	r3, #1
 800ba42:	73bb      	strb	r3, [r7, #14]
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d9eb      	bls.n	800ba22 <sensorsMpu6500Bmp280SetAccMode+0x52>
      }
      break;
 800ba4a:	bf00      	nop
  }
}
 800ba4c:	bf00      	nop
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	200080b0 	.word	0x200080b0
 800ba58:	43fa0000 	.word	0x43fa0000
 800ba5c:	447a0000 	.word	0x447a0000

0800ba60 <applyAxis3fLpf>:
static void applyAxis3fLpf(lpf2pData *data, Axis3f* in)
{
 800ba60:	b590      	push	{r4, r7, lr}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < 3; i++) {
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	73fb      	strb	r3, [r7, #15]
 800ba6e:	e01d      	b.n	800baac <applyAxis3fLpf+0x4c>
    in->axis[i] = lpf2pApply(&data[i], in->axis[i]);
 800ba70:	7bfa      	ldrb	r2, [r7, #15]
 800ba72:	4613      	mov	r3, r2
 800ba74:	00db      	lsls	r3, r3, #3
 800ba76:	1a9b      	subs	r3, r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	1899      	adds	r1, r3, r2
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	4413      	add	r3, r2
 800ba88:	edd3 7a00 	vldr	s15, [r3]
 800ba8c:	7bfc      	ldrb	r4, [r7, #15]
 800ba8e:	eeb0 0a67 	vmov.f32	s0, s15
 800ba92:	4608      	mov	r0, r1
 800ba94:	f006 fdbe 	bl	8012614 <lpf2pApply>
 800ba98:	eef0 7a40 	vmov.f32	s15, s0
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	00a3      	lsls	r3, r4, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 3; i++) {
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
 800baa8:	3301      	adds	r3, #1
 800baaa:	73fb      	strb	r3, [r7, #15]
 800baac:	7bfb      	ldrb	r3, [r7, #15]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d9de      	bls.n	800ba70 <applyAxis3fLpf+0x10>
  }
}
 800bab2:	bf00      	nop
 800bab4:	bf00      	nop
 800bab6:	3714      	adds	r7, #20
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd90      	pop	{r4, r7, pc}

0800babc <EXTI1_IRQHandler>:
	return testStatus;

}

void __attribute__((used)) EXTI1_IRQHandler(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0

	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800bac2:	2300      	movs	r3, #0
 800bac4:	607b      	str	r3, [r7, #4]
	imuIntTimestamp = usecTimestamp();
 800bac6:	f000 f8b3 	bl	800bc30 <usecTimestamp>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	4913      	ldr	r1, [pc, #76]	@ (800bb1c <EXTI1_IRQHandler+0x60>)
 800bad0:	e9c1 2300 	strd	r2, r3, [r1]
    // Check if EXTI line 1 triggered the interrupt
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != RESET)
 800bad4:	4b12      	ldr	r3, [pc, #72]	@ (800bb20 <EXTI1_IRQHandler+0x64>)
 800bad6:	695b      	ldr	r3, [r3, #20]
 800bad8:	f003 0302 	and.w	r3, r3, #2
 800badc:	2b00      	cmp	r3, #0
 800bade:	d009      	beq.n	800baf4 <EXTI1_IRQHandler+0x38>
    {
        // Clear the interrupt flag
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 800bae0:	4b0f      	ldr	r3, [pc, #60]	@ (800bb20 <EXTI1_IRQHandler+0x64>)
 800bae2:	2202      	movs	r2, #2
 800bae4:	615a      	str	r2, [r3, #20]
    	xSemaphoreGiveFromISR(sensorsDataReady, &xHigherPriorityTaskWoken);
 800bae6:	4b0f      	ldr	r3, [pc, #60]	@ (800bb24 <EXTI1_IRQHandler+0x68>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	1d3a      	adds	r2, r7, #4
 800baec:	4611      	mov	r1, r2
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fa f8a6 	bl	8005c40 <xQueueGiveFromISR>
    }

	intCounter++;
 800baf4:	4b0c      	ldr	r3, [pc, #48]	@ (800bb28 <EXTI1_IRQHandler+0x6c>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	3301      	adds	r3, #1
 800bafa:	4a0b      	ldr	r2, [pc, #44]	@ (800bb28 <EXTI1_IRQHandler+0x6c>)
 800bafc:	6013      	str	r3, [r2, #0]
	if (xHigherPriorityTaskWoken) {
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d007      	beq.n	800bb14 <EXTI1_IRQHandler+0x58>
		portYIELD();
 800bb04:	4b09      	ldr	r3, [pc, #36]	@ (800bb2c <EXTI1_IRQHandler+0x70>)
 800bb06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb0a:	601a      	str	r2, [r3, #0]
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	f3bf 8f6f 	isb	sy
	}

}
 800bb14:	bf00      	nop
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	200086b0 	.word	0x200086b0
 800bb20:	40013c00 	.word	0x40013c00
 800bb24:	200086ac 	.word	0x200086ac
 800bb28:	200086b8 	.word	0x200086b8
 800bb2c:	e000ed04 	.word	0xe000ed04

0800bb30 <__NVIC_EnableIRQ>:
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	4603      	mov	r3, r0
 800bb38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	db0b      	blt.n	800bb5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bb42:	79fb      	ldrb	r3, [r7, #7]
 800bb44:	f003 021f 	and.w	r2, r3, #31
 800bb48:	4907      	ldr	r1, [pc, #28]	@ (800bb68 <__NVIC_EnableIRQ+0x38>)
 800bb4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb4e:	095b      	lsrs	r3, r3, #5
 800bb50:	2001      	movs	r0, #1
 800bb52:	fa00 f202 	lsl.w	r2, r0, r2
 800bb56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bb5a:	bf00      	nop
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	e000e100 	.word	0xe000e100

0800bb6c <__NVIC_SetPriority>:
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	4603      	mov	r3, r0
 800bb74:	6039      	str	r1, [r7, #0]
 800bb76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	db0a      	blt.n	800bb96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	490c      	ldr	r1, [pc, #48]	@ (800bbb8 <__NVIC_SetPriority+0x4c>)
 800bb86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb8a:	0112      	lsls	r2, r2, #4
 800bb8c:	b2d2      	uxtb	r2, r2
 800bb8e:	440b      	add	r3, r1
 800bb90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bb94:	e00a      	b.n	800bbac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	4908      	ldr	r1, [pc, #32]	@ (800bbbc <__NVIC_SetPriority+0x50>)
 800bb9c:	79fb      	ldrb	r3, [r7, #7]
 800bb9e:	f003 030f 	and.w	r3, r3, #15
 800bba2:	3b04      	subs	r3, #4
 800bba4:	0112      	lsls	r2, r2, #4
 800bba6:	b2d2      	uxtb	r2, r2
 800bba8:	440b      	add	r3, r1
 800bbaa:	761a      	strb	r2, [r3, #24]
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	e000e100 	.word	0xe000e100
 800bbbc:	e000ed00 	.word	0xe000ed00

0800bbc0 <usecTimerInit>:
static bool isInit = false;

static uint32_t usecTimerHighCount;

void usecTimerInit(void)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	af00      	add	r7, sp, #0
  if (isInit) {
 800bbc4:	4b16      	ldr	r3, [pc, #88]	@ (800bc20 <usecTimerInit+0x60>)
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d126      	bne.n	800bc1a <usecTimerInit+0x5a>
    return;
  }

  usecTimerHighCount = 0;
 800bbcc:	4b15      	ldr	r3, [pc, #84]	@ (800bc24 <usecTimerInit+0x64>)
 800bbce:	2200      	movs	r2, #0
 800bbd0:	601a      	str	r2, [r3, #0]

  // 1. Enable the clock for TIM7
  RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 800bbd2:	4b15      	ldr	r3, [pc, #84]	@ (800bc28 <usecTimerInit+0x68>)
 800bbd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbd6:	4a14      	ldr	r2, [pc, #80]	@ (800bc28 <usecTimerInit+0x68>)
 800bbd8:	f043 0320 	orr.w	r3, r3, #32
 800bbdc:	6413      	str	r3, [r2, #64]	@ 0x40

  // 2. Set the prescaler value
  // Assuming the APB1 clock is 42 MHz (84 MHz/2) and you want a 1 kHz timer clock (1 ms per tick)
  TIM7->PSC = 41;  // Prescaler = 42000 - 1
 800bbde:	4b13      	ldr	r3, [pc, #76]	@ (800bc2c <usecTimerInit+0x6c>)
 800bbe0:	2229      	movs	r2, #41	@ 0x29
 800bbe2:	629a      	str	r2, [r3, #40]	@ 0x28

  // 3. Set the auto-reload value
  TIM7->ARR = 999;  // 1000 ticks -> 1 second (1 ms per tick)
 800bbe4:	4b11      	ldr	r3, [pc, #68]	@ (800bc2c <usecTimerInit+0x6c>)
 800bbe6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800bbea:	62da      	str	r2, [r3, #44]	@ 0x2c

  // 4. Enable the update interrupt (UIE)
  TIM7->DIER |= TIM_DIER_UIE;
 800bbec:	4b0f      	ldr	r3, [pc, #60]	@ (800bc2c <usecTimerInit+0x6c>)
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	4a0e      	ldr	r2, [pc, #56]	@ (800bc2c <usecTimerInit+0x6c>)
 800bbf2:	f043 0301 	orr.w	r3, r3, #1
 800bbf6:	60d3      	str	r3, [r2, #12]

  // 5. Enable the counter
  TIM7->CR1 |= TIM_CR1_CEN;
 800bbf8:	4b0c      	ldr	r3, [pc, #48]	@ (800bc2c <usecTimerInit+0x6c>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a0b      	ldr	r2, [pc, #44]	@ (800bc2c <usecTimerInit+0x6c>)
 800bbfe:	f043 0301 	orr.w	r3, r3, #1
 800bc02:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(TIM7_IRQn, 3);
 800bc04:	2103      	movs	r1, #3
 800bc06:	2037      	movs	r0, #55	@ 0x37
 800bc08:	f7ff ffb0 	bl	800bb6c <__NVIC_SetPriority>
  // 6. Enable TIM7 interrupt in NVIC
  NVIC_EnableIRQ(TIM7_IRQn);
 800bc0c:	2037      	movs	r0, #55	@ 0x37
 800bc0e:	f7ff ff8f 	bl	800bb30 <__NVIC_EnableIRQ>
  isInit = true;
 800bc12:	4b03      	ldr	r3, [pc, #12]	@ (800bc20 <usecTimerInit+0x60>)
 800bc14:	2201      	movs	r2, #1
 800bc16:	701a      	strb	r2, [r3, #0]
 800bc18:	e000      	b.n	800bc1c <usecTimerInit+0x5c>
    return;
 800bc1a:	bf00      	nop
}
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	200086bc 	.word	0x200086bc
 800bc24:	200086c0 	.word	0x200086c0
 800bc28:	40023800 	.word	0x40023800
 800bc2c:	40001400 	.word	0x40001400

0800bc30 <usecTimestamp>:

  TIM7->CNT = 0;
}

uint64_t usecTimestamp(void)
{
 800bc30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc34:	b08c      	sub	sp, #48	@ 0x30
 800bc36:	af00      	add	r7, sp, #0
  IF_DEBUG_ASSERT(isInit);
 800bc38:	4b2b      	ldr	r3, [pc, #172]	@ (800bce8 <usecTimestamp+0xb8>)
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d104      	bne.n	800bc4a <usecTimestamp+0x1a>
 800bc40:	224e      	movs	r2, #78	@ 0x4e
 800bc42:	492a      	ldr	r1, [pc, #168]	@ (800bcec <usecTimestamp+0xbc>)
 800bc44:	482a      	ldr	r0, [pc, #168]	@ (800bcf0 <usecTimestamp+0xc0>)
 800bc46:	f006 fc0f 	bl	8012468 <assertFail>

  uint32_t high0;
  __atomic_load(&usecTimerHighCount, &high0, __ATOMIC_SEQ_CST);
 800bc4a:	4b2a      	ldr	r3, [pc, #168]	@ (800bcf4 <usecTimestamp+0xc4>)
 800bc4c:	f3bf 8f5b 	dmb	ish
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f3bf 8f5b 	dmb	ish
 800bc56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t low = TIM7->CNT;
 800bc58:	4b27      	ldr	r3, [pc, #156]	@ (800bcf8 <usecTimestamp+0xc8>)
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t high;
  __atomic_load(&usecTimerHighCount, &high, __ATOMIC_SEQ_CST);
 800bc5e:	4b25      	ldr	r3, [pc, #148]	@ (800bcf4 <usecTimestamp+0xc4>)
 800bc60:	f3bf 8f5b 	dmb	ish
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f3bf 8f5b 	dmb	ish
 800bc6a:	627b      	str	r3, [r7, #36]	@ 0x24

  // There was no increment in between
  if (high == high0)
 800bc6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d118      	bne.n	800bca6 <usecTimestamp+0x76>
  {
    return (((uint64_t)high) << 16) + low;
 800bc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc76:	2200      	movs	r2, #0
 800bc78:	61bb      	str	r3, [r7, #24]
 800bc7a:	61fa      	str	r2, [r7, #28]
 800bc7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bc80:	460b      	mov	r3, r1
 800bc82:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bc86:	460b      	mov	r3, r1
 800bc88:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 800bc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc8e:	2200      	movs	r2, #0
 800bc90:	613b      	str	r3, [r7, #16]
 800bc92:	617a      	str	r2, [r7, #20]
 800bc94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	eb1a 0403 	adds.w	r4, sl, r3
 800bc9e:	4613      	mov	r3, r2
 800bca0:	eb4b 0503 	adc.w	r5, fp, r3
 800bca4:	e018      	b.n	800bcd8 <usecTimestamp+0xa8>
  }
  // There was an increment, but we don't expect another one soon
  return (((uint64_t)high) << 16) + TIM7->CNT;
 800bca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca8:	2200      	movs	r2, #0
 800bcaa:	60bb      	str	r3, [r7, #8]
 800bcac:	60fa      	str	r2, [r7, #12]
 800bcae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800bcb8:	460b      	mov	r3, r1
 800bcba:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800bcbe:	4b0e      	ldr	r3, [pc, #56]	@ (800bcf8 <usecTimestamp+0xc8>)
 800bcc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	603b      	str	r3, [r7, #0]
 800bcc6:	607a      	str	r2, [r7, #4]
 800bcc8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bccc:	460b      	mov	r3, r1
 800bcce:	eb18 0403 	adds.w	r4, r8, r3
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	eb49 0503 	adc.w	r5, r9, r3
}
 800bcd8:	4622      	mov	r2, r4
 800bcda:	462b      	mov	r3, r5
 800bcdc:	4610      	mov	r0, r2
 800bcde:	4619      	mov	r1, r3
 800bce0:	3730      	adds	r7, #48	@ 0x30
 800bce2:	46bd      	mov	sp, r7
 800bce4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bce8:	200086bc 	.word	0x200086bc
 800bcec:	0801a664 	.word	0x0801a664
 800bcf0:	0801a67c 	.word	0x0801a67c
 800bcf4:	200086c0 	.word	0x200086c0
 800bcf8:	40001400 	.word	0x40001400

0800bcfc <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	af00      	add	r7, sp, #0

    if (TIM7->SR & TIM_SR_UIF) {
 800bd00:	4b0e      	ldr	r3, [pc, #56]	@ (800bd3c <TIM7_IRQHandler+0x40>)
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	f003 0301 	and.w	r3, r3, #1
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d005      	beq.n	800bd18 <TIM7_IRQHandler+0x1c>
        // Clear the update interrupt flag
        TIM7->SR &= ~TIM_SR_UIF;
 800bd0c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd3c <TIM7_IRQHandler+0x40>)
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	4a0a      	ldr	r2, [pc, #40]	@ (800bd3c <TIM7_IRQHandler+0x40>)
 800bd12:	f023 0301 	bic.w	r3, r3, #1
 800bd16:	6113      	str	r3, [r2, #16]
    }

  __sync_fetch_and_add(&usecTimerHighCount, 1);
 800bd18:	4b09      	ldr	r3, [pc, #36]	@ (800bd40 <TIM7_IRQHandler+0x44>)
 800bd1a:	f3bf 8f5b 	dmb	ish
 800bd1e:	e853 1f00 	ldrex	r1, [r3]
 800bd22:	f101 0101 	add.w	r1, r1, #1
 800bd26:	e843 1200 	strex	r2, r1, [r3]
 800bd2a:	2a00      	cmp	r2, #0
 800bd2c:	d1f7      	bne.n	800bd1e <TIM7_IRQHandler+0x22>
 800bd2e:	f3bf 8f5b 	dmb	ish
}
 800bd32:	bf00      	nop
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	40001400 	.word	0x40001400
 800bd40:	200086c0 	.word	0x200086c0

0800bd44 <axis3fSubSamplerInit>:
 */

#include <string.h>
#include "axis3fSubSampler.h"

void axis3fSubSamplerInit(Axis3fSubSampler_t* this, const float conversionFactor) {
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	ed87 0a00 	vstr	s0, [r7]
  memset(this, 0, sizeof(Axis3fSubSampler_t));
 800bd50:	2220      	movs	r2, #32
 800bd52:	2100      	movs	r1, #0
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f00b fe19 	bl	801798c <memset>
  this->conversionFactor = conversionFactor;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	611a      	str	r2, [r3, #16]
}
 800bd60:	bf00      	nop
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <axis3fSubSamplerAccumulate>:

void axis3fSubSamplerAccumulate(Axis3fSubSampler_t* this, const Axis3f* sample) {
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  this->sum.x += sample->x;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	ed93 7a00 	vldr	s14, [r3]
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	edd3 7a00 	vldr	s15, [r3]
 800bd7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	edc3 7a00 	vstr	s15, [r3]
  this->sum.y += sample->y;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	ed93 7a01 	vldr	s14, [r3, #4]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	edd3 7a01 	vldr	s15, [r3, #4]
 800bd94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	edc3 7a01 	vstr	s15, [r3, #4]
  this->sum.z += sample->z;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	ed93 7a02 	vldr	s14, [r3, #8]
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	edd3 7a02 	vldr	s15, [r3, #8]
 800bdaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	edc3 7a02 	vstr	s15, [r3, #8]

  this->count++;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	1c5a      	adds	r2, r3, #1
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	60da      	str	r2, [r3, #12]
}
 800bdbe:	bf00      	nop
 800bdc0:	370c      	adds	r7, #12
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr

0800bdca <axis3fSubSamplerFinalize>:

Axis3f* axis3fSubSamplerFinalize(Axis3fSubSampler_t* this) {
 800bdca:	b480      	push	{r7}
 800bdcc:	b087      	sub	sp, #28
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
  if (this->count > 0) {
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d041      	beq.n	800be5e <axis3fSubSamplerFinalize+0x94>
    this->subSample.x = this->sum.x * this->conversionFactor / this->count;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	ed93 7a00 	vldr	s14, [r3]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	edd3 7a04 	vldr	s15, [r3, #16]
 800bde6:	ee67 6a27 	vmul.f32	s13, s14, s15
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	ee07 3a90 	vmov	s15, r3
 800bdf2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bdf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	edc3 7a05 	vstr	s15, [r3, #20]
    this->subSample.y = this->sum.y * this->conversionFactor / this->count;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	ed93 7a01 	vldr	s14, [r3, #4]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	edd3 7a04 	vldr	s15, [r3, #16]
 800be0c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	ee07 3a90 	vmov	s15, r3
 800be18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800be1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	edc3 7a06 	vstr	s15, [r3, #24]
    this->subSample.z = this->sum.z * this->conversionFactor / this->count;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	ed93 7a02 	vldr	s14, [r3, #8]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	edd3 7a04 	vldr	s15, [r3, #16]
 800be32:	ee67 6a27 	vmul.f32	s13, s14, s15
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800be42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	edc3 7a07 	vstr	s15, [r3, #28]

    // Reset
    this->count = 0;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	60da      	str	r2, [r3, #12]
    this->sum = (Axis3f){.axis={0}};
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	461a      	mov	r2, r3
 800be56:	2300      	movs	r3, #0
 800be58:	6013      	str	r3, [r2, #0]
 800be5a:	6053      	str	r3, [r2, #4]
 800be5c:	6093      	str	r3, [r2, #8]
  }

  return &this->subSample;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	3314      	adds	r3, #20
}
 800be62:	4618      	mov	r0, r3
 800be64:	371c      	adds	r7, #28
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
	...

0800be70 <kalmanSupervisorIsStateWithinBounds>:

// The bounds on states, these shouldn't be hit...
float maxPosition = 100; //meters
float maxVelocity = 10; //meters per second

bool kalmanSupervisorIsStateWithinBounds(const kalmanCoreData_t* this) {
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < 3; i++) {
 800be78:	2300      	movs	r3, #0
 800be7a:	60fb      	str	r3, [r7, #12]
 800be7c:	e058      	b.n	800bf30 <kalmanSupervisorIsStateWithinBounds+0xc0>
    if (maxPosition > 0.0f) {
 800be7e:	4b31      	ldr	r3, [pc, #196]	@ (800bf44 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800be80:	edd3 7a00 	vldr	s15, [r3]
 800be84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be8c:	dd21      	ble.n	800bed2 <kalmanSupervisorIsStateWithinBounds+0x62>
      if (this->S[KC_STATE_X + i] > maxPosition) {
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	ed93 7a00 	vldr	s14, [r3]
 800be9a:	4b2a      	ldr	r3, [pc, #168]	@ (800bf44 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800be9c:	edd3 7a00 	vldr	s15, [r3]
 800bea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea8:	dd01      	ble.n	800beae <kalmanSupervisorIsStateWithinBounds+0x3e>
        return false;
 800beaa:	2300      	movs	r3, #0
 800beac:	e044      	b.n	800bf38 <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_X + i] < -maxPosition) {
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	4413      	add	r3, r2
 800beb6:	ed93 7a00 	vldr	s14, [r3]
 800beba:	4b22      	ldr	r3, [pc, #136]	@ (800bf44 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800bebc:	edd3 7a00 	vldr	s15, [r3]
 800bec0:	eef1 7a67 	vneg.f32	s15, s15
 800bec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800becc:	d501      	bpl.n	800bed2 <kalmanSupervisorIsStateWithinBounds+0x62>
        return false;
 800bece:	2300      	movs	r3, #0
 800bed0:	e032      	b.n	800bf38 <kalmanSupervisorIsStateWithinBounds+0xc8>
      }
    }

    if (maxVelocity > 0.0f) {
 800bed2:	4b1d      	ldr	r3, [pc, #116]	@ (800bf48 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800bed4:	edd3 7a00 	vldr	s15, [r3]
 800bed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee0:	dd23      	ble.n	800bf2a <kalmanSupervisorIsStateWithinBounds+0xba>
      if (this->S[KC_STATE_PX + i] > maxVelocity) {
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	3303      	adds	r3, #3
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	ed93 7a00 	vldr	s14, [r3]
 800bef0:	4b15      	ldr	r3, [pc, #84]	@ (800bf48 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800bef2:	edd3 7a00 	vldr	s15, [r3]
 800bef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800befa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800befe:	dd01      	ble.n	800bf04 <kalmanSupervisorIsStateWithinBounds+0x94>
        return false;
 800bf00:	2300      	movs	r3, #0
 800bf02:	e019      	b.n	800bf38 <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_PX + i] < -maxVelocity) {
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	3303      	adds	r3, #3
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4413      	add	r3, r2
 800bf0e:	ed93 7a00 	vldr	s14, [r3]
 800bf12:	4b0d      	ldr	r3, [pc, #52]	@ (800bf48 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800bf14:	edd3 7a00 	vldr	s15, [r3]
 800bf18:	eef1 7a67 	vneg.f32	s15, s15
 800bf1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bf20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf24:	d501      	bpl.n	800bf2a <kalmanSupervisorIsStateWithinBounds+0xba>
        return false;
 800bf26:	2300      	movs	r3, #0
 800bf28:	e006      	b.n	800bf38 <kalmanSupervisorIsStateWithinBounds+0xc8>
  for (int i = 0; i < 3; i++) {
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2b02      	cmp	r3, #2
 800bf34:	dda3      	ble.n	800be7e <kalmanSupervisorIsStateWithinBounds+0xe>
      }
    }
  }

  return true;
 800bf36:	2301      	movs	r3, #1
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3714      	adds	r7, #20
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr
 800bf44:	20000018 	.word	0x20000018
 800bf48:	2000001c 	.word	0x2000001c

0800bf4c <estimatorEnqueueTOF>:
  m.data.distance = *distance;
  estimatorEnqueue(&m);
}

static inline void estimatorEnqueueTOF(const tofMeasurement_t *tof)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08e      	sub	sp, #56	@ 0x38
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypeTOF;
 800bf54:	2304      	movs	r3, #4
 800bf56:	723b      	strb	r3, [r7, #8]
  m.data.tof = *tof;
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	f107 030c 	add.w	r3, r7, #12
 800bf5e:	ca07      	ldmia	r2, {r0, r1, r2}
 800bf60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  estimatorEnqueue(&m);
 800bf64:	f107 0308 	add.w	r3, r7, #8
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f001 fa21 	bl	800d3b0 <estimatorEnqueue>
}
 800bf6e:	bf00      	nop
 800bf70:	3738      	adds	r7, #56	@ 0x38
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
	...

0800bf78 <rangeSet>:
#include "estimator.h"

static uint16_t ranges[RANGE_T_END] = {0,};

void rangeSet(rangeDirection_t direction, float range_m)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	4603      	mov	r3, r0
 800bf80:	ed87 0a00 	vstr	s0, [r7]
 800bf84:	71fb      	strb	r3, [r7, #7]
  if (direction > (RANGE_T_END-1)) return;
 800bf86:	79fb      	ldrb	r3, [r7, #7]
 800bf88:	2b05      	cmp	r3, #5
 800bf8a:	d80f      	bhi.n	800bfac <rangeSet+0x34>

  ranges[direction] = range_m * 1000;
 800bf8c:	edd7 7a00 	vldr	s15, [r7]
 800bf90:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800bfb8 <rangeSet+0x40>
 800bf94:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf98:	79fb      	ldrb	r3, [r7, #7]
 800bf9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf9e:	ee17 2a90 	vmov	r2, s15
 800bfa2:	b291      	uxth	r1, r2
 800bfa4:	4a05      	ldr	r2, [pc, #20]	@ (800bfbc <rangeSet+0x44>)
 800bfa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bfaa:	e000      	b.n	800bfae <rangeSet+0x36>
  if (direction > (RANGE_T_END-1)) return;
 800bfac:	bf00      	nop
}
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr
 800bfb8:	447a0000 	.word	0x447a0000
 800bfbc:	200086c4 	.word	0x200086c4

0800bfc0 <rangeEnqueueDownRangeInEstimator>:
    if (direction > (RANGE_T_END-1)) return 0;

  return ranges[direction];
}

void rangeEnqueueDownRangeInEstimator(float distance, float stdDev, uint32_t timeStamp) {
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b088      	sub	sp, #32
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	ed87 0a03 	vstr	s0, [r7, #12]
 800bfca:	edc7 0a02 	vstr	s1, [r7, #8]
 800bfce:	6078      	str	r0, [r7, #4]
  tofMeasurement_t tofData;
  tofData.timestamp = timeStamp;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	617b      	str	r3, [r7, #20]
  tofData.distance = distance;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	61bb      	str	r3, [r7, #24]
  tofData.stdDev = stdDev;
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	61fb      	str	r3, [r7, #28]
  estimatorEnqueueTOF(&tofData);
 800bfdc:	f107 0314 	add.w	r3, r7, #20
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7ff ffb3 	bl	800bf4c <estimatorEnqueueTOF>
}
 800bfe6:	bf00      	nop
 800bfe8:	3720      	adds	r7, #32
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
	...

0800bff0 <sensfusion6Init>:

// TODO: Make math util file
static float invSqrt(float x);

void sensfusion6Init()
{
 800bff0:	b480      	push	{r7}
 800bff2:	af00      	add	r7, sp, #0
  if(isInit)
 800bff4:	4b06      	ldr	r3, [pc, #24]	@ (800c010 <sensfusion6Init+0x20>)
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d103      	bne.n	800c004 <sensfusion6Init+0x14>
    return;

  isInit = true;
 800bffc:	4b04      	ldr	r3, [pc, #16]	@ (800c010 <sensfusion6Init+0x20>)
 800bffe:	2201      	movs	r2, #1
 800c000:	701a      	strb	r2, [r3, #0]
 800c002:	e000      	b.n	800c006 <sensfusion6Init+0x16>
    return;
 800c004:	bf00      	nop
}
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	200086f4 	.word	0x200086f4

0800c014 <sensfusion6Test>:

bool sensfusion6Test(void)
{
 800c014:	b480      	push	{r7}
 800c016:	af00      	add	r7, sp, #0
  return isInit;
 800c018:	4b03      	ldr	r3, [pc, #12]	@ (800c028 <sensfusion6Test+0x14>)
 800c01a:	781b      	ldrb	r3, [r3, #0]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	200086f4 	.word	0x200086f4

0800c02c <sensfusion6UpdateQ>:

void sensfusion6UpdateQ(float gx, float gy, float gz, float ax, float ay, float az, float dt)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b088      	sub	sp, #32
 800c030:	af00      	add	r7, sp, #0
 800c032:	ed87 0a07 	vstr	s0, [r7, #28]
 800c036:	edc7 0a06 	vstr	s1, [r7, #24]
 800c03a:	ed87 1a05 	vstr	s2, [r7, #20]
 800c03e:	edc7 1a04 	vstr	s3, [r7, #16]
 800c042:	ed87 2a03 	vstr	s4, [r7, #12]
 800c046:	edc7 2a02 	vstr	s5, [r7, #8]
 800c04a:	ed87 3a01 	vstr	s6, [r7, #4]
  sensfusion6UpdateQImpl(gx, gy, gz, ax, ay, az, dt);
 800c04e:	ed97 3a01 	vldr	s6, [r7, #4]
 800c052:	edd7 2a02 	vldr	s5, [r7, #8]
 800c056:	ed97 2a03 	vldr	s4, [r7, #12]
 800c05a:	edd7 1a04 	vldr	s3, [r7, #16]
 800c05e:	ed97 1a05 	vldr	s2, [r7, #20]
 800c062:	edd7 0a06 	vldr	s1, [r7, #24]
 800c066:	ed97 0a07 	vldr	s0, [r7, #28]
 800c06a:	f000 f82b 	bl	800c0c4 <sensfusion6UpdateQImpl>
  estimatedGravityDirection(&gravX, &gravY, &gravZ);
 800c06e:	4a10      	ldr	r2, [pc, #64]	@ (800c0b0 <sensfusion6UpdateQ+0x84>)
 800c070:	4910      	ldr	r1, [pc, #64]	@ (800c0b4 <sensfusion6UpdateQ+0x88>)
 800c072:	4811      	ldr	r0, [pc, #68]	@ (800c0b8 <sensfusion6UpdateQ+0x8c>)
 800c074:	f000 fc1c 	bl	800c8b0 <estimatedGravityDirection>

  if (!isCalibrated) {
 800c078:	4b10      	ldr	r3, [pc, #64]	@ (800c0bc <sensfusion6UpdateQ+0x90>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	f083 0301 	eor.w	r3, r3, #1
 800c080:	b2db      	uxtb	r3, r3
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00f      	beq.n	800c0a6 <sensfusion6UpdateQ+0x7a>
    baseZacc = sensfusion6GetAccZ(ax, ay, az);
 800c086:	ed97 1a02 	vldr	s2, [r7, #8]
 800c08a:	edd7 0a03 	vldr	s1, [r7, #12]
 800c08e:	ed97 0a04 	vldr	s0, [r7, #16]
 800c092:	f000 fbdd 	bl	800c850 <sensfusion6GetAccZ>
 800c096:	eef0 7a40 	vmov.f32	s15, s0
 800c09a:	4b09      	ldr	r3, [pc, #36]	@ (800c0c0 <sensfusion6UpdateQ+0x94>)
 800c09c:	edc3 7a00 	vstr	s15, [r3]
    isCalibrated = true;
 800c0a0:	4b06      	ldr	r3, [pc, #24]	@ (800c0bc <sensfusion6UpdateQ+0x90>)
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	701a      	strb	r2, [r3, #0]
  }
}
 800c0a6:	bf00      	nop
 800c0a8:	3720      	adds	r7, #32
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	200086f0 	.word	0x200086f0
 800c0b4:	200086ec 	.word	0x200086ec
 800c0b8:	200086e8 	.word	0x200086e8
 800c0bc:	200086f5 	.word	0x200086f5
 800c0c0:	2000002c 	.word	0x2000002c

0800c0c4 <sensfusion6UpdateQImpl>:
//
// Date     Author      Notes
// 29/09/2011 SOH Madgwick    Initial release
// 02/10/2011 SOH Madgwick  Optimised for reduced CPU load
static void sensfusion6UpdateQImpl(float gx, float gy, float gz, float ax, float ay, float az, float dt)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b092      	sub	sp, #72	@ 0x48
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	ed87 0a07 	vstr	s0, [r7, #28]
 800c0ce:	edc7 0a06 	vstr	s1, [r7, #24]
 800c0d2:	ed87 1a05 	vstr	s2, [r7, #20]
 800c0d6:	edc7 1a04 	vstr	s3, [r7, #16]
 800c0da:	ed87 2a03 	vstr	s4, [r7, #12]
 800c0de:	edc7 2a02 	vstr	s5, [r7, #8]
 800c0e2:	ed87 3a01 	vstr	s6, [r7, #4]
  float recipNorm;
  float halfvx, halfvy, halfvz;
  float halfex, halfey, halfez;
  float qa, qb, qc;

  gx = gx * M_PI_F / 180;
 800c0e6:	edd7 7a07 	vldr	s15, [r7, #28]
 800c0ea:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800c350 <sensfusion6UpdateQImpl+0x28c>
 800c0ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c0f2:	eddf 6a98 	vldr	s13, [pc, #608]	@ 800c354 <sensfusion6UpdateQImpl+0x290>
 800c0f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c0fa:	edc7 7a07 	vstr	s15, [r7, #28]
  gy = gy * M_PI_F / 180;
 800c0fe:	edd7 7a06 	vldr	s15, [r7, #24]
 800c102:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800c350 <sensfusion6UpdateQImpl+0x28c>
 800c106:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c10a:	eddf 6a92 	vldr	s13, [pc, #584]	@ 800c354 <sensfusion6UpdateQImpl+0x290>
 800c10e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c112:	edc7 7a06 	vstr	s15, [r7, #24]
  gz = gz * M_PI_F / 180;
 800c116:	edd7 7a05 	vldr	s15, [r7, #20]
 800c11a:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 800c350 <sensfusion6UpdateQImpl+0x28c>
 800c11e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c122:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c354 <sensfusion6UpdateQImpl+0x290>
 800c126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c12a:	edc7 7a05 	vstr	s15, [r7, #20]

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 800c12e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c132:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13a:	d10e      	bne.n	800c15a <sensfusion6UpdateQImpl+0x96>
 800c13c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c140:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c148:	d107      	bne.n	800c15a <sensfusion6UpdateQImpl+0x96>
 800c14a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c14e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c156:	f000 8142 	beq.w	800c3de <sensfusion6UpdateQImpl+0x31a>
  {
    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800c15a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c15e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800c162:	edd7 7a03 	vldr	s15, [r7, #12]
 800c166:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c16a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c16e:	edd7 7a02 	vldr	s15, [r7, #8]
 800c172:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c17a:	eeb0 0a67 	vmov.f32	s0, s15
 800c17e:	f000 fb2b 	bl	800c7d8 <invSqrt>
 800c182:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    ax *= recipNorm;
 800c186:	ed97 7a04 	vldr	s14, [r7, #16]
 800c18a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800c18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c192:	edc7 7a04 	vstr	s15, [r7, #16]
    ay *= recipNorm;
 800c196:	ed97 7a03 	vldr	s14, [r7, #12]
 800c19a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800c19e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a2:	edc7 7a03 	vstr	s15, [r7, #12]
    az *= recipNorm;
 800c1a6:	ed97 7a02 	vldr	s14, [r7, #8]
 800c1aa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800c1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1b2:	edc7 7a02 	vstr	s15, [r7, #8]

    // Estimated direction of gravity and vector perpendicular to magnetic flux
    halfvx = qx * qz - qw * qy;
 800c1b6:	4b68      	ldr	r3, [pc, #416]	@ (800c358 <sensfusion6UpdateQImpl+0x294>)
 800c1b8:	ed93 7a00 	vldr	s14, [r3]
 800c1bc:	4b67      	ldr	r3, [pc, #412]	@ (800c35c <sensfusion6UpdateQImpl+0x298>)
 800c1be:	edd3 7a00 	vldr	s15, [r3]
 800c1c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1c6:	4b66      	ldr	r3, [pc, #408]	@ (800c360 <sensfusion6UpdateQImpl+0x29c>)
 800c1c8:	edd3 6a00 	vldr	s13, [r3]
 800c1cc:	4b65      	ldr	r3, [pc, #404]	@ (800c364 <sensfusion6UpdateQImpl+0x2a0>)
 800c1ce:	edd3 7a00 	vldr	s15, [r3]
 800c1d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1da:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    halfvy = qw * qx + qy * qz;
 800c1de:	4b60      	ldr	r3, [pc, #384]	@ (800c360 <sensfusion6UpdateQImpl+0x29c>)
 800c1e0:	ed93 7a00 	vldr	s14, [r3]
 800c1e4:	4b5c      	ldr	r3, [pc, #368]	@ (800c358 <sensfusion6UpdateQImpl+0x294>)
 800c1e6:	edd3 7a00 	vldr	s15, [r3]
 800c1ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1ee:	4b5d      	ldr	r3, [pc, #372]	@ (800c364 <sensfusion6UpdateQImpl+0x2a0>)
 800c1f0:	edd3 6a00 	vldr	s13, [r3]
 800c1f4:	4b59      	ldr	r3, [pc, #356]	@ (800c35c <sensfusion6UpdateQImpl+0x298>)
 800c1f6:	edd3 7a00 	vldr	s15, [r3]
 800c1fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c202:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    halfvz = qw * qw - 0.5f + qz * qz;
 800c206:	4b56      	ldr	r3, [pc, #344]	@ (800c360 <sensfusion6UpdateQImpl+0x29c>)
 800c208:	ed93 7a00 	vldr	s14, [r3]
 800c20c:	4b54      	ldr	r3, [pc, #336]	@ (800c360 <sensfusion6UpdateQImpl+0x29c>)
 800c20e:	edd3 7a00 	vldr	s15, [r3]
 800c212:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c216:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c21a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c21e:	4b4f      	ldr	r3, [pc, #316]	@ (800c35c <sensfusion6UpdateQImpl+0x298>)
 800c220:	edd3 6a00 	vldr	s13, [r3]
 800c224:	4b4d      	ldr	r3, [pc, #308]	@ (800c35c <sensfusion6UpdateQImpl+0x298>)
 800c226:	edd3 7a00 	vldr	s15, [r3]
 800c22a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c22e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c232:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // Error is sum of cross product between estimated and measured direction of gravity
    halfex = (ay * halfvz - az * halfvy);
 800c236:	ed97 7a03 	vldr	s14, [r7, #12]
 800c23a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800c23e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c242:	edd7 6a02 	vldr	s13, [r7, #8]
 800c246:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800c24a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c24e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c252:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    halfey = (az * halfvx - ax * halfvz);
 800c256:	ed97 7a02 	vldr	s14, [r7, #8]
 800c25a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800c25e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c262:	edd7 6a04 	vldr	s13, [r7, #16]
 800c266:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800c26a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c26e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c272:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    halfez = (ax * halfvy - ay * halfvx);
 800c276:	ed97 7a04 	vldr	s14, [r7, #16]
 800c27a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800c27e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c282:	edd7 6a03 	vldr	s13, [r7, #12]
 800c286:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800c28a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c28e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c292:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Compute and apply integral feedback if enabled
    if(twoKi > 0.0f)
 800c296:	4b34      	ldr	r3, [pc, #208]	@ (800c368 <sensfusion6UpdateQImpl+0x2a4>)
 800c298:	edd3 7a00 	vldr	s15, [r3]
 800c29c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a4:	dd68      	ble.n	800c378 <sensfusion6UpdateQImpl+0x2b4>
    {
      integralFBx += twoKi * halfex * dt;  // integral error scaled by Ki
 800c2a6:	4b30      	ldr	r3, [pc, #192]	@ (800c368 <sensfusion6UpdateQImpl+0x2a4>)
 800c2a8:	ed93 7a00 	vldr	s14, [r3]
 800c2ac:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c2b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2b4:	edd7 7a01 	vldr	s15, [r7, #4]
 800c2b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2bc:	4b2b      	ldr	r3, [pc, #172]	@ (800c36c <sensfusion6UpdateQImpl+0x2a8>)
 800c2be:	edd3 7a00 	vldr	s15, [r3]
 800c2c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2c6:	4b29      	ldr	r3, [pc, #164]	@ (800c36c <sensfusion6UpdateQImpl+0x2a8>)
 800c2c8:	edc3 7a00 	vstr	s15, [r3]
      integralFBy += twoKi * halfey * dt;
 800c2cc:	4b26      	ldr	r3, [pc, #152]	@ (800c368 <sensfusion6UpdateQImpl+0x2a4>)
 800c2ce:	ed93 7a00 	vldr	s14, [r3]
 800c2d2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c2d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2da:	edd7 7a01 	vldr	s15, [r7, #4]
 800c2de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2e2:	4b23      	ldr	r3, [pc, #140]	@ (800c370 <sensfusion6UpdateQImpl+0x2ac>)
 800c2e4:	edd3 7a00 	vldr	s15, [r3]
 800c2e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2ec:	4b20      	ldr	r3, [pc, #128]	@ (800c370 <sensfusion6UpdateQImpl+0x2ac>)
 800c2ee:	edc3 7a00 	vstr	s15, [r3]
      integralFBz += twoKi * halfez * dt;
 800c2f2:	4b1d      	ldr	r3, [pc, #116]	@ (800c368 <sensfusion6UpdateQImpl+0x2a4>)
 800c2f4:	ed93 7a00 	vldr	s14, [r3]
 800c2f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c2fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c300:	edd7 7a01 	vldr	s15, [r7, #4]
 800c304:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c308:	4b1a      	ldr	r3, [pc, #104]	@ (800c374 <sensfusion6UpdateQImpl+0x2b0>)
 800c30a:	edd3 7a00 	vldr	s15, [r3]
 800c30e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c312:	4b18      	ldr	r3, [pc, #96]	@ (800c374 <sensfusion6UpdateQImpl+0x2b0>)
 800c314:	edc3 7a00 	vstr	s15, [r3]
      gx += integralFBx;  // apply integral feedback
 800c318:	4b14      	ldr	r3, [pc, #80]	@ (800c36c <sensfusion6UpdateQImpl+0x2a8>)
 800c31a:	edd3 7a00 	vldr	s15, [r3]
 800c31e:	ed97 7a07 	vldr	s14, [r7, #28]
 800c322:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c326:	edc7 7a07 	vstr	s15, [r7, #28]
      gy += integralFBy;
 800c32a:	4b11      	ldr	r3, [pc, #68]	@ (800c370 <sensfusion6UpdateQImpl+0x2ac>)
 800c32c:	edd3 7a00 	vldr	s15, [r3]
 800c330:	ed97 7a06 	vldr	s14, [r7, #24]
 800c334:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c338:	edc7 7a06 	vstr	s15, [r7, #24]
      gz += integralFBz;
 800c33c:	4b0d      	ldr	r3, [pc, #52]	@ (800c374 <sensfusion6UpdateQImpl+0x2b0>)
 800c33e:	edd3 7a00 	vldr	s15, [r3]
 800c342:	ed97 7a05 	vldr	s14, [r7, #20]
 800c346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c34a:	edc7 7a05 	vstr	s15, [r7, #20]
 800c34e:	e01f      	b.n	800c390 <sensfusion6UpdateQImpl+0x2cc>
 800c350:	40490fdb 	.word	0x40490fdb
 800c354:	43340000 	.word	0x43340000
 800c358:	200086dc 	.word	0x200086dc
 800c35c:	200086e4 	.word	0x200086e4
 800c360:	20000028 	.word	0x20000028
 800c364:	200086e0 	.word	0x200086e0
 800c368:	20000024 	.word	0x20000024
 800c36c:	200086d0 	.word	0x200086d0
 800c370:	200086d4 	.word	0x200086d4
 800c374:	200086d8 	.word	0x200086d8
    }
    else
    {
      integralFBx = 0.0f; // prevent integral windup
 800c378:	4b9a      	ldr	r3, [pc, #616]	@ (800c5e4 <sensfusion6UpdateQImpl+0x520>)
 800c37a:	f04f 0200 	mov.w	r2, #0
 800c37e:	601a      	str	r2, [r3, #0]
      integralFBy = 0.0f;
 800c380:	4b99      	ldr	r3, [pc, #612]	@ (800c5e8 <sensfusion6UpdateQImpl+0x524>)
 800c382:	f04f 0200 	mov.w	r2, #0
 800c386:	601a      	str	r2, [r3, #0]
      integralFBz = 0.0f;
 800c388:	4b98      	ldr	r3, [pc, #608]	@ (800c5ec <sensfusion6UpdateQImpl+0x528>)
 800c38a:	f04f 0200 	mov.w	r2, #0
 800c38e:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional feedback
    gx += twoKp * halfex;
 800c390:	4b97      	ldr	r3, [pc, #604]	@ (800c5f0 <sensfusion6UpdateQImpl+0x52c>)
 800c392:	ed93 7a00 	vldr	s14, [r3]
 800c396:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c39e:	ed97 7a07 	vldr	s14, [r7, #28]
 800c3a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3a6:	edc7 7a07 	vstr	s15, [r7, #28]
    gy += twoKp * halfey;
 800c3aa:	4b91      	ldr	r3, [pc, #580]	@ (800c5f0 <sensfusion6UpdateQImpl+0x52c>)
 800c3ac:	ed93 7a00 	vldr	s14, [r3]
 800c3b0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c3b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b8:	ed97 7a06 	vldr	s14, [r7, #24]
 800c3bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3c0:	edc7 7a06 	vstr	s15, [r7, #24]
    gz += twoKp * halfez;
 800c3c4:	4b8a      	ldr	r3, [pc, #552]	@ (800c5f0 <sensfusion6UpdateQImpl+0x52c>)
 800c3c6:	ed93 7a00 	vldr	s14, [r3]
 800c3ca:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d2:	ed97 7a05 	vldr	s14, [r7, #20]
 800c3d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3da:	edc7 7a05 	vstr	s15, [r7, #20]
  }

  // Integrate rate of change of quaternion
  gx *= (0.5f * dt);   // pre-multiply common factors
 800c3de:	edd7 7a01 	vldr	s15, [r7, #4]
 800c3e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c3e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c3ea:	ed97 7a07 	vldr	s14, [r7, #28]
 800c3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3f2:	edc7 7a07 	vstr	s15, [r7, #28]
  gy *= (0.5f * dt);
 800c3f6:	edd7 7a01 	vldr	s15, [r7, #4]
 800c3fa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c3fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c402:	ed97 7a06 	vldr	s14, [r7, #24]
 800c406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c40a:	edc7 7a06 	vstr	s15, [r7, #24]
  gz *= (0.5f * dt);
 800c40e:	edd7 7a01 	vldr	s15, [r7, #4]
 800c412:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c41a:	ed97 7a05 	vldr	s14, [r7, #20]
 800c41e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c422:	edc7 7a05 	vstr	s15, [r7, #20]
  qa = qw;
 800c426:	4b73      	ldr	r3, [pc, #460]	@ (800c5f4 <sensfusion6UpdateQImpl+0x530>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	62bb      	str	r3, [r7, #40]	@ 0x28
  qb = qx;
 800c42c:	4b72      	ldr	r3, [pc, #456]	@ (800c5f8 <sensfusion6UpdateQImpl+0x534>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	627b      	str	r3, [r7, #36]	@ 0x24
  qc = qy;
 800c432:	4b72      	ldr	r3, [pc, #456]	@ (800c5fc <sensfusion6UpdateQImpl+0x538>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	623b      	str	r3, [r7, #32]
  qw += (-qb * gx - qc * gy - qz * gz);
 800c438:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c43c:	eeb1 7a67 	vneg.f32	s14, s15
 800c440:	edd7 7a07 	vldr	s15, [r7, #28]
 800c444:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c448:	edd7 6a08 	vldr	s13, [r7, #32]
 800c44c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c454:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c458:	4b69      	ldr	r3, [pc, #420]	@ (800c600 <sensfusion6UpdateQImpl+0x53c>)
 800c45a:	edd3 6a00 	vldr	s13, [r3]
 800c45e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c466:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c46a:	4b62      	ldr	r3, [pc, #392]	@ (800c5f4 <sensfusion6UpdateQImpl+0x530>)
 800c46c:	edd3 7a00 	vldr	s15, [r3]
 800c470:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c474:	4b5f      	ldr	r3, [pc, #380]	@ (800c5f4 <sensfusion6UpdateQImpl+0x530>)
 800c476:	edc3 7a00 	vstr	s15, [r3]
  qx += (qa * gx + qc * gz - qz * gy);
 800c47a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c47e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c482:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c486:	edd7 6a08 	vldr	s13, [r7, #32]
 800c48a:	edd7 7a05 	vldr	s15, [r7, #20]
 800c48e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c492:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c496:	4b5a      	ldr	r3, [pc, #360]	@ (800c600 <sensfusion6UpdateQImpl+0x53c>)
 800c498:	edd3 6a00 	vldr	s13, [r3]
 800c49c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c4a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c4a8:	4b53      	ldr	r3, [pc, #332]	@ (800c5f8 <sensfusion6UpdateQImpl+0x534>)
 800c4aa:	edd3 7a00 	vldr	s15, [r3]
 800c4ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4b2:	4b51      	ldr	r3, [pc, #324]	@ (800c5f8 <sensfusion6UpdateQImpl+0x534>)
 800c4b4:	edc3 7a00 	vstr	s15, [r3]
  qy += (qa * gy - qb * gz + qz * gx);
 800c4b8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c4bc:	edd7 7a06 	vldr	s15, [r7, #24]
 800c4c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4c4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c4c8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c4cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c4d4:	4b4a      	ldr	r3, [pc, #296]	@ (800c600 <sensfusion6UpdateQImpl+0x53c>)
 800c4d6:	edd3 6a00 	vldr	s13, [r3]
 800c4da:	edd7 7a07 	vldr	s15, [r7, #28]
 800c4de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4e6:	4b45      	ldr	r3, [pc, #276]	@ (800c5fc <sensfusion6UpdateQImpl+0x538>)
 800c4e8:	edd3 7a00 	vldr	s15, [r3]
 800c4ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4f0:	4b42      	ldr	r3, [pc, #264]	@ (800c5fc <sensfusion6UpdateQImpl+0x538>)
 800c4f2:	edc3 7a00 	vstr	s15, [r3]
  qz += (qa * gz + qb * gy - qc * gx);
 800c4f6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c4fa:	edd7 7a05 	vldr	s15, [r7, #20]
 800c4fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c502:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c506:	edd7 7a06 	vldr	s15, [r7, #24]
 800c50a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c50e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c512:	edd7 6a08 	vldr	s13, [r7, #32]
 800c516:	edd7 7a07 	vldr	s15, [r7, #28]
 800c51a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c51e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c522:	4b37      	ldr	r3, [pc, #220]	@ (800c600 <sensfusion6UpdateQImpl+0x53c>)
 800c524:	edd3 7a00 	vldr	s15, [r3]
 800c528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c52c:	4b34      	ldr	r3, [pc, #208]	@ (800c600 <sensfusion6UpdateQImpl+0x53c>)
 800c52e:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(qw * qw + qx * qx + qy * qy + qz * qz);
 800c532:	4b30      	ldr	r3, [pc, #192]	@ (800c5f4 <sensfusion6UpdateQImpl+0x530>)
 800c534:	ed93 7a00 	vldr	s14, [r3]
 800c538:	4b2e      	ldr	r3, [pc, #184]	@ (800c5f4 <sensfusion6UpdateQImpl+0x530>)
 800c53a:	edd3 7a00 	vldr	s15, [r3]
 800c53e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c542:	4b2d      	ldr	r3, [pc, #180]	@ (800c5f8 <sensfusion6UpdateQImpl+0x534>)
 800c544:	edd3 6a00 	vldr	s13, [r3]
 800c548:	4b2b      	ldr	r3, [pc, #172]	@ (800c5f8 <sensfusion6UpdateQImpl+0x534>)
 800c54a:	edd3 7a00 	vldr	s15, [r3]
 800c54e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c552:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c556:	4b29      	ldr	r3, [pc, #164]	@ (800c5fc <sensfusion6UpdateQImpl+0x538>)
 800c558:	edd3 6a00 	vldr	s13, [r3]
 800c55c:	4b27      	ldr	r3, [pc, #156]	@ (800c5fc <sensfusion6UpdateQImpl+0x538>)
 800c55e:	edd3 7a00 	vldr	s15, [r3]
 800c562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c566:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c56a:	4b25      	ldr	r3, [pc, #148]	@ (800c600 <sensfusion6UpdateQImpl+0x53c>)
 800c56c:	edd3 6a00 	vldr	s13, [r3]
 800c570:	4b23      	ldr	r3, [pc, #140]	@ (800c600 <sensfusion6UpdateQImpl+0x53c>)
 800c572:	edd3 7a00 	vldr	s15, [r3]
 800c576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c57a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c57e:	eeb0 0a67 	vmov.f32	s0, s15
 800c582:	f000 f929 	bl	800c7d8 <invSqrt>
 800c586:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
  qw *= recipNorm;
 800c58a:	4b1a      	ldr	r3, [pc, #104]	@ (800c5f4 <sensfusion6UpdateQImpl+0x530>)
 800c58c:	ed93 7a00 	vldr	s14, [r3]
 800c590:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800c594:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c598:	4b16      	ldr	r3, [pc, #88]	@ (800c5f4 <sensfusion6UpdateQImpl+0x530>)
 800c59a:	edc3 7a00 	vstr	s15, [r3]
  qx *= recipNorm;
 800c59e:	4b16      	ldr	r3, [pc, #88]	@ (800c5f8 <sensfusion6UpdateQImpl+0x534>)
 800c5a0:	ed93 7a00 	vldr	s14, [r3]
 800c5a4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800c5a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ac:	4b12      	ldr	r3, [pc, #72]	@ (800c5f8 <sensfusion6UpdateQImpl+0x534>)
 800c5ae:	edc3 7a00 	vstr	s15, [r3]
  qy *= recipNorm;
 800c5b2:	4b12      	ldr	r3, [pc, #72]	@ (800c5fc <sensfusion6UpdateQImpl+0x538>)
 800c5b4:	ed93 7a00 	vldr	s14, [r3]
 800c5b8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800c5bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5c0:	4b0e      	ldr	r3, [pc, #56]	@ (800c5fc <sensfusion6UpdateQImpl+0x538>)
 800c5c2:	edc3 7a00 	vstr	s15, [r3]
  qz *= recipNorm;
 800c5c6:	4b0e      	ldr	r3, [pc, #56]	@ (800c600 <sensfusion6UpdateQImpl+0x53c>)
 800c5c8:	ed93 7a00 	vldr	s14, [r3]
 800c5cc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800c5d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5d4:	4b0a      	ldr	r3, [pc, #40]	@ (800c600 <sensfusion6UpdateQImpl+0x53c>)
 800c5d6:	edc3 7a00 	vstr	s15, [r3]
}
 800c5da:	bf00      	nop
 800c5dc:	3748      	adds	r7, #72	@ 0x48
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	200086d0 	.word	0x200086d0
 800c5e8:	200086d4 	.word	0x200086d4
 800c5ec:	200086d8 	.word	0x200086d8
 800c5f0:	20000020 	.word	0x20000020
 800c5f4:	20000028 	.word	0x20000028
 800c5f8:	200086dc 	.word	0x200086dc
 800c5fc:	200086e0 	.word	0x200086e0
 800c600:	200086e4 	.word	0x200086e4

0800c604 <sensfusion6GetQuaternion>:
#endif

void sensfusion6GetQuaternion(float* q_x, float* q_y, float* q_z, float* q_w)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
 800c610:	603b      	str	r3, [r7, #0]
  *q_x = qx;
 800c612:	4b0b      	ldr	r3, [pc, #44]	@ (800c640 <sensfusion6GetQuaternion+0x3c>)
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	601a      	str	r2, [r3, #0]
  *q_y = qy;
 800c61a:	4b0a      	ldr	r3, [pc, #40]	@ (800c644 <sensfusion6GetQuaternion+0x40>)
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	601a      	str	r2, [r3, #0]
  *q_z = qz;
 800c622:	4b09      	ldr	r3, [pc, #36]	@ (800c648 <sensfusion6GetQuaternion+0x44>)
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	601a      	str	r2, [r3, #0]
  *q_w = qw;
 800c62a:	4b08      	ldr	r3, [pc, #32]	@ (800c64c <sensfusion6GetQuaternion+0x48>)
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	601a      	str	r2, [r3, #0]
}
 800c632:	bf00      	nop
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	200086dc 	.word	0x200086dc
 800c644:	200086e0 	.word	0x200086e0
 800c648:	200086e4 	.word	0x200086e4
 800c64c:	20000028 	.word	0x20000028

0800c650 <sensfusion6GetEulerRPY>:

void sensfusion6GetEulerRPY(float* roll, float* pitch, float* yaw)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b088      	sub	sp, #32
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
  float gx = gravX;
 800c65c:	4b44      	ldr	r3, [pc, #272]	@ (800c770 <sensfusion6GetEulerRPY+0x120>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	61fb      	str	r3, [r7, #28]
  float gy = gravY;
 800c662:	4b44      	ldr	r3, [pc, #272]	@ (800c774 <sensfusion6GetEulerRPY+0x124>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	61bb      	str	r3, [r7, #24]
  float gz = gravZ;
 800c668:	4b43      	ldr	r3, [pc, #268]	@ (800c778 <sensfusion6GetEulerRPY+0x128>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	617b      	str	r3, [r7, #20]

  if (gx>1) gx=1;
 800c66e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c672:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c67e:	dd02      	ble.n	800c686 <sensfusion6GetEulerRPY+0x36>
 800c680:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800c684:	61fb      	str	r3, [r7, #28]
  if (gx<-1) gx=-1;
 800c686:	edd7 7a07 	vldr	s15, [r7, #28]
 800c68a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c68e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c696:	d501      	bpl.n	800c69c <sensfusion6GetEulerRPY+0x4c>
 800c698:	4b38      	ldr	r3, [pc, #224]	@ (800c77c <sensfusion6GetEulerRPY+0x12c>)
 800c69a:	61fb      	str	r3, [r7, #28]

  *yaw = -atan2f(2*(qw*qz + qx*qy), (+1.0f - 2.0f * (qy*qy + qz*qz))) * 180 / M_PI_F;
 800c69c:	4b38      	ldr	r3, [pc, #224]	@ (800c780 <sensfusion6GetEulerRPY+0x130>)
 800c69e:	ed93 7a00 	vldr	s14, [r3]
 800c6a2:	4b38      	ldr	r3, [pc, #224]	@ (800c784 <sensfusion6GetEulerRPY+0x134>)
 800c6a4:	edd3 7a00 	vldr	s15, [r3]
 800c6a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6ac:	4b36      	ldr	r3, [pc, #216]	@ (800c788 <sensfusion6GetEulerRPY+0x138>)
 800c6ae:	edd3 6a00 	vldr	s13, [r3]
 800c6b2:	4b36      	ldr	r3, [pc, #216]	@ (800c78c <sensfusion6GetEulerRPY+0x13c>)
 800c6b4:	edd3 7a00 	vldr	s15, [r3]
 800c6b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6c0:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800c6c4:	4b31      	ldr	r3, [pc, #196]	@ (800c78c <sensfusion6GetEulerRPY+0x13c>)
 800c6c6:	ed93 7a00 	vldr	s14, [r3]
 800c6ca:	4b30      	ldr	r3, [pc, #192]	@ (800c78c <sensfusion6GetEulerRPY+0x13c>)
 800c6cc:	edd3 7a00 	vldr	s15, [r3]
 800c6d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6d4:	4b2b      	ldr	r3, [pc, #172]	@ (800c784 <sensfusion6GetEulerRPY+0x134>)
 800c6d6:	edd3 6a00 	vldr	s13, [r3]
 800c6da:	4b2a      	ldr	r3, [pc, #168]	@ (800c784 <sensfusion6GetEulerRPY+0x134>)
 800c6dc:	edd3 7a00 	vldr	s15, [r3]
 800c6e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c6ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c6f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6f4:	eef0 0a67 	vmov.f32	s1, s15
 800c6f8:	eeb0 0a46 	vmov.f32	s0, s12
 800c6fc:	f00b f9f2 	bl	8017ae4 <atan2f>
 800c700:	eef0 7a40 	vmov.f32	s15, s0
 800c704:	eef1 7a67 	vneg.f32	s15, s15
 800c708:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800c790 <sensfusion6GetEulerRPY+0x140>
 800c70c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c710:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800c794 <sensfusion6GetEulerRPY+0x144>
 800c714:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	edc3 7a00 	vstr	s15, [r3]
  *pitch = asinf(gx) * 180 / M_PI_F; //Pitch seems to be inverted
 800c71e:	ed97 0a07 	vldr	s0, [r7, #28]
 800c722:	f00b f9b3 	bl	8017a8c <asinf>
 800c726:	eef0 7a40 	vmov.f32	s15, s0
 800c72a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c790 <sensfusion6GetEulerRPY+0x140>
 800c72e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c732:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800c794 <sensfusion6GetEulerRPY+0x144>
 800c736:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	edc3 7a00 	vstr	s15, [r3]
  *roll = atan2f(gy, gz) * 180 / M_PI_F;
 800c740:	edd7 0a05 	vldr	s1, [r7, #20]
 800c744:	ed97 0a06 	vldr	s0, [r7, #24]
 800c748:	f00b f9cc 	bl	8017ae4 <atan2f>
 800c74c:	eef0 7a40 	vmov.f32	s15, s0
 800c750:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800c790 <sensfusion6GetEulerRPY+0x140>
 800c754:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c758:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c794 <sensfusion6GetEulerRPY+0x144>
 800c75c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	edc3 7a00 	vstr	s15, [r3]
}
 800c766:	bf00      	nop
 800c768:	3720      	adds	r7, #32
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	200086e8 	.word	0x200086e8
 800c774:	200086ec 	.word	0x200086ec
 800c778:	200086f0 	.word	0x200086f0
 800c77c:	bf800000 	.word	0xbf800000
 800c780:	20000028 	.word	0x20000028
 800c784:	200086e4 	.word	0x200086e4
 800c788:	200086dc 	.word	0x200086dc
 800c78c:	200086e0 	.word	0x200086e0
 800c790:	43340000 	.word	0x43340000
 800c794:	40490fdb 	.word	0x40490fdb

0800c798 <sensfusion6GetAccZWithoutGravity>:

float sensfusion6GetAccZWithoutGravity(const float ax, const float ay, const float az)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	ed87 0a03 	vstr	s0, [r7, #12]
 800c7a2:	edc7 0a02 	vstr	s1, [r7, #8]
 800c7a6:	ed87 1a01 	vstr	s2, [r7, #4]
  return sensfusion6GetAccZ(ax, ay, az) - baseZacc;
 800c7aa:	ed97 1a01 	vldr	s2, [r7, #4]
 800c7ae:	edd7 0a02 	vldr	s1, [r7, #8]
 800c7b2:	ed97 0a03 	vldr	s0, [r7, #12]
 800c7b6:	f000 f84b 	bl	800c850 <sensfusion6GetAccZ>
 800c7ba:	eeb0 7a40 	vmov.f32	s14, s0
 800c7be:	4b05      	ldr	r3, [pc, #20]	@ (800c7d4 <sensfusion6GetAccZWithoutGravity+0x3c>)
 800c7c0:	edd3 7a00 	vldr	s15, [r3]
 800c7c4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800c7c8:	eeb0 0a67 	vmov.f32	s0, s15
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	2000002c 	.word	0x2000002c

0800c7d8 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
float invSqrt(float x)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b087      	sub	sp, #28
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 800c7e2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c7ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c7ee:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	613b      	str	r3, [r7, #16]
  long i = *(long*)&y;
 800c7f6:	f107 0310 	add.w	r3, r7, #16
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i>>1);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	105a      	asrs	r2, r3, #1
 800c802:	4b12      	ldr	r3, [pc, #72]	@ (800c84c <invSqrt+0x74>)
 800c804:	1a9b      	subs	r3, r3, r2
 800c806:	60fb      	str	r3, [r7, #12]
  y = *(float*)&i;
 800c808:	f107 030c 	add.w	r3, r7, #12
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 800c810:	ed97 7a04 	vldr	s14, [r7, #16]
 800c814:	edd7 7a05 	vldr	s15, [r7, #20]
 800c818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c81c:	edd7 7a04 	vldr	s15, [r7, #16]
 800c820:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c824:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800c828:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c82c:	edd7 7a04 	vldr	s15, [r7, #16]
 800c830:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c834:	edc7 7a04 	vstr	s15, [r7, #16]
  return y;
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	ee07 3a90 	vmov	s15, r3
}
 800c83e:	eeb0 0a67 	vmov.f32	s0, s15
 800c842:	371c      	adds	r7, #28
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr
 800c84c:	5f3759df 	.word	0x5f3759df

0800c850 <sensfusion6GetAccZ>:

static float sensfusion6GetAccZ(const float ax, const float ay, const float az)
{
 800c850:	b480      	push	{r7}
 800c852:	b085      	sub	sp, #20
 800c854:	af00      	add	r7, sp, #0
 800c856:	ed87 0a03 	vstr	s0, [r7, #12]
 800c85a:	edc7 0a02 	vstr	s1, [r7, #8]
 800c85e:	ed87 1a01 	vstr	s2, [r7, #4]
  // return vertical acceleration
  // (A dot G) / |G|,  (|G| = 1) -> (A dot G)
  return (ax * gravX + ay * gravY + az * gravZ);
 800c862:	4b10      	ldr	r3, [pc, #64]	@ (800c8a4 <sensfusion6GetAccZ+0x54>)
 800c864:	ed93 7a00 	vldr	s14, [r3]
 800c868:	edd7 7a03 	vldr	s15, [r7, #12]
 800c86c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c870:	4b0d      	ldr	r3, [pc, #52]	@ (800c8a8 <sensfusion6GetAccZ+0x58>)
 800c872:	edd3 6a00 	vldr	s13, [r3]
 800c876:	edd7 7a02 	vldr	s15, [r7, #8]
 800c87a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c87e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c882:	4b0a      	ldr	r3, [pc, #40]	@ (800c8ac <sensfusion6GetAccZ+0x5c>)
 800c884:	edd3 6a00 	vldr	s13, [r3]
 800c888:	edd7 7a01 	vldr	s15, [r7, #4]
 800c88c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c890:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800c894:	eeb0 0a67 	vmov.f32	s0, s15
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	200086e8 	.word	0x200086e8
 800c8a8:	200086ec 	.word	0x200086ec
 800c8ac:	200086f0 	.word	0x200086f0

0800c8b0 <estimatedGravityDirection>:

static void estimatedGravityDirection(float* gx, float* gy, float* gz)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
  *gx = 2 * (qx * qz - qw * qy);
 800c8bc:	4b2e      	ldr	r3, [pc, #184]	@ (800c978 <estimatedGravityDirection+0xc8>)
 800c8be:	ed93 7a00 	vldr	s14, [r3]
 800c8c2:	4b2e      	ldr	r3, [pc, #184]	@ (800c97c <estimatedGravityDirection+0xcc>)
 800c8c4:	edd3 7a00 	vldr	s15, [r3]
 800c8c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8cc:	4b2c      	ldr	r3, [pc, #176]	@ (800c980 <estimatedGravityDirection+0xd0>)
 800c8ce:	edd3 6a00 	vldr	s13, [r3]
 800c8d2:	4b2c      	ldr	r3, [pc, #176]	@ (800c984 <estimatedGravityDirection+0xd4>)
 800c8d4:	edd3 7a00 	vldr	s15, [r3]
 800c8d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	edc3 7a00 	vstr	s15, [r3]
  *gy = 2 * (qw * qx + qy * qz);
 800c8ea:	4b25      	ldr	r3, [pc, #148]	@ (800c980 <estimatedGravityDirection+0xd0>)
 800c8ec:	ed93 7a00 	vldr	s14, [r3]
 800c8f0:	4b21      	ldr	r3, [pc, #132]	@ (800c978 <estimatedGravityDirection+0xc8>)
 800c8f2:	edd3 7a00 	vldr	s15, [r3]
 800c8f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8fa:	4b22      	ldr	r3, [pc, #136]	@ (800c984 <estimatedGravityDirection+0xd4>)
 800c8fc:	edd3 6a00 	vldr	s13, [r3]
 800c900:	4b1e      	ldr	r3, [pc, #120]	@ (800c97c <estimatedGravityDirection+0xcc>)
 800c902:	edd3 7a00 	vldr	s15, [r3]
 800c906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c90a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c90e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	edc3 7a00 	vstr	s15, [r3]
  *gz = qw * qw - qx * qx - qy * qy + qz * qz;
 800c918:	4b19      	ldr	r3, [pc, #100]	@ (800c980 <estimatedGravityDirection+0xd0>)
 800c91a:	ed93 7a00 	vldr	s14, [r3]
 800c91e:	4b18      	ldr	r3, [pc, #96]	@ (800c980 <estimatedGravityDirection+0xd0>)
 800c920:	edd3 7a00 	vldr	s15, [r3]
 800c924:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c928:	4b13      	ldr	r3, [pc, #76]	@ (800c978 <estimatedGravityDirection+0xc8>)
 800c92a:	edd3 6a00 	vldr	s13, [r3]
 800c92e:	4b12      	ldr	r3, [pc, #72]	@ (800c978 <estimatedGravityDirection+0xc8>)
 800c930:	edd3 7a00 	vldr	s15, [r3]
 800c934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c938:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c93c:	4b11      	ldr	r3, [pc, #68]	@ (800c984 <estimatedGravityDirection+0xd4>)
 800c93e:	edd3 6a00 	vldr	s13, [r3]
 800c942:	4b10      	ldr	r3, [pc, #64]	@ (800c984 <estimatedGravityDirection+0xd4>)
 800c944:	edd3 7a00 	vldr	s15, [r3]
 800c948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c94c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c950:	4b0a      	ldr	r3, [pc, #40]	@ (800c97c <estimatedGravityDirection+0xcc>)
 800c952:	edd3 6a00 	vldr	s13, [r3]
 800c956:	4b09      	ldr	r3, [pc, #36]	@ (800c97c <estimatedGravityDirection+0xcc>)
 800c958:	edd3 7a00 	vldr	s15, [r3]
 800c95c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c960:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	edc3 7a00 	vstr	s15, [r3]
}
 800c96a:	bf00      	nop
 800c96c:	3714      	adds	r7, #20
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop
 800c978:	200086dc 	.word	0x200086dc
 800c97c:	200086e4 	.word	0x200086e4
 800c980:	20000028 	.word	0x20000028
 800c984:	200086e0 	.word	0x200086e0

0800c988 <quatcompress>:
#include <stdint.h>
#include <math.h>

// assumes input quaternion is normalized. will fail if not.
static inline uint32_t quatcompress(float const q[4])
{
 800c988:	b480      	push	{r7}
 800c98a:	b08b      	sub	sp, #44	@ 0x2c
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
	// we send the values of the quaternion's smallest 3 elements.
	unsigned i_largest = 0;
 800c990:	2300      	movs	r3, #0
 800c992:	627b      	str	r3, [r7, #36]	@ 0x24
	for (unsigned i = 1; i < 4; ++i) {
 800c994:	2301      	movs	r3, #1
 800c996:	623b      	str	r3, [r7, #32]
 800c998:	e019      	b.n	800c9ce <quatcompress+0x46>
		if (fabsf(q[i]) > fabsf(q[i_largest])) {
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	edd3 7a00 	vldr	s15, [r3]
 800c9a6:	eeb0 7ae7 	vabs.f32	s14, s15
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	edd3 7a00 	vldr	s15, [r3]
 800c9b6:	eef0 7ae7 	vabs.f32	s15, s15
 800c9ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c2:	dd01      	ble.n	800c9c8 <quatcompress+0x40>
			i_largest = i;
 800c9c4:	6a3b      	ldr	r3, [r7, #32]
 800c9c6:	627b      	str	r3, [r7, #36]	@ 0x24
	for (unsigned i = 1; i < 4; ++i) {
 800c9c8:	6a3b      	ldr	r3, [r7, #32]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	623b      	str	r3, [r7, #32]
 800c9ce:	6a3b      	ldr	r3, [r7, #32]
 800c9d0:	2b03      	cmp	r3, #3
 800c9d2:	d9e2      	bls.n	800c99a <quatcompress+0x12>
	}

	// since -q represents the same rotation as q,
	// transform the quaternion so the largest element is positive.
	// this avoids having to send its sign bit.
	unsigned negate = q[i_largest] < 0;
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	4413      	add	r3, r2
 800c9dc:	edd3 7a00 	vldr	s15, [r3]
 800c9e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e8:	bf4c      	ite	mi
 800c9ea:	2301      	movmi	r3, #1
 800c9ec:	2300      	movpl	r3, #0
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	617b      	str	r3, [r7, #20]

	// 1/sqrt(2) is the largest possible value 
	// of the second-largest element in a unit quaternion.

	// do compression using sign bit and 9-bit precision per element.
	uint32_t comp = i_largest;
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f4:	61fb      	str	r3, [r7, #28]
	for (unsigned i = 0; i < 4; ++i) {
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	61bb      	str	r3, [r7, #24]
 800c9fa:	e039      	b.n	800ca70 <quatcompress+0xe8>
		if (i != i_largest) {
 800c9fc:	69ba      	ldr	r2, [r7, #24]
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d032      	beq.n	800ca6a <quatcompress+0xe2>
			unsigned negbit = (q[i] < 0) ^ negate;
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	edd3 7a00 	vldr	s15, [r3]
 800ca10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ca14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca18:	bf4c      	ite	mi
 800ca1a:	2301      	movmi	r3, #1
 800ca1c:	2300      	movpl	r3, #0
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	461a      	mov	r2, r3
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	4053      	eors	r3, r2
 800ca26:	613b      	str	r3, [r7, #16]
			unsigned mag = ((1 << 9) - 1) * (fabsf(q[i]) / (float)M_SQRT1_2) + 0.5f;
 800ca28:	69bb      	ldr	r3, [r7, #24]
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	4413      	add	r3, r2
 800ca30:	edd3 7a00 	vldr	s15, [r3]
 800ca34:	eeb0 7ae7 	vabs.f32	s14, s15
 800ca38:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800ca84 <quatcompress+0xfc>
 800ca3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca40:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800ca88 <quatcompress+0x100>
 800ca44:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ca48:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ca4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca54:	ee17 3a90 	vmov	r3, s15
 800ca58:	60fb      	str	r3, [r7, #12]
			comp = (comp << 10) | (negbit << 9) | mag;
 800ca5a:	69fb      	ldr	r3, [r7, #28]
 800ca5c:	029a      	lsls	r2, r3, #10
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	025b      	lsls	r3, r3, #9
 800ca62:	4313      	orrs	r3, r2
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	61fb      	str	r3, [r7, #28]
	for (unsigned i = 0; i < 4; ++i) {
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	61bb      	str	r3, [r7, #24]
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	2b03      	cmp	r3, #3
 800ca74:	d9c2      	bls.n	800c9fc <quatcompress+0x74>
		}
	}

	return comp;
 800ca76:	69fb      	ldr	r3, [r7, #28]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	372c      	adds	r7, #44	@ 0x2c
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	3f3504f3 	.word	0x3f3504f3
 800ca88:	43ff8000 	.word	0x43ff8000

0800ca8c <calcSensorToOutputLatency>:
STATIC_MEM_TASK_ALLOC(stabilizerTask, STABILIZER_TASK_STACKSIZE);

static void stabilizerTask(void* param);

static void calcSensorToOutputLatency(const sensorData_t *sensorData)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  uint64_t outTimestamp = usecTimestamp();
 800ca94:	f7ff f8cc 	bl	800bc30 <usecTimestamp>
 800ca98:	e9c7 0102 	strd	r0, r1, [r7, #8]
  inToOutLatency = outTimestamp - sensorData->interruptTimestamp;
 800ca9c:	68b9      	ldr	r1, [r7, #8]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800caa4:	4613      	mov	r3, r2
 800caa6:	1acb      	subs	r3, r1, r3
 800caa8:	4a02      	ldr	r2, [pc, #8]	@ (800cab4 <calcSensorToOutputLatency+0x28>)
 800caaa:	6013      	str	r3, [r2, #0]
}
 800caac:	bf00      	nop
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	200086f8 	.word	0x200086f8

0800cab8 <compressState>:

static void compressState()
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b086      	sub	sp, #24
 800cabc:	af00      	add	r7, sp, #0
  stateCompressed.x = state.position.x * 1000.0f;
 800cabe:	4b6a      	ldr	r3, [pc, #424]	@ (800cc68 <compressState+0x1b0>)
 800cac0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800cac4:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800cc6c <compressState+0x1b4>
 800cac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cacc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cad0:	ee17 3a90 	vmov	r3, s15
 800cad4:	b21a      	sxth	r2, r3
 800cad6:	4b66      	ldr	r3, [pc, #408]	@ (800cc70 <compressState+0x1b8>)
 800cad8:	801a      	strh	r2, [r3, #0]
  stateCompressed.y = state.position.y * 1000.0f;
 800cada:	4b63      	ldr	r3, [pc, #396]	@ (800cc68 <compressState+0x1b0>)
 800cadc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800cae0:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800cc6c <compressState+0x1b4>
 800cae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800caec:	ee17 3a90 	vmov	r3, s15
 800caf0:	b21a      	sxth	r2, r3
 800caf2:	4b5f      	ldr	r3, [pc, #380]	@ (800cc70 <compressState+0x1b8>)
 800caf4:	805a      	strh	r2, [r3, #2]
  stateCompressed.z = state.position.z * 1000.0f;
 800caf6:	4b5c      	ldr	r3, [pc, #368]	@ (800cc68 <compressState+0x1b0>)
 800caf8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cafc:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800cc6c <compressState+0x1b4>
 800cb00:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb08:	ee17 3a90 	vmov	r3, s15
 800cb0c:	b21a      	sxth	r2, r3
 800cb0e:	4b58      	ldr	r3, [pc, #352]	@ (800cc70 <compressState+0x1b8>)
 800cb10:	809a      	strh	r2, [r3, #4]

  stateCompressed.vx = state.velocity.x * 1000.0f;
 800cb12:	4b55      	ldr	r3, [pc, #340]	@ (800cc68 <compressState+0x1b0>)
 800cb14:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800cb18:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800cc6c <compressState+0x1b4>
 800cb1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb24:	ee17 3a90 	vmov	r3, s15
 800cb28:	b21a      	sxth	r2, r3
 800cb2a:	4b51      	ldr	r3, [pc, #324]	@ (800cc70 <compressState+0x1b8>)
 800cb2c:	80da      	strh	r2, [r3, #6]
  stateCompressed.vy = state.velocity.y * 1000.0f;
 800cb2e:	4b4e      	ldr	r3, [pc, #312]	@ (800cc68 <compressState+0x1b0>)
 800cb30:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800cb34:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800cc6c <compressState+0x1b4>
 800cb38:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb40:	ee17 3a90 	vmov	r3, s15
 800cb44:	b21a      	sxth	r2, r3
 800cb46:	4b4a      	ldr	r3, [pc, #296]	@ (800cc70 <compressState+0x1b8>)
 800cb48:	811a      	strh	r2, [r3, #8]
  stateCompressed.vz = state.velocity.z * 1000.0f;
 800cb4a:	4b47      	ldr	r3, [pc, #284]	@ (800cc68 <compressState+0x1b0>)
 800cb4c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800cb50:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800cc6c <compressState+0x1b4>
 800cb54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb5c:	ee17 3a90 	vmov	r3, s15
 800cb60:	b21a      	sxth	r2, r3
 800cb62:	4b43      	ldr	r3, [pc, #268]	@ (800cc70 <compressState+0x1b8>)
 800cb64:	815a      	strh	r2, [r3, #10]

  stateCompressed.ax = state.acc.x * 9.81f * 1000.0f;
 800cb66:	4b40      	ldr	r3, [pc, #256]	@ (800cc68 <compressState+0x1b0>)
 800cb68:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800cb6c:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800cc74 <compressState+0x1bc>
 800cb70:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb74:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800cc6c <compressState+0x1b4>
 800cb78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb80:	ee17 3a90 	vmov	r3, s15
 800cb84:	b21a      	sxth	r2, r3
 800cb86:	4b3a      	ldr	r3, [pc, #232]	@ (800cc70 <compressState+0x1b8>)
 800cb88:	819a      	strh	r2, [r3, #12]
  stateCompressed.ay = state.acc.y * 9.81f * 1000.0f;
 800cb8a:	4b37      	ldr	r3, [pc, #220]	@ (800cc68 <compressState+0x1b0>)
 800cb8c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800cb90:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800cc74 <compressState+0x1bc>
 800cb94:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb98:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800cc6c <compressState+0x1b4>
 800cb9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cba4:	ee17 3a90 	vmov	r3, s15
 800cba8:	b21a      	sxth	r2, r3
 800cbaa:	4b31      	ldr	r3, [pc, #196]	@ (800cc70 <compressState+0x1b8>)
 800cbac:	81da      	strh	r2, [r3, #14]
  stateCompressed.az = (state.acc.z + 1) * 9.81f * 1000.0f;
 800cbae:	4b2e      	ldr	r3, [pc, #184]	@ (800cc68 <compressState+0x1b0>)
 800cbb0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800cbb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbbc:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800cc74 <compressState+0x1bc>
 800cbc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbc4:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800cc6c <compressState+0x1b4>
 800cbc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cbd0:	ee17 3a90 	vmov	r3, s15
 800cbd4:	b21a      	sxth	r2, r3
 800cbd6:	4b26      	ldr	r3, [pc, #152]	@ (800cc70 <compressState+0x1b8>)
 800cbd8:	821a      	strh	r2, [r3, #16]

  float const q[4] = {
    state.attitudeQuaternion.x,
 800cbda:	4b23      	ldr	r3, [pc, #140]	@ (800cc68 <compressState+0x1b0>)
 800cbdc:	691b      	ldr	r3, [r3, #16]
  float const q[4] = {
 800cbde:	607b      	str	r3, [r7, #4]
    state.attitudeQuaternion.y,
 800cbe0:	4b21      	ldr	r3, [pc, #132]	@ (800cc68 <compressState+0x1b0>)
 800cbe2:	695b      	ldr	r3, [r3, #20]
  float const q[4] = {
 800cbe4:	60bb      	str	r3, [r7, #8]
    state.attitudeQuaternion.z,
 800cbe6:	4b20      	ldr	r3, [pc, #128]	@ (800cc68 <compressState+0x1b0>)
 800cbe8:	699b      	ldr	r3, [r3, #24]
  float const q[4] = {
 800cbea:	60fb      	str	r3, [r7, #12]
    state.attitudeQuaternion.w};
 800cbec:	4b1e      	ldr	r3, [pc, #120]	@ (800cc68 <compressState+0x1b0>)
 800cbee:	69db      	ldr	r3, [r3, #28]
  float const q[4] = {
 800cbf0:	613b      	str	r3, [r7, #16]
  stateCompressed.quat = quatcompress(q);
 800cbf2:	1d3b      	adds	r3, r7, #4
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7ff fec7 	bl	800c988 <quatcompress>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	4b1c      	ldr	r3, [pc, #112]	@ (800cc70 <compressState+0x1b8>)
 800cc00:	615a      	str	r2, [r3, #20]

  float const deg2millirad = ((float)M_PI * 1000.0f) / 180.0f;
 800cc02:	4b1d      	ldr	r3, [pc, #116]	@ (800cc78 <compressState+0x1c0>)
 800cc04:	617b      	str	r3, [r7, #20]
  stateCompressed.rateRoll = sensorData.gyro.x * deg2millirad;
 800cc06:	4b1d      	ldr	r3, [pc, #116]	@ (800cc7c <compressState+0x1c4>)
 800cc08:	ed93 7a03 	vldr	s14, [r3, #12]
 800cc0c:	edd7 7a05 	vldr	s15, [r7, #20]
 800cc10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc18:	ee17 3a90 	vmov	r3, s15
 800cc1c:	b21a      	sxth	r2, r3
 800cc1e:	4b14      	ldr	r3, [pc, #80]	@ (800cc70 <compressState+0x1b8>)
 800cc20:	831a      	strh	r2, [r3, #24]
  stateCompressed.ratePitch = -sensorData.gyro.y * deg2millirad;
 800cc22:	4b16      	ldr	r3, [pc, #88]	@ (800cc7c <compressState+0x1c4>)
 800cc24:	edd3 7a04 	vldr	s15, [r3, #16]
 800cc28:	eeb1 7a67 	vneg.f32	s14, s15
 800cc2c:	edd7 7a05 	vldr	s15, [r7, #20]
 800cc30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc38:	ee17 3a90 	vmov	r3, s15
 800cc3c:	b21a      	sxth	r2, r3
 800cc3e:	4b0c      	ldr	r3, [pc, #48]	@ (800cc70 <compressState+0x1b8>)
 800cc40:	835a      	strh	r2, [r3, #26]
  stateCompressed.rateYaw = sensorData.gyro.z * deg2millirad;
 800cc42:	4b0e      	ldr	r3, [pc, #56]	@ (800cc7c <compressState+0x1c4>)
 800cc44:	ed93 7a05 	vldr	s14, [r3, #20]
 800cc48:	edd7 7a05 	vldr	s15, [r7, #20]
 800cc4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc54:	ee17 3a90 	vmov	r3, s15
 800cc58:	b21a      	sxth	r2, r3
 800cc5a:	4b05      	ldr	r3, [pc, #20]	@ (800cc70 <compressState+0x1b8>)
 800cc5c:	839a      	strh	r2, [r3, #28]
}
 800cc5e:	bf00      	nop
 800cc60:	3718      	adds	r7, #24
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	200087a8 	.word	0x200087a8
 800cc6c:	447a0000 	.word	0x447a0000
 800cc70:	20008818 	.word	0x20008818
 800cc74:	411cf5c3 	.word	0x411cf5c3
 800cc78:	418ba058 	.word	0x418ba058
 800cc7c:	20008770 	.word	0x20008770

0800cc80 <compressSetpoint>:

static void compressSetpoint()
{
 800cc80:	b480      	push	{r7}
 800cc82:	af00      	add	r7, sp, #0
  setpointCompressed.x = setpoint.position.x * 1000.0f;
 800cc84:	4b41      	ldr	r3, [pc, #260]	@ (800cd8c <compressSetpoint+0x10c>)
 800cc86:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800cc8a:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800cd90 <compressSetpoint+0x110>
 800cc8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc96:	ee17 3a90 	vmov	r3, s15
 800cc9a:	b21a      	sxth	r2, r3
 800cc9c:	4b3d      	ldr	r3, [pc, #244]	@ (800cd94 <compressSetpoint+0x114>)
 800cc9e:	801a      	strh	r2, [r3, #0]
  setpointCompressed.y = setpoint.position.y * 1000.0f;
 800cca0:	4b3a      	ldr	r3, [pc, #232]	@ (800cd8c <compressSetpoint+0x10c>)
 800cca2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800cca6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800cd90 <compressSetpoint+0x110>
 800ccaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ccae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ccb2:	ee17 3a90 	vmov	r3, s15
 800ccb6:	b21a      	sxth	r2, r3
 800ccb8:	4b36      	ldr	r3, [pc, #216]	@ (800cd94 <compressSetpoint+0x114>)
 800ccba:	805a      	strh	r2, [r3, #2]
  setpointCompressed.z = setpoint.position.z * 1000.0f;
 800ccbc:	4b33      	ldr	r3, [pc, #204]	@ (800cd8c <compressSetpoint+0x10c>)
 800ccbe:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800ccc2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800cd90 <compressSetpoint+0x110>
 800ccc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ccca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ccce:	ee17 3a90 	vmov	r3, s15
 800ccd2:	b21a      	sxth	r2, r3
 800ccd4:	4b2f      	ldr	r3, [pc, #188]	@ (800cd94 <compressSetpoint+0x114>)
 800ccd6:	809a      	strh	r2, [r3, #4]

  setpointCompressed.vx = setpoint.velocity.x * 1000.0f;
 800ccd8:	4b2c      	ldr	r3, [pc, #176]	@ (800cd8c <compressSetpoint+0x10c>)
 800ccda:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800ccde:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800cd90 <compressSetpoint+0x110>
 800cce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ccea:	ee17 3a90 	vmov	r3, s15
 800ccee:	b21a      	sxth	r2, r3
 800ccf0:	4b28      	ldr	r3, [pc, #160]	@ (800cd94 <compressSetpoint+0x114>)
 800ccf2:	80da      	strh	r2, [r3, #6]
  setpointCompressed.vy = setpoint.velocity.y * 1000.0f;
 800ccf4:	4b25      	ldr	r3, [pc, #148]	@ (800cd8c <compressSetpoint+0x10c>)
 800ccf6:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800ccfa:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800cd90 <compressSetpoint+0x110>
 800ccfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd06:	ee17 3a90 	vmov	r3, s15
 800cd0a:	b21a      	sxth	r2, r3
 800cd0c:	4b21      	ldr	r3, [pc, #132]	@ (800cd94 <compressSetpoint+0x114>)
 800cd0e:	811a      	strh	r2, [r3, #8]
  setpointCompressed.vz = setpoint.velocity.z * 1000.0f;
 800cd10:	4b1e      	ldr	r3, [pc, #120]	@ (800cd8c <compressSetpoint+0x10c>)
 800cd12:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800cd16:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800cd90 <compressSetpoint+0x110>
 800cd1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd22:	ee17 3a90 	vmov	r3, s15
 800cd26:	b21a      	sxth	r2, r3
 800cd28:	4b1a      	ldr	r3, [pc, #104]	@ (800cd94 <compressSetpoint+0x114>)
 800cd2a:	815a      	strh	r2, [r3, #10]

  setpointCompressed.ax = setpoint.acceleration.x * 1000.0f;
 800cd2c:	4b17      	ldr	r3, [pc, #92]	@ (800cd8c <compressSetpoint+0x10c>)
 800cd2e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800cd32:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800cd90 <compressSetpoint+0x110>
 800cd36:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd3e:	ee17 3a90 	vmov	r3, s15
 800cd42:	b21a      	sxth	r2, r3
 800cd44:	4b13      	ldr	r3, [pc, #76]	@ (800cd94 <compressSetpoint+0x114>)
 800cd46:	819a      	strh	r2, [r3, #12]
  setpointCompressed.ay = setpoint.acceleration.y * 1000.0f;
 800cd48:	4b10      	ldr	r3, [pc, #64]	@ (800cd8c <compressSetpoint+0x10c>)
 800cd4a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800cd4e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800cd90 <compressSetpoint+0x110>
 800cd52:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd5a:	ee17 3a90 	vmov	r3, s15
 800cd5e:	b21a      	sxth	r2, r3
 800cd60:	4b0c      	ldr	r3, [pc, #48]	@ (800cd94 <compressSetpoint+0x114>)
 800cd62:	81da      	strh	r2, [r3, #14]
  setpointCompressed.az = setpoint.acceleration.z * 1000.0f;
 800cd64:	4b09      	ldr	r3, [pc, #36]	@ (800cd8c <compressSetpoint+0x10c>)
 800cd66:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800cd6a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800cd90 <compressSetpoint+0x110>
 800cd6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd76:	ee17 3a90 	vmov	r3, s15
 800cd7a:	b21a      	sxth	r2, r3
 800cd7c:	4b05      	ldr	r3, [pc, #20]	@ (800cd94 <compressSetpoint+0x114>)
 800cd7e:	821a      	strh	r2, [r3, #16]
}
 800cd80:	bf00      	nop
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop
 800cd8c:	200086fc 	.word	0x200086fc
 800cd90:	447a0000 	.word	0x447a0000
 800cd94:	20008838 	.word	0x20008838

0800cd98 <stabilizerInit>:

void stabilizerInit(StateEstimatorType estimator)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b086      	sub	sp, #24
 800cd9c:	af04      	add	r7, sp, #16
 800cd9e:	4603      	mov	r3, r0
 800cda0:	71fb      	strb	r3, [r7, #7]
  if(isInit)
 800cda2:	4b13      	ldr	r3, [pc, #76]	@ (800cdf0 <stabilizerInit+0x58>)
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d11d      	bne.n	800cde6 <stabilizerInit+0x4e>
    return;
//  skip = 1;//JH

  sensorsInit();
 800cdaa:	f7fd fb5f 	bl	800a46c <sensorsInit>
//  skip = 1;// NJH

  stateEstimatorInit(estimator);
 800cdae:	79fb      	ldrb	r3, [r7, #7]
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f000 fa35 	bl	800d220 <stateEstimatorInit>

//  controllerInit(ControllerTypeAutoSelect);
//  powerDistributionInit();
//  motorsInit(platformConfigGetMotorMapping());
//  collisionAvoidanceInit();
  estimatorType = stateEstimatorGetType();
 800cdb6:	f000 fa7f 	bl	800d2b8 <stateEstimatorGetType>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	4b0d      	ldr	r3, [pc, #52]	@ (800cdf4 <stabilizerInit+0x5c>)
 800cdc0:	701a      	strb	r2, [r3, #0]
//  skip = 1;
//  controllerType = controllerGetType();

  STATIC_MEM_TASK_CREATE(stabilizerTask, stabilizerTask, STABILIZER_TASK_NAME, NULL, STABILIZER_TASK_PRI);
 800cdc2:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	4b0b      	ldr	r3, [pc, #44]	@ (800cdf8 <stabilizerInit+0x60>)
 800cdca:	9302      	str	r3, [sp, #8]
 800cdcc:	4b0b      	ldr	r3, [pc, #44]	@ (800cdfc <stabilizerInit+0x64>)
 800cdce:	9301      	str	r3, [sp, #4]
 800cdd0:	2305      	movs	r3, #5
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	490a      	ldr	r1, [pc, #40]	@ (800ce00 <stabilizerInit+0x68>)
 800cdd8:	480a      	ldr	r0, [pc, #40]	@ (800ce04 <stabilizerInit+0x6c>)
 800cdda:	f7f9 fb31 	bl	8006440 <xTaskCreateStatic>

  isInit = true;
 800cdde:	4b04      	ldr	r3, [pc, #16]	@ (800cdf0 <stabilizerInit+0x58>)
 800cde0:	2201      	movs	r2, #1
 800cde2:	701a      	strb	r2, [r3, #0]
 800cde4:	e000      	b.n	800cde8 <stabilizerInit+0x50>
    return;
 800cde6:	bf00      	nop
}
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	200086f6 	.word	0x200086f6
 800cdf4:	200087f8 	.word	0x200087f8
 800cdf8:	10001da4 	.word	0x10001da4
 800cdfc:	2000884c 	.word	0x2000884c
 800ce00:	0801a684 	.word	0x0801a684
 800ce04:	0800ce69 	.word	0x0800ce69

0800ce08 <stabilizerTest>:

bool stabilizerTest(void)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
  bool pass = true;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	71fb      	strb	r3, [r7, #7]

//  pass &= sensorsTest();
  pass &= stateEstimatorTest();
 800ce12:	f000 fa9b 	bl	800d34c <stateEstimatorTest>
 800ce16:	4603      	mov	r3, r0
 800ce18:	461a      	mov	r2, r3
 800ce1a:	79fb      	ldrb	r3, [r7, #7]
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	bf14      	ite	ne
 800ce22:	2301      	movne	r3, #1
 800ce24:	2300      	moveq	r3, #0
 800ce26:	71fb      	strb	r3, [r7, #7]
//  pass &= controllerTest();
//  pass &= powerDistributionTest();
//  pass &= motorsTest();
//  pass &= collisionAvoidanceTest();

  return pass;
 800ce28:	79fb      	ldrb	r3, [r7, #7]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <updateStateEstimatorAndControllerTypes>:
//  motorsSetRatio(MOTOR_M2, motorPwm->motors.m2);
//  motorsSetRatio(MOTOR_M3, motorPwm->motors.m3);
//  motorsSetRatio(MOTOR_M4, motorPwm->motors.m4);
//}

static void updateStateEstimatorAndControllerTypes() {
 800ce34:	b580      	push	{r7, lr}
 800ce36:	af00      	add	r7, sp, #0
  if (stateEstimatorGetType() != estimatorType) {
 800ce38:	f000 fa3e 	bl	800d2b8 <stateEstimatorGetType>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	461a      	mov	r2, r3
 800ce40:	4b08      	ldr	r3, [pc, #32]	@ (800ce64 <updateStateEstimatorAndControllerTypes+0x30>)
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d00a      	beq.n	800ce5e <updateStateEstimatorAndControllerTypes+0x2a>
    stateEstimatorSwitchTo(estimatorType);
 800ce48:	4b06      	ldr	r3, [pc, #24]	@ (800ce64 <updateStateEstimatorAndControllerTypes+0x30>)
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f000 fa07 	bl	800d260 <stateEstimatorSwitchTo>
    estimatorType = stateEstimatorGetType();
 800ce52:	f000 fa31 	bl	800d2b8 <stateEstimatorGetType>
 800ce56:	4603      	mov	r3, r0
 800ce58:	461a      	mov	r2, r3
 800ce5a:	4b02      	ldr	r3, [pc, #8]	@ (800ce64 <updateStateEstimatorAndControllerTypes+0x30>)
 800ce5c:	701a      	strb	r2, [r3, #0]

//  if (controllerGetType() != controllerType) {
//    controllerInit(controllerType);
//    controllerType = controllerGetType();
//  }
}
 800ce5e:	bf00      	nop
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	200087f8 	.word	0x200087f8

0800ce68 <stabilizerTask>:
/* The stabilizer loop runs at 1kHz. It is the
 * responsibility of the different functions to run slower by skipping call
 * (ie. returning without modifying the output structure).
 */
static void stabilizerTask(void* param)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b086      	sub	sp, #24
 800ce6c:	af02      	add	r7, sp, #8
 800ce6e:	6078      	str	r0, [r7, #4]
  stabilizerStep_t stabilizerStep;
  uint32_t lastWakeTime;
  vTaskSetApplicationTaskTag(0, (void*)TASK_STABILIZER_ID_NBR);
 800ce70:	2103      	movs	r1, #3
 800ce72:	2000      	movs	r0, #0
 800ce74:	f7f9 ff20 	bl	8006cb8 <vTaskSetApplicationTaskTag>

  //Wait for the system to be fully started to start stabilization loop
  systemWaitStart();
 800ce78:	f000 f93e 	bl	800d0f8 <systemWaitStart>

//  DEBUG_PRINT("Wait for sensor calibration...\n");

  // Wait for sensors to be calibrated
  lastWakeTime = xTaskGetTickCount();
 800ce7c:	f7f9 fe4e 	bl	8006b1c <xTaskGetTickCount>
 800ce80:	4603      	mov	r3, r0
 800ce82:	60bb      	str	r3, [r7, #8]
  while(!sensorsAreCalibrated()) {
 800ce84:	e005      	b.n	800ce92 <stabilizerTask+0x2a>
    vTaskDelayUntil(&lastWakeTime, F2T(RATE_MAIN_LOOP));
 800ce86:	f107 0308 	add.w	r3, r7, #8
 800ce8a:	2101      	movs	r1, #1
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7f9 fc7f 	bl	8006790 <vTaskDelayUntil>
  while(!sensorsAreCalibrated()) {
 800ce92:	f7fd fb0d 	bl	800a4b0 <sensorsAreCalibrated>
 800ce96:	4603      	mov	r3, r0
 800ce98:	f083 0301 	eor.w	r3, r3, #1
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1f1      	bne.n	800ce86 <stabilizerTask+0x1e>
  }
  // Initialize stabilizerStep to something else than 0
  stabilizerStep = 1;
 800cea2:	2301      	movs	r3, #1
 800cea4:	60fb      	str	r3, [r7, #12]


//  DEBUG_PRINT("Starting stabilizer loop\n");
  rateSupervisorInit(&rateSupervisorContext, xTaskGetTickCount(), M2T(1000), 997, 1003, 1);
 800cea6:	f7f9 fe39 	bl	8006b1c <xTaskGetTickCount>
 800ceaa:	4601      	mov	r1, r0
 800ceac:	2301      	movs	r3, #1
 800ceae:	9301      	str	r3, [sp, #4]
 800ceb0:	f240 33eb 	movw	r3, #1003	@ 0x3eb
 800ceb4:	9300      	str	r3, [sp, #0]
 800ceb6:	f240 33e5 	movw	r3, #997	@ 0x3e5
 800ceba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cebe:	480d      	ldr	r0, [pc, #52]	@ (800cef4 <stabilizerTask+0x8c>)
 800cec0:	f005 fc43 	bl	801274a <rateSupervisorInit>

  while(1) {
    // The sensor should unlock at 1kHz
    sensorsWaitDataReady();
 800cec4:	f7fd fb10 	bl	800a4e8 <sensorsWaitDataReady>

    // update sensorData struct (for logging variables)
    sensorsAcquire(&sensorData);
 800cec8:	480b      	ldr	r0, [pc, #44]	@ (800cef8 <stabilizerTask+0x90>)
 800ceca:	f7fd fafd 	bl	800a4c8 <sensorsAcquire>

//    if (healthShallWeRunTest()) {
//      healthRunTests(&sensorData);
//    }
//    else {
      updateStateEstimatorAndControllerTypes();
 800cece:	f7ff ffb1 	bl	800ce34 <updateStateEstimatorAndControllerTypes>

      stateEstimator(&state, stabilizerStep);
 800ced2:	68f9      	ldr	r1, [r7, #12]
 800ced4:	4809      	ldr	r0, [pc, #36]	@ (800cefc <stabilizerTask+0x94>)
 800ced6:	f000 fa4f 	bl	800d378 <stateEstimator>
//      } else {
//        motorsStop();
//      }

      // Compute compressed log formats
      compressState();
 800ceda:	f7ff fded 	bl	800cab8 <compressState>
      compressSetpoint();
 800cede:	f7ff fecf 	bl	800cc80 <compressSetpoint>
          && usddeckLoggingMode() == usddeckLoggingMode_SynchronousStabilizer
          && RATE_DO_EXECUTE(usddeckFrequency(), stabilizerStep)) {
        usddeckTriggerLogging();
      }
#endif
      calcSensorToOutputLatency(&sensorData);
 800cee2:	4805      	ldr	r0, [pc, #20]	@ (800cef8 <stabilizerTask+0x90>)
 800cee4:	f7ff fdd2 	bl	800ca8c <calcSensorToOutputLatency>
      stabilizerStep++;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3301      	adds	r3, #1
 800ceec:	60fb      	str	r3, [r7, #12]
    sensorsWaitDataReady();
 800ceee:	bf00      	nop
 800cef0:	e7e8      	b.n	800cec4 <stabilizerTask+0x5c>
 800cef2:	bf00      	nop
 800cef4:	200087fc 	.word	0x200087fc
 800cef8:	20008770 	.word	0x20008770
 800cefc:	200087a8 	.word	0x200087a8

0800cf00 <vApplicationGetIdleTaskMemory>:
 * used by the Idle task.
 */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize )
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
  NO_DMA_CCM_SAFE_ZERO_INIT static StaticTask_t xIdleTaskTCB;
  NO_DMA_CCM_SAFE_ZERO_INIT static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	4a07      	ldr	r2, [pc, #28]	@ (800cf2c <vApplicationGetIdleTaskMemory+0x2c>)
 800cf10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	4a06      	ldr	r2, [pc, #24]	@ (800cf30 <vApplicationGetIdleTaskMemory+0x30>)
 800cf16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2296      	movs	r2, #150	@ 0x96
 800cf1c:	601a      	str	r2, [r3, #0]
}
 800cf1e:	bf00      	nop
 800cf20:	3714      	adds	r7, #20
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop
 800cf2c:	10001e08 	.word	0x10001e08
 800cf30:	10001e6c 	.word	0x10001e6c

0800cf34 <vApplicationGetTimerTaskMemory>:
 * to provide the memory that is used by the Timer service task.
 */
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer,
                                     StackType_t **ppxTimerTaskStackBuffer,
                                     uint32_t *pulTimerTaskStackSize )
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
  NO_DMA_CCM_SAFE_ZERO_INIT static StaticTask_t xTimerTaskTCB;
  NO_DMA_CCM_SAFE_ZERO_INIT static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	4a07      	ldr	r2, [pc, #28]	@ (800cf60 <vApplicationGetTimerTaskMemory+0x2c>)
 800cf44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	4a06      	ldr	r2, [pc, #24]	@ (800cf64 <vApplicationGetTimerTaskMemory+0x30>)
 800cf4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800cf52:	601a      	str	r2, [r3, #0]
}
 800cf54:	bf00      	nop
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr
 800cf60:	100020c4 	.word	0x100020c4
 800cf64:	10002128 	.word	0x10002128

0800cf68 <systemLaunch>:

static void systemTask(void *arg);


void systemLaunch(void)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 800cf6e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800cf72:	461a      	mov	r2, r3
 800cf74:	4b06      	ldr	r3, [pc, #24]	@ (800cf90 <systemLaunch+0x28>)
 800cf76:	9302      	str	r3, [sp, #8]
 800cf78:	4b06      	ldr	r3, [pc, #24]	@ (800cf94 <systemLaunch+0x2c>)
 800cf7a:	9301      	str	r3, [sp, #4]
 800cf7c:	2302      	movs	r3, #2
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	2300      	movs	r3, #0
 800cf82:	4905      	ldr	r1, [pc, #20]	@ (800cf98 <systemLaunch+0x30>)
 800cf84:	4805      	ldr	r0, [pc, #20]	@ (800cf9c <systemLaunch+0x34>)
 800cf86:	f7f9 fa5b 	bl	8006440 <xTaskCreateStatic>
}
 800cf8a:	bf00      	nop
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	10002a88 	.word	0x10002a88
 800cf94:	20008f58 	.word	0x20008f58
 800cf98:	0801a690 	.word	0x0801a690
 800cf9c:	0800d015 	.word	0x0800d015

0800cfa0 <systemInit>:
void systemInit(void)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	af00      	add	r7, sp, #0

	if (isInit) return;
 800cfa4:	4b0c      	ldr	r3, [pc, #48]	@ (800cfd8 <systemInit+0x38>)
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d113      	bne.n	800cfd4 <systemInit+0x34>

	canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 800cfac:	490b      	ldr	r1, [pc, #44]	@ (800cfdc <systemInit+0x3c>)
 800cfae:	2001      	movs	r0, #1
 800cfb0:	f7f8 fc7d 	bl	80058ae <xQueueCreateMutexStatic>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	4a0a      	ldr	r2, [pc, #40]	@ (800cfe0 <systemInit+0x40>)
 800cfb8:	6013      	str	r3, [r2, #0]
	xSemaphoreTake(canStartMutex, portMAX_DELAY);
 800cfba:	4b09      	ldr	r3, [pc, #36]	@ (800cfe0 <systemInit+0x40>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f04f 31ff 	mov.w	r1, #4294967295
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7f8 ffac 	bl	8005f20 <xQueueSemaphoreTake>

	workerInit();
 800cfc8:	f000 f8de 	bl	800d188 <workerInit>

	isInit = true;
 800cfcc:	4b02      	ldr	r3, [pc, #8]	@ (800cfd8 <systemInit+0x38>)
 800cfce:	2201      	movs	r2, #1
 800cfd0:	701a      	strb	r2, [r3, #0]
 800cfd2:	e000      	b.n	800cfd6 <systemInit+0x36>
	if (isInit) return;
 800cfd4:	bf00      	nop
}
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	20008f54 	.word	0x20008f54
 800cfdc:	2000940c 	.word	0x2000940c
 800cfe0:	20009408 	.word	0x20009408

0800cfe4 <systemTest>:
bool systemTest(void)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
	bool pass=isInit;
 800cfea:	4b09      	ldr	r3, [pc, #36]	@ (800d010 <systemTest+0x2c>)
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	71fb      	strb	r3, [r7, #7]
	pass &= workerTest();
 800cff0:	f000 f8e8 	bl	800d1c4 <workerTest>
 800cff4:	4603      	mov	r3, r0
 800cff6:	461a      	mov	r2, r3
 800cff8:	79fb      	ldrb	r3, [r7, #7]
 800cffa:	4013      	ands	r3, r2
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	bf14      	ite	ne
 800d000:	2301      	movne	r3, #1
 800d002:	2300      	moveq	r3, #0
 800d004:	71fb      	strb	r3, [r7, #7]

	return pass;
 800d006:	79fb      	ldrb	r3, [r7, #7]
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	20008f54 	.word	0x20008f54

0800d014 <systemTask>:
void systemTask(void *arg) {
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
	bool pass = true;
 800d01c:	2301      	movs	r3, #1
 800d01e:	73fb      	strb	r3, [r7, #15]
//	counter += 1; // JUMP HERE
	ledInit();
 800d020:	f7fc fc58 	bl	80098d4 <ledInit>
//		vTaskDelay(1);
//	}
//	HAL_Init();
	//JH

	usecTimerInit();
 800d024:	f7fe fdcc 	bl	800bbc0 <usecTimerInit>
	GPIO_Init();
 800d028:	f7fc faf2 	bl	8009610 <GPIO_Init>
	TIM3_DMA_Init();
 800d02c:	f7fd f800 	bl	800a030 <TIM3_DMA_Init>
	TIM4_Init();
 800d030:	f7fd f836 	bl	800a0a0 <TIM4_Init>
	TIM3_Init();
 800d034:	f7fc fe24 	bl	8009c80 <TIM3_Init>
	hal_dshot_init(DSHOT600);
 800d038:	2002      	movs	r0, #2
 800d03a:	f7fc f8e9 	bl	8009210 <hal_dshot_init>
	vTaskDelay(10);
 800d03e:	200a      	movs	r0, #10
 800d040:	f7f9 fc1c 	bl	800687c <vTaskDelay>
	// JH
	HAL_TIM_Base_Start_IT(&htim4);
 800d044:	4824      	ldr	r0, [pc, #144]	@ (800d0d8 <systemTask+0xc4>)
 800d046:	f7f7 fa47 	bl	80044d8 <HAL_TIM_Base_Start_IT>
	//NJH

	I2C1_Init();
 800d04a:	f7fc fb17 	bl	800967c <I2C1_Init>
	I2C2_Init();
 800d04e:	f7fc fb43 	bl	80096d8 <I2C2_Init>
//	MX_UART4_Init();
//	MX_USART1_UART_Init();
//	MX_USART2_UART_Init();
//	MX_USART3_UART_Init();

	systemInit();
 800d052:	f7ff ffa5 	bl	800cfa0 <systemInit>
//	counter +=1 ; // JUMP HERE

	StateEstimatorType estimator = StateEstimatorTypeAutoSelect;
 800d056:	2300      	movs	r3, #0
 800d058:	73bb      	strb	r3, [r7, #14]
	//Macro-Work when we defind its
#ifdef CONFIG_ESTIMATOR_KALMAN_ENABLE_TEST
//	counter = 1;
	estimatorKalmanTaskInit();
 800d05a:	f000 fae9 	bl	800d630 <estimatorKalmanTaskInit>
//	counter = 2;
	//JH
#endif
	zRanger2Init();
 800d05e:	f7fb fb35 	bl	80086cc <zRanger2Init>
	//Test LED
	ledblink_test();
 800d062:	f7fd f9bb 	bl	800a3dc <ledblink_test>
	motors_test();
 800d066:	f7fd f9e3 	bl	800a430 <motors_test>
//	counter +=1; // Not JUMP HERE
//	flowTofInit();
//	tofInit();

//	estimator = deckGetRequiredEstimator();
	stabilizerInit(estimator);
 800d06a:	7bbb      	ldrb	r3, [r7, #14]
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7ff fe93 	bl	800cd98 <stabilizerInit>
//	counter +=1 ;// NJH
	if (systemTest() == false) {
 800d072:	f7ff ffb7 	bl	800cfe4 <systemTest>
 800d076:	4603      	mov	r3, r0
 800d078:	f083 0301 	eor.w	r3, r3, #1
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <systemTask+0x72>
		pass = false;
 800d082:	2300      	movs	r3, #0
 800d084:	73fb      	strb	r3, [r7, #15]
	}

	if ( stabilizerTest() == false )
 800d086:	f7ff febf 	bl	800ce08 <stabilizerTest>
 800d08a:	4603      	mov	r3, r0
 800d08c:	f083 0301 	eor.w	r3, r3, #1
 800d090:	b2db      	uxtb	r3, r3
 800d092:	2b00      	cmp	r3, #0
 800d094:	d001      	beq.n	800d09a <systemTask+0x86>
	{
		pass = false;
 800d096:	2300      	movs	r3, #0
 800d098:	73fb      	strb	r3, [r7, #15]
	}

#ifdef CONFIG_ESTIMATOR_KALMAN_ENABLE_TEST
//	counter = 3;
	//NJH
if (estimatorKalmanTaskTest() == false) {
 800d09a:	f000 fb11 	bl	800d6c0 <estimatorKalmanTaskTest>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	f083 0301 	eor.w	r3, r3, #1
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d001      	beq.n	800d0ae <systemTask+0x9a>
//	counter = 1;
	//NJH
  pass = false;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	73fb      	strb	r3, [r7, #15]
}
#endif

	vTaskDelay(100);
 800d0ae:	2064      	movs	r0, #100	@ 0x64
 800d0b0:	f7f9 fbe4 	bl	800687c <vTaskDelay>
	ledSet(1);
 800d0b4:	2001      	movs	r0, #1
 800d0b6:	f7fc fc4b 	bl	8009950 <ledSet>
	if (pass) {
 800d0ba:	7bfb      	ldrb	r3, [r7, #15]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d001      	beq.n	800d0c4 <systemTask+0xb0>
		systemStart();
 800d0c0:	f000 f80c 	bl	800d0dc <systemStart>
	}
	vTaskDelay(100);
 800d0c4:	2064      	movs	r0, #100	@ 0x64
 800d0c6:	f7f9 fbd9 	bl	800687c <vTaskDelay>
	workerLoop();
 800d0ca:	f000 f88b 	bl	800d1e4 <workerLoop>
	while(1)
	{

		vTaskDelay(1000);
 800d0ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d0d2:	f7f9 fbd3 	bl	800687c <vTaskDelay>
 800d0d6:	e7fa      	b.n	800d0ce <systemTask+0xba>
 800d0d8:	20007f24 	.word	0x20007f24

0800d0dc <systemStart>:
	}
}
void systemStart()
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	af00      	add	r7, sp, #0
	xSemaphoreGive(canStartMutex);
 800d0e0:	4b04      	ldr	r3, [pc, #16]	@ (800d0f4 <systemStart+0x18>)
 800d0e2:	6818      	ldr	r0, [r3, #0]
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	2100      	movs	r1, #0
 800d0ea:	f7f8 fbfb 	bl	80058e4 <xQueueGenericSend>
}
 800d0ee:	bf00      	nop
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	20009408 	.word	0x20009408

0800d0f8 <systemWaitStart>:
void systemWaitStart(void)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	af00      	add	r7, sp, #0
//	flage = 2;
	while (!isInit) vTaskDelay(2);
 800d0fc:	e002      	b.n	800d104 <systemWaitStart+0xc>
 800d0fe:	2002      	movs	r0, #2
 800d100:	f7f9 fbbc 	bl	800687c <vTaskDelay>
 800d104:	4b0b      	ldr	r3, [pc, #44]	@ (800d134 <systemWaitStart+0x3c>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	f083 0301 	eor.w	r3, r3, #1
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1f5      	bne.n	800d0fe <systemWaitStart+0x6>
//	flage = 2; // nan JUMP HERE
	xSemaphoreTake(canStartMutex, portMAX_DELAY);
 800d112:	4b09      	ldr	r3, [pc, #36]	@ (800d138 <systemWaitStart+0x40>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f04f 31ff 	mov.w	r1, #4294967295
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f8 ff00 	bl	8005f20 <xQueueSemaphoreTake>
	xSemaphoreGive(canStartMutex);
 800d120:	4b05      	ldr	r3, [pc, #20]	@ (800d138 <systemWaitStart+0x40>)
 800d122:	6818      	ldr	r0, [r3, #0]
 800d124:	2300      	movs	r3, #0
 800d126:	2200      	movs	r2, #0
 800d128:	2100      	movs	r1, #0
 800d12a:	f7f8 fbdb 	bl	80058e4 <xQueueGenericSend>
}
 800d12e:	bf00      	nop
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	20008f54 	.word	0x20008f54
 800d138:	20009408 	.word	0x20009408

0800d13c <vApplicationIdleHook>:


void vApplicationIdleHook(void) {
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0

	static uint32_t tickOfLatestWatchdogReset = M2T(0);

	portTickType tickCount = xTaskGetTickCount();
 800d142:	f7f9 fceb 	bl	8006b1c <xTaskGetTickCount>
 800d146:	6078      	str	r0, [r7, #4]

	if (tickCount - tickOfLatestWatchdogReset > M2T(80)) {
 800d148:	4b06      	ldr	r3, [pc, #24]	@ (800d164 <vApplicationIdleHook+0x28>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	1ad3      	subs	r3, r2, r3
 800d150:	2b50      	cmp	r3, #80	@ 0x50
 800d152:	d902      	bls.n	800d15a <vApplicationIdleHook+0x1e>
		tickOfLatestWatchdogReset = tickCount;
 800d154:	4a03      	ldr	r2, [pc, #12]	@ (800d164 <vApplicationIdleHook+0x28>)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6013      	str	r3, [r2, #0]
//		watchdogReset();
	}

}
 800d15a:	bf00      	nop
 800d15c:	3708      	adds	r7, #8
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	2000945c 	.word	0x2000945c

0800d168 <vApplicationStackOverflowHook>:

#if ( configCHECK_FOR_STACK_OVERFLOW > 0 )

    void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                        char * pcTaskName )
    {
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
        /* Check pcTaskName for the name of the offending task,
         * or pxCurrentTCB if pcTaskName has itself been corrupted. */
        ( void ) xTask;
        ( void ) pcTaskName;
    }
 800d172:	bf00      	nop
 800d174:	370c      	adds	r7, #12
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <vApplicationMallocFailedHook>:

#endif /* #if ( configCHECK_FOR_STACK_OVERFLOW > 0 ) */

void vApplicationMallocFailedHook( void ){
 800d17e:	b480      	push	{r7}
 800d180:	af00      	add	r7, sp, #0
	while(1);
 800d182:	bf00      	nop
 800d184:	e7fd      	b.n	800d182 <vApplicationMallocFailedHook+0x4>
	...

0800d188 <workerInit>:
static xQueueHandle workerQueue;

STATIC_MEM_QUEUE_ALLOC(workerQueue, WORKER_QUEUE_LENGTH, sizeof(struct worker_work));

void workerInit()
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af02      	add	r7, sp, #8
  if (workerQueue)
 800d18e:	4b0a      	ldr	r3, [pc, #40]	@ (800d1b8 <workerInit+0x30>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d10d      	bne.n	800d1b2 <workerInit+0x2a>
    return;

  workerQueue = STATIC_MEM_QUEUE_CREATE(workerQueue);
 800d196:	2305      	movs	r3, #5
 800d198:	4618      	mov	r0, r3
 800d19a:	2308      	movs	r3, #8
 800d19c:	4619      	mov	r1, r3
 800d19e:	2300      	movs	r3, #0
 800d1a0:	9300      	str	r3, [sp, #0]
 800d1a2:	4b06      	ldr	r3, [pc, #24]	@ (800d1bc <workerInit+0x34>)
 800d1a4:	4a06      	ldr	r2, [pc, #24]	@ (800d1c0 <workerInit+0x38>)
 800d1a6:	f7f8 fa89 	bl	80056bc <xQueueGenericCreateStatic>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	4a02      	ldr	r2, [pc, #8]	@ (800d1b8 <workerInit+0x30>)
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	e000      	b.n	800d1b4 <workerInit+0x2c>
    return;
 800d1b2:	bf00      	nop

}
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	20009460 	.word	0x20009460
 800d1bc:	10002b14 	.word	0x10002b14
 800d1c0:	10002aec 	.word	0x10002aec

0800d1c4 <workerTest>:

bool workerTest()
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	af00      	add	r7, sp, #0
  return (workerQueue != NULL);
 800d1c8:	4b05      	ldr	r3, [pc, #20]	@ (800d1e0 <workerTest+0x1c>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	bf14      	ite	ne
 800d1d0:	2301      	movne	r3, #1
 800d1d2:	2300      	moveq	r3, #0
 800d1d4:	b2db      	uxtb	r3, r3
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr
 800d1e0:	20009460 	.word	0x20009460

0800d1e4 <workerLoop>:

void workerLoop()
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
  struct worker_work work;

  if (!workerQueue)
 800d1ea:	4b0c      	ldr	r3, [pc, #48]	@ (800d21c <workerLoop+0x38>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00f      	beq.n	800d212 <workerLoop+0x2e>
    return;

  while (1)
  {
    xQueueReceive(workerQueue, &work, portMAX_DELAY);
 800d1f2:	4b0a      	ldr	r3, [pc, #40]	@ (800d21c <workerLoop+0x38>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7f8 fdaf 	bl	8005d60 <xQueueReceive>

    if (work.function)
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d0f4      	beq.n	800d1f2 <workerLoop+0xe>
      work.function(work.arg);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	4610      	mov	r0, r2
 800d20e:	4798      	blx	r3
    xQueueReceive(workerQueue, &work, portMAX_DELAY);
 800d210:	e7ef      	b.n	800d1f2 <workerLoop+0xe>
    return;
 800d212:	bf00      	nop
  }
}
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	20009460 	.word	0x20009460

0800d220 <stateEstimatorInit>:
        .name = "OutOfTree",
    },
#endif
};

void stateEstimatorInit(StateEstimatorType estimator) {
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af02      	add	r7, sp, #8
 800d226:	4603      	mov	r3, r0
 800d228:	71fb      	strb	r3, [r7, #7]
  measurementsQueue = STATIC_MEM_QUEUE_CREATE(measurementsQueue);
 800d22a:	2314      	movs	r3, #20
 800d22c:	4618      	mov	r0, r3
 800d22e:	2330      	movs	r3, #48	@ 0x30
 800d230:	4619      	mov	r1, r3
 800d232:	2300      	movs	r3, #0
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	4b07      	ldr	r3, [pc, #28]	@ (800d254 <stateEstimatorInit+0x34>)
 800d238:	4a07      	ldr	r2, [pc, #28]	@ (800d258 <stateEstimatorInit+0x38>)
 800d23a:	f7f8 fa3f 	bl	80056bc <xQueueGenericCreateStatic>
 800d23e:	4603      	mov	r3, r0
 800d240:	4a06      	ldr	r2, [pc, #24]	@ (800d25c <stateEstimatorInit+0x3c>)
 800d242:	6013      	str	r3, [r2, #0]
  stateEstimatorSwitchTo(estimator);
 800d244:	79fb      	ldrb	r3, [r7, #7]
 800d246:	4618      	mov	r0, r3
 800d248:	f000 f80a 	bl	800d260 <stateEstimatorSwitchTo>
}
 800d24c:	bf00      	nop
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	10002f24 	.word	0x10002f24
 800d258:	10002b64 	.word	0x10002b64
 800d25c:	20009468 	.word	0x20009468

0800d260 <stateEstimatorSwitchTo>:

void stateEstimatorSwitchTo(StateEstimatorType estimator) {
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	4603      	mov	r3, r0
 800d268:	71fb      	strb	r3, [r7, #7]
  if (estimator < 0 || estimator >= StateEstimatorType_COUNT) {
 800d26a:	79fb      	ldrb	r3, [r7, #7]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d81c      	bhi.n	800d2aa <stateEstimatorSwitchTo+0x4a>
    return;
  }

  StateEstimatorType newEstimator = estimator;
 800d270:	79fb      	ldrb	r3, [r7, #7]
 800d272:	73fb      	strb	r3, [r7, #15]

  if (StateEstimatorTypeAutoSelect == newEstimator) {
 800d274:	7bfb      	ldrb	r3, [r7, #15]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d101      	bne.n	800d27e <stateEstimatorSwitchTo+0x1e>
    newEstimator = DEFAULT_ESTIMATOR;
 800d27a:	2301      	movs	r3, #1
 800d27c:	73fb      	strb	r3, [r7, #15]
    #define ESTIMATOR StateEstimatorTypeComplementary
  #else
    #define ESTIMATOR StateEstimatorTypeAutoSelect
  #endif

  StateEstimatorType forcedEstimator = ESTIMATOR;
 800d27e:	2300      	movs	r3, #0
 800d280:	73bb      	strb	r3, [r7, #14]
  if (forcedEstimator != StateEstimatorTypeAutoSelect) {
 800d282:	7bbb      	ldrb	r3, [r7, #14]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d001      	beq.n	800d28c <stateEstimatorSwitchTo+0x2c>
//    DEBUG_PRINT("Estimator type forced\n");
    newEstimator = forcedEstimator;
 800d288:	7bbb      	ldrb	r3, [r7, #14]
 800d28a:	73fb      	strb	r3, [r7, #15]
  }

  initEstimator(newEstimator);
 800d28c:	7bfb      	ldrb	r3, [r7, #15]
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 f81e 	bl	800d2d0 <initEstimator>
  StateEstimatorType previousEstimator = currentEstimator;
 800d294:	4b07      	ldr	r3, [pc, #28]	@ (800d2b4 <stateEstimatorSwitchTo+0x54>)
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	737b      	strb	r3, [r7, #13]
  currentEstimator = newEstimator;
 800d29a:	4a06      	ldr	r2, [pc, #24]	@ (800d2b4 <stateEstimatorSwitchTo+0x54>)
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
 800d29e:	7013      	strb	r3, [r2, #0]
  deinitEstimator(previousEstimator);
 800d2a0:	7b7b      	ldrb	r3, [r7, #13]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 f832 	bl	800d30c <deinitEstimator>
 800d2a8:	e000      	b.n	800d2ac <stateEstimatorSwitchTo+0x4c>
    return;
 800d2aa:	bf00      	nop

//  DEBUG_PRINT("Using %s (%d) estimator\n", stateEstimatorGetName(), currentEstimator);
}
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	20009464 	.word	0x20009464

0800d2b8 <stateEstimatorGetType>:

StateEstimatorType stateEstimatorGetType(void) {
 800d2b8:	b480      	push	{r7}
 800d2ba:	af00      	add	r7, sp, #0
  return currentEstimator;
 800d2bc:	4b03      	ldr	r3, [pc, #12]	@ (800d2cc <stateEstimatorGetType+0x14>)
 800d2be:	781b      	ldrb	r3, [r3, #0]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	20009464 	.word	0x20009464

0800d2d0 <initEstimator>:

static void initEstimator(const StateEstimatorType estimator) {
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	71fb      	strb	r3, [r7, #7]
  if (estimatorFunctions[estimator].init) {
 800d2da:	79fa      	ldrb	r2, [r7, #7]
 800d2dc:	490a      	ldr	r1, [pc, #40]	@ (800d308 <initEstimator+0x38>)
 800d2de:	4613      	mov	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	4413      	add	r3, r2
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	440b      	add	r3, r1
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d008      	beq.n	800d300 <initEstimator+0x30>
    estimatorFunctions[estimator].init();
 800d2ee:	79fa      	ldrb	r2, [r7, #7]
 800d2f0:	4905      	ldr	r1, [pc, #20]	@ (800d308 <initEstimator+0x38>)
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	4413      	add	r3, r2
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	440b      	add	r3, r1
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4798      	blx	r3
  }
}
 800d300:	bf00      	nop
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	20000030 	.word	0x20000030

0800d30c <deinitEstimator>:

static void deinitEstimator(const StateEstimatorType estimator) {
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	4603      	mov	r3, r0
 800d314:	71fb      	strb	r3, [r7, #7]
  if (estimatorFunctions[estimator].deinit) {
 800d316:	79fa      	ldrb	r2, [r7, #7]
 800d318:	490b      	ldr	r1, [pc, #44]	@ (800d348 <deinitEstimator+0x3c>)
 800d31a:	4613      	mov	r3, r2
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	4413      	add	r3, r2
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	440b      	add	r3, r1
 800d324:	3304      	adds	r3, #4
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d009      	beq.n	800d340 <deinitEstimator+0x34>
    estimatorFunctions[estimator].deinit();
 800d32c:	79fa      	ldrb	r2, [r7, #7]
 800d32e:	4906      	ldr	r1, [pc, #24]	@ (800d348 <deinitEstimator+0x3c>)
 800d330:	4613      	mov	r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	4413      	add	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	440b      	add	r3, r1
 800d33a:	3304      	adds	r3, #4
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4798      	blx	r3
  }
}
 800d340:	bf00      	nop
 800d342:	3708      	adds	r7, #8
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	20000030 	.word	0x20000030

0800d34c <stateEstimatorTest>:

bool stateEstimatorTest(void) {
 800d34c:	b580      	push	{r7, lr}
 800d34e:	af00      	add	r7, sp, #0
  return estimatorFunctions[currentEstimator].test();
 800d350:	4b07      	ldr	r3, [pc, #28]	@ (800d370 <stateEstimatorTest+0x24>)
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	4619      	mov	r1, r3
 800d356:	4a07      	ldr	r2, [pc, #28]	@ (800d374 <stateEstimatorTest+0x28>)
 800d358:	460b      	mov	r3, r1
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	440b      	add	r3, r1
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	3308      	adds	r3, #8
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4798      	blx	r3
 800d368:	4603      	mov	r3, r0
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	20009464 	.word	0x20009464
 800d374:	20000030 	.word	0x20000030

0800d378 <stateEstimator>:

void stateEstimator(state_t *state, const stabilizerStep_t tick) {
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  estimatorFunctions[currentEstimator].update(state, tick);
 800d382:	4b09      	ldr	r3, [pc, #36]	@ (800d3a8 <stateEstimator+0x30>)
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	4619      	mov	r1, r3
 800d388:	4a08      	ldr	r2, [pc, #32]	@ (800d3ac <stateEstimator+0x34>)
 800d38a:	460b      	mov	r3, r1
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	440b      	add	r3, r1
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	4413      	add	r3, r2
 800d394:	330c      	adds	r3, #12
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6839      	ldr	r1, [r7, #0]
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	4798      	blx	r3
}
 800d39e:	bf00      	nop
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	20009464 	.word	0x20009464
 800d3ac:	20000030 	.word	0x20000030

0800d3b0 <estimatorEnqueue>:
const char* stateEstimatorGetName() {
  return estimatorFunctions[currentEstimator].name;
}


void estimatorEnqueue(const measurement_t *measurement) {
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b086      	sub	sp, #24
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  if (!measurementsQueue) {
 800d3b8:	4b19      	ldr	r3, [pc, #100]	@ (800d420 <estimatorEnqueue+0x70>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d02b      	beq.n	800d418 <estimatorEnqueue+0x68>
    return;
  }

  portBASE_TYPE result;
  bool isInInterrupt = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 800d3c0:	4b18      	ldr	r3, [pc, #96]	@ (800d424 <estimatorEnqueue+0x74>)
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	bf14      	ite	ne
 800d3cc:	2301      	movne	r3, #1
 800d3ce:	2300      	moveq	r3, #0
 800d3d0:	75fb      	strb	r3, [r7, #23]
  if (isInInterrupt) {
 800d3d2:	7dfb      	ldrb	r3, [r7, #23]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d016      	beq.n	800d406 <estimatorEnqueue+0x56>
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	60fb      	str	r3, [r7, #12]
    result = xQueueSendFromISR(measurementsQueue, measurement, &xHigherPriorityTaskWoken);
 800d3dc:	4b10      	ldr	r3, [pc, #64]	@ (800d420 <estimatorEnqueue+0x70>)
 800d3de:	6818      	ldr	r0, [r3, #0]
 800d3e0:	f107 020c 	add.w	r2, r7, #12
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	6879      	ldr	r1, [r7, #4]
 800d3e8:	f7f8 fb8a 	bl	8005b00 <xQueueGenericSendFromISR>
 800d3ec:	6138      	str	r0, [r7, #16]
    if (xHigherPriorityTaskWoken == pdTRUE) {
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d112      	bne.n	800d41a <estimatorEnqueue+0x6a>
      portYIELD();
 800d3f4:	4b0c      	ldr	r3, [pc, #48]	@ (800d428 <estimatorEnqueue+0x78>)
 800d3f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3fa:	601a      	str	r2, [r3, #0]
 800d3fc:	f3bf 8f4f 	dsb	sy
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	e009      	b.n	800d41a <estimatorEnqueue+0x6a>
    }
  } else {
    result = xQueueSend(measurementsQueue, measurement, 0);
 800d406:	4b06      	ldr	r3, [pc, #24]	@ (800d420 <estimatorEnqueue+0x70>)
 800d408:	6818      	ldr	r0, [r3, #0]
 800d40a:	2300      	movs	r3, #0
 800d40c:	2200      	movs	r2, #0
 800d40e:	6879      	ldr	r1, [r7, #4]
 800d410:	f7f8 fa68 	bl	80058e4 <xQueueGenericSend>
 800d414:	6138      	str	r0, [r7, #16]
 800d416:	e000      	b.n	800d41a <estimatorEnqueue+0x6a>
    return;
 800d418:	bf00      	nop
//    STATS_CNT_RATE_EVENT(&measurementAppendedCounter);
  } else {
//    STATS_CNT_RATE_EVENT(&measurementNotAppendedCounter);
  }

}
 800d41a:	3718      	adds	r7, #24
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	20009468 	.word	0x20009468
 800d424:	e000ed00 	.word	0xe000ed00
 800d428:	e000ed04 	.word	0xe000ed04

0800d42c <estimatorDequeue>:

bool estimatorDequeue(measurement_t *measurement) {
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  return pdTRUE == xQueueReceive(measurementsQueue, measurement, 0);
 800d434:	4b08      	ldr	r3, [pc, #32]	@ (800d458 <estimatorDequeue+0x2c>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2200      	movs	r2, #0
 800d43a:	6879      	ldr	r1, [r7, #4]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7f8 fc8f 	bl	8005d60 <xQueueReceive>
 800d442:	4603      	mov	r3, r0
 800d444:	2b01      	cmp	r3, #1
 800d446:	bf0c      	ite	eq
 800d448:	2301      	moveq	r3, #1
 800d44a:	2300      	movne	r3, #0
 800d44c:	b2db      	uxtb	r3, r3
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	20009468 	.word	0x20009468

0800d45c <estimatorComplementaryInit>:
#define POS_UPDATE_RATE RATE_100_HZ
#define POS_UPDATE_DT 1.0/POS_UPDATE_RATE


void estimatorComplementaryInit(void)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	af00      	add	r7, sp, #0
  sensfusion6Init();
 800d460:	f7fe fdc6 	bl	800bff0 <sensfusion6Init>
}
 800d464:	bf00      	nop
 800d466:	bd80      	pop	{r7, pc}

0800d468 <estimatorComplementaryTest>:

bool estimatorComplementaryTest(void)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
  bool pass = true;
 800d46e:	2301      	movs	r3, #1
 800d470:	71fb      	strb	r3, [r7, #7]

  pass &= sensfusion6Test();
 800d472:	f7fe fdcf 	bl	800c014 <sensfusion6Test>
 800d476:	4603      	mov	r3, r0
 800d478:	461a      	mov	r2, r3
 800d47a:	79fb      	ldrb	r3, [r7, #7]
 800d47c:	4013      	ands	r3, r2
 800d47e:	2b00      	cmp	r3, #0
 800d480:	bf14      	ite	ne
 800d482:	2301      	movne	r3, #1
 800d484:	2300      	moveq	r3, #0
 800d486:	71fb      	strb	r3, [r7, #7]

  return pass;
 800d488:	79fb      	ldrb	r3, [r7, #7]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3708      	adds	r7, #8
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
	...

0800d494 <estimatorComplementary>:

void estimatorComplementary(state_t *state, const stabilizerStep_t stabilizerStep)
{
 800d494:	b590      	push	{r4, r7, lr}
 800d496:	b08f      	sub	sp, #60	@ 0x3c
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  // Pull the latest sensors values of interest; discard the rest
  measurement_t m;
  while (estimatorDequeue(&m)) {
 800d49e:	e03c      	b.n	800d51a <estimatorComplementary+0x86>
    switch (m.type)
 800d4a0:	7a3b      	ldrb	r3, [r7, #8]
 800d4a2:	3b04      	subs	r3, #4
 800d4a4:	2b07      	cmp	r3, #7
 800d4a6:	d837      	bhi.n	800d518 <estimatorComplementary+0x84>
 800d4a8:	a201      	add	r2, pc, #4	@ (adr r2, 800d4b0 <estimatorComplementary+0x1c>)
 800d4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ae:	bf00      	nop
 800d4b0:	0800d507 	.word	0x0800d507
 800d4b4:	0800d519 	.word	0x0800d519
 800d4b8:	0800d519 	.word	0x0800d519
 800d4bc:	0800d519 	.word	0x0800d519
 800d4c0:	0800d519 	.word	0x0800d519
 800d4c4:	0800d4d1 	.word	0x0800d4d1
 800d4c8:	0800d4e3 	.word	0x0800d4e3
 800d4cc:	0800d4f5 	.word	0x0800d4f5
    {
    case MeasurementTypeGyroscope:
      gyro = m.data.gyroscope.gyro;
 800d4d0:	4b50      	ldr	r3, [pc, #320]	@ (800d614 <estimatorComplementary+0x180>)
 800d4d2:	461c      	mov	r4, r3
 800d4d4:	f107 030c 	add.w	r3, r7, #12
 800d4d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d4dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800d4e0:	e01b      	b.n	800d51a <estimatorComplementary+0x86>
    case MeasurementTypeAcceleration:
      acc = m.data.acceleration.acc;
 800d4e2:	4b4d      	ldr	r3, [pc, #308]	@ (800d618 <estimatorComplementary+0x184>)
 800d4e4:	461c      	mov	r4, r3
 800d4e6:	f107 030c 	add.w	r3, r7, #12
 800d4ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d4ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800d4f2:	e012      	b.n	800d51a <estimatorComplementary+0x86>
    case MeasurementTypeBarometer:
      baro = m.data.barometer.baro;
 800d4f4:	4b49      	ldr	r3, [pc, #292]	@ (800d61c <estimatorComplementary+0x188>)
 800d4f6:	461c      	mov	r4, r3
 800d4f8:	f107 030c 	add.w	r3, r7, #12
 800d4fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d500:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800d504:	e009      	b.n	800d51a <estimatorComplementary+0x86>
    case MeasurementTypeTOF:
      tof = m.data.tof;
 800d506:	4b46      	ldr	r3, [pc, #280]	@ (800d620 <estimatorComplementary+0x18c>)
 800d508:	461c      	mov	r4, r3
 800d50a:	f107 030c 	add.w	r3, r7, #12
 800d50e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800d516:	e000      	b.n	800d51a <estimatorComplementary+0x86>
    default:
      break;
 800d518:	bf00      	nop
  while (estimatorDequeue(&m)) {
 800d51a:	f107 0308 	add.w	r3, r7, #8
 800d51e:	4618      	mov	r0, r3
 800d520:	f7ff ff84 	bl	800d42c <estimatorDequeue>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1ba      	bne.n	800d4a0 <estimatorComplementary+0xc>
    }
  }

  // Update filter
  if (RATE_DO_EXECUTE(ATTITUDE_UPDATE_RATE, stabilizerStep)) {
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	f003 0303 	and.w	r3, r3, #3
 800d530:	2b00      	cmp	r3, #0
 800d532:	d157      	bne.n	800d5e4 <estimatorComplementary+0x150>
    sensfusion6UpdateQ(gyro.x, gyro.y, gyro.z,
 800d534:	4b37      	ldr	r3, [pc, #220]	@ (800d614 <estimatorComplementary+0x180>)
 800d536:	edd3 7a00 	vldr	s15, [r3]
 800d53a:	4b36      	ldr	r3, [pc, #216]	@ (800d614 <estimatorComplementary+0x180>)
 800d53c:	ed93 7a01 	vldr	s14, [r3, #4]
 800d540:	4b34      	ldr	r3, [pc, #208]	@ (800d614 <estimatorComplementary+0x180>)
 800d542:	edd3 6a02 	vldr	s13, [r3, #8]
 800d546:	4b34      	ldr	r3, [pc, #208]	@ (800d618 <estimatorComplementary+0x184>)
 800d548:	ed93 6a00 	vldr	s12, [r3]
 800d54c:	4b32      	ldr	r3, [pc, #200]	@ (800d618 <estimatorComplementary+0x184>)
 800d54e:	edd3 5a01 	vldr	s11, [r3, #4]
 800d552:	4b31      	ldr	r3, [pc, #196]	@ (800d618 <estimatorComplementary+0x184>)
 800d554:	ed93 5a02 	vldr	s10, [r3, #8]
 800d558:	ed9f 3a32 	vldr	s6, [pc, #200]	@ 800d624 <estimatorComplementary+0x190>
 800d55c:	eef0 2a45 	vmov.f32	s5, s10
 800d560:	eeb0 2a65 	vmov.f32	s4, s11
 800d564:	eef0 1a46 	vmov.f32	s3, s12
 800d568:	eeb0 1a66 	vmov.f32	s2, s13
 800d56c:	eef0 0a47 	vmov.f32	s1, s14
 800d570:	eeb0 0a67 	vmov.f32	s0, s15
 800d574:	f7fe fd5a 	bl	800c02c <sensfusion6UpdateQ>
                        acc.x, acc.y, acc.z,
                        ATTITUDE_UPDATE_DT);

    // Save attitude, adjusted for the legacy CF2 body coordinate system
    sensfusion6GetEulerRPY(&state->attitude.roll, &state->attitude.pitch, &state->attitude.yaw);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	1d18      	adds	r0, r3, #4
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f103 0108 	add.w	r1, r3, #8
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	330c      	adds	r3, #12
 800d586:	461a      	mov	r2, r3
 800d588:	f7ff f862 	bl	800c650 <sensfusion6GetEulerRPY>

    // Save quaternion, hopefully one day this could be used in a better controller.
    // Note that this is not adjusted for the legacy coordinate system
    sensfusion6GetQuaternion(
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f103 0010 	add.w	r0, r3, #16
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f103 0114 	add.w	r1, r3, #20
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f103 0218 	add.w	r2, r3, #24
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	331c      	adds	r3, #28
 800d5a2:	f7ff f82f 	bl	800c604 <sensfusion6GetQuaternion>
      &state->attitudeQuaternion.x,
      &state->attitudeQuaternion.y,
      &state->attitudeQuaternion.z,
      &state->attitudeQuaternion.w);

    state->acc.z = sensfusion6GetAccZWithoutGravity(acc.x,
 800d5a6:	4b1c      	ldr	r3, [pc, #112]	@ (800d618 <estimatorComplementary+0x184>)
 800d5a8:	edd3 7a00 	vldr	s15, [r3]
 800d5ac:	4b1a      	ldr	r3, [pc, #104]	@ (800d618 <estimatorComplementary+0x184>)
 800d5ae:	ed93 7a01 	vldr	s14, [r3, #4]
 800d5b2:	4b19      	ldr	r3, [pc, #100]	@ (800d618 <estimatorComplementary+0x184>)
 800d5b4:	edd3 6a02 	vldr	s13, [r3, #8]
 800d5b8:	eeb0 1a66 	vmov.f32	s2, s13
 800d5bc:	eef0 0a47 	vmov.f32	s1, s14
 800d5c0:	eeb0 0a67 	vmov.f32	s0, s15
 800d5c4:	f7ff f8e8 	bl	800c798 <sensfusion6GetAccZWithoutGravity>
 800d5c8:	eef0 7a40 	vmov.f32	s15, s0
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                                                    acc.y,
                                                    acc.z);

    positionUpdateVelocity(state->acc.z, ATTITUDE_UPDATE_DT);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800d5d8:	eddf 0a12 	vldr	s1, [pc, #72]	@ 800d624 <estimatorComplementary+0x190>
 800d5dc:	eeb0 0a67 	vmov.f32	s0, s15
 800d5e0:	f000 fa06 	bl	800d9f0 <positionUpdateVelocity>
  }

  if (RATE_DO_EXECUTE(POS_UPDATE_RATE, stabilizerStep)) {
 800d5e4:	6839      	ldr	r1, [r7, #0]
 800d5e6:	4b10      	ldr	r3, [pc, #64]	@ (800d628 <estimatorComplementary+0x194>)
 800d5e8:	fba3 2301 	umull	r2, r3, r3, r1
 800d5ec:	08da      	lsrs	r2, r3, #3
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	4413      	add	r3, r2
 800d5f4:	005b      	lsls	r3, r3, #1
 800d5f6:	1aca      	subs	r2, r1, r3
 800d5f8:	2a00      	cmp	r2, #0
 800d5fa:	d107      	bne.n	800d60c <estimatorComplementary+0x178>
    positionEstimate(state, &baro, &tof, POS_UPDATE_DT, stabilizerStep);
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800d62c <estimatorComplementary+0x198>
 800d602:	4a07      	ldr	r2, [pc, #28]	@ (800d620 <estimatorComplementary+0x18c>)
 800d604:	4905      	ldr	r1, [pc, #20]	@ (800d61c <estimatorComplementary+0x188>)
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 f9d8 	bl	800d9bc <positionEstimate>
  }
}
 800d60c:	bf00      	nop
 800d60e:	373c      	adds	r7, #60	@ 0x3c
 800d610:	46bd      	mov	sp, r7
 800d612:	bd90      	pop	{r4, r7, pc}
 800d614:	2000946c 	.word	0x2000946c
 800d618:	20009478 	.word	0x20009478
 800d61c:	20009484 	.word	0x20009484
 800d620:	20009490 	.word	0x20009490
 800d624:	3b83126f 	.word	0x3b83126f
 800d628:	cccccccd 	.word	0xcccccccd
 800d62c:	3c23d70a 	.word	0x3c23d70a

0800d630 <estimatorKalmanTaskInit>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(kalmanTask, KALMAN_TASK_STACKSIZE);

// --------------------------------------------------

// Called one time during system startup
void estimatorKalmanTaskInit() {
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af04      	add	r7, sp, #16
  kalmanCoreDefaultParams(&coreParams);
 800d636:	4817      	ldr	r0, [pc, #92]	@ (800d694 <estimatorKalmanTaskInit+0x64>)
 800d638:	f000 fb98 	bl	800dd6c <kalmanCoreDefaultParams>

  // Created in the 'empty' state, meaning the semaphore must first be given, that is it will block in the task
  // until released by the stabilizer loop
  runTaskSemaphore = xSemaphoreCreateBinary();
 800d63c:	2203      	movs	r2, #3
 800d63e:	2100      	movs	r1, #0
 800d640:	2001      	movs	r0, #1
 800d642:	f7f8 f8a7 	bl	8005794 <xQueueGenericCreate>
 800d646:	4603      	mov	r3, r0
 800d648:	4a13      	ldr	r2, [pc, #76]	@ (800d698 <estimatorKalmanTaskInit+0x68>)
 800d64a:	6013      	str	r3, [r2, #0]
  ASSERT(runTaskSemaphore);
 800d64c:	4b12      	ldr	r3, [pc, #72]	@ (800d698 <estimatorKalmanTaskInit+0x68>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d104      	bne.n	800d65e <estimatorKalmanTaskInit+0x2e>
 800d654:	22b8      	movs	r2, #184	@ 0xb8
 800d656:	4911      	ldr	r1, [pc, #68]	@ (800d69c <estimatorKalmanTaskInit+0x6c>)
 800d658:	4811      	ldr	r0, [pc, #68]	@ (800d6a0 <estimatorKalmanTaskInit+0x70>)
 800d65a:	f004 ff05 	bl	8012468 <assertFail>

  dataMutex = xSemaphoreCreateMutexStatic(&dataMutexBuffer);
 800d65e:	4911      	ldr	r1, [pc, #68]	@ (800d6a4 <estimatorKalmanTaskInit+0x74>)
 800d660:	2001      	movs	r0, #1
 800d662:	f7f8 f924 	bl	80058ae <xQueueCreateMutexStatic>
 800d666:	4603      	mov	r3, r0
 800d668:	4a0f      	ldr	r2, [pc, #60]	@ (800d6a8 <estimatorKalmanTaskInit+0x78>)
 800d66a:	6013      	str	r3, [r2, #0]

  STATIC_MEM_TASK_CREATE(kalmanTask, kalmanTask, KALMAN_TASK_NAME, NULL, KALMAN_TASK_PRI);
 800d66c:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800d670:	461a      	mov	r2, r3
 800d672:	4b0e      	ldr	r3, [pc, #56]	@ (800d6ac <estimatorKalmanTaskInit+0x7c>)
 800d674:	9302      	str	r3, [sp, #8]
 800d676:	4b0e      	ldr	r3, [pc, #56]	@ (800d6b0 <estimatorKalmanTaskInit+0x80>)
 800d678:	9301      	str	r3, [sp, #4]
 800d67a:	2302      	movs	r3, #2
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	2300      	movs	r3, #0
 800d680:	490c      	ldr	r1, [pc, #48]	@ (800d6b4 <estimatorKalmanTaskInit+0x84>)
 800d682:	480d      	ldr	r0, [pc, #52]	@ (800d6b8 <estimatorKalmanTaskInit+0x88>)
 800d684:	f7f8 fedc 	bl	8006440 <xTaskCreateStatic>

  isInit = true;
 800d688:	4b0c      	ldr	r3, [pc, #48]	@ (800d6bc <estimatorKalmanTaskInit+0x8c>)
 800d68a:	2201      	movs	r2, #1
 800d68c:	701a      	strb	r2, [r3, #0]
}
 800d68e:	bf00      	nop
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	20009554 	.word	0x20009554
 800d698:	2000949c 	.word	0x2000949c
 800d69c:	0801a6b0 	.word	0x0801a6b0
 800d6a0:	0801a6dc 	.word	0x0801a6dc
 800d6a4:	200094a4 	.word	0x200094a4
 800d6a8:	200094a0 	.word	0x200094a0
 800d6ac:	10003a98 	.word	0x10003a98
 800d6b0:	10003138 	.word	0x10003138
 800d6b4:	0801a6f0 	.word	0x0801a6f0
 800d6b8:	0800d6d9 	.word	0x0800d6d9
 800d6bc:	200094f6 	.word	0x200094f6

0800d6c0 <estimatorKalmanTaskTest>:

bool estimatorKalmanTaskTest() {
 800d6c0:	b480      	push	{r7}
 800d6c2:	af00      	add	r7, sp, #0
  return isInit;
 800d6c4:	4b03      	ldr	r3, [pc, #12]	@ (800d6d4 <estimatorKalmanTaskTest+0x14>)
 800d6c6:	781b      	ldrb	r3, [r3, #0]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr
 800d6d2:	bf00      	nop
 800d6d4:	200094f6 	.word	0x200094f6

0800d6d8 <kalmanTask>:

static void kalmanTask(void* parameters) {
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b088      	sub	sp, #32
 800d6dc:	af02      	add	r7, sp, #8
 800d6de:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 800d6e0:	f7ff fd0a 	bl	800d0f8 <systemWaitStart>
  flage_hit = 1;
 800d6e4:	4b38      	ldr	r3, [pc, #224]	@ (800d7c8 <kalmanTask+0xf0>)
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	701a      	strb	r2, [r3, #0]

  uint32_t nowMs = T2M(xTaskGetTickCount());
 800d6ea:	f7f9 fa17 	bl	8006b1c <xTaskGetTickCount>
 800d6ee:	6138      	str	r0, [r7, #16]
  uint32_t nextPredictionMs = nowMs;
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	617b      	str	r3, [r7, #20]

//  rateSupervisorInit(&rateSupervisorContext, nowMs, ONE_SECOND, PREDICT_RATE - 1, PREDICT_RATE + 1, 1);

  while (true) {
    xSemaphoreTake(runTaskSemaphore, portMAX_DELAY);
 800d6f4:	4b35      	ldr	r3, [pc, #212]	@ (800d7cc <kalmanTask+0xf4>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f04f 31ff 	mov.w	r1, #4294967295
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7f8 fc0f 	bl	8005f20 <xQueueSemaphoreTake>
    nowMs = T2M(xTaskGetTickCount()); // would be nice if this had a precision higher than 1ms...
 800d702:	f7f9 fa0b 	bl	8006b1c <xTaskGetTickCount>
 800d706:	6138      	str	r0, [r7, #16]

    if (resetEstimation) {
 800d708:	4b31      	ldr	r3, [pc, #196]	@ (800d7d0 <kalmanTask+0xf8>)
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d004      	beq.n	800d71a <kalmanTask+0x42>
      estimatorKalmanInit();
 800d710:	f000 f92e 	bl	800d970 <estimatorKalmanInit>
      resetEstimation = false;
 800d714:	4b2e      	ldr	r3, [pc, #184]	@ (800d7d0 <kalmanTask+0xf8>)
 800d716:	2200      	movs	r2, #0
 800d718:	701a      	strb	r2, [r3, #0]
    }
    flage_hit = 2;
 800d71a:	4b2b      	ldr	r3, [pc, #172]	@ (800d7c8 <kalmanTask+0xf0>)
 800d71c:	2202      	movs	r2, #2
 800d71e:	701a      	strb	r2, [r3, #0]

//    bool quadIsFlying = supervisorIsFlying();
    bool quadIsFlying = true;
 800d720:	2301      	movs	r3, #1
 800d722:	73fb      	strb	r3, [r7, #15]
  #ifdef KALMAN_DECOUPLE_XY
    kalmanCoreDecoupleXY(&coreData);
  #endif

    // Run the system dynamics to predict the state forward.
    if (nowMs >= nextPredictionMs) {
 800d724:	693a      	ldr	r2, [r7, #16]
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d315      	bcc.n	800d758 <kalmanTask+0x80>
      axis3fSubSamplerFinalize(&accSubSampler);
 800d72c:	4829      	ldr	r0, [pc, #164]	@ (800d7d4 <kalmanTask+0xfc>)
 800d72e:	f7fe fb4c 	bl	800bdca <axis3fSubSamplerFinalize>
      axis3fSubSamplerFinalize(&gyroSubSampler);
 800d732:	4829      	ldr	r0, [pc, #164]	@ (800d7d8 <kalmanTask+0x100>)
 800d734:	f7fe fb49 	bl	800bdca <axis3fSubSamplerFinalize>

      kalmanCorePredict(&coreData, &accSubSampler.subSample, &gyroSubSampler.subSample, nowMs, quadIsFlying);
 800d738:	7bfb      	ldrb	r3, [r7, #15]
 800d73a:	9300      	str	r3, [sp, #0]
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	4a27      	ldr	r2, [pc, #156]	@ (800d7dc <kalmanTask+0x104>)
 800d740:	4927      	ldr	r1, [pc, #156]	@ (800d7e0 <kalmanTask+0x108>)
 800d742:	4828      	ldr	r0, [pc, #160]	@ (800d7e4 <kalmanTask+0x10c>)
 800d744:	f002 f824 	bl	800f790 <kalmanCorePredict>
      nextPredictionMs = nowMs + PREDICTION_UPDATE_INTERVAL_MS;
 800d748:	2214      	movs	r2, #20
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	4413      	add	r3, r2
 800d74e:	617b      	str	r3, [r7, #20]

//      STATS_CNT_RATE_EVENT(&predictionCounter);

      if (!rateSupervisorValidate(&rateSupervisorContext, nowMs)) {
 800d750:	6939      	ldr	r1, [r7, #16]
 800d752:	4825      	ldr	r0, [pc, #148]	@ (800d7e8 <kalmanTask+0x110>)
 800d754:	f005 f81d 	bl	8012792 <rateSupervisorValidate>
//        DEBUG_PRINT("WARNING: Kalman prediction rate off (%lu)\n", rateSupervisorLatestCount(&rateSupervisorContext));
      }
    }

    // Add process noise every loop, rather than every prediction
    kalmanCoreAddProcessNoise(&coreData, &coreParams, nowMs);
 800d758:	693a      	ldr	r2, [r7, #16]
 800d75a:	4924      	ldr	r1, [pc, #144]	@ (800d7ec <kalmanTask+0x114>)
 800d75c:	4821      	ldr	r0, [pc, #132]	@ (800d7e4 <kalmanTask+0x10c>)
 800d75e:	f002 fa49 	bl	800fbf4 <kalmanCoreAddProcessNoise>

    updateQueuedMeasurements(nowMs, quadIsFlying);
 800d762:	7bfb      	ldrb	r3, [r7, #15]
 800d764:	4619      	mov	r1, r3
 800d766:	6938      	ldr	r0, [r7, #16]
 800d768:	f000 f84a 	bl	800d800 <updateQueuedMeasurements>

    if (kalmanCoreFinalize(&coreData))
 800d76c:	481d      	ldr	r0, [pc, #116]	@ (800d7e4 <kalmanTask+0x10c>)
 800d76e:	f002 fa6f 	bl	800fc50 <kalmanCoreFinalize>
    {
//      STATS_CNT_RATE_EVENT(&finalizeCounter);
    }

    if (! kalmanSupervisorIsStateWithinBounds(&coreData)) {
 800d772:	481c      	ldr	r0, [pc, #112]	@ (800d7e4 <kalmanTask+0x10c>)
 800d774:	f7fe fb7c 	bl	800be70 <kalmanSupervisorIsStateWithinBounds>
 800d778:	4603      	mov	r3, r0
 800d77a:	f083 0301 	eor.w	r3, r3, #1
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00c      	beq.n	800d79e <kalmanTask+0xc6>
      resetEstimation = true;
 800d784:	4b12      	ldr	r3, [pc, #72]	@ (800d7d0 <kalmanTask+0xf8>)
 800d786:	2201      	movs	r2, #1
 800d788:	701a      	strb	r2, [r3, #0]

      if (nowMs > warningBlockTimeMs) {
 800d78a:	4b19      	ldr	r3, [pc, #100]	@ (800d7f0 <kalmanTask+0x118>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	693a      	ldr	r2, [r7, #16]
 800d790:	429a      	cmp	r2, r3
 800d792:	d904      	bls.n	800d79e <kalmanTask+0xc6>
        warningBlockTimeMs = nowMs + WARNING_HOLD_BACK_TIME_MS;
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800d79a:	4a15      	ldr	r2, [pc, #84]	@ (800d7f0 <kalmanTask+0x118>)
 800d79c:	6013      	str	r3, [r2, #0]

    /**
     * Finally, the internal state is externalized.
     * This is done every round, since the external state includes some sensor data
     */
    xSemaphoreTake(dataMutex, portMAX_DELAY);
 800d79e:	4b15      	ldr	r3, [pc, #84]	@ (800d7f4 <kalmanTask+0x11c>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f04f 31ff 	mov.w	r1, #4294967295
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7f8 fbba 	bl	8005f20 <xQueueSemaphoreTake>
    kalmanCoreExternalizeState(&coreData, &taskEstimatorState, &accLatest);
 800d7ac:	4a12      	ldr	r2, [pc, #72]	@ (800d7f8 <kalmanTask+0x120>)
 800d7ae:	4913      	ldr	r1, [pc, #76]	@ (800d7fc <kalmanTask+0x124>)
 800d7b0:	480c      	ldr	r0, [pc, #48]	@ (800d7e4 <kalmanTask+0x10c>)
 800d7b2:	f002 ff03 	bl	80105bc <kalmanCoreExternalizeState>
    xSemaphoreGive(dataMutex);
 800d7b6:	4b0f      	ldr	r3, [pc, #60]	@ (800d7f4 <kalmanTask+0x11c>)
 800d7b8:	6818      	ldr	r0, [r3, #0]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	2200      	movs	r2, #0
 800d7be:	2100      	movs	r1, #0
 800d7c0:	f7f8 f890 	bl	80058e4 <xQueueGenericSend>
  while (true) {
 800d7c4:	e796      	b.n	800d6f4 <kalmanTask+0x1c>
 800d7c6:	bf00      	nop
 800d7c8:	200094f5 	.word	0x200094f5
 800d7cc:	2000949c 	.word	0x2000949c
 800d7d0:	20009550 	.word	0x20009550
 800d7d4:	200094f8 	.word	0x200094f8
 800d7d8:	20009518 	.word	0x20009518
 800d7dc:	2000952c 	.word	0x2000952c
 800d7e0:	2000950c 	.word	0x2000950c
 800d7e4:	10002f74 	.word	0x10002f74
 800d7e8:	200095e8 	.word	0x200095e8
 800d7ec:	20009554 	.word	0x20009554
 800d7f0:	20009604 	.word	0x20009604
 800d7f4:	200094a0 	.word	0x200094a0
 800d7f8:	20009538 	.word	0x20009538
 800d7fc:	20009598 	.word	0x20009598

0800d800 <updateQueuedMeasurements>:
  xSemaphoreGive(dataMutex);

  xSemaphoreGive(runTaskSemaphore);
}

static void updateQueuedMeasurements(const uint32_t nowMs, const bool quadIsFlying) {
 800d800:	b590      	push	{r4, r7, lr}
 800d802:	b08f      	sub	sp, #60	@ 0x3c
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	460b      	mov	r3, r1
 800d80a:	70fb      	strb	r3, [r7, #3]
   * we therefore consume all measurements since the last loop, rather than accumulating
   */

  // Pull the latest sensors values of interest; discard the rest
  measurement_t m;
  while (estimatorDequeue(&m)) {
 800d80c:	e094      	b.n	800d938 <updateQueuedMeasurements+0x138>
    switch (m.type) {
 800d80e:	7a3b      	ldrb	r3, [r7, #8]
 800d810:	2b0b      	cmp	r3, #11
 800d812:	f200 808e 	bhi.w	800d932 <updateQueuedMeasurements+0x132>
 800d816:	a201      	add	r2, pc, #4	@ (adr r2, 800d81c <updateQueuedMeasurements+0x1c>)
 800d818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81c:	0800d933 	.word	0x0800d933
 800d820:	0800d84d 	.word	0x0800d84d
 800d824:	0800d85d 	.word	0x0800d85d
 800d828:	0800d86d 	.word	0x0800d86d
 800d82c:	0800d895 	.word	0x0800d895
 800d830:	0800d8a5 	.word	0x0800d8a5
 800d834:	0800d8b5 	.word	0x0800d8b5
 800d838:	0800d8c7 	.word	0x0800d8c7
 800d83c:	0800d933 	.word	0x0800d933
 800d840:	0800d8d7 	.word	0x0800d8d7
 800d844:	0800d8f7 	.word	0x0800d8f7
 800d848:	0800d917 	.word	0x0800d917
          // standard KF update
//          kalmanCoreUpdateWithTdoa(&coreData, &m.data.tdoa, nowMs, &outlierFilterTdoaState);
        }
        break;
      case MeasurementTypePosition:
        kalmanCoreUpdateWithPosition(&coreData, &m.data.position);
 800d84c:	f107 0308 	add.w	r3, r7, #8
 800d850:	3304      	adds	r3, #4
 800d852:	4619      	mov	r1, r3
 800d854:	483f      	ldr	r0, [pc, #252]	@ (800d954 <updateQueuedMeasurements+0x154>)
 800d856:	f004 fc05 	bl	8012064 <kalmanCoreUpdateWithPosition>
        break;
 800d85a:	e06d      	b.n	800d938 <updateQueuedMeasurements+0x138>
      case MeasurementTypePose:
        kalmanCoreUpdateWithPose(&coreData, &m.data.pose);
 800d85c:	f107 0308 	add.w	r3, r7, #8
 800d860:	3304      	adds	r3, #4
 800d862:	4619      	mov	r1, r3
 800d864:	483b      	ldr	r0, [pc, #236]	@ (800d954 <updateQueuedMeasurements+0x154>)
 800d866:	f004 fa85 	bl	8011d74 <kalmanCoreUpdateWithPose>
        break;
 800d86a:	e065      	b.n	800d938 <updateQueuedMeasurements+0x138>
      case MeasurementTypeDistance:
        if(robustTwr){
 800d86c:	4b3a      	ldr	r3, [pc, #232]	@ (800d958 <updateQueuedMeasurements+0x158>)
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d007      	beq.n	800d884 <updateQueuedMeasurements+0x84>
            // robust KF update with UWB TWR measurements
            kalmanCoreRobustUpdateWithDistance(&coreData, &m.data.distance);
 800d874:	f107 0308 	add.w	r3, r7, #8
 800d878:	3304      	adds	r3, #4
 800d87a:	4619      	mov	r1, r3
 800d87c:	4835      	ldr	r0, [pc, #212]	@ (800d954 <updateQueuedMeasurements+0x154>)
 800d87e:	f003 fb59 	bl	8010f34 <kalmanCoreRobustUpdateWithDistance>
        }else{
            // standard KF update
            kalmanCoreUpdateWithDistance(&coreData, &m.data.distance);
        }
        break;
 800d882:	e059      	b.n	800d938 <updateQueuedMeasurements+0x138>
            kalmanCoreUpdateWithDistance(&coreData, &m.data.distance);
 800d884:	f107 0308 	add.w	r3, r7, #8
 800d888:	3304      	adds	r3, #4
 800d88a:	4619      	mov	r1, r3
 800d88c:	4831      	ldr	r0, [pc, #196]	@ (800d954 <updateQueuedMeasurements+0x154>)
 800d88e:	f003 f8c3 	bl	8010a18 <kalmanCoreUpdateWithDistance>
        break;
 800d892:	e051      	b.n	800d938 <updateQueuedMeasurements+0x138>
      case MeasurementTypeTOF:
        kalmanCoreUpdateWithTof(&coreData, &m.data.tof);
 800d894:	f107 0308 	add.w	r3, r7, #8
 800d898:	3304      	adds	r3, #4
 800d89a:	4619      	mov	r1, r3
 800d89c:	482d      	ldr	r0, [pc, #180]	@ (800d954 <updateQueuedMeasurements+0x154>)
 800d89e:	f004 fc27 	bl	80120f0 <kalmanCoreUpdateWithTof>
        break;
 800d8a2:	e049      	b.n	800d938 <updateQueuedMeasurements+0x138>
      case MeasurementTypeAbsoluteHeight:
        kalmanCoreUpdateWithAbsoluteHeight(&coreData, &m.data.height);
 800d8a4:	f107 0308 	add.w	r3, r7, #8
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	4829      	ldr	r0, [pc, #164]	@ (800d954 <updateQueuedMeasurements+0x154>)
 800d8ae:	f003 f847 	bl	8010940 <kalmanCoreUpdateWithAbsoluteHeight>
        break;
 800d8b2:	e041      	b.n	800d938 <updateQueuedMeasurements+0x138>
      case MeasurementTypeFlow:
        kalmanCoreUpdateWithFlow(&coreData, &m.data.flow, &gyroLatest);
 800d8b4:	f107 0308 	add.w	r3, r7, #8
 800d8b8:	3304      	adds	r3, #4
 800d8ba:	4a28      	ldr	r2, [pc, #160]	@ (800d95c <updateQueuedMeasurements+0x15c>)
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4825      	ldr	r0, [pc, #148]	@ (800d954 <updateQueuedMeasurements+0x154>)
 800d8c0:	f003 feec 	bl	801169c <kalmanCoreUpdateWithFlow>
        break;
 800d8c4:	e038      	b.n	800d938 <updateQueuedMeasurements+0x138>
      case MeasurementTypeYawError:
        kalmanCoreUpdateWithYawError(&coreData, &m.data.yawError);
 800d8c6:	f107 0308 	add.w	r3, r7, #8
 800d8ca:	3304      	adds	r3, #4
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	4821      	ldr	r0, [pc, #132]	@ (800d954 <updateQueuedMeasurements+0x154>)
 800d8d0:	f004 fc94 	bl	80121fc <kalmanCoreUpdateWithYawError>
        break;
 800d8d4:	e030      	b.n	800d938 <updateQueuedMeasurements+0x138>
      case MeasurementTypeSweepAngle:
//        kalmanCoreUpdateWithSweepAngles(&coreData, &m.data.sweepAngle, nowMs, &sweepOutlierFilterState);
        break;
      case MeasurementTypeGyroscope:
        axis3fSubSamplerAccumulate(&gyroSubSampler, &m.data.gyroscope.gyro);
 800d8d6:	f107 0308 	add.w	r3, r7, #8
 800d8da:	3304      	adds	r3, #4
 800d8dc:	4619      	mov	r1, r3
 800d8de:	4820      	ldr	r0, [pc, #128]	@ (800d960 <updateQueuedMeasurements+0x160>)
 800d8e0:	f7fe fa42 	bl	800bd68 <axis3fSubSamplerAccumulate>
        gyroLatest = m.data.gyroscope.gyro;
 800d8e4:	4b1d      	ldr	r3, [pc, #116]	@ (800d95c <updateQueuedMeasurements+0x15c>)
 800d8e6:	461c      	mov	r4, r3
 800d8e8:	f107 030c 	add.w	r3, r7, #12
 800d8ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d8f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 800d8f4:	e020      	b.n	800d938 <updateQueuedMeasurements+0x138>
      case MeasurementTypeAcceleration:
        axis3fSubSamplerAccumulate(&accSubSampler, &m.data.acceleration.acc);
 800d8f6:	f107 0308 	add.w	r3, r7, #8
 800d8fa:	3304      	adds	r3, #4
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	4819      	ldr	r0, [pc, #100]	@ (800d964 <updateQueuedMeasurements+0x164>)
 800d900:	f7fe fa32 	bl	800bd68 <axis3fSubSamplerAccumulate>
        accLatest = m.data.acceleration.acc;
 800d904:	4b18      	ldr	r3, [pc, #96]	@ (800d968 <updateQueuedMeasurements+0x168>)
 800d906:	461c      	mov	r4, r3
 800d908:	f107 030c 	add.w	r3, r7, #12
 800d90c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d910:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 800d914:	e010      	b.n	800d938 <updateQueuedMeasurements+0x138>
      case MeasurementTypeBarometer:
        if (useBaroUpdate) {
 800d916:	2301      	movs	r3, #1
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d00c      	beq.n	800d936 <updateQueuedMeasurements+0x136>
          kalmanCoreUpdateWithBaro(&coreData, &coreParams, m.data.barometer.baro.asl, quadIsFlying);
 800d91c:	edd7 7a05 	vldr	s15, [r7, #20]
 800d920:	78fb      	ldrb	r3, [r7, #3]
 800d922:	461a      	mov	r2, r3
 800d924:	eeb0 0a67 	vmov.f32	s0, s15
 800d928:	4910      	ldr	r1, [pc, #64]	@ (800d96c <updateQueuedMeasurements+0x16c>)
 800d92a:	480a      	ldr	r0, [pc, #40]	@ (800d954 <updateQueuedMeasurements+0x154>)
 800d92c:	f000 ffb8 	bl	800e8a0 <kalmanCoreUpdateWithBaro>
        }
        break;
 800d930:	e001      	b.n	800d936 <updateQueuedMeasurements+0x136>
      default:
        break;
 800d932:	bf00      	nop
 800d934:	e000      	b.n	800d938 <updateQueuedMeasurements+0x138>
        break;
 800d936:	bf00      	nop
  while (estimatorDequeue(&m)) {
 800d938:	f107 0308 	add.w	r3, r7, #8
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7ff fd75 	bl	800d42c <estimatorDequeue>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	f47f af62 	bne.w	800d80e <updateQueuedMeasurements+0xe>
    }
  }
}
 800d94a:	bf00      	nop
 800d94c:	bf00      	nop
 800d94e:	373c      	adds	r7, #60	@ 0x3c
 800d950:	46bd      	mov	sp, r7
 800d952:	bd90      	pop	{r4, r7, pc}
 800d954:	10002f74 	.word	0x10002f74
 800d958:	200094f4 	.word	0x200094f4
 800d95c:	20009544 	.word	0x20009544
 800d960:	20009518 	.word	0x20009518
 800d964:	200094f8 	.word	0x200094f8
 800d968:	20009538 	.word	0x20009538
 800d96c:	20009554 	.word	0x20009554

0800d970 <estimatorKalmanInit>:

// Called when this estimator is activated
void estimatorKalmanInit(void)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
  axis3fSubSamplerInit(&accSubSampler, GRAVITY_MAGNITUDE);
 800d976:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800d9a4 <estimatorKalmanInit+0x34>
 800d97a:	480b      	ldr	r0, [pc, #44]	@ (800d9a8 <estimatorKalmanInit+0x38>)
 800d97c:	f7fe f9e2 	bl	800bd44 <axis3fSubSamplerInit>
  axis3fSubSamplerInit(&gyroSubSampler, DEG_TO_RAD);
 800d980:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800d9ac <estimatorKalmanInit+0x3c>
 800d984:	480a      	ldr	r0, [pc, #40]	@ (800d9b0 <estimatorKalmanInit+0x40>)
 800d986:	f7fe f9dd 	bl	800bd44 <axis3fSubSamplerInit>


  uint32_t nowMs = T2M(xTaskGetTickCount());
 800d98a:	f7f9 f8c7 	bl	8006b1c <xTaskGetTickCount>
 800d98e:	6078      	str	r0, [r7, #4]
  kalmanCoreInit(&coreData, &coreParams, nowMs);
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	4908      	ldr	r1, [pc, #32]	@ (800d9b4 <estimatorKalmanInit+0x44>)
 800d994:	4808      	ldr	r0, [pc, #32]	@ (800d9b8 <estimatorKalmanInit+0x48>)
 800d996:	f000 fa37 	bl	800de08 <kalmanCoreInit>
}
 800d99a:	bf00      	nop
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	411cf5c3 	.word	0x411cf5c3
 800d9a8:	200094f8 	.word	0x200094f8
 800d9ac:	3c8efa35 	.word	0x3c8efa35
 800d9b0:	20009518 	.word	0x20009518
 800d9b4:	20009554 	.word	0x20009554
 800d9b8:	10002f74 	.word	0x10002f74

0800d9bc <positionEstimate>:
};

static void positionEstimateInternal(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep, struct selfState_s* state);
static void positionUpdateVelocityInternal(float accWZ, float dt, struct selfState_s* state);

void positionEstimate(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep) {
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b088      	sub	sp, #32
 800d9c0:	af02      	add	r7, sp, #8
 800d9c2:	6178      	str	r0, [r7, #20]
 800d9c4:	6139      	str	r1, [r7, #16]
 800d9c6:	60fa      	str	r2, [r7, #12]
 800d9c8:	ed87 0a02 	vstr	s0, [r7, #8]
 800d9cc:	607b      	str	r3, [r7, #4]
  positionEstimateInternal(estimate, baro, tofMeasurement, dt, stabilizerStep, &state);
 800d9ce:	4b07      	ldr	r3, [pc, #28]	@ (800d9ec <positionEstimate+0x30>)
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	ed97 0a02 	vldr	s0, [r7, #8]
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	6939      	ldr	r1, [r7, #16]
 800d9dc:	6978      	ldr	r0, [r7, #20]
 800d9de:	f000 f81b 	bl	800da18 <positionEstimateInternal>
}
 800d9e2:	bf00      	nop
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	20000058 	.word	0x20000058

0800d9f0 <positionUpdateVelocity>:

void positionUpdateVelocity(float accWZ, float dt) {
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	ed87 0a01 	vstr	s0, [r7, #4]
 800d9fa:	edc7 0a00 	vstr	s1, [r7]
  positionUpdateVelocityInternal(accWZ, dt, &state);
 800d9fe:	4805      	ldr	r0, [pc, #20]	@ (800da14 <positionUpdateVelocity+0x24>)
 800da00:	edd7 0a00 	vldr	s1, [r7]
 800da04:	ed97 0a01 	vldr	s0, [r7, #4]
 800da08:	f000 f8b2 	bl	800db70 <positionUpdateVelocityInternal>
}
 800da0c:	bf00      	nop
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	20000058 	.word	0x20000058

0800da18 <positionEstimateInternal>:

static void positionEstimateInternal(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep, struct selfState_s* state) {
 800da18:	b580      	push	{r7, lr}
 800da1a:	b08a      	sub	sp, #40	@ 0x28
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6178      	str	r0, [r7, #20]
 800da20:	6139      	str	r1, [r7, #16]
 800da22:	60fa      	str	r2, [r7, #12]
 800da24:	ed87 0a02 	vstr	s0, [r7, #8]
 800da28:	607b      	str	r3, [r7, #4]
  float filteredZ;
  static float prev_estimatedZ = 0;
  static bool surfaceFollowingMode = false;

  const uint32_t MAX_SAMPLE_AGE = M2T(50);
 800da2a:	2332      	movs	r3, #50	@ 0x32
 800da2c:	623b      	str	r3, [r7, #32]

  uint32_t now = xTaskGetTickCount();
 800da2e:	f7f9 f875 	bl	8006b1c <xTaskGetTickCount>
 800da32:	61f8      	str	r0, [r7, #28]
//  bool isSampleUseful = ((now - tofMeasurement->timestamp) <= MAX_SAMPLE_AGE);
  bool isSampleUseful  =  false;
 800da34:	2300      	movs	r3, #0
 800da36:	76fb      	strb	r3, [r7, #27]
  if (isSampleUseful) {
 800da38:	7efb      	ldrb	r3, [r7, #27]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d002      	beq.n	800da44 <positionEstimateInternal+0x2c>
    surfaceFollowingMode = true;
 800da3e:	4b4a      	ldr	r3, [pc, #296]	@ (800db68 <positionEstimateInternal+0x150>)
 800da40:	2201      	movs	r2, #1
 800da42:	701a      	strb	r2, [r3, #0]
  }

  if (surfaceFollowingMode) {
 800da44:	4b48      	ldr	r3, [pc, #288]	@ (800db68 <positionEstimateInternal+0x150>)
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d02e      	beq.n	800daaa <positionEstimateInternal+0x92>
    if (isSampleUseful) {
 800da4c:	7efb      	ldrb	r3, [r7, #27]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d062      	beq.n	800db18 <positionEstimateInternal+0x100>
      // IIR filter zrange
      filteredZ = (state->estAlphaZrange       ) * state->estimatedZ +
 800da52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da54:	ed93 7a02 	vldr	s14, [r3, #8]
 800da58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da5a:	edd3 7a00 	vldr	s15, [r3]
 800da5e:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (1.0f - state->estAlphaZrange) * tofMeasurement->distance;
 800da62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da64:	edd3 7a02 	vldr	s15, [r3, #8]
 800da68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	edd3 7a01 	vldr	s15, [r3, #4]
 800da76:	ee66 7aa7 	vmul.f32	s15, s13, s15
      filteredZ = (state->estAlphaZrange       ) * state->estimatedZ +
 800da7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      // Use zrange as base and add velocity changes.
      state->estimatedZ = filteredZ + (state->velocityFactor * state->velocityZ * dt);
 800da82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da84:	ed93 7a04 	vldr	s14, [r3, #16]
 800da88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da8a:	edd3 7a01 	vldr	s15, [r3, #4]
 800da8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da92:	edd7 7a02 	vldr	s15, [r7, #8]
 800da96:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da9a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800da9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800daa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa4:	edc3 7a00 	vstr	s15, [r3]
 800daa8:	e036      	b.n	800db18 <positionEstimateInternal+0x100>
    }
  } else {
    // FIXME: A bit of an hack to init IIR filter
    if (state->estimatedZ == 0.0f) {
 800daaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daac:	edd3 7a00 	vldr	s15, [r3]
 800dab0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dab8:	d103      	bne.n	800dac2 <positionEstimateInternal+0xaa>
      filteredZ = baro->asl;
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	689b      	ldr	r3, [r3, #8]
 800dabe:	627b      	str	r3, [r7, #36]	@ 0x24
 800dac0:	e017      	b.n	800daf2 <positionEstimateInternal+0xda>
    } else {
      // IIR filter asl
      filteredZ = (state->estAlphaAsl       ) * state->estimatedZ +
 800dac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dac4:	ed93 7a03 	vldr	s14, [r3, #12]
 800dac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daca:	edd3 7a00 	vldr	s15, [r3]
 800dace:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (1.0f - state->estAlphaAsl) * baro->asl;
 800dad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad4:	edd3 7a03 	vldr	s15, [r3, #12]
 800dad8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dadc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	edd3 7a02 	vldr	s15, [r3, #8]
 800dae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
      filteredZ = (state->estAlphaAsl       ) * state->estimatedZ +
 800daea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800daee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    #if CONFIG_CONTROLLER_PID_IMPROVED_BARO_Z_HOLD
      state->estimatedZ = filteredZ;
    #else
      // Use asl as base and add velocity changes.
      state->estimatedZ = filteredZ + (state->velocityFactor * state->velocityZ * dt);
 800daf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf4:	ed93 7a04 	vldr	s14, [r3, #16]
 800daf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dafa:	edd3 7a01 	vldr	s15, [r3, #4]
 800dafe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db02:	edd7 7a02 	vldr	s15, [r7, #8]
 800db06:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db0a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800db0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db14:	edc3 7a00 	vstr	s15, [r3]
    #endif
  }

  estimate->position.x = 0.0f;
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	f04f 0200 	mov.w	r2, #0
 800db1e:	625a      	str	r2, [r3, #36]	@ 0x24
  estimate->position.y = 0.0f;
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	f04f 0200 	mov.w	r2, #0
 800db26:	629a      	str	r2, [r3, #40]	@ 0x28
  estimate->position.z = state->estimatedZ;
 800db28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  estimate->velocity.z = (state->estimatedZ - prev_estimatedZ) / dt;
 800db30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db32:	ed93 7a00 	vldr	s14, [r3]
 800db36:	4b0d      	ldr	r3, [pc, #52]	@ (800db6c <positionEstimateInternal+0x154>)
 800db38:	edd3 7a00 	vldr	s15, [r3]
 800db3c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800db40:	ed97 7a02 	vldr	s14, [r7, #8]
 800db44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
  state->estimatedVZ = estimate->velocity.z;
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db54:	61da      	str	r2, [r3, #28]
  prev_estimatedZ = state->estimatedZ;
 800db56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a04      	ldr	r2, [pc, #16]	@ (800db6c <positionEstimateInternal+0x154>)
 800db5c:	6013      	str	r3, [r2, #0]
}
 800db5e:	bf00      	nop
 800db60:	3728      	adds	r7, #40	@ 0x28
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	20009608 	.word	0x20009608
 800db6c:	2000960c 	.word	0x2000960c

0800db70 <positionUpdateVelocityInternal>:

static void positionUpdateVelocityInternal(float accWZ, float dt, struct selfState_s* state) {
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	ed87 0a03 	vstr	s0, [r7, #12]
 800db7a:	edc7 0a02 	vstr	s1, [r7, #8]
 800db7e:	6078      	str	r0, [r7, #4]
  state->velocityZ += deadband(accWZ, state->vAccDeadband) * dt * G;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	edd3 7a05 	vldr	s15, [r3, #20]
 800db86:	eef0 0a67 	vmov.f32	s1, s15
 800db8a:	ed97 0a03 	vldr	s0, [r7, #12]
 800db8e:	f004 fd9d 	bl	80126cc <deadband>
 800db92:	eeb0 7a40 	vmov.f32	s14, s0
 800db96:	edd7 7a02 	vldr	s15, [r7, #8]
 800db9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db9e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800dbd4 <positionUpdateVelocityInternal+0x64>
 800dba2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	edd3 7a01 	vldr	s15, [r3, #4]
 800dbac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	edc3 7a01 	vstr	s15, [r3, #4]
  state->velocityZ *= state->velZAlpha;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	ed93 7a01 	vldr	s14, [r3, #4]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	edd3 7a06 	vldr	s15, [r3, #24]
 800dbc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800dbcc:	bf00      	nop
 800dbce:	3710      	adds	r7, #16
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	411cf5c3 	.word	0x411cf5c3

0800dbd8 <assert_aligned_4_bytes>:
    __typeof__(b) _b = (b); \
    _a > _b ? _a : _b;      \
  })

// Matrix data must be aligned on 4 byte bundaries
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f003 0303 	and.w	r3, r3, #3
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d004      	beq.n	800dbfa <assert_aligned_4_bytes+0x22>
 800dbf0:	2239      	movs	r2, #57	@ 0x39
 800dbf2:	4904      	ldr	r1, [pc, #16]	@ (800dc04 <assert_aligned_4_bytes+0x2c>)
 800dbf4:	4804      	ldr	r0, [pc, #16]	@ (800dc08 <assert_aligned_4_bytes+0x30>)
 800dbf6:	f004 fc37 	bl	8012468 <assertFail>
}
 800dbfa:	bf00      	nop
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	0801a6f8 	.word	0x0801a6f8
 800dc08:	0801a738 	.word	0x0801a738

0800dc0c <mat_trans>:

static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f7ff ffde 	bl	800dbd8 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800dc1c:	6838      	ldr	r0, [r7, #0]
 800dc1e:	f7ff ffdb 	bl	800dbd8 <assert_aligned_4_bytes>

  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 800dc22:	6839      	ldr	r1, [r7, #0]
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f009 fbcd 	bl	80173c4 <arm_mat_trans_f32>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 800dc2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d004      	beq.n	800dc40 <mat_trans+0x34>
 800dc36:	2241      	movs	r2, #65	@ 0x41
 800dc38:	4903      	ldr	r1, [pc, #12]	@ (800dc48 <mat_trans+0x3c>)
 800dc3a:	4804      	ldr	r0, [pc, #16]	@ (800dc4c <mat_trans+0x40>)
 800dc3c:	f004 fc14 	bl	8012468 <assertFail>
}
 800dc40:	bf00      	nop
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	0801a6f8 	.word	0x0801a6f8
 800dc4c:	0801a750 	.word	0x0801a750

0800dc50 <mat_mult>:

  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
  ASSERT(ARM_MATH_SUCCESS == result);
}

static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b086      	sub	sp, #24
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f7ff ffbb 	bl	800dbd8 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 800dc62:	68b8      	ldr	r0, [r7, #8]
 800dc64:	f7ff ffb8 	bl	800dbd8 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7ff ffb5 	bl	800dbd8 <assert_aligned_4_bytes>

  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	68b9      	ldr	r1, [r7, #8]
 800dc72:	68f8      	ldr	r0, [r7, #12]
 800dc74:	f009 fc54 	bl	8017520 <arm_mat_mult_f32>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800dc7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d004      	beq.n	800dc8e <mat_mult+0x3e>
 800dc84:	2252      	movs	r2, #82	@ 0x52
 800dc86:	4904      	ldr	r1, [pc, #16]	@ (800dc98 <mat_mult+0x48>)
 800dc88:	4804      	ldr	r0, [pc, #16]	@ (800dc9c <mat_mult+0x4c>)
 800dc8a:	f004 fbed 	bl	8012468 <assertFail>
}
 800dc8e:	bf00      	nop
 800dc90:	3718      	adds	r7, #24
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	0801a6f8 	.word	0x0801a6f8
 800dc9c:	0801a750 	.word	0x0801a750

0800dca0 <arm_sqrt>:

static inline float arm_sqrt(float32_t in) {
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b086      	sub	sp, #24
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 800dcaa:	f04f 0300 	mov.w	r3, #0
 800dcae:	60bb      	str	r3, [r7, #8]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	613b      	str	r3, [r7, #16]
 800dcb4:	f107 0308 	add.w	r3, r7, #8
 800dcb8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800dcba:	edd7 7a04 	vldr	s15, [r7, #16]
 800dcbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dcc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc6:	db0a      	blt.n	800dcde <arm_sqrt+0x3e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800dcc8:	ed97 0a04 	vldr	s0, [r7, #16]
 800dccc:	f009 ffc8 	bl	8017c60 <sqrtf>
 800dcd0:	eef0 7a40 	vmov.f32	s15, s0
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 800dcda:	2300      	movs	r3, #0
 800dcdc:	e005      	b.n	800dcea <arm_sqrt+0x4a>
    }
    else
    {
      *pOut = 0.0f;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f04f 0200 	mov.w	r2, #0
 800dce4:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800dce6:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 800dcea:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800dcec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d004      	beq.n	800dcfe <arm_sqrt+0x5e>
 800dcf4:	2258      	movs	r2, #88	@ 0x58
 800dcf6:	4906      	ldr	r1, [pc, #24]	@ (800dd10 <arm_sqrt+0x70>)
 800dcf8:	4806      	ldr	r0, [pc, #24]	@ (800dd14 <arm_sqrt+0x74>)
 800dcfa:	f004 fbb5 	bl	8012468 <assertFail>
  return pOut;
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	ee07 3a90 	vmov	s15, r3
}
 800dd04:	eeb0 0a67 	vmov.f32	s0, s15
 800dd08:	3718      	adds	r7, #24
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	0801a6f8 	.word	0x0801a6f8
 800dd14:	0801a750 	.word	0x0801a750

0800dd18 <mat_scale>:
  }

  return a;
}

static inline void mat_scale(const arm_matrix_instance_f32 * pSrcA, float32_t scale, arm_matrix_instance_f32 * pDst) {
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b086      	sub	sp, #24
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	ed87 0a02 	vstr	s0, [r7, #8]
 800dd24:	6079      	str	r1, [r7, #4]
  arm_status result = arm_mat_scale_f32(pSrcA, scale, pDst);
 800dd26:	6879      	ldr	r1, [r7, #4]
 800dd28:	ed97 0a02 	vldr	s0, [r7, #8]
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f009 fba5 	bl	801747c <arm_mat_scale_f32>
 800dd32:	4603      	mov	r3, r0
 800dd34:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800dd36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d004      	beq.n	800dd48 <mat_scale+0x30>
 800dd3e:	2272      	movs	r2, #114	@ 0x72
 800dd40:	4903      	ldr	r1, [pc, #12]	@ (800dd50 <mat_scale+0x38>)
 800dd42:	4804      	ldr	r0, [pc, #16]	@ (800dd54 <mat_scale+0x3c>)
 800dd44:	f004 fb90 	bl	8012468 <assertFail>
}
 800dd48:	bf00      	nop
 800dd4a:	3718      	adds	r7, #24
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	0801a6f8 	.word	0x0801a6f8
 800dd54:	0801a750 	.word	0x0801a750

0800dd58 <assertStateNotNaN>:
    }
  }
}
#else
static void assertStateNotNaN(const kalmanCoreData_t* this)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
  return;
 800dd60:	bf00      	nop
}
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <kalmanCoreDefaultParams>:

// Small number epsilon, to prevent dividing by zero
#define EPS (1e-6f)

void kalmanCoreDefaultParams(kalmanCoreParams_t* params)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  // Initial variances, uncertain of position, but know we're stationary and roughly flat
  params->stdDevInitialPosition_xy = 100;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	4a21      	ldr	r2, [pc, #132]	@ (800ddfc <kalmanCoreDefaultParams+0x90>)
 800dd78:	601a      	str	r2, [r3, #0]
  params->stdDevInitialPosition_z = 1;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800dd80:	605a      	str	r2, [r3, #4]
  params->stdDevInitialVelocity = 0.01;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	4a1e      	ldr	r2, [pc, #120]	@ (800de00 <kalmanCoreDefaultParams+0x94>)
 800dd86:	609a      	str	r2, [r3, #8]
  params->stdDevInitialAttitude_rollpitch = 0.01;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	4a1d      	ldr	r2, [pc, #116]	@ (800de00 <kalmanCoreDefaultParams+0x94>)
 800dd8c:	60da      	str	r2, [r3, #12]
  params->stdDevInitialAttitude_yaw = 0.01;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a1b      	ldr	r2, [pc, #108]	@ (800de00 <kalmanCoreDefaultParams+0x94>)
 800dd92:	611a      	str	r2, [r3, #16]

  params->procNoiseAcc_xy = 0.5f;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800dd9a:	615a      	str	r2, [r3, #20]
  params->procNoiseAcc_z = 1.0f;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800dda2:	619a      	str	r2, [r3, #24]
  params->procNoiseVel = 0;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f04f 0200 	mov.w	r2, #0
 800ddaa:	61da      	str	r2, [r3, #28]
  params->procNoisePos = 0;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f04f 0200 	mov.w	r2, #0
 800ddb2:	621a      	str	r2, [r3, #32]
  params->procNoiseAtt = 0;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f04f 0200 	mov.w	r2, #0
 800ddba:	625a      	str	r2, [r3, #36]	@ 0x24
  params->measNoiseBaro = 2.0f;           // meters
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800ddc2:	629a      	str	r2, [r3, #40]	@ 0x28
  params->measNoiseGyro_rollpitch = 0.1f; // radians per second
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	4a0f      	ldr	r2, [pc, #60]	@ (800de04 <kalmanCoreDefaultParams+0x98>)
 800ddc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  params->measNoiseGyro_yaw = 0.1f;       // radians per second
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a0d      	ldr	r2, [pc, #52]	@ (800de04 <kalmanCoreDefaultParams+0x98>)
 800ddce:	631a      	str	r2, [r3, #48]	@ 0x30

  params->initialX = 0.0;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f04f 0200 	mov.w	r2, #0
 800ddd6:	635a      	str	r2, [r3, #52]	@ 0x34
  params->initialY = 0.0;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f04f 0200 	mov.w	r2, #0
 800ddde:	639a      	str	r2, [r3, #56]	@ 0x38
  params->initialZ = 0.0;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f04f 0200 	mov.w	r2, #0
 800dde6:	63da      	str	r2, [r3, #60]	@ 0x3c
  // Initial yaw of the Crazyflie in radians.
  // 0 --- facing positive X
  // PI / 2 --- facing positive Y
  // PI --- facing negative X
  // 3 * PI / 2 --- facing negative Y
  params->initialYaw = 0.0;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f04f 0200 	mov.w	r2, #0
 800ddee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ddf0:	bf00      	nop
 800ddf2:	370c      	adds	r7, #12
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr
 800ddfc:	42c80000 	.word	0x42c80000
 800de00:	3c23d70a 	.word	0x3c23d70a
 800de04:	3dcccccd 	.word	0x3dcccccd

0800de08 <kalmanCoreInit>:

void kalmanCoreInit(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08a      	sub	sp, #40	@ 0x28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	607a      	str	r2, [r7, #4]
  // Reset all data to 0 (like upon system reset)
  memset(this, 0, sizeof(kalmanCoreData_t));
 800de14:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800de18:	2100      	movs	r1, #0
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f009 fdb6 	bl	801798c <memset>

  this->S[KC_STATE_X] = params->initialX;
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	601a      	str	r2, [r3, #0]
  this->S[KC_STATE_Y] = params->initialY;
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	605a      	str	r2, [r3, #4]
  this->S[KC_STATE_Z] = params->initialZ;
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	609a      	str	r2, [r3, #8]
//  this->S[KC_STATE_D0] = 0;
//  this->S[KC_STATE_D1] = 0;
//  this->S[KC_STATE_D2] = 0;

  // reset the attitude quaternion
  this->initialQuaternion[0] = arm_cos_f32(params->initialYaw / 2);
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800de3e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800de42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800de46:	eeb0 0a47 	vmov.f32	s0, s14
 800de4a:	f009 fd55 	bl	80178f8 <arm_cos_f32>
 800de4e:	eef0 7a40 	vmov.f32	s15, s0
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	edc3 7a6a 	vstr	s15, [r3, #424]	@ 0x1a8
  this->initialQuaternion[1] = 0.0;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f04f 0200 	mov.w	r2, #0
 800de5e:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
  this->initialQuaternion[2] = 0.0;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f04f 0200 	mov.w	r2, #0
 800de68:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
  this->initialQuaternion[3] = arm_sin_f32(params->initialYaw / 2);
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800de72:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800de76:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800de7a:	eeb0 0a47 	vmov.f32	s0, s14
 800de7e:	f009 fcf5 	bl	801786c <arm_sin_f32>
 800de82:	eef0 7a40 	vmov.f32	s15, s0
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	edc3 7a6d 	vstr	s15, [r3, #436]	@ 0x1b4
  for (int i = 0; i < 4; i++) { this->q[i] = this->initialQuaternion[i]; }
 800de8c:	2300      	movs	r3, #0
 800de8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800de90:	e00f      	b.n	800deb2 <kalmanCoreInit+0xaa>
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de96:	336a      	adds	r3, #106	@ 0x6a
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4413      	add	r3, r2
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	68f9      	ldr	r1, [r7, #12]
 800dea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea2:	3308      	adds	r3, #8
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	440b      	add	r3, r1
 800dea8:	3304      	adds	r3, #4
 800deaa:	601a      	str	r2, [r3, #0]
 800deac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deae:	3301      	adds	r3, #1
 800deb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800deb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb4:	2b03      	cmp	r3, #3
 800deb6:	ddec      	ble.n	800de92 <kalmanCoreInit+0x8a>

  // then set the initial rotation matrix to the identity. This only affects
  // the first prediction step, since in the finalization, after shifting
  // attitude errors into the attitude state, the rotation matrix is updated.
  for(int i=0; i<3; i++) { for(int j=0; j<3; j++) { this->R[i][j] = i==j ? 1 : 0; }}
 800deb8:	2300      	movs	r3, #0
 800deba:	623b      	str	r3, [r7, #32]
 800debc:	e020      	b.n	800df00 <kalmanCoreInit+0xf8>
 800debe:	2300      	movs	r3, #0
 800dec0:	61fb      	str	r3, [r7, #28]
 800dec2:	e017      	b.n	800def4 <kalmanCoreInit+0xec>
 800dec4:	6a3a      	ldr	r2, [r7, #32]
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d102      	bne.n	800ded2 <kalmanCoreInit+0xca>
 800decc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ded0:	e001      	b.n	800ded6 <kalmanCoreInit+0xce>
 800ded2:	f04f 0100 	mov.w	r1, #0
 800ded6:	68f8      	ldr	r0, [r7, #12]
 800ded8:	6a3a      	ldr	r2, [r7, #32]
 800deda:	4613      	mov	r3, r2
 800dedc:	005b      	lsls	r3, r3, #1
 800dede:	4413      	add	r3, r2
 800dee0:	69fa      	ldr	r2, [r7, #28]
 800dee2:	4413      	add	r3, r2
 800dee4:	330c      	adds	r3, #12
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	4403      	add	r3, r0
 800deea:	3304      	adds	r3, #4
 800deec:	6019      	str	r1, [r3, #0]
 800deee:	69fb      	ldr	r3, [r7, #28]
 800def0:	3301      	adds	r3, #1
 800def2:	61fb      	str	r3, [r7, #28]
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	2b02      	cmp	r3, #2
 800def8:	dde4      	ble.n	800dec4 <kalmanCoreInit+0xbc>
 800defa:	6a3b      	ldr	r3, [r7, #32]
 800defc:	3301      	adds	r3, #1
 800defe:	623b      	str	r3, [r7, #32]
 800df00:	6a3b      	ldr	r3, [r7, #32]
 800df02:	2b02      	cmp	r3, #2
 800df04:	dddb      	ble.n	800debe <kalmanCoreInit+0xb6>

  for (int i=0; i< KC_STATE_DIM; i++) {
 800df06:	2300      	movs	r3, #0
 800df08:	61bb      	str	r3, [r7, #24]
 800df0a:	e018      	b.n	800df3e <kalmanCoreInit+0x136>
    for (int j=0; j < KC_STATE_DIM; j++) {
 800df0c:	2300      	movs	r3, #0
 800df0e:	617b      	str	r3, [r7, #20]
 800df10:	e00f      	b.n	800df32 <kalmanCoreInit+0x12a>
      this->P[i][j] = 0; // set covariances to zero (diagonals will be changed from zero in the next section)
 800df12:	68f9      	ldr	r1, [r7, #12]
 800df14:	69ba      	ldr	r2, [r7, #24]
 800df16:	4613      	mov	r3, r2
 800df18:	00db      	lsls	r3, r3, #3
 800df1a:	4413      	add	r3, r2
 800df1c:	697a      	ldr	r2, [r7, #20]
 800df1e:	4413      	add	r3, r2
 800df20:	3316      	adds	r3, #22
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	440b      	add	r3, r1
 800df26:	f04f 0200 	mov.w	r2, #0
 800df2a:	601a      	str	r2, [r3, #0]
    for (int j=0; j < KC_STATE_DIM; j++) {
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	3301      	adds	r3, #1
 800df30:	617b      	str	r3, [r7, #20]
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	2b08      	cmp	r3, #8
 800df36:	ddec      	ble.n	800df12 <kalmanCoreInit+0x10a>
  for (int i=0; i< KC_STATE_DIM; i++) {
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	3301      	adds	r3, #1
 800df3c:	61bb      	str	r3, [r7, #24]
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	2b08      	cmp	r3, #8
 800df42:	dde3      	ble.n	800df0c <kalmanCoreInit+0x104>
    }
  }

  // initialize state variances
  this->P[KC_STATE_X][KC_STATE_X]  = powf(params->stdDevInitialPosition_xy, 2);
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	edd3 7a00 	vldr	s15, [r3]
 800df4a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800df4e:	eeb0 0a67 	vmov.f32	s0, s15
 800df52:	f009 fe2d 	bl	8017bb0 <powf>
 800df56:	eef0 7a40 	vmov.f32	s15, s0
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
  this->P[KC_STATE_Y][KC_STATE_Y]  = powf(params->stdDevInitialPosition_xy, 2);
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	edd3 7a00 	vldr	s15, [r3]
 800df66:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800df6a:	eeb0 0a67 	vmov.f32	s0, s15
 800df6e:	f009 fe1f 	bl	8017bb0 <powf>
 800df72:	eef0 7a40 	vmov.f32	s15, s0
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  this->P[KC_STATE_Z][KC_STATE_Z]  = powf(params->stdDevInitialPosition_z, 2);
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	edd3 7a01 	vldr	s15, [r3, #4]
 800df82:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800df86:	eeb0 0a67 	vmov.f32	s0, s15
 800df8a:	f009 fe11 	bl	8017bb0 <powf>
 800df8e:	eef0 7a40 	vmov.f32	s15, s0
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] = powf(params->stdDevInitialVelocity, 2);
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	edd3 7a02 	vldr	s15, [r3, #8]
 800df9e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800dfa2:	eeb0 0a67 	vmov.f32	s0, s15
 800dfa6:	f009 fe03 	bl	8017bb0 <powf>
 800dfaa:	eef0 7a40 	vmov.f32	s15, s0
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] = powf(params->stdDevInitialVelocity, 2);
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	edd3 7a02 	vldr	s15, [r3, #8]
 800dfba:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800dfbe:	eeb0 0a67 	vmov.f32	s0, s15
 800dfc2:	f009 fdf5 	bl	8017bb0 <powf>
 800dfc6:	eef0 7a40 	vmov.f32	s15, s0
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] = powf(params->stdDevInitialVelocity, 2);
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	edd3 7a02 	vldr	s15, [r3, #8]
 800dfd6:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800dfda:	eeb0 0a67 	vmov.f32	s0, s15
 800dfde:	f009 fde7 	bl	8017bb0 <powf>
 800dfe2:	eef0 7a40 	vmov.f32	s15, s0
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	edd3 7a03 	vldr	s15, [r3, #12]
 800dff2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800dff6:	eeb0 0a67 	vmov.f32	s0, s15
 800dffa:	f009 fdd9 	bl	8017bb0 <powf>
 800dffe:	eef0 7a40 	vmov.f32	s15, s0
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	edd3 7a03 	vldr	s15, [r3, #12]
 800e00e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e012:	eeb0 0a67 	vmov.f32	s0, s15
 800e016:	f009 fdcb 	bl	8017bb0 <powf>
 800e01a:	eef0 7a40 	vmov.f32	s15, s0
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] = powf(params->stdDevInitialAttitude_yaw, 2);
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	edd3 7a04 	vldr	s15, [r3, #16]
 800e02a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e02e:	eeb0 0a67 	vmov.f32	s0, s15
 800e032:	f009 fdbd 	bl	8017bb0 <powf>
 800e036:	eef0 7a40 	vmov.f32	s15, s0
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198

  this->Pm.numRows = KC_STATE_DIM;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	2209      	movs	r2, #9
 800e044:	f8a3 219c 	strh.w	r2, [r3, #412]	@ 0x19c
  this->Pm.numCols = KC_STATE_DIM;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2209      	movs	r2, #9
 800e04c:	f8a3 219e 	strh.w	r2, [r3, #414]	@ 0x19e
  this->Pm.pData = (float*)this->P;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0

  this->baroReferenceHeight = 0.0;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f04f 0200 	mov.w	r2, #0
 800e062:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4

  this->isUpdated = false;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2200      	movs	r2, #0
 800e06a:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
  this->lastPredictionMs = nowMs;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
  this->lastProcessNoiseUpdateMs = nowMs;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
}
 800e07e:	bf00      	nop
 800e080:	3728      	adds	r7, #40	@ 0x28
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
	...

0800e088 <kalmanCoreScalarUpdate>:

void kalmanCoreScalarUpdate(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, float error, float stdMeasNoise)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b090      	sub	sp, #64	@ 0x40
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	ed87 0a01 	vstr	s0, [r7, #4]
 800e096:	edc7 0a00 	vstr	s1, [r7]
  static arm_matrix_instance_f32 HTm = {KC_STATE_DIM, 1, HTd};

  NO_DMA_CCM_SAFE_ZERO_INIT __attribute__((aligned(4))) static float PHTd[KC_STATE_DIM * 1];
  static arm_matrix_instance_f32 PHTm = {KC_STATE_DIM, 1, PHTd};

  ASSERT(Hm->numRows == 1);
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	881b      	ldrh	r3, [r3, #0]
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	d004      	beq.n	800e0ac <kalmanCoreScalarUpdate+0x24>
 800e0a2:	22e8      	movs	r2, #232	@ 0xe8
 800e0a4:	49ac      	ldr	r1, [pc, #688]	@ (800e358 <kalmanCoreScalarUpdate+0x2d0>)
 800e0a6:	48ad      	ldr	r0, [pc, #692]	@ (800e35c <kalmanCoreScalarUpdate+0x2d4>)
 800e0a8:	f004 f9de 	bl	8012468 <assertFail>
  ASSERT(Hm->numCols == KC_STATE_DIM);
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	885b      	ldrh	r3, [r3, #2]
 800e0b0:	2b09      	cmp	r3, #9
 800e0b2:	d004      	beq.n	800e0be <kalmanCoreScalarUpdate+0x36>
 800e0b4:	22e9      	movs	r2, #233	@ 0xe9
 800e0b6:	49a8      	ldr	r1, [pc, #672]	@ (800e358 <kalmanCoreScalarUpdate+0x2d0>)
 800e0b8:	48a9      	ldr	r0, [pc, #676]	@ (800e360 <kalmanCoreScalarUpdate+0x2d8>)
 800e0ba:	f004 f9d5 	bl	8012468 <assertFail>

  // ====== INNOVATION COVARIANCE ======

  mat_trans(Hm, &HTm);
 800e0be:	49a9      	ldr	r1, [pc, #676]	@ (800e364 <kalmanCoreScalarUpdate+0x2dc>)
 800e0c0:	68b8      	ldr	r0, [r7, #8]
 800e0c2:	f7ff fda3 	bl	800dc0c <mat_trans>
  mat_mult(&this->Pm, &HTm, &PHTm); // PH'
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800e0cc:	4aa6      	ldr	r2, [pc, #664]	@ (800e368 <kalmanCoreScalarUpdate+0x2e0>)
 800e0ce:	49a5      	ldr	r1, [pc, #660]	@ (800e364 <kalmanCoreScalarUpdate+0x2dc>)
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7ff fdbd 	bl	800dc50 <mat_mult>
  float R = stdMeasNoise*stdMeasNoise;
 800e0d6:	edd7 7a00 	vldr	s15, [r7]
 800e0da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e0de:	edc7 7a08 	vstr	s15, [r7, #32]
  double HPHR = R; // HPH' + R
 800e0e2:	6a38      	ldr	r0, [r7, #32]
 800e0e4:	f7f2 f9e2 	bl	80004ac <__aeabi_f2d>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	460b      	mov	r3, r1
 800e0ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0f4:	e01f      	b.n	800e136 <kalmanCoreScalarUpdate+0xae>
    HPHR += Hm->pData[i]*PHTd[i]; // this obviously only works if the update is scalar (as in this function)
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	685a      	ldr	r2, [r3, #4]
 800e0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4413      	add	r3, r2
 800e100:	ed93 7a00 	vldr	s14, [r3]
 800e104:	4a99      	ldr	r2, [pc, #612]	@ (800e36c <kalmanCoreScalarUpdate+0x2e4>)
 800e106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	4413      	add	r3, r2
 800e10c:	edd3 7a00 	vldr	s15, [r3]
 800e110:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e114:	ee17 0a90 	vmov	r0, s15
 800e118:	f7f2 f9c8 	bl	80004ac <__aeabi_f2d>
 800e11c:	4602      	mov	r2, r0
 800e11e:	460b      	mov	r3, r1
 800e120:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800e124:	f7f2 f864 	bl	80001f0 <__adddf3>
 800e128:	4602      	mov	r2, r0
 800e12a:	460b      	mov	r3, r1
 800e12c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 800e130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e132:	3301      	adds	r3, #1
 800e134:	637b      	str	r3, [r7, #52]	@ 0x34
 800e136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e138:	2b08      	cmp	r3, #8
 800e13a:	dddc      	ble.n	800e0f6 <kalmanCoreScalarUpdate+0x6e>

  }
  ASSERT(!isnan(HPHR));
 800e13c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e140:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800e144:	f7f2 fca4 	bl	8000a90 <__aeabi_dcmpun>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d004      	beq.n	800e158 <kalmanCoreScalarUpdate+0xd0>
 800e14e:	22f6      	movs	r2, #246	@ 0xf6
 800e150:	4981      	ldr	r1, [pc, #516]	@ (800e358 <kalmanCoreScalarUpdate+0x2d0>)
 800e152:	4887      	ldr	r0, [pc, #540]	@ (800e370 <kalmanCoreScalarUpdate+0x2e8>)
 800e154:	f004 f988 	bl	8012468 <assertFail>

  // ====== MEASUREMENT UPDATE ======
  // Calculate the Kalman gain and perform the state update
  for (int i=0; i<KC_STATE_DIM; i++) {
 800e158:	2300      	movs	r3, #0
 800e15a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e15c:	e032      	b.n	800e1c4 <kalmanCoreScalarUpdate+0x13c>
    K[i] = PHTd[i]/HPHR; // kalman gain = (PH' (HPH' + R )^-1)
 800e15e:	4a83      	ldr	r2, [pc, #524]	@ (800e36c <kalmanCoreScalarUpdate+0x2e4>)
 800e160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	4413      	add	r3, r2
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4618      	mov	r0, r3
 800e16a:	f7f2 f99f 	bl	80004ac <__aeabi_f2d>
 800e16e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e172:	f7f2 fb1d 	bl	80007b0 <__aeabi_ddiv>
 800e176:	4602      	mov	r2, r0
 800e178:	460b      	mov	r3, r1
 800e17a:	4610      	mov	r0, r2
 800e17c:	4619      	mov	r1, r3
 800e17e:	f7f2 fc9d 	bl	8000abc <__aeabi_d2f>
 800e182:	4602      	mov	r2, r0
 800e184:	497b      	ldr	r1, [pc, #492]	@ (800e374 <kalmanCoreScalarUpdate+0x2ec>)
 800e186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	440b      	add	r3, r1
 800e18c:	601a      	str	r2, [r3, #0]
    this->S[i] = this->S[i] + K[i] * error; // state update
 800e18e:	68fa      	ldr	r2, [r7, #12]
 800e190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e192:	009b      	lsls	r3, r3, #2
 800e194:	4413      	add	r3, r2
 800e196:	ed93 7a00 	vldr	s14, [r3]
 800e19a:	4a76      	ldr	r2, [pc, #472]	@ (800e374 <kalmanCoreScalarUpdate+0x2ec>)
 800e19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	edd3 6a00 	vldr	s13, [r3]
 800e1a6:	edd7 7a01 	vldr	s15, [r7, #4]
 800e1aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1b2:	68fa      	ldr	r2, [r7, #12]
 800e1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4413      	add	r3, r2
 800e1ba:	edc3 7a00 	vstr	s15, [r3]
  for (int i=0; i<KC_STATE_DIM; i++) {
 800e1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c6:	2b08      	cmp	r3, #8
 800e1c8:	ddc9      	ble.n	800e15e <kalmanCoreScalarUpdate+0xd6>
  }
  assertStateNotNaN(this);
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f7ff fdc4 	bl	800dd58 <assertStateNotNaN>

  // ====== COVARIANCE UPDATE ======
  mat_mult(&Km, Hm, &tmpNN1m); // KH
 800e1d0:	4a69      	ldr	r2, [pc, #420]	@ (800e378 <kalmanCoreScalarUpdate+0x2f0>)
 800e1d2:	68b9      	ldr	r1, [r7, #8]
 800e1d4:	4869      	ldr	r0, [pc, #420]	@ (800e37c <kalmanCoreScalarUpdate+0x2f4>)
 800e1d6:	f7ff fd3b 	bl	800dc50 <mat_mult>
  for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[KC_STATE_DIM*i+i] -= 1; } // KH - I
 800e1da:	2300      	movs	r3, #0
 800e1dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e1de:	e01a      	b.n	800e216 <kalmanCoreScalarUpdate+0x18e>
 800e1e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1e2:	4613      	mov	r3, r2
 800e1e4:	009b      	lsls	r3, r3, #2
 800e1e6:	4413      	add	r3, r2
 800e1e8:	005b      	lsls	r3, r3, #1
 800e1ea:	4a65      	ldr	r2, [pc, #404]	@ (800e380 <kalmanCoreScalarUpdate+0x2f8>)
 800e1ec:	009b      	lsls	r3, r3, #2
 800e1ee:	4413      	add	r3, r2
 800e1f0:	edd3 7a00 	vldr	s15, [r3]
 800e1f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	4413      	add	r3, r2
 800e1fc:	005b      	lsls	r3, r3, #1
 800e1fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e206:	4a5e      	ldr	r2, [pc, #376]	@ (800e380 <kalmanCoreScalarUpdate+0x2f8>)
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4413      	add	r3, r2
 800e20c:	edc3 7a00 	vstr	s15, [r3]
 800e210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e212:	3301      	adds	r3, #1
 800e214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e218:	2b08      	cmp	r3, #8
 800e21a:	dde1      	ble.n	800e1e0 <kalmanCoreScalarUpdate+0x158>
  mat_trans(&tmpNN1m, &tmpNN2m); // (KH - I)'
 800e21c:	4959      	ldr	r1, [pc, #356]	@ (800e384 <kalmanCoreScalarUpdate+0x2fc>)
 800e21e:	4856      	ldr	r0, [pc, #344]	@ (800e378 <kalmanCoreScalarUpdate+0x2f0>)
 800e220:	f7ff fcf4 	bl	800dc0c <mat_trans>
  mat_mult(&tmpNN1m, &this->Pm, &tmpNN3m); // (KH - I)*P
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800e22a:	4a57      	ldr	r2, [pc, #348]	@ (800e388 <kalmanCoreScalarUpdate+0x300>)
 800e22c:	4619      	mov	r1, r3
 800e22e:	4852      	ldr	r0, [pc, #328]	@ (800e378 <kalmanCoreScalarUpdate+0x2f0>)
 800e230:	f7ff fd0e 	bl	800dc50 <mat_mult>
  mat_mult(&tmpNN3m, &tmpNN2m, &this->Pm); // (KH - I)*P*(KH - I)'
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800e23a:	461a      	mov	r2, r3
 800e23c:	4951      	ldr	r1, [pc, #324]	@ (800e384 <kalmanCoreScalarUpdate+0x2fc>)
 800e23e:	4852      	ldr	r0, [pc, #328]	@ (800e388 <kalmanCoreScalarUpdate+0x300>)
 800e240:	f7ff fd06 	bl	800dc50 <mat_mult>
  assertStateNotNaN(this);
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f7ff fd87 	bl	800dd58 <assertStateNotNaN>
  // add the measurement variance and ensure boundedness and symmetry
  // TODO: Why would it hit these bounds? Needs to be investigated.
  for (int i=0; i<KC_STATE_DIM; i++) {
 800e24a:	2300      	movs	r3, #0
 800e24c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e24e:	e101      	b.n	800e454 <kalmanCoreScalarUpdate+0x3cc>
    for (int j=i; j<KC_STATE_DIM; j++) {
 800e250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e252:	627b      	str	r3, [r7, #36]	@ 0x24
 800e254:	e0f7      	b.n	800e446 <kalmanCoreScalarUpdate+0x3be>
      double v = K[i] * R * K[j];
 800e256:	4a47      	ldr	r2, [pc, #284]	@ (800e374 <kalmanCoreScalarUpdate+0x2ec>)
 800e258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	4413      	add	r3, r2
 800e25e:	ed93 7a00 	vldr	s14, [r3]
 800e262:	edd7 7a08 	vldr	s15, [r7, #32]
 800e266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e26a:	4a42      	ldr	r2, [pc, #264]	@ (800e374 <kalmanCoreScalarUpdate+0x2ec>)
 800e26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	4413      	add	r3, r2
 800e272:	edd3 7a00 	vldr	s15, [r3]
 800e276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e27a:	ee17 0a90 	vmov	r0, s15
 800e27e:	f7f2 f915 	bl	80004ac <__aeabi_f2d>
 800e282:	4602      	mov	r2, r0
 800e284:	460b      	mov	r3, r1
 800e286:	e9c7 2306 	strd	r2, r3, [r7, #24]
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i] + v; // add measurement noise
 800e28a:	68f9      	ldr	r1, [r7, #12]
 800e28c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e28e:	4613      	mov	r3, r2
 800e290:	00db      	lsls	r3, r3, #3
 800e292:	4413      	add	r3, r2
 800e294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e296:	4413      	add	r3, r2
 800e298:	3316      	adds	r3, #22
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	440b      	add	r3, r1
 800e29e:	edd3 7a00 	vldr	s15, [r3]
 800e2a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e2a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e2aa:	68f9      	ldr	r1, [r7, #12]
 800e2ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	00db      	lsls	r3, r3, #3
 800e2b2:	4413      	add	r3, r2
 800e2b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2b6:	4413      	add	r3, r2
 800e2b8:	3316      	adds	r3, #22
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	440b      	add	r3, r1
 800e2be:	edd3 7a00 	vldr	s15, [r3]
 800e2c2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800e2c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e2ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2ce:	ee17 0a90 	vmov	r0, s15
 800e2d2:	f7f2 f8eb 	bl	80004ac <__aeabi_f2d>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	460b      	mov	r3, r1
 800e2da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e2de:	f7f1 ff87 	bl	80001f0 <__adddf3>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      if (isnan(p) || p > MAX_COVARIANCE) {
 800e2ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e2ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e2f2:	f7f2 fbcd 	bl	8000a90 <__aeabi_dcmpun>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d109      	bne.n	800e310 <kalmanCoreScalarUpdate+0x288>
 800e2fc:	f04f 0200 	mov.w	r2, #0
 800e300:	4b22      	ldr	r3, [pc, #136]	@ (800e38c <kalmanCoreScalarUpdate+0x304>)
 800e302:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e306:	f7f2 fbb9 	bl	8000a7c <__aeabi_dcmpgt>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d041      	beq.n	800e394 <kalmanCoreScalarUpdate+0x30c>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 800e310:	68f9      	ldr	r1, [r7, #12]
 800e312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e314:	4613      	mov	r3, r2
 800e316:	00db      	lsls	r3, r3, #3
 800e318:	4413      	add	r3, r2
 800e31a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e31c:	4413      	add	r3, r2
 800e31e:	3316      	adds	r3, #22
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	440b      	add	r3, r1
 800e324:	4a1a      	ldr	r2, [pc, #104]	@ (800e390 <kalmanCoreScalarUpdate+0x308>)
 800e326:	601a      	str	r2, [r3, #0]
 800e328:	68f9      	ldr	r1, [r7, #12]
 800e32a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e32c:	4613      	mov	r3, r2
 800e32e:	00db      	lsls	r3, r3, #3
 800e330:	4413      	add	r3, r2
 800e332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e334:	4413      	add	r3, r2
 800e336:	3316      	adds	r3, #22
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	440b      	add	r3, r1
 800e33c:	6819      	ldr	r1, [r3, #0]
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e342:	4613      	mov	r3, r2
 800e344:	00db      	lsls	r3, r3, #3
 800e346:	4413      	add	r3, r2
 800e348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e34a:	4413      	add	r3, r2
 800e34c:	3316      	adds	r3, #22
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	4403      	add	r3, r0
 800e352:	6019      	str	r1, [r3, #0]
 800e354:	e074      	b.n	800e440 <kalmanCoreScalarUpdate+0x3b8>
 800e356:	bf00      	nop
 800e358:	0801a76c 	.word	0x0801a76c
 800e35c:	0801a798 	.word	0x0801a798
 800e360:	0801a7ac 	.word	0x0801a7ac
 800e364:	20000078 	.word	0x20000078
 800e368:	20000080 	.word	0x20000080
 800e36c:	10003f10 	.word	0x10003f10
 800e370:	0801a7c8 	.word	0x0801a7c8
 800e374:	10003afc 	.word	0x10003afc
 800e378:	20000090 	.word	0x20000090
 800e37c:	20000088 	.word	0x20000088
 800e380:	10003b20 	.word	0x10003b20
 800e384:	20000098 	.word	0x20000098
 800e388:	200000a0 	.word	0x200000a0
 800e38c:	40590000 	.word	0x40590000
 800e390:	42c80000 	.word	0x42c80000
      } else if ( i==j && p < MIN_COVARIANCE ) {
 800e394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e398:	429a      	cmp	r2, r3
 800e39a:	d12c      	bne.n	800e3f6 <kalmanCoreScalarUpdate+0x36e>
 800e39c:	a337      	add	r3, pc, #220	@ (adr r3, 800e47c <kalmanCoreScalarUpdate+0x3f4>)
 800e39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e3a6:	f7f2 fb4b 	bl	8000a40 <__aeabi_dcmplt>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d022      	beq.n	800e3f6 <kalmanCoreScalarUpdate+0x36e>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 800e3b0:	68f9      	ldr	r1, [r7, #12]
 800e3b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	00db      	lsls	r3, r3, #3
 800e3b8:	4413      	add	r3, r2
 800e3ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3bc:	4413      	add	r3, r2
 800e3be:	3316      	adds	r3, #22
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	440b      	add	r3, r1
 800e3c4:	4a2c      	ldr	r2, [pc, #176]	@ (800e478 <kalmanCoreScalarUpdate+0x3f0>)
 800e3c6:	601a      	str	r2, [r3, #0]
 800e3c8:	68f9      	ldr	r1, [r7, #12]
 800e3ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	00db      	lsls	r3, r3, #3
 800e3d0:	4413      	add	r3, r2
 800e3d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3d4:	4413      	add	r3, r2
 800e3d6:	3316      	adds	r3, #22
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	440b      	add	r3, r1
 800e3dc:	6819      	ldr	r1, [r3, #0]
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	00db      	lsls	r3, r3, #3
 800e3e6:	4413      	add	r3, r2
 800e3e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3ea:	4413      	add	r3, r2
 800e3ec:	3316      	adds	r3, #22
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	4403      	add	r3, r0
 800e3f2:	6019      	str	r1, [r3, #0]
 800e3f4:	e024      	b.n	800e440 <kalmanCoreScalarUpdate+0x3b8>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 800e3f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e3fa:	f7f2 fb5f 	bl	8000abc <__aeabi_d2f>
 800e3fe:	68f9      	ldr	r1, [r7, #12]
 800e400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e402:	4613      	mov	r3, r2
 800e404:	00db      	lsls	r3, r3, #3
 800e406:	4413      	add	r3, r2
 800e408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e40a:	4413      	add	r3, r2
 800e40c:	3316      	adds	r3, #22
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	440b      	add	r3, r1
 800e412:	6018      	str	r0, [r3, #0]
 800e414:	68f9      	ldr	r1, [r7, #12]
 800e416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e418:	4613      	mov	r3, r2
 800e41a:	00db      	lsls	r3, r3, #3
 800e41c:	4413      	add	r3, r2
 800e41e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e420:	4413      	add	r3, r2
 800e422:	3316      	adds	r3, #22
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	440b      	add	r3, r1
 800e428:	6819      	ldr	r1, [r3, #0]
 800e42a:	68f8      	ldr	r0, [r7, #12]
 800e42c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e42e:	4613      	mov	r3, r2
 800e430:	00db      	lsls	r3, r3, #3
 800e432:	4413      	add	r3, r2
 800e434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e436:	4413      	add	r3, r2
 800e438:	3316      	adds	r3, #22
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4403      	add	r3, r0
 800e43e:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 800e440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e442:	3301      	adds	r3, #1
 800e444:	627b      	str	r3, [r7, #36]	@ 0x24
 800e446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e448:	2b08      	cmp	r3, #8
 800e44a:	f77f af04 	ble.w	800e256 <kalmanCoreScalarUpdate+0x1ce>
  for (int i=0; i<KC_STATE_DIM; i++) {
 800e44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e450:	3301      	adds	r3, #1
 800e452:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e456:	2b08      	cmp	r3, #8
 800e458:	f77f aefa 	ble.w	800e250 <kalmanCoreScalarUpdate+0x1c8>
      }
    }
  }

  assertStateNotNaN(this);
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f7ff fc7b 	bl	800dd58 <assertStateNotNaN>

  this->isUpdated = true;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2201      	movs	r2, #1
 800e466:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 800e46a:	bf00      	nop
 800e46c:	3740      	adds	r7, #64	@ 0x40
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	f3af 8000 	nop.w
 800e478:	358637bd 	.word	0x358637bd
 800e47c:	a0000000 	.word	0xa0000000
 800e480:	3eb0c6f7 	.word	0x3eb0c6f7
 800e484:	00000000 	.word	0x00000000

0800e488 <kalmanCoreUpdateWithPKE>:

void kalmanCoreUpdateWithPKE(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, arm_matrix_instance_f32 *Km, arm_matrix_instance_f32 *P_w_m, float error)
{
 800e488:	b590      	push	{r4, r7, lr}
 800e48a:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 800e48e:	af00      	add	r7, sp, #0
 800e490:	f507 7430 	add.w	r4, r7, #704	@ 0x2c0
 800e494:	f5a4 742b 	sub.w	r4, r4, #684	@ 0x2ac
 800e498:	6020      	str	r0, [r4, #0]
 800e49a:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 800e49e:	f5a0 702c 	sub.w	r0, r0, #688	@ 0x2b0
 800e4a2:	6001      	str	r1, [r0, #0]
 800e4a4:	f507 7130 	add.w	r1, r7, #704	@ 0x2c0
 800e4a8:	f5a1 712d 	sub.w	r1, r1, #692	@ 0x2b4
 800e4ac:	600a      	str	r2, [r1, #0]
 800e4ae:	f507 7230 	add.w	r2, r7, #704	@ 0x2c0
 800e4b2:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 800e4b6:	6013      	str	r3, [r2, #0]
 800e4b8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e4bc:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 800e4c0:	ed83 0a00 	vstr	s0, [r3]
    // kalman filter update with weighted covariance matrix P_w_m, kalman gain Km, and innovation error
    // Temporary matrices for the covariance updates
    static double tmpNN1d[KC_STATE_DIM][KC_STATE_DIM];
    static arm_matrix_instance_f32 tmpNN1m = {KC_STATE_DIM, KC_STATE_DIM, (float *)tmpNN1d};
    for (int i=0; i<KC_STATE_DIM; i++){
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 800e4ca:	e030      	b.n	800e52e <kalmanCoreUpdateWithPKE+0xa6>
        this->S[i] = this->S[i] + Km->pData[i] * error;
 800e4cc:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e4d0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	4413      	add	r3, r2
 800e4de:	ed93 7a00 	vldr	s14, [r3]
 800e4e2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e4e6:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	685a      	ldr	r2, [r3, #4]
 800e4ee:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	4413      	add	r3, r2
 800e4f6:	edd3 6a00 	vldr	s13, [r3]
 800e4fa:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e4fe:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 800e502:	edd3 7a00 	vldr	s15, [r3]
 800e506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e50a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e50e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e512:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800e51c:	009b      	lsls	r3, r3, #2
 800e51e:	4413      	add	r3, r2
 800e520:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<KC_STATE_DIM; i++){
 800e524:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800e528:	3301      	adds	r3, #1
 800e52a:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 800e52e:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800e532:	2b08      	cmp	r3, #8
 800e534:	ddca      	ble.n	800e4cc <kalmanCoreUpdateWithPKE+0x44>
    }
    // ====== COVARIANCE UPDATE ====== //
    mat_mult(Km, Hm, &tmpNN1m);                 // KH,  the Kalman Gain and H are the updated Kalman Gain and H
 800e536:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e53a:	f5a3 712c 	sub.w	r1, r3, #688	@ 0x2b0
 800e53e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e542:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800e546:	4ad0      	ldr	r2, [pc, #832]	@ (800e888 <kalmanCoreUpdateWithPKE+0x400>)
 800e548:	6809      	ldr	r1, [r1, #0]
 800e54a:	6818      	ldr	r0, [r3, #0]
 800e54c:	f7ff fb80 	bl	800dc50 <mat_mult>
    mat_scale(&tmpNN1m, -1.0f, &tmpNN1m);       //  I-KH
 800e550:	49cd      	ldr	r1, [pc, #820]	@ (800e888 <kalmanCoreUpdateWithPKE+0x400>)
 800e552:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800e556:	48cc      	ldr	r0, [pc, #816]	@ (800e888 <kalmanCoreUpdateWithPKE+0x400>)
 800e558:	f7ff fbde 	bl	800dd18 <mat_scale>
    for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[i][i] = 1.0f + tmpNN1d[i][i]; }
 800e55c:	2300      	movs	r3, #0
 800e55e:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800e562:	e021      	b.n	800e5a8 <kalmanCoreUpdateWithPKE+0x120>
 800e564:	49c9      	ldr	r1, [pc, #804]	@ (800e88c <kalmanCoreUpdateWithPKE+0x404>)
 800e566:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 800e56a:	4613      	mov	r3, r2
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	4413      	add	r3, r2
 800e570:	011b      	lsls	r3, r3, #4
 800e572:	440b      	add	r3, r1
 800e574:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e578:	f04f 0200 	mov.w	r2, #0
 800e57c:	4bc4      	ldr	r3, [pc, #784]	@ (800e890 <kalmanCoreUpdateWithPKE+0x408>)
 800e57e:	f7f1 fe37 	bl	80001f0 <__adddf3>
 800e582:	4602      	mov	r2, r0
 800e584:	460b      	mov	r3, r1
 800e586:	4610      	mov	r0, r2
 800e588:	4619      	mov	r1, r3
 800e58a:	4cc0      	ldr	r4, [pc, #768]	@ (800e88c <kalmanCoreUpdateWithPKE+0x404>)
 800e58c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 800e590:	4613      	mov	r3, r2
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	4413      	add	r3, r2
 800e596:	011b      	lsls	r3, r3, #4
 800e598:	4423      	add	r3, r4
 800e59a:	e9c3 0100 	strd	r0, r1, [r3]
 800e59e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800e5a8:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 800e5ac:	2b08      	cmp	r3, #8
 800e5ae:	ddd9      	ble.n	800e564 <kalmanCoreUpdateWithPKE+0xdc>
    double Ppo[KC_STATE_DIM][KC_STATE_DIM]={0};
 800e5b0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e5b4:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f44f 7322 	mov.w	r3, #648	@ 0x288
 800e5be:	461a      	mov	r2, r3
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	f009 f9e3 	bl	801798c <memset>
    arm_matrix_instance_f32 Ppom = {KC_STATE_DIM, KC_STATE_DIM, (float *)Ppo};
 800e5c6:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e5ca:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800e5ce:	2209      	movs	r2, #9
 800e5d0:	801a      	strh	r2, [r3, #0]
 800e5d2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e5d6:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800e5da:	2209      	movs	r2, #9
 800e5dc:	805a      	strh	r2, [r3, #2]
 800e5de:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e5e2:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800e5e6:	f107 0220 	add.w	r2, r7, #32
 800e5ea:	605a      	str	r2, [r3, #4]
    mat_mult(&tmpNN1m, P_w_m, &Ppom);          // Pm = (I-KH)*P_w_m
 800e5ec:	f107 0218 	add.w	r2, r7, #24
 800e5f0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e5f4:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 800e5f8:	6819      	ldr	r1, [r3, #0]
 800e5fa:	48a3      	ldr	r0, [pc, #652]	@ (800e888 <kalmanCoreUpdateWithPKE+0x400>)
 800e5fc:	f7ff fb28 	bl	800dc50 <mat_mult>
    memcpy(this->P, Ppo, sizeof(this->P));
 800e600:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e604:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	3358      	adds	r3, #88	@ 0x58
 800e60c:	f107 0120 	add.w	r1, r7, #32
 800e610:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800e614:	4618      	mov	r0, r3
 800e616:	f009 f9ff 	bl	8017a18 <memcpy>

    assertStateNotNaN(this);
 800e61a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e61e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e622:	6818      	ldr	r0, [r3, #0]
 800e624:	f7ff fb98 	bl	800dd58 <assertStateNotNaN>

    for (int i=0; i<KC_STATE_DIM; i++) {
 800e628:	2300      	movs	r3, #0
 800e62a:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800e62e:	e10d      	b.n	800e84c <kalmanCoreUpdateWithPKE+0x3c4>
        for (int j=i; j<KC_STATE_DIM; j++) {
 800e630:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800e634:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800e638:	e0fe      	b.n	800e838 <kalmanCoreUpdateWithPKE+0x3b0>
        double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 800e63a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e63e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e642:	6819      	ldr	r1, [r3, #0]
 800e644:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800e648:	4613      	mov	r3, r2
 800e64a:	00db      	lsls	r3, r3, #3
 800e64c:	4413      	add	r3, r2
 800e64e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800e652:	4413      	add	r3, r2
 800e654:	3316      	adds	r3, #22
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	440b      	add	r3, r1
 800e65a:	edd3 7a00 	vldr	s15, [r3]
 800e65e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e662:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e666:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e66a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e66e:	6819      	ldr	r1, [r3, #0]
 800e670:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800e674:	4613      	mov	r3, r2
 800e676:	00db      	lsls	r3, r3, #3
 800e678:	4413      	add	r3, r2
 800e67a:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800e67e:	4413      	add	r3, r2
 800e680:	3316      	adds	r3, #22
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	440b      	add	r3, r1
 800e686:	edd3 7a00 	vldr	s15, [r3]
 800e68a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800e68e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e692:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e696:	ee17 0a90 	vmov	r0, s15
 800e69a:	f7f1 ff07 	bl	80004ac <__aeabi_f2d>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
        if (isnan(p) || p > MAX_COVARIANCE) {
 800e6a6:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 800e6aa:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800e6ae:	f7f2 f9ef 	bl	8000a90 <__aeabi_dcmpun>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d109      	bne.n	800e6cc <kalmanCoreUpdateWithPKE+0x244>
 800e6b8:	f04f 0200 	mov.w	r2, #0
 800e6bc:	4b75      	ldr	r3, [pc, #468]	@ (800e894 <kalmanCoreUpdateWithPKE+0x40c>)
 800e6be:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800e6c2:	f7f2 f9db 	bl	8000a7c <__aeabi_dcmpgt>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d034      	beq.n	800e736 <kalmanCoreUpdateWithPKE+0x2ae>
            this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 800e6cc:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e6d0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e6d4:	6819      	ldr	r1, [r3, #0]
 800e6d6:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800e6da:	4613      	mov	r3, r2
 800e6dc:	00db      	lsls	r3, r3, #3
 800e6de:	4413      	add	r3, r2
 800e6e0:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800e6e4:	4413      	add	r3, r2
 800e6e6:	3316      	adds	r3, #22
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	440b      	add	r3, r1
 800e6ec:	4a6a      	ldr	r2, [pc, #424]	@ (800e898 <kalmanCoreUpdateWithPKE+0x410>)
 800e6ee:	601a      	str	r2, [r3, #0]
 800e6f0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e6f4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e6f8:	6819      	ldr	r1, [r3, #0]
 800e6fa:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800e6fe:	4613      	mov	r3, r2
 800e700:	00db      	lsls	r3, r3, #3
 800e702:	4413      	add	r3, r2
 800e704:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800e708:	4413      	add	r3, r2
 800e70a:	3316      	adds	r3, #22
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	440b      	add	r3, r1
 800e710:	6819      	ldr	r1, [r3, #0]
 800e712:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e716:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e71a:	6818      	ldr	r0, [r3, #0]
 800e71c:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800e720:	4613      	mov	r3, r2
 800e722:	00db      	lsls	r3, r3, #3
 800e724:	4413      	add	r3, r2
 800e726:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800e72a:	4413      	add	r3, r2
 800e72c:	3316      	adds	r3, #22
 800e72e:	009b      	lsls	r3, r3, #2
 800e730:	4403      	add	r3, r0
 800e732:	6019      	str	r1, [r3, #0]
 800e734:	e07b      	b.n	800e82e <kalmanCoreUpdateWithPKE+0x3a6>
        } else if ( i==j && p < MIN_COVARIANCE ) {
 800e736:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800e73a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800e73e:	429a      	cmp	r2, r3
 800e740:	d13e      	bne.n	800e7c0 <kalmanCoreUpdateWithPKE+0x338>
 800e742:	a34f      	add	r3, pc, #316	@ (adr r3, 800e880 <kalmanCoreUpdateWithPKE+0x3f8>)
 800e744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e748:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800e74c:	f7f2 f978 	bl	8000a40 <__aeabi_dcmplt>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d034      	beq.n	800e7c0 <kalmanCoreUpdateWithPKE+0x338>
            this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 800e756:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e75a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e75e:	6819      	ldr	r1, [r3, #0]
 800e760:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800e764:	4613      	mov	r3, r2
 800e766:	00db      	lsls	r3, r3, #3
 800e768:	4413      	add	r3, r2
 800e76a:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800e76e:	4413      	add	r3, r2
 800e770:	3316      	adds	r3, #22
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	440b      	add	r3, r1
 800e776:	4a49      	ldr	r2, [pc, #292]	@ (800e89c <kalmanCoreUpdateWithPKE+0x414>)
 800e778:	601a      	str	r2, [r3, #0]
 800e77a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e77e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e782:	6819      	ldr	r1, [r3, #0]
 800e784:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800e788:	4613      	mov	r3, r2
 800e78a:	00db      	lsls	r3, r3, #3
 800e78c:	4413      	add	r3, r2
 800e78e:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800e792:	4413      	add	r3, r2
 800e794:	3316      	adds	r3, #22
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	440b      	add	r3, r1
 800e79a:	6819      	ldr	r1, [r3, #0]
 800e79c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e7a0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e7a4:	6818      	ldr	r0, [r3, #0]
 800e7a6:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	00db      	lsls	r3, r3, #3
 800e7ae:	4413      	add	r3, r2
 800e7b0:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800e7b4:	4413      	add	r3, r2
 800e7b6:	3316      	adds	r3, #22
 800e7b8:	009b      	lsls	r3, r3, #2
 800e7ba:	4403      	add	r3, r0
 800e7bc:	6019      	str	r1, [r3, #0]
 800e7be:	e036      	b.n	800e82e <kalmanCoreUpdateWithPKE+0x3a6>
        } else {
            this->P[i][j] = this->P[j][i] = p;
 800e7c0:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800e7c4:	f7f2 f97a 	bl	8000abc <__aeabi_d2f>
 800e7c8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e7cc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e7d0:	6819      	ldr	r1, [r3, #0]
 800e7d2:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	00db      	lsls	r3, r3, #3
 800e7da:	4413      	add	r3, r2
 800e7dc:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800e7e0:	4413      	add	r3, r2
 800e7e2:	3316      	adds	r3, #22
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	440b      	add	r3, r1
 800e7e8:	6018      	str	r0, [r3, #0]
 800e7ea:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e7ee:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e7f2:	6819      	ldr	r1, [r3, #0]
 800e7f4:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	00db      	lsls	r3, r3, #3
 800e7fc:	4413      	add	r3, r2
 800e7fe:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800e802:	4413      	add	r3, r2
 800e804:	3316      	adds	r3, #22
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	440b      	add	r3, r1
 800e80a:	6819      	ldr	r1, [r3, #0]
 800e80c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e810:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e814:	6818      	ldr	r0, [r3, #0]
 800e816:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800e81a:	4613      	mov	r3, r2
 800e81c:	00db      	lsls	r3, r3, #3
 800e81e:	4413      	add	r3, r2
 800e820:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800e824:	4413      	add	r3, r2
 800e826:	3316      	adds	r3, #22
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	4403      	add	r3, r0
 800e82c:	6019      	str	r1, [r3, #0]
        for (int j=i; j<KC_STATE_DIM; j++) {
 800e82e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800e832:	3301      	adds	r3, #1
 800e834:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800e838:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800e83c:	2b08      	cmp	r3, #8
 800e83e:	f77f aefc 	ble.w	800e63a <kalmanCoreUpdateWithPKE+0x1b2>
    for (int i=0; i<KC_STATE_DIM; i++) {
 800e842:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800e846:	3301      	adds	r3, #1
 800e848:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800e84c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800e850:	2b08      	cmp	r3, #8
 800e852:	f77f aeed 	ble.w	800e630 <kalmanCoreUpdateWithPKE+0x1a8>
            }
        }
    }
    assertStateNotNaN(this);
 800e856:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e85a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e85e:	6818      	ldr	r0, [r3, #0]
 800e860:	f7ff fa7a 	bl	800dd58 <assertStateNotNaN>

    this->isUpdated = true;
 800e864:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800e868:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2201      	movs	r2, #1
 800e870:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 800e874:	bf00      	nop
 800e876:	f507 7731 	add.w	r7, r7, #708	@ 0x2c4
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd90      	pop	{r4, r7, pc}
 800e87e:	bf00      	nop
 800e880:	a0000000 	.word	0xa0000000
 800e884:	3eb0c6f7 	.word	0x3eb0c6f7
 800e888:	200000a8 	.word	0x200000a8
 800e88c:	20009620 	.word	0x20009620
 800e890:	3ff00000 	.word	0x3ff00000
 800e894:	40590000 	.word	0x40590000
 800e898:	42c80000 	.word	0x42c80000
 800e89c:	358637bd 	.word	0x358637bd

0800e8a0 <kalmanCoreUpdateWithBaro>:

void kalmanCoreUpdateWithBaro(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float baroAsl, bool quadIsFlying)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b090      	sub	sp, #64	@ 0x40
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	60b9      	str	r1, [r7, #8]
 800e8aa:	ed87 0a01 	vstr	s0, [r7, #4]
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	70fb      	strb	r3, [r7, #3]
  float h[KC_STATE_DIM] = {0};
 800e8b2:	f107 0318 	add.w	r3, r7, #24
 800e8b6:	2224      	movs	r2, #36	@ 0x24
 800e8b8:	2100      	movs	r1, #0
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f009 f866 	bl	801798c <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	823b      	strh	r3, [r7, #16]
 800e8c4:	2309      	movs	r3, #9
 800e8c6:	827b      	strh	r3, [r7, #18]
 800e8c8:	f107 0318 	add.w	r3, r7, #24
 800e8cc:	617b      	str	r3, [r7, #20]

  h[KC_STATE_Z] = 1;
 800e8ce:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800e8d2:	623b      	str	r3, [r7, #32]

  if (!quadIsFlying || this->baroReferenceHeight < 1) {
 800e8d4:	78fb      	ldrb	r3, [r7, #3]
 800e8d6:	f083 0301 	eor.w	r3, r3, #1
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d109      	bne.n	800e8f4 <kalmanCoreUpdateWithBaro+0x54>
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	edd3 7a69 	vldr	s15, [r3, #420]	@ 0x1a4
 800e8e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e8ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f2:	d503      	bpl.n	800e8fc <kalmanCoreUpdateWithBaro+0x5c>
    //TODO: maybe we could track the zero height as a state. Would be especially useful if UWB anchors had barometers.
    this->baroReferenceHeight = baroAsl;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4

  }

  float meas = (baroAsl - this->baroReferenceHeight);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	edd3 7a69 	vldr	s15, [r3, #420]	@ 0x1a4
 800e902:	ed97 7a01 	vldr	s14, [r7, #4]
 800e906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e90a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  kalmanCoreScalarUpdate(this, &H, meas - this->S[KC_STATE_Z], params->measNoiseBaro);
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	edd3 7a02 	vldr	s15, [r3, #8]
 800e914:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800e918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800e922:	f107 0310 	add.w	r3, r7, #16
 800e926:	eef0 0a47 	vmov.f32	s1, s14
 800e92a:	eeb0 0a67 	vmov.f32	s0, s15
 800e92e:	4619      	mov	r1, r3
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	f7ff fba9 	bl	800e088 <kalmanCoreScalarUpdate>
}
 800e936:	bf00      	nop
 800e938:	3740      	adds	r7, #64	@ 0x40
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
	...

0800e940 <predictDt>:

static void predictDt(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, float dt, bool quadIsFlying)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b0a2      	sub	sp, #136	@ 0x88
 800e944:	af00      	add	r7, sp, #0
 800e946:	6178      	str	r0, [r7, #20]
 800e948:	6139      	str	r1, [r7, #16]
 800e94a:	60fa      	str	r2, [r7, #12]
 800e94c:	ed87 0a02 	vstr	s0, [r7, #8]
 800e950:	71fb      	strb	r3, [r7, #7]
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN1m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN1d};

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN2m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  float dt2 = dt*dt;
 800e952:	edd7 7a02 	vldr	s15, [r7, #8]
 800e956:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e95a:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

  // ====== DYNAMICS LINEARIZATION ======
  // Initialize as the identity
  A[KC_STATE_X][KC_STATE_X] = 1;
 800e95e:	4bd2      	ldr	r3, [pc, #840]	@ (800eca8 <predictDt+0x368>)
 800e960:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e964:	601a      	str	r2, [r3, #0]
  A[KC_STATE_Y][KC_STATE_Y] = 1;
 800e966:	4bd0      	ldr	r3, [pc, #832]	@ (800eca8 <predictDt+0x368>)
 800e968:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e96c:	629a      	str	r2, [r3, #40]	@ 0x28
  A[KC_STATE_Z][KC_STATE_Z] = 1;
 800e96e:	4bce      	ldr	r3, [pc, #824]	@ (800eca8 <predictDt+0x368>)
 800e970:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e974:	651a      	str	r2, [r3, #80]	@ 0x50

  A[KC_STATE_PX][KC_STATE_PX] = 1;
 800e976:	4bcc      	ldr	r3, [pc, #816]	@ (800eca8 <predictDt+0x368>)
 800e978:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e97c:	679a      	str	r2, [r3, #120]	@ 0x78
  A[KC_STATE_PY][KC_STATE_PY] = 1;
 800e97e:	4bca      	ldr	r3, [pc, #808]	@ (800eca8 <predictDt+0x368>)
 800e980:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e984:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 800e988:	4bc7      	ldr	r3, [pc, #796]	@ (800eca8 <predictDt+0x368>)
 800e98a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e98e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  A[KC_STATE_D0][KC_STATE_D0] = 1;
 800e992:	4bc5      	ldr	r3, [pc, #788]	@ (800eca8 <predictDt+0x368>)
 800e994:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e998:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  A[KC_STATE_D1][KC_STATE_D1] = 1;
 800e99c:	4bc2      	ldr	r3, [pc, #776]	@ (800eca8 <predictDt+0x368>)
 800e99e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e9a2:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  A[KC_STATE_D2][KC_STATE_D2] = 1;
 800e9a6:	4bc0      	ldr	r3, [pc, #768]	@ (800eca8 <predictDt+0x368>)
 800e9a8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e9ac:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140

  // position from body-frame velocity
  A[KC_STATE_X][KC_STATE_PX] = this->R[0][0]*dt;
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800e9b6:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9be:	4bba      	ldr	r3, [pc, #744]	@ (800eca8 <predictDt+0x368>)
 800e9c0:	edc3 7a03 	vstr	s15, [r3, #12]
  A[KC_STATE_Y][KC_STATE_PX] = this->R[1][0]*dt;
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800e9ca:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9d2:	4bb5      	ldr	r3, [pc, #724]	@ (800eca8 <predictDt+0x368>)
 800e9d4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  A[KC_STATE_Z][KC_STATE_PX] = this->R[2][0]*dt;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800e9de:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9e6:	4bb0      	ldr	r3, [pc, #704]	@ (800eca8 <predictDt+0x368>)
 800e9e8:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

  A[KC_STATE_X][KC_STATE_PY] = this->R[0][1]*dt;
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800e9f2:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9fa:	4bab      	ldr	r3, [pc, #684]	@ (800eca8 <predictDt+0x368>)
 800e9fc:	edc3 7a04 	vstr	s15, [r3, #16]
  A[KC_STATE_Y][KC_STATE_PY] = this->R[1][1]*dt;
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800ea06:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea0e:	4ba6      	ldr	r3, [pc, #664]	@ (800eca8 <predictDt+0x368>)
 800ea10:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  A[KC_STATE_Z][KC_STATE_PY] = this->R[2][1]*dt;
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800ea1a:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea22:	4ba1      	ldr	r3, [pc, #644]	@ (800eca8 <predictDt+0x368>)
 800ea24:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

  A[KC_STATE_X][KC_STATE_PZ] = this->R[0][2]*dt;
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800ea2e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea36:	4b9c      	ldr	r3, [pc, #624]	@ (800eca8 <predictDt+0x368>)
 800ea38:	edc3 7a05 	vstr	s15, [r3, #20]
  A[KC_STATE_Y][KC_STATE_PZ] = this->R[1][2]*dt;
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800ea42:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea4a:	4b97      	ldr	r3, [pc, #604]	@ (800eca8 <predictDt+0x368>)
 800ea4c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
  A[KC_STATE_Z][KC_STATE_PZ] = this->R[2][2]*dt;
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800ea56:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea5e:	4b92      	ldr	r3, [pc, #584]	@ (800eca8 <predictDt+0x368>)
 800ea60:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

  // position from attitude error
  A[KC_STATE_X][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[0][2] - this->S[KC_STATE_PZ]*this->R[0][1])*dt;
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	ed93 7a04 	vldr	s14, [r3, #16]
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800ea70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	edd3 6a05 	vldr	s13, [r3, #20]
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800ea80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea84:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ea88:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea90:	4b85      	ldr	r3, [pc, #532]	@ (800eca8 <predictDt+0x368>)
 800ea92:	edc3 7a06 	vstr	s15, [r3, #24]
  A[KC_STATE_Y][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[1][2] - this->S[KC_STATE_PZ]*this->R[1][1])*dt;
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	ed93 7a04 	vldr	s14, [r3, #16]
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800eaa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	edd3 6a05 	vldr	s13, [r3, #20]
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800eab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eaba:	edd7 7a02 	vldr	s15, [r7, #8]
 800eabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eac2:	4b79      	ldr	r3, [pc, #484]	@ (800eca8 <predictDt+0x368>)
 800eac4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
  A[KC_STATE_Z][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[2][2] - this->S[KC_STATE_PZ]*this->R[2][1])*dt;
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	ed93 7a04 	vldr	s14, [r3, #16]
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800ead4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	edd3 6a05 	vldr	s13, [r3, #20]
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800eae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eae8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eaec:	edd7 7a02 	vldr	s15, [r7, #8]
 800eaf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaf4:	4b6c      	ldr	r3, [pc, #432]	@ (800eca8 <predictDt+0x368>)
 800eaf6:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

  A[KC_STATE_X][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[0][2] + this->S[KC_STATE_PZ]*this->R[0][0])*dt;
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	edd3 7a03 	vldr	s15, [r3, #12]
 800eb00:	eeb1 7a67 	vneg.f32	s14, s15
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800eb0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	edd3 6a05 	vldr	s13, [r3, #20]
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800eb1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eb22:	edd7 7a02 	vldr	s15, [r7, #8]
 800eb26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb2a:	4b5f      	ldr	r3, [pc, #380]	@ (800eca8 <predictDt+0x368>)
 800eb2c:	edc3 7a07 	vstr	s15, [r3, #28]
  A[KC_STATE_Y][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[1][2] + this->S[KC_STATE_PZ]*this->R[1][0])*dt;
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	edd3 7a03 	vldr	s15, [r3, #12]
 800eb36:	eeb1 7a67 	vneg.f32	s14, s15
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800eb40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	edd3 6a05 	vldr	s13, [r3, #20]
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800eb50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb54:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eb58:	edd7 7a02 	vldr	s15, [r7, #8]
 800eb5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb60:	4b51      	ldr	r3, [pc, #324]	@ (800eca8 <predictDt+0x368>)
 800eb62:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  A[KC_STATE_Z][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[2][2] + this->S[KC_STATE_PZ]*this->R[2][0])*dt;
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	edd3 7a03 	vldr	s15, [r3, #12]
 800eb6c:	eeb1 7a67 	vneg.f32	s14, s15
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800eb76:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	edd3 6a05 	vldr	s13, [r3, #20]
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800eb86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eb8e:	edd7 7a02 	vldr	s15, [r7, #8]
 800eb92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb96:	4b44      	ldr	r3, [pc, #272]	@ (800eca8 <predictDt+0x368>)
 800eb98:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

  A[KC_STATE_X][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[0][1] - this->S[KC_STATE_PY]*this->R[0][0])*dt;
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	ed93 7a03 	vldr	s14, [r3, #12]
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800eba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	edd3 6a04 	vldr	s13, [r3, #16]
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800ebb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ebc0:	edd7 7a02 	vldr	s15, [r7, #8]
 800ebc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebc8:	4b37      	ldr	r3, [pc, #220]	@ (800eca8 <predictDt+0x368>)
 800ebca:	edc3 7a08 	vstr	s15, [r3, #32]
  A[KC_STATE_Y][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[1][1] - this->S[KC_STATE_PY]*this->R[1][0])*dt;
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	ed93 7a03 	vldr	s14, [r3, #12]
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800ebda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	edd3 6a04 	vldr	s13, [r3, #16]
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800ebea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebee:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ebf2:	edd7 7a02 	vldr	s15, [r7, #8]
 800ebf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebfa:	4b2b      	ldr	r3, [pc, #172]	@ (800eca8 <predictDt+0x368>)
 800ebfc:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
  A[KC_STATE_Z][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[2][1] - this->S[KC_STATE_PY]*this->R[2][0])*dt;
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	ed93 7a03 	vldr	s14, [r3, #12]
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800ec0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	edd3 6a04 	vldr	s13, [r3, #16]
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800ec1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec20:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ec24:	edd7 7a02 	vldr	s15, [r7, #8]
 800ec28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec2c:	4b1e      	ldr	r3, [pc, #120]	@ (800eca8 <predictDt+0x368>)
 800ec2e:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68

  // body-frame velocity from body-frame velocity
  A[KC_STATE_PX][KC_STATE_PX] = 1; //drag negligible
 800ec32:	4b1d      	ldr	r3, [pc, #116]	@ (800eca8 <predictDt+0x368>)
 800ec34:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ec38:	679a      	str	r2, [r3, #120]	@ 0x78
  A[KC_STATE_PY][KC_STATE_PX] =-gyro->z*dt;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	edd3 7a02 	vldr	s15, [r3, #8]
 800ec40:	eeb1 7a67 	vneg.f32	s14, s15
 800ec44:	edd7 7a02 	vldr	s15, [r7, #8]
 800ec48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec4c:	4b16      	ldr	r3, [pc, #88]	@ (800eca8 <predictDt+0x368>)
 800ec4e:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
  A[KC_STATE_PZ][KC_STATE_PX] = gyro->y*dt;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	ed93 7a01 	vldr	s14, [r3, #4]
 800ec58:	edd7 7a02 	vldr	s15, [r7, #8]
 800ec5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec60:	4b11      	ldr	r3, [pc, #68]	@ (800eca8 <predictDt+0x368>)
 800ec62:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

  A[KC_STATE_PX][KC_STATE_PY] = gyro->z*dt;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	ed93 7a02 	vldr	s14, [r3, #8]
 800ec6c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ec70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec74:	4b0c      	ldr	r3, [pc, #48]	@ (800eca8 <predictDt+0x368>)
 800ec76:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
  A[KC_STATE_PY][KC_STATE_PY] = 1; //drag negligible
 800ec7a:	4b0b      	ldr	r3, [pc, #44]	@ (800eca8 <predictDt+0x368>)
 800ec7c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ec80:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  A[KC_STATE_PZ][KC_STATE_PY] =-gyro->x*dt;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	edd3 7a00 	vldr	s15, [r3]
 800ec8a:	eeb1 7a67 	vneg.f32	s14, s15
 800ec8e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ec92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec96:	4b04      	ldr	r3, [pc, #16]	@ (800eca8 <predictDt+0x368>)
 800ec98:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4

  A[KC_STATE_PX][KC_STATE_PZ] =-gyro->y*dt;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	edd3 7a01 	vldr	s15, [r3, #4]
 800eca2:	eeb1 7a67 	vneg.f32	s14, s15
 800eca6:	e001      	b.n	800ecac <predictDt+0x36c>
 800eca8:	10003f34 	.word	0x10003f34
 800ecac:	edd7 7a02 	vldr	s15, [r7, #8]
 800ecb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecb4:	4bb2      	ldr	r3, [pc, #712]	@ (800ef80 <predictDt+0x640>)
 800ecb6:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  A[KC_STATE_PY][KC_STATE_PZ] = gyro->x*dt;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	ed93 7a00 	vldr	s14, [r3]
 800ecc0:	edd7 7a02 	vldr	s15, [r7, #8]
 800ecc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecc8:	4bad      	ldr	r3, [pc, #692]	@ (800ef80 <predictDt+0x640>)
 800ecca:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
  A[KC_STATE_PZ][KC_STATE_PZ] = 1; //drag negligible
 800ecce:	4bac      	ldr	r3, [pc, #688]	@ (800ef80 <predictDt+0x640>)
 800ecd0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ecd4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  // body-frame velocity from attitude error
  A[KC_STATE_PX][KC_STATE_D0] =  0;
 800ecd8:	4ba9      	ldr	r3, [pc, #676]	@ (800ef80 <predictDt+0x640>)
 800ecda:	f04f 0200 	mov.w	r2, #0
 800ecde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  A[KC_STATE_PY][KC_STATE_D0] = -GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800ece8:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 800ef84 <predictDt+0x644>
 800ecec:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ecf0:	edd7 7a02 	vldr	s15, [r7, #8]
 800ecf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecf8:	4ba1      	ldr	r3, [pc, #644]	@ (800ef80 <predictDt+0x640>)
 800ecfa:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
  A[KC_STATE_PZ][KC_STATE_D0] =  GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800ed04:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 800ef94 <predictDt+0x654>
 800ed08:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ed0c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed14:	4b9a      	ldr	r3, [pc, #616]	@ (800ef80 <predictDt+0x640>)
 800ed16:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc

  A[KC_STATE_PX][KC_STATE_D1] =  GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800ed20:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 800ef94 <predictDt+0x654>
 800ed24:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ed28:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed30:	4b93      	ldr	r3, [pc, #588]	@ (800ef80 <predictDt+0x640>)
 800ed32:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
  A[KC_STATE_PY][KC_STATE_D1] =  0;
 800ed36:	4b92      	ldr	r3, [pc, #584]	@ (800ef80 <predictDt+0x640>)
 800ed38:	f04f 0200 	mov.w	r2, #0
 800ed3c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  A[KC_STATE_PZ][KC_STATE_D1] = -GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800ed46:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800ef84 <predictDt+0x644>
 800ed4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ed4e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed56:	4b8a      	ldr	r3, [pc, #552]	@ (800ef80 <predictDt+0x640>)
 800ed58:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0

  A[KC_STATE_PX][KC_STATE_D2] = -GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800ed62:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800ef84 <predictDt+0x644>
 800ed66:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ed6a:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed72:	4b83      	ldr	r3, [pc, #524]	@ (800ef80 <predictDt+0x640>)
 800ed74:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
  A[KC_STATE_PY][KC_STATE_D2] =  GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800ed7e:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 800ef94 <predictDt+0x654>
 800ed82:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ed86:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed8e:	4b7c      	ldr	r3, [pc, #496]	@ (800ef80 <predictDt+0x640>)
 800ed90:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
  A[KC_STATE_PZ][KC_STATE_D2] =  0;
 800ed94:	4b7a      	ldr	r3, [pc, #488]	@ (800ef80 <predictDt+0x640>)
 800ed96:	f04f 0200 	mov.w	r2, #0
 800ed9a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
   * d = [0,0,0] at the beginning of each prediction step and that gyro.x is constant over the sampling period
   *
   * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
   * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
   */
  float d0 = gyro->x*dt/2;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	ed93 7a00 	vldr	s14, [r3]
 800eda4:	edd7 7a02 	vldr	s15, [r7, #8]
 800eda8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800edac:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800edb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edb4:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
  float d1 = gyro->y*dt/2;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	ed93 7a01 	vldr	s14, [r3, #4]
 800edbe:	edd7 7a02 	vldr	s15, [r7, #8]
 800edc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800edc6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800edca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edce:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
  float d2 = gyro->z*dt/2;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	ed93 7a02 	vldr	s14, [r3, #8]
 800edd8:	edd7 7a02 	vldr	s15, [r7, #8]
 800eddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ede0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ede4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ede8:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

  A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 800edec:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800edf0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800edf4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800edf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ee00:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee04:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800ee08:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800ee0c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800ee10:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800ee14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee18:	4b59      	ldr	r3, [pc, #356]	@ (800ef80 <predictDt+0x640>)
 800ee1a:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
  A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 800ee1e:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800ee22:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800ee26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee2a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ee2e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ee32:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800ee36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee3a:	4b51      	ldr	r3, [pc, #324]	@ (800ef80 <predictDt+0x640>)
 800ee3c:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
  A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 800ee40:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800ee44:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800ee48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee4c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ee50:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ee54:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800ee58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee5c:	4b48      	ldr	r3, [pc, #288]	@ (800ef80 <predictDt+0x640>)
 800ee5e:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8

  A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 800ee62:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800ee66:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800ee6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee6e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ee72:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ee76:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800ee7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee7e:	4b40      	ldr	r3, [pc, #256]	@ (800ef80 <predictDt+0x640>)
 800ee80:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
  A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 800ee84:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800ee88:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ee8c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ee90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ee98:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee9c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800eea0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800eea4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800eea8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800eeac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eeb0:	4b33      	ldr	r3, [pc, #204]	@ (800ef80 <predictDt+0x640>)
 800eeb2:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
  A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 800eeb6:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800eeba:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800eebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eec2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800eec6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800eeca:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800eece:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eed2:	4b2b      	ldr	r3, [pc, #172]	@ (800ef80 <predictDt+0x640>)
 800eed4:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

  A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 800eed8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800eedc:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800eee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eee4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800eee8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800eeec:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800eef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eef4:	4b22      	ldr	r3, [pc, #136]	@ (800ef80 <predictDt+0x640>)
 800eef6:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
  A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 800eefa:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800eefe:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800ef02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef06:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ef0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ef0e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800ef12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef16:	4b1a      	ldr	r3, [pc, #104]	@ (800ef80 <predictDt+0x640>)
 800ef18:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
  A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 800ef1c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800ef20:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ef24:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ef28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ef2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ef30:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ef34:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800ef38:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800ef3c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800ef40:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800ef44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef48:	4b0d      	ldr	r3, [pc, #52]	@ (800ef80 <predictDt+0x640>)
 800ef4a:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140


  // ====== COVARIANCE UPDATE ======
  mat_mult(&Am, &this->Pm, &tmpNN1m); // A P
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ef54:	4a0c      	ldr	r2, [pc, #48]	@ (800ef88 <predictDt+0x648>)
 800ef56:	4619      	mov	r1, r3
 800ef58:	480c      	ldr	r0, [pc, #48]	@ (800ef8c <predictDt+0x64c>)
 800ef5a:	f7fe fe79 	bl	800dc50 <mat_mult>
  mat_trans(&Am, &tmpNN2m); // A'
 800ef5e:	490c      	ldr	r1, [pc, #48]	@ (800ef90 <predictDt+0x650>)
 800ef60:	480a      	ldr	r0, [pc, #40]	@ (800ef8c <predictDt+0x64c>)
 800ef62:	f7fe fe53 	bl	800dc0c <mat_trans>
  mat_mult(&tmpNN1m, &tmpNN2m, &this->Pm); // A P A'
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	4908      	ldr	r1, [pc, #32]	@ (800ef90 <predictDt+0x650>)
 800ef70:	4805      	ldr	r0, [pc, #20]	@ (800ef88 <predictDt+0x648>)
 800ef72:	f7fe fe6d 	bl	800dc50 <mat_mult>

  float dx, dy, dz;
  float tmpSPX, tmpSPY, tmpSPZ;
  float zacc;

  if (quadIsFlying) // only acceleration in z direction
 800ef76:	79fb      	ldrb	r3, [r7, #7]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	f000 8125 	beq.w	800f1c8 <predictDt+0x888>
 800ef7e:	e00b      	b.n	800ef98 <predictDt+0x658>
 800ef80:	10003f34 	.word	0x10003f34
 800ef84:	c11cf5c3 	.word	0xc11cf5c3
 800ef88:	200000b8 	.word	0x200000b8
 800ef8c:	200000b0 	.word	0x200000b0
 800ef90:	200000c0 	.word	0x200000c0
 800ef94:	411cf5c3 	.word	0x411cf5c3
  {
    // Use accelerometer and not commanded thrust, as this has proper physical units
    zacc = acc->z;
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt;
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	edd3 7a03 	vldr	s15, [r3, #12]
 800efa4:	ed97 7a02 	vldr	s14, [r7, #8]
 800efa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efac:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    dy = this->S[KC_STATE_PY] * dt;
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	edd3 7a04 	vldr	s15, [r3, #16]
 800efb6:	ed97 7a02 	vldr	s14, [r7, #8]
 800efba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efbe:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    dz = this->S[KC_STATE_PZ] * dt + zacc * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	ed93 7a05 	vldr	s14, [r3, #20]
 800efc8:	edd7 7a02 	vldr	s15, [r7, #8]
 800efcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800efd0:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800efd4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800efd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800efdc:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800efe0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800efe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efe8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	ed93 7a00 	vldr	s14, [r3]
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800eff8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800effc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 800f006:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f00a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f00e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 800f018:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800f01c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f020:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f024:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	ed93 7a01 	vldr	s14, [r3, #4]
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800f03a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f03e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 800f048:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f04c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f050:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 800f05a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800f05e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	ed93 7a02 	vldr	s14, [r3, #8]
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 800f07c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f080:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	ed93 6a14 	vldr	s12, [r3, #80]	@ 0x50
 800f08a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f08e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f092:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 800f09c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800f0a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f0a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f0a8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800f0ac:	ed1f 6a47 	vldr	s12, [pc, #-284]	@ 800ef94 <predictDt+0x654>
 800f0b0:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f0b4:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 800f0b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f0bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f0c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmpSPY = this->S[KC_STATE_PY];
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	691b      	ldr	r3, [r3, #16]
 800f0d4:	657b      	str	r3, [r7, #84]	@ 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	695b      	ldr	r3, [r3, #20]
 800f0da:	653b      	str	r3, [r7, #80]	@ 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	ed93 7a03 	vldr	s14, [r3, #12]
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	edd3 6a02 	vldr	s13, [r3, #8]
 800f0e8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800f0ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	ed93 6a01 	vldr	s12, [r3, #4]
 800f0f6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800f0fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f0fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800f108:	ed1f 6a5e 	vldr	s12, [pc, #-376]	@ 800ef94 <predictDt+0x654>
 800f10c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f110:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f114:	edd7 7a02 	vldr	s15, [r7, #8]
 800f118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f11c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (-gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	ed93 7a04 	vldr	s14, [r3, #16]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f132:	eef1 6a67 	vneg.f32	s13, s15
 800f136:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800f13a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	ed93 6a00 	vldr	s12, [r3]
 800f144:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800f148:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f14c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800f156:	ed1f 6a71 	vldr	s12, [pc, #-452]	@ 800ef94 <predictDt+0x654>
 800f15a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f15e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f162:	edd7 7a02 	vldr	s15, [r7, #8]
 800f166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f16a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (zacc + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	ed93 7a05 	vldr	s14, [r3, #20]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	edd3 6a01 	vldr	s13, [r3, #4]
 800f180:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800f184:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f188:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800f18c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	ed93 6a00 	vldr	s12, [r3]
 800f196:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800f19a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f19e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800f1a8:	ed1f 6a86 	vldr	s12, [pc, #-536]	@ 800ef94 <predictDt+0x654>
 800f1ac:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f1b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f1b4:	edd7 7a02 	vldr	s15, [r7, #8]
 800f1b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f1bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	edc3 7a05 	vstr	s15, [r3, #20]
 800f1c6:	e137      	b.n	800f438 <predictDt+0xaf8>
  }
  else // Acceleration can be in any direction, as measured by the accelerometer. This occurs, eg. in freefall or while being carried.
  {
    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt + acc->x * dt2 / 2.0f;
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	ed93 7a03 	vldr	s14, [r3, #12]
 800f1ce:	edd7 7a02 	vldr	s15, [r7, #8]
 800f1d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	edd3 6a00 	vldr	s13, [r3]
 800f1dc:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800f1e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f1e4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800f1e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800f1ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1f0:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    dy = this->S[KC_STATE_PY] * dt + acc->y * dt2 / 2.0f;
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	ed93 7a04 	vldr	s14, [r3, #16]
 800f1fa:	edd7 7a02 	vldr	s15, [r7, #8]
 800f1fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	edd3 6a01 	vldr	s13, [r3, #4]
 800f208:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800f20c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f210:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800f214:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800f218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f21c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    dz = this->S[KC_STATE_PZ] * dt + acc->z * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	ed93 7a05 	vldr	s14, [r3, #20]
 800f226:	edd7 7a02 	vldr	s15, [r7, #8]
 800f22a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	edd3 6a02 	vldr	s13, [r3, #8]
 800f234:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800f238:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f23c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800f240:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800f244:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f248:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	ed93 7a00 	vldr	s14, [r3]
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800f258:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f25c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 800f266:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f26a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f26e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 800f278:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800f27c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f284:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	ed93 7a01 	vldr	s14, [r3, #4]
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800f29a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f29e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 800f2a8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f2ac:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f2b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 800f2ba:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800f2be:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f2c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	ed93 7a02 	vldr	s14, [r3, #8]
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 800f2dc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f2e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	ed93 6a14 	vldr	s12, [r3, #80]	@ 0x50
 800f2ea:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f2ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f2f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 800f2fc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800f300:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f304:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f308:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800f30c:	ed9f 6ae1 	vldr	s12, [pc, #900]	@ 800f694 <predictDt+0xd54>
 800f310:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f314:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 800f318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f31c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f320:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmpSPY = this->S[KC_STATE_PY];
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	657b      	str	r3, [r7, #84]	@ 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	695b      	ldr	r3, [r3, #20]
 800f33a:	653b      	str	r3, [r7, #80]	@ 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (acc->x + gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	ed93 7a03 	vldr	s14, [r3, #12]
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	edd3 6a00 	vldr	s13, [r3]
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	ed93 6a02 	vldr	s12, [r3, #8]
 800f34e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800f352:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f356:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	ed93 6a01 	vldr	s12, [r3, #4]
 800f360:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800f364:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f368:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800f372:	ed9f 6ac8 	vldr	s12, [pc, #800]	@ 800f694 <predictDt+0xd54>
 800f376:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f37a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f37e:	edd7 7a02 	vldr	s15, [r7, #8]
 800f382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (acc->y - gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	ed93 7a04 	vldr	s14, [r3, #16]
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	edd3 6a01 	vldr	s13, [r3, #4]
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	ed93 6a02 	vldr	s12, [r3, #8]
 800f3a2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800f3a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f3aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	ed93 6a00 	vldr	s12, [r3]
 800f3b4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800f3b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f3bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800f3c6:	ed9f 6ab3 	vldr	s12, [pc, #716]	@ 800f694 <predictDt+0xd54>
 800f3ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f3ce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f3d2:	edd7 7a02 	vldr	s15, [r7, #8]
 800f3d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (acc->z + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	ed93 7a05 	vldr	s14, [r3, #20]
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	edd3 6a02 	vldr	s13, [r3, #8]
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	ed93 6a01 	vldr	s12, [r3, #4]
 800f3f6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800f3fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f3fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	ed93 6a00 	vldr	s12, [r3]
 800f408:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800f40c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f410:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800f41a:	ed9f 6a9e 	vldr	s12, [pc, #632]	@ 800f694 <predictDt+0xd54>
 800f41e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f422:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f426:	edd7 7a02 	vldr	s15, [r7, #8]
 800f42a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f42e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	edc3 7a05 	vstr	s15, [r3, #20]
  }

  // attitude update (rotate by gyroscope), we do this in quaternions
  // this is the gyroscope angular velocity integrated over the sample period
  float dtwx = dt*gyro->x;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	edd3 7a00 	vldr	s15, [r3]
 800f43e:	ed97 7a02 	vldr	s14, [r7, #8]
 800f442:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f446:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  float dtwy = dt*gyro->y;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f450:	ed97 7a02 	vldr	s14, [r7, #8]
 800f454:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f458:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  float dtwz = dt*gyro->z;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f462:	ed97 7a02 	vldr	s14, [r7, #8]
 800f466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f46a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

  // compute the quaternion values in [w,x,y,z] order
  float angle = arm_sqrt(dtwx*dtwx + dtwy*dtwy + dtwz*dtwz) + EPS;
 800f46e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800f472:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f476:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800f47a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f47e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f482:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800f486:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f48a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f48e:	eeb0 0a67 	vmov.f32	s0, s15
 800f492:	f7fe fc05 	bl	800dca0 <arm_sqrt>
 800f496:	eef0 7a40 	vmov.f32	s15, s0
 800f49a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800f6a0 <predictDt+0xd60>
 800f49e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4a2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  float ca = arm_cos_f32(angle/2.0f);
 800f4a6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800f4aa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f4ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f4b2:	eeb0 0a47 	vmov.f32	s0, s14
 800f4b6:	f008 fa1f 	bl	80178f8 <arm_cos_f32>
 800f4ba:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
  float sa = arm_sin_f32(angle/2.0f);
 800f4be:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800f4c2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f4c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f4ca:	eeb0 0a47 	vmov.f32	s0, s14
 800f4ce:	f008 f9cd 	bl	801786c <arm_sin_f32>
 800f4d2:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
  float dq[4] = {ca , sa*dtwx/angle , sa*dtwy/angle , sa*dtwz/angle};
 800f4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d8:	61fb      	str	r3, [r7, #28]
 800f4da:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f4de:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800f4e2:	ee67 6a27 	vmul.f32	s13, s14, s15
 800f4e6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800f4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4ee:	edc7 7a08 	vstr	s15, [r7, #32]
 800f4f2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f4f6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800f4fa:	ee67 6a27 	vmul.f32	s13, s14, s15
 800f4fe:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800f502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f506:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800f50a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f50e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800f512:	ee67 6a27 	vmul.f32	s13, s14, s15
 800f516:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800f51a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f51e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float tmpq1;
  float tmpq2;
  float tmpq3;

  // rotate the quad's attitude by the delta quaternion vector computed above
  tmpq0 = dq[0]*this->q[0] - dq[1]*this->q[1] - dq[2]*this->q[2] - dq[3]*this->q[3];
 800f522:	ed97 7a07 	vldr	s14, [r7, #28]
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800f52c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f530:	edd7 6a08 	vldr	s13, [r7, #32]
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800f53a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f53e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f542:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800f54c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f550:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f554:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800f55e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f562:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f566:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
  tmpq1 = dq[1]*this->q[0] + dq[0]*this->q[1] + dq[3]*this->q[2] - dq[2]*this->q[3];
 800f56a:	ed97 7a08 	vldr	s14, [r7, #32]
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800f574:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f578:	edd7 6a07 	vldr	s13, [r7, #28]
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800f582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f58a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800f594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f59c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800f5a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5ae:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
  tmpq2 = dq[2]*this->q[0] - dq[3]*this->q[1] + dq[0]*this->q[2] + dq[1]*this->q[3];
 800f5b2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800f5bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f5c0:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800f5ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f5d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800f5dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5e4:	edd7 6a08 	vldr	s13, [r7, #32]
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800f5ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5f6:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
  tmpq3 = dq[3]*this->q[0] + dq[2]*this->q[1] - dq[1]*this->q[2] + dq[0]*this->q[3];
 800f5fa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800f604:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f608:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800f612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f61a:	edd7 6a08 	vldr	s13, [r7, #32]
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800f624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f628:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f62c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800f636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f63a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f63e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

  if (! quadIsFlying) {
 800f642:	79fb      	ldrb	r3, [r7, #7]
 800f644:	f083 0301 	eor.w	r3, r3, #1
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d04e      	beq.n	800f6ec <predictDt+0xdac>
    float keep = 1.0f - ROLLPITCH_ZERO_REVERSION;
 800f64e:	4b12      	ldr	r3, [pc, #72]	@ (800f698 <predictDt+0xd58>)
 800f650:	633b      	str	r3, [r7, #48]	@ 0x30

    tmpq0 = keep * tmpq0 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[0];
 800f652:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800f656:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800f65a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	edd3 7a6a 	vldr	s15, [r3, #424]	@ 0x1a8
 800f664:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800f69c <predictDt+0xd5c>
 800f668:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f66c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f670:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    tmpq1 = keep * tmpq1 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[1];
 800f674:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800f678:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800f67c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	edd3 7a6b 	vldr	s15, [r3, #428]	@ 0x1ac
 800f686:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800f69c <predictDt+0xd5c>
 800f68a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f68e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f692:	e007      	b.n	800f6a4 <predictDt+0xd64>
 800f694:	411cf5c3 	.word	0x411cf5c3
 800f698:	3f7fbe77 	.word	0x3f7fbe77
 800f69c:	3a83126f 	.word	0x3a83126f
 800f6a0:	358637bd 	.word	0x358637bd
 800f6a4:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
    tmpq2 = keep * tmpq2 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[2];
 800f6a8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800f6ac:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800f6b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	edd3 7a6c 	vldr	s15, [r3, #432]	@ 0x1b0
 800f6ba:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 800f69c <predictDt+0xd5c>
 800f6be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f6c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6c6:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    tmpq3 = keep * tmpq3 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[3];
 800f6ca:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800f6ce:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800f6d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	edd3 7a6d 	vldr	s15, [r3, #436]	@ 0x1b4
 800f6dc:	ed5f 6a11 	vldr	s13, [pc, #-68]	@ 800f69c <predictDt+0xd5c>
 800f6e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f6e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6e8:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
  }

  // normalize and store the result
  float norm = arm_sqrt(tmpq0*tmpq0 + tmpq1*tmpq1 + tmpq2*tmpq2 + tmpq3*tmpq3) + EPS;
 800f6ec:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800f6f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f6f4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800f6f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f6fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f700:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800f704:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f708:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f70c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800f710:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f714:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f718:	eeb0 0a67 	vmov.f32	s0, s15
 800f71c:	f7fe fac0 	bl	800dca0 <arm_sqrt>
 800f720:	eef0 7a40 	vmov.f32	s15, s0
 800f724:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 800f6a0 <predictDt+0xd60>
 800f728:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f72c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  this->q[0] = tmpq0/norm; this->q[1] = tmpq1/norm; this->q[2] = tmpq2/norm; this->q[3] = tmpq3/norm;
 800f730:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 800f734:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800f738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 800f742:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 800f746:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800f74a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 800f754:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 800f758:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800f75c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 800f766:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 800f76a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800f76e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  assertStateNotNaN(this);
 800f778:	6978      	ldr	r0, [r7, #20]
 800f77a:	f7fe faed 	bl	800dd58 <assertStateNotNaN>

  this->isUpdated = true;
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	2201      	movs	r2, #1
 800f782:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 800f786:	bf00      	nop
 800f788:	3788      	adds	r7, #136	@ 0x88
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop

0800f790 <kalmanCorePredict>:

void kalmanCorePredict(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, const uint32_t nowMs, bool quadIsFlying) {
 800f790:	b580      	push	{r7, lr}
 800f792:	b086      	sub	sp, #24
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
 800f79c:	603b      	str	r3, [r7, #0]
  float dt = (nowMs - this->lastPredictionMs) / 1000.0f;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800f7a4:	683a      	ldr	r2, [r7, #0]
 800f7a6:	1ad3      	subs	r3, r2, r3
 800f7a8:	ee07 3a90 	vmov	s15, r3
 800f7ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f7b0:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800f7e0 <kalmanCorePredict+0x50>
 800f7b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f7b8:	edc7 7a05 	vstr	s15, [r7, #20]
  predictDt(this, acc, gyro, dt, quadIsFlying);
 800f7bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f7c0:	ed97 0a05 	vldr	s0, [r7, #20]
 800f7c4:	687a      	ldr	r2, [r7, #4]
 800f7c6:	68b9      	ldr	r1, [r7, #8]
 800f7c8:	68f8      	ldr	r0, [r7, #12]
 800f7ca:	f7ff f8b9 	bl	800e940 <predictDt>
  this->lastPredictionMs = nowMs;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	683a      	ldr	r2, [r7, #0]
 800f7d2:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
}
 800f7d6:	bf00      	nop
 800f7d8:	3718      	adds	r7, #24
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	447a0000 	.word	0x447a0000
 800f7e4:	00000000 	.word	0x00000000

0800f7e8 <addProcessNoiseDt>:


static void addProcessNoiseDt(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float dt)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b088      	sub	sp, #32
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	ed87 0a01 	vstr	s0, [r7, #4]
  this->P[KC_STATE_X][KC_STATE_X] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	ed93 7a05 	vldr	s14, [r3, #20]
 800f7fc:	edd7 7a01 	vldr	s15, [r7, #4]
 800f800:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f804:	edd7 7a01 	vldr	s15, [r7, #4]
 800f808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	edd3 6a07 	vldr	s13, [r3, #28]
 800f812:	edd7 7a01 	vldr	s15, [r7, #4]
 800f816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f81a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	edd3 7a08 	vldr	s15, [r3, #32]
 800f824:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f828:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f82c:	eeb0 0a67 	vmov.f32	s0, s15
 800f830:	f008 f9be 	bl	8017bb0 <powf>
 800f834:	eeb0 7a40 	vmov.f32	s14, s0
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800f83e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
  this->P[KC_STATE_Y][KC_STATE_Y] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	ed93 7a05 	vldr	s14, [r3, #20]
 800f84e:	edd7 7a01 	vldr	s15, [r7, #4]
 800f852:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f856:	edd7 7a01 	vldr	s15, [r7, #4]
 800f85a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	edd3 6a07 	vldr	s13, [r3, #28]
 800f864:	edd7 7a01 	vldr	s15, [r7, #4]
 800f868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f86c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	edd3 7a08 	vldr	s15, [r3, #32]
 800f876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f87a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f87e:	eeb0 0a67 	vmov.f32	s0, s15
 800f882:	f008 f995 	bl	8017bb0 <powf>
 800f886:	eeb0 7a40 	vmov.f32	s14, s0
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 800f890:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  this->P[KC_STATE_Z][KC_STATE_Z] += powf(params->procNoiseAcc_z*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	ed93 7a06 	vldr	s14, [r3, #24]
 800f8a0:	edd7 7a01 	vldr	s15, [r7, #4]
 800f8a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f8a8:	edd7 7a01 	vldr	s15, [r7, #4]
 800f8ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	edd3 6a07 	vldr	s13, [r3, #28]
 800f8b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800f8ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	edd3 7a08 	vldr	s15, [r3, #32]
 800f8c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8cc:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f8d0:	eeb0 0a67 	vmov.f32	s0, s15
 800f8d4:	f008 f96c 	bl	8017bb0 <powf>
 800f8d8:	eeb0 7a40 	vmov.f32	s14, s0
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 800f8e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	ed93 7a05 	vldr	s14, [r3, #20]
 800f8f2:	edd7 7a01 	vldr	s15, [r7, #4]
 800f8f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	edd3 7a07 	vldr	s15, [r3, #28]
 800f900:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f904:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f908:	eeb0 0a67 	vmov.f32	s0, s15
 800f90c:	f008 f950 	bl	8017bb0 <powf>
 800f910:	eeb0 7a40 	vmov.f32	s14, s0
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 800f91a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	ed93 7a05 	vldr	s14, [r3, #20]
 800f92a:	edd7 7a01 	vldr	s15, [r7, #4]
 800f92e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	edd3 7a07 	vldr	s15, [r3, #28]
 800f938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f93c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f940:	eeb0 0a67 	vmov.f32	s0, s15
 800f944:	f008 f934 	bl	8017bb0 <powf>
 800f948:	eeb0 7a40 	vmov.f32	s14, s0
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 800f952:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] += powf(params->procNoiseAcc_z*dt + params->procNoiseVel, 2); // add process noise on velocity
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	ed93 7a06 	vldr	s14, [r3, #24]
 800f962:	edd7 7a01 	vldr	s15, [r7, #4]
 800f966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	edd3 7a07 	vldr	s15, [r3, #28]
 800f970:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f974:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f978:	eeb0 0a67 	vmov.f32	s0, s15
 800f97c:	f008 f918 	bl	8017bb0 <powf>
 800f980:	eeb0 7a40 	vmov.f32	s14, s0
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 800f98a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800f99a:	edd7 7a01 	vldr	s15, [r7, #4]
 800f99e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800f9a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9ac:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f9b0:	eeb0 0a67 	vmov.f32	s0, s15
 800f9b4:	f008 f8fc 	bl	8017bb0 <powf>
 800f9b8:	eeb0 7a40 	vmov.f32	s14, s0
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 800f9c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800f9d2:	edd7 7a01 	vldr	s15, [r7, #4]
 800f9d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800f9e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9e4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f9e8:	eeb0 0a67 	vmov.f32	s0, s15
 800f9ec:	f008 f8e0 	bl	8017bb0 <powf>
 800f9f0:	eeb0 7a40 	vmov.f32	s14, s0
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
 800f9fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] += powf(params->measNoiseGyro_yaw * dt + params->procNoiseAtt, 2);
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800fa0a:	edd7 7a01 	vldr	s15, [r7, #4]
 800fa0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800fa18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa1c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800fa20:	eeb0 0a67 	vmov.f32	s0, s15
 800fa24:	f008 f8c4 	bl	8017bb0 <powf>
 800fa28:	eeb0 7a40 	vmov.f32	s14, s0
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	edd3 7a66 	vldr	s15, [r3, #408]	@ 0x198
 800fa32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198

  for (int i=0; i<KC_STATE_DIM; i++) {
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	61fb      	str	r3, [r7, #28]
 800fa40:	e0c2      	b.n	800fbc8 <addProcessNoiseDt+0x3e0>
    for (int j=i; j<KC_STATE_DIM; j++) {
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	61bb      	str	r3, [r7, #24]
 800fa46:	e0b8      	b.n	800fbba <addProcessNoiseDt+0x3d2>
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 800fa48:	68f9      	ldr	r1, [r7, #12]
 800fa4a:	69fa      	ldr	r2, [r7, #28]
 800fa4c:	4613      	mov	r3, r2
 800fa4e:	00db      	lsls	r3, r3, #3
 800fa50:	4413      	add	r3, r2
 800fa52:	69ba      	ldr	r2, [r7, #24]
 800fa54:	4413      	add	r3, r2
 800fa56:	3316      	adds	r3, #22
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	440b      	add	r3, r1
 800fa5c:	edd3 7a00 	vldr	s15, [r3]
 800fa60:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fa64:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fa68:	68f9      	ldr	r1, [r7, #12]
 800fa6a:	69ba      	ldr	r2, [r7, #24]
 800fa6c:	4613      	mov	r3, r2
 800fa6e:	00db      	lsls	r3, r3, #3
 800fa70:	4413      	add	r3, r2
 800fa72:	69fa      	ldr	r2, [r7, #28]
 800fa74:	4413      	add	r3, r2
 800fa76:	3316      	adds	r3, #22
 800fa78:	009b      	lsls	r3, r3, #2
 800fa7a:	440b      	add	r3, r1
 800fa7c:	edd3 7a00 	vldr	s15, [r3]
 800fa80:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800fa84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa8c:	ee17 0a90 	vmov	r0, s15
 800fa90:	f7f0 fd0c 	bl	80004ac <__aeabi_f2d>
 800fa94:	4602      	mov	r2, r0
 800fa96:	460b      	mov	r3, r1
 800fa98:	e9c7 2304 	strd	r2, r3, [r7, #16]
      if (isnan(p) || p > MAX_COVARIANCE) {
 800fa9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800faa0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800faa4:	f7f0 fff4 	bl	8000a90 <__aeabi_dcmpun>
 800faa8:	4603      	mov	r3, r0
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d109      	bne.n	800fac2 <addProcessNoiseDt+0x2da>
 800faae:	f04f 0200 	mov.w	r2, #0
 800fab2:	4b4d      	ldr	r3, [pc, #308]	@ (800fbe8 <addProcessNoiseDt+0x400>)
 800fab4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fab8:	f7f0 ffe0 	bl	8000a7c <__aeabi_dcmpgt>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d022      	beq.n	800fb08 <addProcessNoiseDt+0x320>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 800fac2:	68f9      	ldr	r1, [r7, #12]
 800fac4:	69ba      	ldr	r2, [r7, #24]
 800fac6:	4613      	mov	r3, r2
 800fac8:	00db      	lsls	r3, r3, #3
 800faca:	4413      	add	r3, r2
 800facc:	69fa      	ldr	r2, [r7, #28]
 800face:	4413      	add	r3, r2
 800fad0:	3316      	adds	r3, #22
 800fad2:	009b      	lsls	r3, r3, #2
 800fad4:	440b      	add	r3, r1
 800fad6:	4a45      	ldr	r2, [pc, #276]	@ (800fbec <addProcessNoiseDt+0x404>)
 800fad8:	601a      	str	r2, [r3, #0]
 800fada:	68f9      	ldr	r1, [r7, #12]
 800fadc:	69ba      	ldr	r2, [r7, #24]
 800fade:	4613      	mov	r3, r2
 800fae0:	00db      	lsls	r3, r3, #3
 800fae2:	4413      	add	r3, r2
 800fae4:	69fa      	ldr	r2, [r7, #28]
 800fae6:	4413      	add	r3, r2
 800fae8:	3316      	adds	r3, #22
 800faea:	009b      	lsls	r3, r3, #2
 800faec:	440b      	add	r3, r1
 800faee:	6819      	ldr	r1, [r3, #0]
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	69fa      	ldr	r2, [r7, #28]
 800faf4:	4613      	mov	r3, r2
 800faf6:	00db      	lsls	r3, r3, #3
 800faf8:	4413      	add	r3, r2
 800fafa:	69ba      	ldr	r2, [r7, #24]
 800fafc:	4413      	add	r3, r2
 800fafe:	3316      	adds	r3, #22
 800fb00:	009b      	lsls	r3, r3, #2
 800fb02:	4403      	add	r3, r0
 800fb04:	6019      	str	r1, [r3, #0]
 800fb06:	e055      	b.n	800fbb4 <addProcessNoiseDt+0x3cc>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 800fb08:	69fa      	ldr	r2, [r7, #28]
 800fb0a:	69bb      	ldr	r3, [r7, #24]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d12c      	bne.n	800fb6a <addProcessNoiseDt+0x382>
 800fb10:	a333      	add	r3, pc, #204	@ (adr r3, 800fbe0 <addProcessNoiseDt+0x3f8>)
 800fb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fb1a:	f7f0 ff91 	bl	8000a40 <__aeabi_dcmplt>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d022      	beq.n	800fb6a <addProcessNoiseDt+0x382>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 800fb24:	68f9      	ldr	r1, [r7, #12]
 800fb26:	69ba      	ldr	r2, [r7, #24]
 800fb28:	4613      	mov	r3, r2
 800fb2a:	00db      	lsls	r3, r3, #3
 800fb2c:	4413      	add	r3, r2
 800fb2e:	69fa      	ldr	r2, [r7, #28]
 800fb30:	4413      	add	r3, r2
 800fb32:	3316      	adds	r3, #22
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	440b      	add	r3, r1
 800fb38:	4a2d      	ldr	r2, [pc, #180]	@ (800fbf0 <addProcessNoiseDt+0x408>)
 800fb3a:	601a      	str	r2, [r3, #0]
 800fb3c:	68f9      	ldr	r1, [r7, #12]
 800fb3e:	69ba      	ldr	r2, [r7, #24]
 800fb40:	4613      	mov	r3, r2
 800fb42:	00db      	lsls	r3, r3, #3
 800fb44:	4413      	add	r3, r2
 800fb46:	69fa      	ldr	r2, [r7, #28]
 800fb48:	4413      	add	r3, r2
 800fb4a:	3316      	adds	r3, #22
 800fb4c:	009b      	lsls	r3, r3, #2
 800fb4e:	440b      	add	r3, r1
 800fb50:	6819      	ldr	r1, [r3, #0]
 800fb52:	68f8      	ldr	r0, [r7, #12]
 800fb54:	69fa      	ldr	r2, [r7, #28]
 800fb56:	4613      	mov	r3, r2
 800fb58:	00db      	lsls	r3, r3, #3
 800fb5a:	4413      	add	r3, r2
 800fb5c:	69ba      	ldr	r2, [r7, #24]
 800fb5e:	4413      	add	r3, r2
 800fb60:	3316      	adds	r3, #22
 800fb62:	009b      	lsls	r3, r3, #2
 800fb64:	4403      	add	r3, r0
 800fb66:	6019      	str	r1, [r3, #0]
 800fb68:	e024      	b.n	800fbb4 <addProcessNoiseDt+0x3cc>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 800fb6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fb6e:	f7f0 ffa5 	bl	8000abc <__aeabi_d2f>
 800fb72:	68f9      	ldr	r1, [r7, #12]
 800fb74:	69ba      	ldr	r2, [r7, #24]
 800fb76:	4613      	mov	r3, r2
 800fb78:	00db      	lsls	r3, r3, #3
 800fb7a:	4413      	add	r3, r2
 800fb7c:	69fa      	ldr	r2, [r7, #28]
 800fb7e:	4413      	add	r3, r2
 800fb80:	3316      	adds	r3, #22
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	440b      	add	r3, r1
 800fb86:	6018      	str	r0, [r3, #0]
 800fb88:	68f9      	ldr	r1, [r7, #12]
 800fb8a:	69ba      	ldr	r2, [r7, #24]
 800fb8c:	4613      	mov	r3, r2
 800fb8e:	00db      	lsls	r3, r3, #3
 800fb90:	4413      	add	r3, r2
 800fb92:	69fa      	ldr	r2, [r7, #28]
 800fb94:	4413      	add	r3, r2
 800fb96:	3316      	adds	r3, #22
 800fb98:	009b      	lsls	r3, r3, #2
 800fb9a:	440b      	add	r3, r1
 800fb9c:	6819      	ldr	r1, [r3, #0]
 800fb9e:	68f8      	ldr	r0, [r7, #12]
 800fba0:	69fa      	ldr	r2, [r7, #28]
 800fba2:	4613      	mov	r3, r2
 800fba4:	00db      	lsls	r3, r3, #3
 800fba6:	4413      	add	r3, r2
 800fba8:	69ba      	ldr	r2, [r7, #24]
 800fbaa:	4413      	add	r3, r2
 800fbac:	3316      	adds	r3, #22
 800fbae:	009b      	lsls	r3, r3, #2
 800fbb0:	4403      	add	r3, r0
 800fbb2:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 800fbb4:	69bb      	ldr	r3, [r7, #24]
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	61bb      	str	r3, [r7, #24]
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	2b08      	cmp	r3, #8
 800fbbe:	f77f af43 	ble.w	800fa48 <addProcessNoiseDt+0x260>
  for (int i=0; i<KC_STATE_DIM; i++) {
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	61fb      	str	r3, [r7, #28]
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	2b08      	cmp	r3, #8
 800fbcc:	f77f af39 	ble.w	800fa42 <addProcessNoiseDt+0x25a>
      }
    }
  }

  assertStateNotNaN(this);
 800fbd0:	68f8      	ldr	r0, [r7, #12]
 800fbd2:	f7fe f8c1 	bl	800dd58 <assertStateNotNaN>
}
 800fbd6:	bf00      	nop
 800fbd8:	3720      	adds	r7, #32
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	a0000000 	.word	0xa0000000
 800fbe4:	3eb0c6f7 	.word	0x3eb0c6f7
 800fbe8:	40590000 	.word	0x40590000
 800fbec:	42c80000 	.word	0x42c80000
 800fbf0:	358637bd 	.word	0x358637bd

0800fbf4 <kalmanCoreAddProcessNoise>:

void kalmanCoreAddProcessNoise(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs) {
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b086      	sub	sp, #24
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	60f8      	str	r0, [r7, #12]
 800fbfc:	60b9      	str	r1, [r7, #8]
 800fbfe:	607a      	str	r2, [r7, #4]
  float dt = (nowMs - this->lastProcessNoiseUpdateMs) / 1000.0f;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	ee07 3a90 	vmov	s15, r3
 800fc0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fc12:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fc4c <kalmanCoreAddProcessNoise+0x58>
 800fc16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fc1a:	edc7 7a05 	vstr	s15, [r7, #20]
  if (dt > 0.0f) {
 800fc1e:	edd7 7a05 	vldr	s15, [r7, #20]
 800fc22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2a:	dc00      	bgt.n	800fc2e <kalmanCoreAddProcessNoise+0x3a>
    addProcessNoiseDt(this, params, dt);
    this->lastProcessNoiseUpdateMs = nowMs;
  }
}
 800fc2c:	e009      	b.n	800fc42 <kalmanCoreAddProcessNoise+0x4e>
    addProcessNoiseDt(this, params, dt);
 800fc2e:	ed97 0a05 	vldr	s0, [r7, #20]
 800fc32:	68b9      	ldr	r1, [r7, #8]
 800fc34:	68f8      	ldr	r0, [r7, #12]
 800fc36:	f7ff fdd7 	bl	800f7e8 <addProcessNoiseDt>
    this->lastProcessNoiseUpdateMs = nowMs;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
}
 800fc42:	bf00      	nop
 800fc44:	3718      	adds	r7, #24
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	447a0000 	.word	0x447a0000

0800fc50 <kalmanCoreFinalize>:
float v0;
float v1;
float v2;
bool kalmanCoreFinalize(kalmanCoreData_t* this)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b096      	sub	sp, #88	@ 0x58
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
  // Only finalize if data is updated
  if (! this->isUpdated) {
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 800fc5e:	f083 0301 	eor.w	r3, r3, #1
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d002      	beq.n	800fc6e <kalmanCoreFinalize+0x1e>
    return false;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	f000 bc98 	b.w	801059e <kalmanCoreFinalize+0x94e>

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static arm_matrix_instance_f32 tmpNN2m = {KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  // Incorporate the attitude error (Kalman filter state) with the attitude
  v0 = this->S[KC_STATE_D0];
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	699b      	ldr	r3, [r3, #24]
 800fc72:	4ade      	ldr	r2, [pc, #888]	@ (800ffec <kalmanCoreFinalize+0x39c>)
 800fc74:	6013      	str	r3, [r2, #0]
  v1 = this->S[KC_STATE_D1];
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	69db      	ldr	r3, [r3, #28]
 800fc7a:	4add      	ldr	r2, [pc, #884]	@ (800fff0 <kalmanCoreFinalize+0x3a0>)
 800fc7c:	6013      	str	r3, [r2, #0]
  v2 = this->S[KC_STATE_D2];
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6a1b      	ldr	r3, [r3, #32]
 800fc82:	4adc      	ldr	r2, [pc, #880]	@ (800fff4 <kalmanCoreFinalize+0x3a4>)
 800fc84:	6013      	str	r3, [r2, #0]

  // Move attitude error into attitude if any of the angle errors are large enough
  if ((fabsf(v0) > 0.1e-3f || fabsf(v1) > 0.1e-3f || fabsf(v2) > 0.1e-3f) && (fabsf(v0) < 10 && fabsf(v1) < 10 && fabsf(v2) < 10))
 800fc86:	4bd9      	ldr	r3, [pc, #868]	@ (800ffec <kalmanCoreFinalize+0x39c>)
 800fc88:	edd3 7a00 	vldr	s15, [r3]
 800fc8c:	eef0 7ae7 	vabs.f32	s15, s15
 800fc90:	ed9f 7ad9 	vldr	s14, [pc, #868]	@ 800fff8 <kalmanCoreFinalize+0x3a8>
 800fc94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9c:	dc18      	bgt.n	800fcd0 <kalmanCoreFinalize+0x80>
 800fc9e:	4bd4      	ldr	r3, [pc, #848]	@ (800fff0 <kalmanCoreFinalize+0x3a0>)
 800fca0:	edd3 7a00 	vldr	s15, [r3]
 800fca4:	eef0 7ae7 	vabs.f32	s15, s15
 800fca8:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 800fff8 <kalmanCoreFinalize+0x3a8>
 800fcac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fcb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb4:	dc0c      	bgt.n	800fcd0 <kalmanCoreFinalize+0x80>
 800fcb6:	4bcf      	ldr	r3, [pc, #828]	@ (800fff4 <kalmanCoreFinalize+0x3a4>)
 800fcb8:	edd3 7a00 	vldr	s15, [r3]
 800fcbc:	eef0 7ae7 	vabs.f32	s15, s15
 800fcc0:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 800fff8 <kalmanCoreFinalize+0x3a8>
 800fcc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fcc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fccc:	f340 8278 	ble.w	80101c0 <kalmanCoreFinalize+0x570>
 800fcd0:	4bc6      	ldr	r3, [pc, #792]	@ (800ffec <kalmanCoreFinalize+0x39c>)
 800fcd2:	edd3 7a00 	vldr	s15, [r3]
 800fcd6:	eef0 7ae7 	vabs.f32	s15, s15
 800fcda:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800fcde:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce6:	f140 826b 	bpl.w	80101c0 <kalmanCoreFinalize+0x570>
 800fcea:	4bc1      	ldr	r3, [pc, #772]	@ (800fff0 <kalmanCoreFinalize+0x3a0>)
 800fcec:	edd3 7a00 	vldr	s15, [r3]
 800fcf0:	eef0 7ae7 	vabs.f32	s15, s15
 800fcf4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800fcf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd00:	f140 825e 	bpl.w	80101c0 <kalmanCoreFinalize+0x570>
 800fd04:	4bbb      	ldr	r3, [pc, #748]	@ (800fff4 <kalmanCoreFinalize+0x3a4>)
 800fd06:	edd3 7a00 	vldr	s15, [r3]
 800fd0a:	eef0 7ae7 	vabs.f32	s15, s15
 800fd0e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800fd12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd1a:	f140 8251 	bpl.w	80101c0 <kalmanCoreFinalize+0x570>
  {
    float angle = arm_sqrt(v0*v0 + v1*v1 + v2*v2) + EPS;
 800fd1e:	4bb3      	ldr	r3, [pc, #716]	@ (800ffec <kalmanCoreFinalize+0x39c>)
 800fd20:	ed93 7a00 	vldr	s14, [r3]
 800fd24:	4bb1      	ldr	r3, [pc, #708]	@ (800ffec <kalmanCoreFinalize+0x39c>)
 800fd26:	edd3 7a00 	vldr	s15, [r3]
 800fd2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd2e:	4bb0      	ldr	r3, [pc, #704]	@ (800fff0 <kalmanCoreFinalize+0x3a0>)
 800fd30:	edd3 6a00 	vldr	s13, [r3]
 800fd34:	4bae      	ldr	r3, [pc, #696]	@ (800fff0 <kalmanCoreFinalize+0x3a0>)
 800fd36:	edd3 7a00 	vldr	s15, [r3]
 800fd3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fd3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fd42:	4bac      	ldr	r3, [pc, #688]	@ (800fff4 <kalmanCoreFinalize+0x3a4>)
 800fd44:	edd3 6a00 	vldr	s13, [r3]
 800fd48:	4baa      	ldr	r3, [pc, #680]	@ (800fff4 <kalmanCoreFinalize+0x3a4>)
 800fd4a:	edd3 7a00 	vldr	s15, [r3]
 800fd4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fd52:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd56:	eeb0 0a67 	vmov.f32	s0, s15
 800fd5a:	f7fd ffa1 	bl	800dca0 <arm_sqrt>
 800fd5e:	eef0 7a40 	vmov.f32	s15, s0
 800fd62:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 800fffc <kalmanCoreFinalize+0x3ac>
 800fd66:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd6a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float ca = arm_cos_f32(angle / 2.0f);
 800fd6e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800fd72:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800fd76:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fd7a:	eeb0 0a47 	vmov.f32	s0, s14
 800fd7e:	f007 fdbb 	bl	80178f8 <arm_cos_f32>
 800fd82:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    float sa = arm_sin_f32(angle / 2.0f);
 800fd86:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800fd8a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800fd8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fd92:	eeb0 0a47 	vmov.f32	s0, s14
 800fd96:	f007 fd69 	bl	801786c <arm_sin_f32>
 800fd9a:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    float dq[4] = {ca, sa * v0 / angle, sa * v1 / angle, sa * v2 / angle};
 800fd9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fda0:	60bb      	str	r3, [r7, #8]
 800fda2:	4b92      	ldr	r3, [pc, #584]	@ (800ffec <kalmanCoreFinalize+0x39c>)
 800fda4:	ed93 7a00 	vldr	s14, [r3]
 800fda8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800fdac:	ee67 6a27 	vmul.f32	s13, s14, s15
 800fdb0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800fdb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fdb8:	edc7 7a03 	vstr	s15, [r7, #12]
 800fdbc:	4b8c      	ldr	r3, [pc, #560]	@ (800fff0 <kalmanCoreFinalize+0x3a0>)
 800fdbe:	ed93 7a00 	vldr	s14, [r3]
 800fdc2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800fdc6:	ee67 6a27 	vmul.f32	s13, s14, s15
 800fdca:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800fdce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fdd2:	edc7 7a04 	vstr	s15, [r7, #16]
 800fdd6:	4b87      	ldr	r3, [pc, #540]	@ (800fff4 <kalmanCoreFinalize+0x3a4>)
 800fdd8:	ed93 7a00 	vldr	s14, [r3]
 800fddc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800fde0:	ee67 6a27 	vmul.f32	s13, s14, s15
 800fde4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800fde8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fdec:	edc7 7a05 	vstr	s15, [r7, #20]

    // rotate the quad's attitude by the delta quaternion vector computed above
    float tmpq0 = dq[0] * this->q[0] - dq[1] * this->q[1] - dq[2] * this->q[2] - dq[3] * this->q[3];
 800fdf0:	ed97 7a02 	vldr	s14, [r7, #8]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800fdfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fdfe:	edd7 6a03 	vldr	s13, [r7, #12]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800fe08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fe10:	edd7 6a04 	vldr	s13, [r7, #16]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800fe1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fe22:	edd7 6a05 	vldr	s13, [r7, #20]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800fe2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe34:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float tmpq1 = dq[1] * this->q[0] + dq[0] * this->q[1] + dq[3] * this->q[2] - dq[2] * this->q[3];
 800fe38:	ed97 7a03 	vldr	s14, [r7, #12]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800fe42:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe46:	edd7 6a02 	vldr	s13, [r7, #8]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800fe50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe54:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fe58:	edd7 6a05 	vldr	s13, [r7, #20]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800fe62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe66:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fe6a:	edd7 6a04 	vldr	s13, [r7, #16]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800fe74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe7c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float tmpq2 = dq[2] * this->q[0] - dq[3] * this->q[1] + dq[0] * this->q[2] + dq[1] * this->q[3];
 800fe80:	ed97 7a04 	vldr	s14, [r7, #16]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800fe8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe8e:	edd7 6a05 	vldr	s13, [r7, #20]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800fe98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fea0:	edd7 6a02 	vldr	s13, [r7, #8]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800feaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800feae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800feb2:	edd7 6a03 	vldr	s13, [r7, #12]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800febc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fec4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float tmpq3 = dq[3] * this->q[0] + dq[2] * this->q[1] - dq[1] * this->q[2] + dq[0] * this->q[3];
 800fec8:	ed97 7a05 	vldr	s14, [r7, #20]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800fed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fed6:	edd7 6a04 	vldr	s13, [r7, #16]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800fee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fee4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fee8:	edd7 6a03 	vldr	s13, [r7, #12]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800fef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fef6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fefa:	edd7 6a02 	vldr	s13, [r7, #8]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800ff04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ff08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff0c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // normalize and store the result
    float norm = arm_sqrt(tmpq0 * tmpq0 + tmpq1 * tmpq1 + tmpq2 * tmpq2 + tmpq3 * tmpq3) + EPS;
 800ff10:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800ff14:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ff18:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800ff1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ff20:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ff24:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800ff28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ff2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ff30:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800ff34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ff38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff3c:	eeb0 0a67 	vmov.f32	s0, s15
 800ff40:	f7fd feae 	bl	800dca0 <arm_sqrt>
 800ff44:	eef0 7a40 	vmov.f32	s15, s0
 800ff48:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800fffc <kalmanCoreFinalize+0x3ac>
 800ff4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff50:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    this->q[0] = tmpq0 / norm;
 800ff54:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800ff58:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800ff5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    this->q[1] = tmpq1 / norm;
 800ff66:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800ff6a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800ff6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    this->q[2] = tmpq2 / norm;
 800ff78:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800ff7c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800ff80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    this->q[3] = tmpq3 / norm;
 800ff8a:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800ff8e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800ff92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
     *
     * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
     * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
     */

    float d0 = v0/2; // the attitude error vector (v0,v1,v2) is small,
 800ff9c:	4b13      	ldr	r3, [pc, #76]	@ (800ffec <kalmanCoreFinalize+0x39c>)
 800ff9e:	ed93 7a00 	vldr	s14, [r3]
 800ffa2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ffa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ffaa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d1 = v1/2; // so we use a first order approximation to d0 = tan(|v0|/2)*v0/|v0|
 800ffae:	4b10      	ldr	r3, [pc, #64]	@ (800fff0 <kalmanCoreFinalize+0x3a0>)
 800ffb0:	ed93 7a00 	vldr	s14, [r3]
 800ffb4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ffb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ffbc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d2 = v2/2;
 800ffc0:	4b0c      	ldr	r3, [pc, #48]	@ (800fff4 <kalmanCoreFinalize+0x3a4>)
 800ffc2:	ed93 7a00 	vldr	s14, [r3]
 800ffc6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ffca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ffce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    A[KC_STATE_X][KC_STATE_X] = 1;
 800ffd2:	4b0b      	ldr	r3, [pc, #44]	@ (8010000 <kalmanCoreFinalize+0x3b0>)
 800ffd4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ffd8:	601a      	str	r2, [r3, #0]
    A[KC_STATE_Y][KC_STATE_Y] = 1;
 800ffda:	4b09      	ldr	r3, [pc, #36]	@ (8010000 <kalmanCoreFinalize+0x3b0>)
 800ffdc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ffe0:	629a      	str	r2, [r3, #40]	@ 0x28
    A[KC_STATE_Z][KC_STATE_Z] = 1;
 800ffe2:	4b07      	ldr	r3, [pc, #28]	@ (8010000 <kalmanCoreFinalize+0x3b0>)
 800ffe4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ffe8:	e00c      	b.n	8010004 <kalmanCoreFinalize+0x3b4>
 800ffea:	bf00      	nop
 800ffec:	20009610 	.word	0x20009610
 800fff0:	20009614 	.word	0x20009614
 800fff4:	20009618 	.word	0x20009618
 800fff8:	38d1b717 	.word	0x38d1b717
 800fffc:	358637bd 	.word	0x358637bd
 8010000:	10004300 	.word	0x10004300
 8010004:	651a      	str	r2, [r3, #80]	@ 0x50

    A[KC_STATE_PX][KC_STATE_PX] = 1;
 8010006:	4b6a      	ldr	r3, [pc, #424]	@ (80101b0 <kalmanCoreFinalize+0x560>)
 8010008:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801000c:	679a      	str	r2, [r3, #120]	@ 0x78
    A[KC_STATE_PY][KC_STATE_PY] = 1;
 801000e:	4b68      	ldr	r3, [pc, #416]	@ (80101b0 <kalmanCoreFinalize+0x560>)
 8010010:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8010014:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 8010018:	4b65      	ldr	r3, [pc, #404]	@ (80101b0 <kalmanCoreFinalize+0x560>)
 801001a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801001e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 8010022:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8010026:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801002a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801002e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010032:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010036:	ee37 7a67 	vsub.f32	s14, s14, s15
 801003a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801003e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8010042:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010046:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801004a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801004e:	4b58      	ldr	r3, [pc, #352]	@ (80101b0 <kalmanCoreFinalize+0x560>)
 8010050:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
    A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 8010054:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8010058:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801005c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010060:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010064:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010068:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801006c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010070:	4b4f      	ldr	r3, [pc, #316]	@ (80101b0 <kalmanCoreFinalize+0x560>)
 8010072:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
    A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 8010076:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801007a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801007e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010082:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010086:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801008a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801008e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010092:	4b47      	ldr	r3, [pc, #284]	@ (80101b0 <kalmanCoreFinalize+0x560>)
 8010094:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8

    A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 8010098:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801009c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80100a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80100a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80100ac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80100b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80100b4:	4b3e      	ldr	r3, [pc, #248]	@ (80101b0 <kalmanCoreFinalize+0x560>)
 80100b6:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
    A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 80100ba:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80100be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80100c2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80100c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80100ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80100ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80100d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80100d6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80100da:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80100de:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80100e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80100e6:	4b32      	ldr	r3, [pc, #200]	@ (80101b0 <kalmanCoreFinalize+0x560>)
 80100e8:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
    A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 80100ec:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80100f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80100f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100f8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80100fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010100:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8010104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010108:	4b29      	ldr	r3, [pc, #164]	@ (80101b0 <kalmanCoreFinalize+0x560>)
 801010a:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

    A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 801010e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8010112:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010116:	ee67 7a27 	vmul.f32	s15, s14, s15
 801011a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801011e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010122:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8010126:	ee77 7a27 	vadd.f32	s15, s14, s15
 801012a:	4b21      	ldr	r3, [pc, #132]	@ (80101b0 <kalmanCoreFinalize+0x560>)
 801012c:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
    A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 8010130:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8010134:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010138:	ee67 7a27 	vmul.f32	s15, s14, s15
 801013c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010140:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010144:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8010148:	ee77 7a67 	vsub.f32	s15, s14, s15
 801014c:	4b18      	ldr	r3, [pc, #96]	@ (80101b0 <kalmanCoreFinalize+0x560>)
 801014e:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
    A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 8010152:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8010156:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801015a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801015e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010166:	ee37 7a67 	vsub.f32	s14, s14, s15
 801016a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801016e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8010172:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010176:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801017a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801017e:	4b0c      	ldr	r3, [pc, #48]	@ (80101b0 <kalmanCoreFinalize+0x560>)
 8010180:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140

    mat_trans(&Am, &tmpNN1m); // A'
 8010184:	490b      	ldr	r1, [pc, #44]	@ (80101b4 <kalmanCoreFinalize+0x564>)
 8010186:	480c      	ldr	r0, [pc, #48]	@ (80101b8 <kalmanCoreFinalize+0x568>)
 8010188:	f7fd fd40 	bl	800dc0c <mat_trans>
    mat_mult(&Am, &this->Pm, &tmpNN2m); // AP
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8010192:	4a0a      	ldr	r2, [pc, #40]	@ (80101bc <kalmanCoreFinalize+0x56c>)
 8010194:	4619      	mov	r1, r3
 8010196:	4808      	ldr	r0, [pc, #32]	@ (80101b8 <kalmanCoreFinalize+0x568>)
 8010198:	f7fd fd5a 	bl	800dc50 <mat_mult>
    mat_mult(&tmpNN2m, &tmpNN1m, &this->Pm); //APA'
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80101a2:	461a      	mov	r2, r3
 80101a4:	4903      	ldr	r1, [pc, #12]	@ (80101b4 <kalmanCoreFinalize+0x564>)
 80101a6:	4805      	ldr	r0, [pc, #20]	@ (80101bc <kalmanCoreFinalize+0x56c>)
 80101a8:	f7fd fd52 	bl	800dc50 <mat_mult>
 80101ac:	e008      	b.n	80101c0 <kalmanCoreFinalize+0x570>
 80101ae:	bf00      	nop
 80101b0:	10004300 	.word	0x10004300
 80101b4:	200000d0 	.word	0x200000d0
 80101b8:	200000c8 	.word	0x200000c8
 80101bc:	200000d8 	.word	0x200000d8
  }

  // convert the new attitude to a rotation matrix, such that we can rotate body-frame velocity and acc
  this->R[0][0] = this->q[0] * this->q[0] + this->q[1] * this->q[1] - this->q[2] * this->q[2] - this->q[3] * this->q[3];
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80101cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80101dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80101f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8010204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010208:	ee77 7a67 	vsub.f32	s15, s14, s15
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  this->R[0][1] = 2 * this->q[1] * this->q[2] - 2 * this->q[0] * this->q[3];
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010218:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010222:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801022c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8010236:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801023a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
  this->R[0][2] = 2 * this->q[1] * this->q[3] + 2 * this->q[0] * this->q[2];
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801024a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8010254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801025e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801026c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

  this->R[1][0] = 2 * this->q[1] * this->q[2] + 2 * this->q[0] * this->q[3];
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801027c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010286:	ee27 7a27 	vmul.f32	s14, s14, s15
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010290:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801029a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801029e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  this->R[1][1] = this->q[0] * this->q[0] - this->q[1] * this->q[1] + this->q[2] * this->q[2] - this->q[3] * this->q[3];
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80102b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80102c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80102c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80102d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80102dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80102ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80102f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
  this->R[1][2] = 2 * this->q[2] * this->q[3] - 2 * this->q[0] * this->q[1];
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010300:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801030a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010314:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801031e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

  this->R[2][0] = 2 * this->q[1] * this->q[3] - 2 * this->q[0] * this->q[2];
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010332:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801033c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010346:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
  this->R[2][1] = 2 * this->q[2] * this->q[3] + 2 * this->q[0] * this->q[1];
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010364:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801036e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010378:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010386:	ee77 7a27 	vadd.f32	s15, s14, s15
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
  this->R[2][2] = this->q[0] * this->q[0] - this->q[1] * this->q[1] - this->q[2] * this->q[2] + this->q[3] * this->q[3];
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801039c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80103ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80103b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80103c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80103c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80103d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80103d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

  // reset the attitude error
  this->S[KC_STATE_D0] = 0;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f04f 0200 	mov.w	r2, #0
 80103e8:	619a      	str	r2, [r3, #24]
  this->S[KC_STATE_D1] = 0;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f04f 0200 	mov.w	r2, #0
 80103f0:	61da      	str	r2, [r3, #28]
  this->S[KC_STATE_D2] = 0;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f04f 0200 	mov.w	r2, #0
 80103f8:	621a      	str	r2, [r3, #32]

  // enforce symmetry of the covariance matrix, and ensure the values stay bounded
  for (int i=0; i<KC_STATE_DIM; i++) {
 80103fa:	2300      	movs	r3, #0
 80103fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80103fe:	e0c2      	b.n	8010586 <kalmanCoreFinalize+0x936>
    for (int j=i; j<KC_STATE_DIM; j++) {
 8010400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010402:	653b      	str	r3, [r7, #80]	@ 0x50
 8010404:	e0b8      	b.n	8010578 <kalmanCoreFinalize+0x928>
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 8010406:	6879      	ldr	r1, [r7, #4]
 8010408:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801040a:	4613      	mov	r3, r2
 801040c:	00db      	lsls	r3, r3, #3
 801040e:	4413      	add	r3, r2
 8010410:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010412:	4413      	add	r3, r2
 8010414:	3316      	adds	r3, #22
 8010416:	009b      	lsls	r3, r3, #2
 8010418:	440b      	add	r3, r1
 801041a:	edd3 7a00 	vldr	s15, [r3]
 801041e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010422:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010426:	6879      	ldr	r1, [r7, #4]
 8010428:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801042a:	4613      	mov	r3, r2
 801042c:	00db      	lsls	r3, r3, #3
 801042e:	4413      	add	r3, r2
 8010430:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010432:	4413      	add	r3, r2
 8010434:	3316      	adds	r3, #22
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	440b      	add	r3, r1
 801043a:	edd3 7a00 	vldr	s15, [r3]
 801043e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010442:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010446:	ee77 7a27 	vadd.f32	s15, s14, s15
 801044a:	ee17 0a90 	vmov	r0, s15
 801044e:	f7f0 f82d 	bl	80004ac <__aeabi_f2d>
 8010452:	4602      	mov	r2, r0
 8010454:	460b      	mov	r3, r1
 8010456:	e9c7 2306 	strd	r2, r3, [r7, #24]
      if (isnan(p) || p > MAX_COVARIANCE) {
 801045a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801045e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010462:	f7f0 fb15 	bl	8000a90 <__aeabi_dcmpun>
 8010466:	4603      	mov	r3, r0
 8010468:	2b00      	cmp	r3, #0
 801046a:	d109      	bne.n	8010480 <kalmanCoreFinalize+0x830>
 801046c:	f04f 0200 	mov.w	r2, #0
 8010470:	4b4f      	ldr	r3, [pc, #316]	@ (80105b0 <kalmanCoreFinalize+0x960>)
 8010472:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010476:	f7f0 fb01 	bl	8000a7c <__aeabi_dcmpgt>
 801047a:	4603      	mov	r3, r0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d022      	beq.n	80104c6 <kalmanCoreFinalize+0x876>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 8010480:	6879      	ldr	r1, [r7, #4]
 8010482:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010484:	4613      	mov	r3, r2
 8010486:	00db      	lsls	r3, r3, #3
 8010488:	4413      	add	r3, r2
 801048a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801048c:	4413      	add	r3, r2
 801048e:	3316      	adds	r3, #22
 8010490:	009b      	lsls	r3, r3, #2
 8010492:	440b      	add	r3, r1
 8010494:	4a47      	ldr	r2, [pc, #284]	@ (80105b4 <kalmanCoreFinalize+0x964>)
 8010496:	601a      	str	r2, [r3, #0]
 8010498:	6879      	ldr	r1, [r7, #4]
 801049a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801049c:	4613      	mov	r3, r2
 801049e:	00db      	lsls	r3, r3, #3
 80104a0:	4413      	add	r3, r2
 80104a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80104a4:	4413      	add	r3, r2
 80104a6:	3316      	adds	r3, #22
 80104a8:	009b      	lsls	r3, r3, #2
 80104aa:	440b      	add	r3, r1
 80104ac:	6819      	ldr	r1, [r3, #0]
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80104b2:	4613      	mov	r3, r2
 80104b4:	00db      	lsls	r3, r3, #3
 80104b6:	4413      	add	r3, r2
 80104b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80104ba:	4413      	add	r3, r2
 80104bc:	3316      	adds	r3, #22
 80104be:	009b      	lsls	r3, r3, #2
 80104c0:	4403      	add	r3, r0
 80104c2:	6019      	str	r1, [r3, #0]
 80104c4:	e055      	b.n	8010572 <kalmanCoreFinalize+0x922>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 80104c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80104c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d12c      	bne.n	8010528 <kalmanCoreFinalize+0x8d8>
 80104ce:	a336      	add	r3, pc, #216	@ (adr r3, 80105a8 <kalmanCoreFinalize+0x958>)
 80104d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80104d8:	f7f0 fab2 	bl	8000a40 <__aeabi_dcmplt>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d022      	beq.n	8010528 <kalmanCoreFinalize+0x8d8>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 80104e2:	6879      	ldr	r1, [r7, #4]
 80104e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80104e6:	4613      	mov	r3, r2
 80104e8:	00db      	lsls	r3, r3, #3
 80104ea:	4413      	add	r3, r2
 80104ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80104ee:	4413      	add	r3, r2
 80104f0:	3316      	adds	r3, #22
 80104f2:	009b      	lsls	r3, r3, #2
 80104f4:	440b      	add	r3, r1
 80104f6:	4a30      	ldr	r2, [pc, #192]	@ (80105b8 <kalmanCoreFinalize+0x968>)
 80104f8:	601a      	str	r2, [r3, #0]
 80104fa:	6879      	ldr	r1, [r7, #4]
 80104fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80104fe:	4613      	mov	r3, r2
 8010500:	00db      	lsls	r3, r3, #3
 8010502:	4413      	add	r3, r2
 8010504:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010506:	4413      	add	r3, r2
 8010508:	3316      	adds	r3, #22
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	440b      	add	r3, r1
 801050e:	6819      	ldr	r1, [r3, #0]
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010514:	4613      	mov	r3, r2
 8010516:	00db      	lsls	r3, r3, #3
 8010518:	4413      	add	r3, r2
 801051a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801051c:	4413      	add	r3, r2
 801051e:	3316      	adds	r3, #22
 8010520:	009b      	lsls	r3, r3, #2
 8010522:	4403      	add	r3, r0
 8010524:	6019      	str	r1, [r3, #0]
 8010526:	e024      	b.n	8010572 <kalmanCoreFinalize+0x922>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 8010528:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801052c:	f7f0 fac6 	bl	8000abc <__aeabi_d2f>
 8010530:	6879      	ldr	r1, [r7, #4]
 8010532:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010534:	4613      	mov	r3, r2
 8010536:	00db      	lsls	r3, r3, #3
 8010538:	4413      	add	r3, r2
 801053a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801053c:	4413      	add	r3, r2
 801053e:	3316      	adds	r3, #22
 8010540:	009b      	lsls	r3, r3, #2
 8010542:	440b      	add	r3, r1
 8010544:	6018      	str	r0, [r3, #0]
 8010546:	6879      	ldr	r1, [r7, #4]
 8010548:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801054a:	4613      	mov	r3, r2
 801054c:	00db      	lsls	r3, r3, #3
 801054e:	4413      	add	r3, r2
 8010550:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010552:	4413      	add	r3, r2
 8010554:	3316      	adds	r3, #22
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	440b      	add	r3, r1
 801055a:	6819      	ldr	r1, [r3, #0]
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010560:	4613      	mov	r3, r2
 8010562:	00db      	lsls	r3, r3, #3
 8010564:	4413      	add	r3, r2
 8010566:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010568:	4413      	add	r3, r2
 801056a:	3316      	adds	r3, #22
 801056c:	009b      	lsls	r3, r3, #2
 801056e:	4403      	add	r3, r0
 8010570:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 8010572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010574:	3301      	adds	r3, #1
 8010576:	653b      	str	r3, [r7, #80]	@ 0x50
 8010578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801057a:	2b08      	cmp	r3, #8
 801057c:	f77f af43 	ble.w	8010406 <kalmanCoreFinalize+0x7b6>
  for (int i=0; i<KC_STATE_DIM; i++) {
 8010580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010582:	3301      	adds	r3, #1
 8010584:	657b      	str	r3, [r7, #84]	@ 0x54
 8010586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010588:	2b08      	cmp	r3, #8
 801058a:	f77f af39 	ble.w	8010400 <kalmanCoreFinalize+0x7b0>
      }
    }
  }

  assertStateNotNaN(this);
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f7fd fbe2 	bl	800dd58 <assertStateNotNaN>

  this->isUpdated = false;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2200      	movs	r2, #0
 8010598:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
  return true;
 801059c:	2301      	movs	r3, #1
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3758      	adds	r7, #88	@ 0x58
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	a0000000 	.word	0xa0000000
 80105ac:	3eb0c6f7 	.word	0x3eb0c6f7
 80105b0:	40590000 	.word	0x40590000
 80105b4:	42c80000 	.word	0x42c80000
 80105b8:	358637bd 	.word	0x358637bd

080105bc <kalmanCoreExternalizeState>:

void kalmanCoreExternalizeState(const kalmanCoreData_t* this, state_t *state, const Axis3f *acc)
{
 80105bc:	b590      	push	{r4, r7, lr}
 80105be:	b09d      	sub	sp, #116	@ 0x74
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	60b9      	str	r1, [r7, #8]
 80105c6:	607a      	str	r2, [r7, #4]
  // position state is already in world frame
  state->position = (point_t){
      .x = this->S[KC_STATE_X],
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681c      	ldr	r4, [r3, #0]
      .y = this->S[KC_STATE_Y],
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	6858      	ldr	r0, [r3, #4]
      .z = this->S[KC_STATE_Z]
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	6899      	ldr	r1, [r3, #8]
  state->position = (point_t){
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	3320      	adds	r3, #32
 80105d8:	2200      	movs	r2, #0
 80105da:	601a      	str	r2, [r3, #0]
 80105dc:	605a      	str	r2, [r3, #4]
 80105de:	609a      	str	r2, [r3, #8]
 80105e0:	60da      	str	r2, [r3, #12]
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	625c      	str	r4, [r3, #36]	@ 0x24
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	6298      	str	r0, [r3, #40]	@ 0x28
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	62d9      	str	r1, [r3, #44]	@ 0x2c
  };

  // velocity is in body frame and needs to be rotated to world frame
  state->velocity = (velocity_t){
      .x = this->R[0][0]*this->S[KC_STATE_PX] + this->R[0][1]*this->S[KC_STATE_PY] + this->R[0][2]*this->S[KC_STATE_PZ],
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80105fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	edd3 7a04 	vldr	s15, [r3, #16]
 801060a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801060e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	edd3 7a05 	vldr	s15, [r3, #20]
 801061e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010622:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*this->S[KC_STATE_PX] + this->R[1][1]*this->S[KC_STATE_PY] + this->R[1][2]*this->S[KC_STATE_PZ],
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	edd3 7a03 	vldr	s15, [r3, #12]
 8010632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	edd3 7a04 	vldr	s15, [r3, #16]
 8010642:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010646:	ee37 7a27 	vadd.f32	s14, s14, s15
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	edd3 7a05 	vldr	s15, [r3, #20]
 8010656:	ee66 7a27 	vmul.f32	s15, s12, s15
 801065a:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*this->S[KC_STATE_PX] + this->R[2][1]*this->S[KC_STATE_PY] + this->R[2][2]*this->S[KC_STATE_PZ]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	ed93 6a13 	vldr	s12, [r3, #76]	@ 0x4c
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	edd3 7a03 	vldr	s15, [r3, #12]
 801066a:	ee26 6a27 	vmul.f32	s12, s12, s15
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	edd3 5a14 	vldr	s11, [r3, #80]	@ 0x50
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	edd3 7a04 	vldr	s15, [r3, #16]
 801067a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801067e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	edd3 5a15 	vldr	s11, [r3, #84]	@ 0x54
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	edd3 7a05 	vldr	s15, [r3, #20]
 801068e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8010692:	ee76 7a27 	vadd.f32	s15, s12, s15
  state->velocity = (velocity_t){
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	3330      	adds	r3, #48	@ 0x30
 801069a:	2200      	movs	r2, #0
 801069c:	601a      	str	r2, [r3, #0]
 801069e:	605a      	str	r2, [r3, #4]
 80106a0:	609a      	str	r2, [r3, #8]
 80106a2:	60da      	str	r2, [r3, #12]
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	edc3 6a0d 	vstr	s13, [r3, #52]	@ 0x34
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	ed83 7a0e 	vstr	s14, [r3, #56]	@ 0x38
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

  // Accelerometer measurements are in the body frame and need to be rotated to world frame.
  // Furthermore, the legacy code requires acc.z to be acceleration without gravity.
  // Finally, note that these accelerations are in Gs, and not in m/s^2, hence - 1 for removing gravity
  state->acc = (acc_t){
      .x = this->R[0][0]*acc->x + this->R[0][1]*acc->y + this->R[0][2]*acc->z,
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	edd3 7a00 	vldr	s15, [r3]
 80106c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80106d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80106d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80106e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80106ea:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*acc->x + this->R[1][1]*acc->y + this->R[1][2]*acc->z,
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	edd3 7a00 	vldr	s15, [r3]
 80106fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	edd3 7a01 	vldr	s15, [r3, #4]
 801070a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801070e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	edd3 7a02 	vldr	s15, [r3, #8]
 801071e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010722:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*acc->x + this->R[2][1]*acc->y + this->R[2][2]*acc->z - 1
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	ed93 6a13 	vldr	s12, [r3, #76]	@ 0x4c
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	edd3 7a00 	vldr	s15, [r3]
 8010732:	ee26 6a27 	vmul.f32	s12, s12, s15
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	edd3 5a14 	vldr	s11, [r3, #80]	@ 0x50
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	edd3 7a01 	vldr	s15, [r3, #4]
 8010742:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8010746:	ee36 6a27 	vadd.f32	s12, s12, s15
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	edd3 5a15 	vldr	s11, [r3, #84]	@ 0x54
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	edd3 7a02 	vldr	s15, [r3, #8]
 8010756:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801075a:	ee76 7a27 	vadd.f32	s15, s12, s15
 801075e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8010762:	ee77 7ac6 	vsub.f32	s15, s15, s12
  state->acc = (acc_t){
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	3340      	adds	r3, #64	@ 0x40
 801076a:	2200      	movs	r2, #0
 801076c:	601a      	str	r2, [r3, #0]
 801076e:	605a      	str	r2, [r3, #4]
 8010770:	609a      	str	r2, [r3, #8]
 8010772:	60da      	str	r2, [r3, #12]
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	edc3 6a11 	vstr	s13, [r3, #68]	@ 0x44
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	ed83 7a12 	vstr	s14, [r3, #72]	@ 0x48
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
  };

  // convert the new attitude into Euler YPR
  float yaw = atan2f(2*(this->q[1]*this->q[2]+this->q[0]*this->q[3]) , this->q[0]*this->q[0] + this->q[1]*this->q[1] - this->q[2]*this->q[2] - this->q[3]*this->q[3]);
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010792:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80107a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80107a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107aa:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80107ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80107ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80107ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80107de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80107e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80107f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80107f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107fa:	eef0 0a67 	vmov.f32	s1, s15
 80107fe:	eeb0 0a46 	vmov.f32	s0, s12
 8010802:	f007 f96f 	bl	8017ae4 <atan2f>
 8010806:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
  float pitch = asinf(-2*(this->q[1]*this->q[3] - this->q[0]*this->q[2]));
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8010816:	ee27 7a27 	vmul.f32	s14, s14, s15
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801082a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801082e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8010832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010836:	eeb0 0a67 	vmov.f32	s0, s15
 801083a:	f007 f927 	bl	8017a8c <asinf>
 801083e:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
  float roll = atan2f(2*(this->q[2]*this->q[3]+this->q[0]*this->q[1]) , this->q[0]*this->q[0] - this->q[1]*this->q[1] - this->q[2]*this->q[2] + this->q[3]*this->q[3]);
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801084e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801085e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010866:	ee37 6aa7 	vadd.f32	s12, s15, s15
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010876:	ee27 7a27 	vmul.f32	s14, s14, s15
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801088a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801089a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801089e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80108ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80108b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108b6:	eef0 0a67 	vmov.f32	s1, s15
 80108ba:	eeb0 0a46 	vmov.f32	s0, s12
 80108be:	f007 f911 	bl	8017ae4 <atan2f>
 80108c2:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64

  // Save attitude, adjusted for the legacy CF2 body coordinate system
  state->attitude = (attitude_t){
      .roll = roll*RAD_TO_DEG,
 80108c6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80108ca:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 801093c <kalmanCoreExternalizeState+0x380>
 80108ce:	ee67 6a87 	vmul.f32	s13, s15, s14
      .pitch = -pitch*RAD_TO_DEG,
 80108d2:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80108d6:	eef1 7a67 	vneg.f32	s15, s15
 80108da:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801093c <kalmanCoreExternalizeState+0x380>
 80108de:	ee27 7a87 	vmul.f32	s14, s15, s14
      .yaw = yaw*RAD_TO_DEG
 80108e2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80108e6:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801093c <kalmanCoreExternalizeState+0x380>
 80108ea:	ee67 7a86 	vmul.f32	s15, s15, s12
  state->attitude = (attitude_t){
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	461a      	mov	r2, r3
 80108f2:	2300      	movs	r3, #0
 80108f4:	6013      	str	r3, [r2, #0]
 80108f6:	6053      	str	r3, [r2, #4]
 80108f8:	6093      	str	r3, [r2, #8]
 80108fa:	60d3      	str	r3, [r2, #12]
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	edc3 6a01 	vstr	s13, [r3, #4]
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	ed83 7a02 	vstr	s14, [r3, #8]
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	edc3 7a03 	vstr	s15, [r3, #12]

  // Save quaternion, hopefully one day this could be used in a better controller.
  // Note that this is not adjusted for the legacy coordinate system
  state->attitudeQuaternion = (quaternion_t){
      .w = this->q[0],
      .x = this->q[1],
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      .y = this->q[2],
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
      .z = this->q[3]
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	6b19      	ldr	r1, [r3, #48]	@ 0x30
      .w = this->q[0],
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  state->attitudeQuaternion = (quaternion_t){
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	611c      	str	r4, [r3, #16]
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	6158      	str	r0, [r3, #20]
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	6199      	str	r1, [r3, #24]
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	61da      	str	r2, [r3, #28]
  };

  assertStateNotNaN(this);
 801092e:	68f8      	ldr	r0, [r7, #12]
 8010930:	f7fd fa12 	bl	800dd58 <assertStateNotNaN>
}
 8010934:	bf00      	nop
 8010936:	3774      	adds	r7, #116	@ 0x74
 8010938:	46bd      	mov	sp, r7
 801093a:	bd90      	pop	{r4, r7, pc}
 801093c:	42652ee0 	.word	0x42652ee0

08010940 <kalmanCoreUpdateWithAbsoluteHeight>:
 */

#include "mm_absolute_height.h"

// Measurement model where the measurement is the absolute height
void kalmanCoreUpdateWithAbsoluteHeight(kalmanCoreData_t* this, heightMeasurement_t* height) {
 8010940:	b580      	push	{r7, lr}
 8010942:	b08e      	sub	sp, #56	@ 0x38
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
  float h[KC_STATE_DIM] = {0};
 801094a:	f107 0314 	add.w	r3, r7, #20
 801094e:	2224      	movs	r2, #36	@ 0x24
 8010950:	2100      	movs	r1, #0
 8010952:	4618      	mov	r0, r3
 8010954:	f007 f81a 	bl	801798c <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8010958:	2301      	movs	r3, #1
 801095a:	81bb      	strh	r3, [r7, #12]
 801095c:	2309      	movs	r3, #9
 801095e:	81fb      	strh	r3, [r7, #14]
 8010960:	f107 0314 	add.w	r3, r7, #20
 8010964:	613b      	str	r3, [r7, #16]
  h[KC_STATE_Z] = 1;
 8010966:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801096a:	61fb      	str	r3, [r7, #28]
  kalmanCoreScalarUpdate(this, &H, height->height - this->S[KC_STATE_Z], height->stdDev);
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	ed93 7a01 	vldr	s14, [r3, #4]
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	edd3 7a02 	vldr	s15, [r3, #8]
 8010978:	ee77 7a67 	vsub.f32	s15, s14, s15
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	ed93 7a02 	vldr	s14, [r3, #8]
 8010982:	f107 030c 	add.w	r3, r7, #12
 8010986:	eef0 0a47 	vmov.f32	s1, s14
 801098a:	eeb0 0a67 	vmov.f32	s0, s15
 801098e:	4619      	mov	r1, r3
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f7fd fb79 	bl	800e088 <kalmanCoreScalarUpdate>
}
 8010996:	bf00      	nop
 8010998:	3738      	adds	r7, #56	@ 0x38
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
	...

080109a0 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b086      	sub	sp, #24
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 80109aa:	f04f 0300 	mov.w	r3, #0
 80109ae:	60bb      	str	r3, [r7, #8]
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	613b      	str	r3, [r7, #16]
 80109b4:	f107 0308 	add.w	r3, r7, #8
 80109b8:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 80109ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80109be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80109c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c6:	db0a      	blt.n	80109de <arm_sqrt+0x3e>
      *pOut = sqrtf(in);
 80109c8:	ed97 0a04 	vldr	s0, [r7, #16]
 80109cc:	f007 f948 	bl	8017c60 <sqrtf>
 80109d0:	eef0 7a40 	vmov.f32	s15, s0
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80109da:	2300      	movs	r3, #0
 80109dc:	e005      	b.n	80109ea <arm_sqrt+0x4a>
      *pOut = 0.0f;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f04f 0200 	mov.w	r2, #0
 80109e4:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80109e6:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 80109ea:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 80109ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d004      	beq.n	80109fe <arm_sqrt+0x5e>
 80109f4:	2258      	movs	r2, #88	@ 0x58
 80109f6:	4906      	ldr	r1, [pc, #24]	@ (8010a10 <arm_sqrt+0x70>)
 80109f8:	4806      	ldr	r0, [pc, #24]	@ (8010a14 <arm_sqrt+0x74>)
 80109fa:	f001 fd35 	bl	8012468 <assertFail>
  return pOut;
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	ee07 3a90 	vmov	s15, r3
}
 8010a04:	eeb0 0a67 	vmov.f32	s0, s15
 8010a08:	3718      	adds	r7, #24
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	0801a7d8 	.word	0x0801a7d8
 8010a14:	0801a818 	.word	0x0801a818

08010a18 <kalmanCoreUpdateWithDistance>:
 */

#include "mm_distance.h"

// Measurement model where the measurement is the distance to a known point in space
void kalmanCoreUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t* d) {
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	ed2d 8b02 	vpush	{d8}
 8010a1e:	b092      	sub	sp, #72	@ 0x48
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
  // a measurement of distance to point (x, y, z)
  float h[KC_STATE_DIM] = {0};
 8010a26:	f107 0310 	add.w	r3, r7, #16
 8010a2a:	2224      	movs	r2, #36	@ 0x24
 8010a2c:	2100      	movs	r1, #0
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f006 ffac 	bl	801798c <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8010a34:	2301      	movs	r3, #1
 8010a36:	813b      	strh	r3, [r7, #8]
 8010a38:	2309      	movs	r3, #9
 8010a3a:	817b      	strh	r3, [r7, #10]
 8010a3c:	f107 0310 	add.w	r3, r7, #16
 8010a40:	60fb      	str	r3, [r7, #12]

  float dx = this->S[KC_STATE_X] - d->x;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	ed93 7a00 	vldr	s14, [r3]
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	edd3 7a00 	vldr	s15, [r3]
 8010a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a52:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  float dy = this->S[KC_STATE_Y] - d->y;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	ed93 7a01 	vldr	s14, [r3, #4]
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8010a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a66:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  float dz = this->S[KC_STATE_Z] - d->z;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	edd3 7a02 	vldr	s15, [r3, #8]
 8010a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a7a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

  float measuredDistance = d->distance;
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	691b      	ldr	r3, [r3, #16]
 8010a82:	63bb      	str	r3, [r7, #56]	@ 0x38

  float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 8010a84:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8010a88:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8010a8c:	f007 f890 	bl	8017bb0 <powf>
 8010a90:	eeb0 8a40 	vmov.f32	s16, s0
 8010a94:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8010a98:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8010a9c:	f007 f888 	bl	8017bb0 <powf>
 8010aa0:	eef0 7a40 	vmov.f32	s15, s0
 8010aa4:	ee38 8a27 	vadd.f32	s16, s16, s15
 8010aa8:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8010aac:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8010ab0:	f007 f87e 	bl	8017bb0 <powf>
 8010ab4:	eef0 7a40 	vmov.f32	s15, s0
 8010ab8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010abc:	eeb0 0a67 	vmov.f32	s0, s15
 8010ac0:	f7ff ff6e 	bl	80109a0 <arm_sqrt>
 8010ac4:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
  if (predictedDistance != 0.0f) {
 8010ac8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8010acc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad4:	d018      	beq.n	8010b08 <kalmanCoreUpdateWithDistance+0xf0>
    // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
    h[KC_STATE_X] = dx/predictedDistance;
 8010ad6:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8010ada:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ae2:	edc7 7a04 	vstr	s15, [r7, #16]
    h[KC_STATE_Y] = dy/predictedDistance;
 8010ae6:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8010aea:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010af2:	edc7 7a05 	vstr	s15, [r7, #20]
    h[KC_STATE_Z] = dz/predictedDistance;
 8010af6:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8010afa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b02:	edc7 7a06 	vstr	s15, [r7, #24]
 8010b06:	e008      	b.n	8010b1a <kalmanCoreUpdateWithDistance+0x102>
  } else {
    // Avoid divide by zero
    h[KC_STATE_X] = 1.0f;
 8010b08:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8010b0c:	613b      	str	r3, [r7, #16]
    h[KC_STATE_Y] = 0.0f;
 8010b0e:	f04f 0300 	mov.w	r3, #0
 8010b12:	617b      	str	r3, [r7, #20]
    h[KC_STATE_Z] = 0.0f;
 8010b14:	f04f 0300 	mov.w	r3, #0
 8010b18:	61bb      	str	r3, [r7, #24]
  }

  kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, d->stdDev);
 8010b1a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8010b1e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8010b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	ed93 7a05 	vldr	s14, [r3, #20]
 8010b2c:	f107 0308 	add.w	r3, r7, #8
 8010b30:	eef0 0a47 	vmov.f32	s1, s14
 8010b34:	eeb0 0a67 	vmov.f32	s0, s15
 8010b38:	4619      	mov	r1, r3
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f7fd faa4 	bl	800e088 <kalmanCoreScalarUpdate>
}
 8010b40:	bf00      	nop
 8010b42:	3748      	adds	r7, #72	@ 0x48
 8010b44:	46bd      	mov	sp, r7
 8010b46:	ecbd 8b02 	vpop	{d8}
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <assert_aligned_4_bytes>:
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	f003 0303 	and.w	r3, r3, #3
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d004      	beq.n	8010b6e <assert_aligned_4_bytes+0x22>
 8010b64:	2239      	movs	r2, #57	@ 0x39
 8010b66:	4904      	ldr	r1, [pc, #16]	@ (8010b78 <assert_aligned_4_bytes+0x2c>)
 8010b68:	4804      	ldr	r0, [pc, #16]	@ (8010b7c <assert_aligned_4_bytes+0x30>)
 8010b6a:	f001 fc7d 	bl	8012468 <assertFail>
}
 8010b6e:	bf00      	nop
 8010b70:	3710      	adds	r7, #16
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	0801a834 	.word	0x0801a834
 8010b7c:	0801a874 	.word	0x0801a874

08010b80 <mat_trans>:
static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b084      	sub	sp, #16
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f7ff ffde 	bl	8010b4c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8010b90:	6838      	ldr	r0, [r7, #0]
 8010b92:	f7ff ffdb 	bl	8010b4c <assert_aligned_4_bytes>
  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 8010b96:	6839      	ldr	r1, [r7, #0]
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f006 fc13 	bl	80173c4 <arm_mat_trans_f32>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 8010ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d004      	beq.n	8010bb4 <mat_trans+0x34>
 8010baa:	2241      	movs	r2, #65	@ 0x41
 8010bac:	4903      	ldr	r1, [pc, #12]	@ (8010bbc <mat_trans+0x3c>)
 8010bae:	4804      	ldr	r0, [pc, #16]	@ (8010bc0 <mat_trans+0x40>)
 8010bb0:	f001 fc5a 	bl	8012468 <assertFail>
}
 8010bb4:	bf00      	nop
 8010bb6:	3710      	adds	r7, #16
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}
 8010bbc:	0801a834 	.word	0x0801a834
 8010bc0:	0801a88c 	.word	0x0801a88c

08010bc4 <mat_inv>:
static inline void mat_inv(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b084      	sub	sp, #16
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f7ff ffbc 	bl	8010b4c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8010bd4:	6838      	ldr	r0, [r7, #0]
 8010bd6:	f7ff ffb9 	bl	8010b4c <assert_aligned_4_bytes>
  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
 8010bda:	6839      	ldr	r1, [r7, #0]
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f006 fd3f 	bl	8017660 <arm_mat_inverse_f32>
 8010be2:	4603      	mov	r3, r0
 8010be4:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 8010be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d004      	beq.n	8010bf8 <mat_inv+0x34>
 8010bee:	2249      	movs	r2, #73	@ 0x49
 8010bf0:	4903      	ldr	r1, [pc, #12]	@ (8010c00 <mat_inv+0x3c>)
 8010bf2:	4804      	ldr	r0, [pc, #16]	@ (8010c04 <mat_inv+0x40>)
 8010bf4:	f001 fc38 	bl	8012468 <assertFail>
}
 8010bf8:	bf00      	nop
 8010bfa:	3710      	adds	r7, #16
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	0801a834 	.word	0x0801a834
 8010c04:	0801a88c 	.word	0x0801a88c

08010c08 <mat_mult>:
static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b086      	sub	sp, #24
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
 8010c12:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 8010c14:	68f8      	ldr	r0, [r7, #12]
 8010c16:	f7ff ff99 	bl	8010b4c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 8010c1a:	68b8      	ldr	r0, [r7, #8]
 8010c1c:	f7ff ff96 	bl	8010b4c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f7ff ff93 	bl	8010b4c <assert_aligned_4_bytes>
  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 8010c26:	687a      	ldr	r2, [r7, #4]
 8010c28:	68b9      	ldr	r1, [r7, #8]
 8010c2a:	68f8      	ldr	r0, [r7, #12]
 8010c2c:	f006 fc78 	bl	8017520 <arm_mat_mult_f32>
 8010c30:	4603      	mov	r3, r0
 8010c32:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8010c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d004      	beq.n	8010c46 <mat_mult+0x3e>
 8010c3c:	2252      	movs	r2, #82	@ 0x52
 8010c3e:	4904      	ldr	r1, [pc, #16]	@ (8010c50 <mat_mult+0x48>)
 8010c40:	4804      	ldr	r0, [pc, #16]	@ (8010c54 <mat_mult+0x4c>)
 8010c42:	f001 fc11 	bl	8012468 <assertFail>
}
 8010c46:	bf00      	nop
 8010c48:	3718      	adds	r7, #24
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	0801a834 	.word	0x0801a834
 8010c54:	0801a88c 	.word	0x0801a88c

08010c58 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b086      	sub	sp, #24
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 8010c62:	f04f 0300 	mov.w	r3, #0
 8010c66:	60bb      	str	r3, [r7, #8]
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	613b      	str	r3, [r7, #16]
 8010c6c:	f107 0308 	add.w	r3, r7, #8
 8010c70:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 8010c72:	edd7 7a04 	vldr	s15, [r7, #16]
 8010c76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c7e:	db0a      	blt.n	8010c96 <arm_sqrt+0x3e>
      *pOut = sqrtf(in);
 8010c80:	ed97 0a04 	vldr	s0, [r7, #16]
 8010c84:	f006 ffec 	bl	8017c60 <sqrtf>
 8010c88:	eef0 7a40 	vmov.f32	s15, s0
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8010c92:	2300      	movs	r3, #0
 8010c94:	e005      	b.n	8010ca2 <arm_sqrt+0x4a>
      *pOut = 0.0f;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f04f 0200 	mov.w	r2, #0
 8010c9c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8010c9e:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 8010ca2:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8010ca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d004      	beq.n	8010cb6 <arm_sqrt+0x5e>
 8010cac:	2258      	movs	r2, #88	@ 0x58
 8010cae:	4906      	ldr	r1, [pc, #24]	@ (8010cc8 <arm_sqrt+0x70>)
 8010cb0:	4806      	ldr	r0, [pc, #24]	@ (8010ccc <arm_sqrt+0x74>)
 8010cb2:	f001 fbd9 	bl	8012468 <assertFail>
  return pOut;
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	ee07 3a90 	vmov	s15, r3
}
 8010cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8010cc0:	3718      	adds	r7, #24
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	0801a834 	.word	0x0801a834
 8010ccc:	0801a88c 	.word	0x0801a88c

08010cd0 <Cholesky_Decomposition>:
#define UPPER_BOUND (100)
#define LOWER_BOUND (-100)

// Cholesky Decomposition for a nxn psd matrix (from scratch)
// Reference: https://www.geeksforgeeks.org/cholesky-decomposition-matrix-decomposition/
static void Cholesky_Decomposition(int n, float matrix[n][n],  float lower[n][n]){
 8010cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cd4:	b08d      	sub	sp, #52	@ 0x34
 8010cd6:	af00      	add	r7, sp, #0
 8010cd8:	60f8      	str	r0, [r7, #12]
 8010cda:	60b9      	str	r1, [r7, #8]
 8010cdc:	607a      	str	r2, [r7, #4]
 8010cde:	68fa      	ldr	r2, [r7, #12]
 8010ce0:	603a      	str	r2, [r7, #0]
 8010ce2:	1e53      	subs	r3, r2, #1
 8010ce4:	61bb      	str	r3, [r7, #24]
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	4690      	mov	r8, r2
 8010cea:	4699      	mov	r9, r3
 8010cec:	f04f 0200 	mov.w	r2, #0
 8010cf0:	f04f 0300 	mov.w	r3, #0
 8010cf4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8010cf8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8010cfc:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8010d00:	68fe      	ldr	r6, [r7, #12]
 8010d02:	1e73      	subs	r3, r6, #1
 8010d04:	617b      	str	r3, [r7, #20]
 8010d06:	4632      	mov	r2, r6
 8010d08:	2300      	movs	r3, #0
 8010d0a:	4614      	mov	r4, r2
 8010d0c:	461d      	mov	r5, r3
 8010d0e:	f04f 0200 	mov.w	r2, #0
 8010d12:	f04f 0300 	mov.w	r3, #0
 8010d16:	016b      	lsls	r3, r5, #5
 8010d18:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8010d1c:	0162      	lsls	r2, r4, #5
    // Decomposing a matrix into Lower Triangular 
    for (int i = 0; i < n; i++) { 
 8010d1e:	2300      	movs	r3, #0
 8010d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010d22:	e0af      	b.n	8010e84 <Cholesky_Decomposition+0x1b4>
        for (int j = 0; j <= i; j++) { 
 8010d24:	2300      	movs	r3, #0
 8010d26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010d28:	e0a4      	b.n	8010e74 <Cholesky_Decomposition+0x1a4>
            float sum = 0.0; 
 8010d2a:	f04f 0300 	mov.w	r3, #0
 8010d2e:	627b      	str	r3, [r7, #36]	@ 0x24
            if (j == i) // summation for diagnols 
 8010d30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d146      	bne.n	8010dc6 <Cholesky_Decomposition+0xf6>
            { 
                for (int k = 0; k < j; k++) 
 8010d38:	2300      	movs	r3, #0
 8010d3a:	623b      	str	r3, [r7, #32]
 8010d3c:	e01c      	b.n	8010d78 <Cholesky_Decomposition+0xa8>
                    sum += powf(lower[j][k], 2); 
 8010d3e:	4632      	mov	r2, r6
 8010d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d42:	fb02 f303 	mul.w	r3, r2, r3
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	687a      	ldr	r2, [r7, #4]
 8010d4a:	441a      	add	r2, r3
 8010d4c:	6a3b      	ldr	r3, [r7, #32]
 8010d4e:	009b      	lsls	r3, r3, #2
 8010d50:	4413      	add	r3, r2
 8010d52:	edd3 7a00 	vldr	s15, [r3]
 8010d56:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8010d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8010d5e:	f006 ff27 	bl	8017bb0 <powf>
 8010d62:	eeb0 7a40 	vmov.f32	s14, s0
 8010d66:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010d6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                for (int k = 0; k < j; k++) 
 8010d72:	6a3b      	ldr	r3, [r7, #32]
 8010d74:	3301      	adds	r3, #1
 8010d76:	623b      	str	r3, [r7, #32]
 8010d78:	6a3a      	ldr	r2, [r7, #32]
 8010d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	dbde      	blt.n	8010d3e <Cholesky_Decomposition+0x6e>
                lower[j][j] = sqrtf(matrix[j][j] - sum); 
 8010d80:	683a      	ldr	r2, [r7, #0]
 8010d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d84:	fb02 f303 	mul.w	r3, r2, r3
 8010d88:	009b      	lsls	r3, r3, #2
 8010d8a:	68ba      	ldr	r2, [r7, #8]
 8010d8c:	441a      	add	r2, r3
 8010d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d90:	009b      	lsls	r3, r3, #2
 8010d92:	4413      	add	r3, r2
 8010d94:	ed93 7a00 	vldr	s14, [r3]
 8010d98:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010da0:	4632      	mov	r2, r6
 8010da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010da4:	fb02 f303 	mul.w	r3, r2, r3
 8010da8:	009b      	lsls	r3, r3, #2
 8010daa:	687a      	ldr	r2, [r7, #4]
 8010dac:	18d4      	adds	r4, r2, r3
 8010dae:	eeb0 0a67 	vmov.f32	s0, s15
 8010db2:	f006 ff55 	bl	8017c60 <sqrtf>
 8010db6:	eef0 7a40 	vmov.f32	s15, s0
 8010dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	4423      	add	r3, r4
 8010dc0:	edc3 7a00 	vstr	s15, [r3]
 8010dc4:	e053      	b.n	8010e6e <Cholesky_Decomposition+0x19e>
            } else { 
                for (int k = 0; k < j; k++) 
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	61fb      	str	r3, [r7, #28]
 8010dca:	e022      	b.n	8010e12 <Cholesky_Decomposition+0x142>
                    sum += (lower[i][k] * lower[j][k]); 
 8010dcc:	4632      	mov	r2, r6
 8010dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dd0:	fb02 f303 	mul.w	r3, r2, r3
 8010dd4:	009b      	lsls	r3, r3, #2
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	441a      	add	r2, r3
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	4413      	add	r3, r2
 8010de0:	ed93 7a00 	vldr	s14, [r3]
 8010de4:	4632      	mov	r2, r6
 8010de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010de8:	fb02 f303 	mul.w	r3, r2, r3
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	687a      	ldr	r2, [r7, #4]
 8010df0:	441a      	add	r2, r3
 8010df2:	69fb      	ldr	r3, [r7, #28]
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	4413      	add	r3, r2
 8010df8:	edd3 7a00 	vldr	s15, [r3]
 8010dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e00:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8010e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e08:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                for (int k = 0; k < j; k++) 
 8010e0c:	69fb      	ldr	r3, [r7, #28]
 8010e0e:	3301      	adds	r3, #1
 8010e10:	61fb      	str	r3, [r7, #28]
 8010e12:	69fa      	ldr	r2, [r7, #28]
 8010e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e16:	429a      	cmp	r2, r3
 8010e18:	dbd8      	blt.n	8010dcc <Cholesky_Decomposition+0xfc>
                lower[i][j] = (matrix[i][j] - sum) / lower[j][j]; 
 8010e1a:	683a      	ldr	r2, [r7, #0]
 8010e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e1e:	fb02 f303 	mul.w	r3, r2, r3
 8010e22:	009b      	lsls	r3, r3, #2
 8010e24:	68ba      	ldr	r2, [r7, #8]
 8010e26:	441a      	add	r2, r3
 8010e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e2a:	009b      	lsls	r3, r3, #2
 8010e2c:	4413      	add	r3, r2
 8010e2e:	ed93 7a00 	vldr	s14, [r3]
 8010e32:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010e36:	ee77 6a67 	vsub.f32	s13, s14, s15
 8010e3a:	4632      	mov	r2, r6
 8010e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e3e:	fb02 f303 	mul.w	r3, r2, r3
 8010e42:	009b      	lsls	r3, r3, #2
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	441a      	add	r2, r3
 8010e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e4a:	009b      	lsls	r3, r3, #2
 8010e4c:	4413      	add	r3, r2
 8010e4e:	ed93 7a00 	vldr	s14, [r3]
 8010e52:	4632      	mov	r2, r6
 8010e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e56:	fb02 f303 	mul.w	r3, r2, r3
 8010e5a:	009b      	lsls	r3, r3, #2
 8010e5c:	687a      	ldr	r2, [r7, #4]
 8010e5e:	441a      	add	r2, r3
 8010e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e66:	009b      	lsls	r3, r3, #2
 8010e68:	4413      	add	r3, r2
 8010e6a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j <= i; j++) { 
 8010e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e70:	3301      	adds	r3, #1
 8010e72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	f77f af56 	ble.w	8010d2a <Cholesky_Decomposition+0x5a>
    for (int i = 0; i < n; i++) { 
 8010e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e80:	3301      	adds	r3, #1
 8010e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	f6ff af4b 	blt.w	8010d24 <Cholesky_Decomposition+0x54>
            } 
        } 
    }
} 
 8010e8e:	bf00      	nop
 8010e90:	bf00      	nop
 8010e92:	3734      	adds	r7, #52	@ 0x34
 8010e94:	46bd      	mov	sp, r7
 8010e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010e9a <GM_UWB>:
 * For a given measurement error e, decreasing the sigma of the GM weight function will set a
 * smaller weight to this error e. Then, the variance of this measurement will increase, indicating 
 * a large measurement uncertainty. 
 * Intuitively, a small sigma means you trust the measurements more.
*/
static void GM_UWB(float e, float * GM_e){
 8010e9a:	b480      	push	{r7}
 8010e9c:	b085      	sub	sp, #20
 8010e9e:	af00      	add	r7, sp, #0
 8010ea0:	ed87 0a01 	vstr	s0, [r7, #4]
 8010ea4:	6038      	str	r0, [r7, #0]
    float sigma = 1.5;                        
 8010ea6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010eaa:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 8010eac:	edd7 7a01 	vldr	s15, [r7, #4]
 8010eb0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010eb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8010eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ebc:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 8010ec0:	edd7 7a03 	vldr	s15, [r7, #12]
 8010ec4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8010ec8:	edd7 7a02 	vldr	s15, [r7, #8]
 8010ecc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	edc3 7a00 	vstr	s15, [r3]
}
 8010eda:	bf00      	nop
 8010edc:	3714      	adds	r7, #20
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr

08010ee6 <GM_state>:

static void GM_state(float e, float * GM_e){
 8010ee6:	b480      	push	{r7}
 8010ee8:	b085      	sub	sp, #20
 8010eea:	af00      	add	r7, sp, #0
 8010eec:	ed87 0a01 	vstr	s0, [r7, #4]
 8010ef0:	6038      	str	r0, [r7, #0]
    float sigma = 2.0;                       
 8010ef2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010ef6:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 8010ef8:	edd7 7a01 	vldr	s15, [r7, #4]
 8010efc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010f00:	ed97 7a03 	vldr	s14, [r7, #12]
 8010f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f08:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 8010f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8010f10:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8010f14:	edd7 7a02 	vldr	s15, [r7, #8]
 8010f18:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	edc3 7a00 	vstr	s15, [r3]
}
 8010f26:	bf00      	nop
 8010f28:	3714      	adds	r7, #20
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr
	...

08010f34 <kalmanCoreRobustUpdateWithDistance>:

// robsut update function
void kalmanCoreRobustUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t *d)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	ed2d 8b02 	vpush	{d8}
 8010f3a:	b0f8      	sub	sp, #480	@ 0x1e0
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8010f42:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8010f46:	6018      	str	r0, [r3, #0]
 8010f48:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8010f4c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8010f50:	6019      	str	r1, [r3, #0]
    float dx = this->S[KC_STATE_X] - d->x;
 8010f52:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8010f56:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	ed93 7a00 	vldr	s14, [r3]
 8010f60:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8010f64:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	edd3 7a00 	vldr	s15, [r3]
 8010f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f72:	edc7 7a6c 	vstr	s15, [r7, #432]	@ 0x1b0
    float dy = this->S[KC_STATE_Y] - d->y;
 8010f76:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8010f7a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	ed93 7a01 	vldr	s14, [r3, #4]
 8010f84:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8010f88:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8010f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f96:	edc7 7a6b 	vstr	s15, [r7, #428]	@ 0x1ac
    float dz = this->S[KC_STATE_Z] - d->z;
 8010f9a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8010f9e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	ed93 7a02 	vldr	s14, [r3, #8]
 8010fa8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8010fac:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8010fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fba:	edc7 7a6a 	vstr	s15, [r7, #424]	@ 0x1a8
    float measuredDistance = d->distance;
 8010fbe:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8010fc2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	691b      	ldr	r3, [r3, #16]
 8010fca:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 8010fce:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8010fd2:	ed97 0a6c 	vldr	s0, [r7, #432]	@ 0x1b0
 8010fd6:	f006 fdeb 	bl	8017bb0 <powf>
 8010fda:	eeb0 8a40 	vmov.f32	s16, s0
 8010fde:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8010fe2:	ed97 0a6b 	vldr	s0, [r7, #428]	@ 0x1ac
 8010fe6:	f006 fde3 	bl	8017bb0 <powf>
 8010fea:	eef0 7a40 	vmov.f32	s15, s0
 8010fee:	ee38 8a27 	vadd.f32	s16, s16, s15
 8010ff2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8010ff6:	ed97 0a6a 	vldr	s0, [r7, #424]	@ 0x1a8
 8010ffa:	f006 fdd9 	bl	8017bb0 <powf>
 8010ffe:	eef0 7a40 	vmov.f32	s15, s0
 8011002:	ee78 7a27 	vadd.f32	s15, s16, s15
 8011006:	eeb0 0a67 	vmov.f32	s0, s15
 801100a:	f7ff fe25 	bl	8010c58 <arm_sqrt>
 801100e:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
    // innovation term based on x_check
    float error_check = measuredDistance - predictedDistance;    // innovation term based on prior state
 8011012:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 8011016:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 801101a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801101e:	edc7 7a67 	vstr	s15, [r7, #412]	@ 0x19c
    static float P_chol[KC_STATE_DIM][KC_STATE_DIM]; 
    static arm_matrix_instance_f32 Pc_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)P_chol};
    static float Pc_tran[KC_STATE_DIM][KC_STATE_DIM];        
    static arm_matrix_instance_f32 Pc_tran_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)Pc_tran};

    float h[KC_STATE_DIM] = {0};
 8011022:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8011026:	2224      	movs	r2, #36	@ 0x24
 8011028:	2100      	movs	r1, #0
 801102a:	4618      	mov	r0, r3
 801102c:	f006 fcae 	bl	801798c <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};    
 8011030:	2301      	movs	r3, #1
 8011032:	f8a7 3154 	strh.w	r3, [r7, #340]	@ 0x154
 8011036:	2309      	movs	r3, #9
 8011038:	f8a7 3156 	strh.w	r3, [r7, #342]	@ 0x156
 801103c:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8011040:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    // x_err comes from the KF update is the state of error state Kalman filter, set to be zero initially
    static float x_err[KC_STATE_DIM] = {0.0};          
    static arm_matrix_instance_f32 x_errm = {KC_STATE_DIM, 1, x_err};
    static float X_state[KC_STATE_DIM] = {0.0};
    float P_iter[KC_STATE_DIM][KC_STATE_DIM];
    memcpy(P_iter, this->P, sizeof(P_iter));
 8011044:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8011048:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8011052:	f107 0310 	add.w	r3, r7, #16
 8011056:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801105a:	4618      	mov	r0, r3
 801105c:	f006 fcdc 	bl	8017a18 <memcpy>

    float R_iter = d->stdDev * d->stdDev;                     // measurement covariance
 8011060:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8011064:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	ed93 7a05 	vldr	s14, [r3, #20]
 801106e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8011072:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	edd3 7a05 	vldr	s15, [r3, #20]
 801107c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011080:	edc7 7a77 	vstr	s15, [r7, #476]	@ 0x1dc
    memcpy(X_state, this->S, sizeof(X_state));
 8011084:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8011088:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2224      	movs	r2, #36	@ 0x24
 8011090:	4619      	mov	r1, r3
 8011092:	48cf      	ldr	r0, [pc, #828]	@ (80113d0 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 8011094:	f006 fcc0 	bl	8017a18 <memcpy>

    // ---------------------- Start iteration ----------------------- //
    for (int iter = 0; iter < MAX_ITER; iter++){
 8011098:	2300      	movs	r3, #0
 801109a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 801109e:	e2c3      	b.n	8011628 <kalmanCoreRobustUpdateWithDistance+0x6f4>
        // cholesky decomposition for the prior covariance matrix 
        Cholesky_Decomposition(KC_STATE_DIM, P_iter, P_chol);          // P_chol is a lower triangular matrix
 80110a0:	f107 0310 	add.w	r3, r7, #16
 80110a4:	4acb      	ldr	r2, [pc, #812]	@ (80113d4 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 80110a6:	4619      	mov	r1, r3
 80110a8:	2009      	movs	r0, #9
 80110aa:	f7ff fe11 	bl	8010cd0 <Cholesky_Decomposition>
        mat_trans(&Pc_m, &Pc_tran_m);
 80110ae:	49ca      	ldr	r1, [pc, #808]	@ (80113d8 <kalmanCoreRobustUpdateWithDistance+0x4a4>)
 80110b0:	48ca      	ldr	r0, [pc, #808]	@ (80113dc <kalmanCoreRobustUpdateWithDistance+0x4a8>)
 80110b2:	f7ff fd65 	bl	8010b80 <mat_trans>

        // decomposition for measurement covariance (scalar case)
        float R_chol = sqrtf(R_iter);       
 80110b6:	ed97 0a77 	vldr	s0, [r7, #476]	@ 0x1dc
 80110ba:	f006 fdd1 	bl	8017c60 <sqrtf>
 80110be:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
        // construct H matrix
        // X_state updates in each iteration
        float x_iter = X_state[KC_STATE_X],  y_iter = X_state[KC_STATE_Y], z_iter = X_state[KC_STATE_Z];   
 80110c2:	4bc3      	ldr	r3, [pc, #780]	@ (80113d0 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80110ca:	4bc1      	ldr	r3, [pc, #772]	@ (80113d0 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80110d2:	4bbf      	ldr	r3, [pc, #764]	@ (80113d0 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 80110d4:	689b      	ldr	r3, [r3, #8]
 80110d6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
        dx = x_iter - d->x;  dy = y_iter - d->y;   dz = z_iter - d->z;
 80110da:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80110de:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	edd3 7a00 	vldr	s15, [r3]
 80110e8:	ed97 7a65 	vldr	s14, [r7, #404]	@ 0x194
 80110ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110f0:	edc7 7a6c 	vstr	s15, [r7, #432]	@ 0x1b0
 80110f4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80110f8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8011102:	ed97 7a64 	vldr	s14, [r7, #400]	@ 0x190
 8011106:	ee77 7a67 	vsub.f32	s15, s14, s15
 801110a:	edc7 7a6b 	vstr	s15, [r7, #428]	@ 0x1ac
 801110e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8011112:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	edd3 7a02 	vldr	s15, [r3, #8]
 801111c:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 8011120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011124:	edc7 7a6a 	vstr	s15, [r7, #424]	@ 0x1a8

        float predicted_iter = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 8011128:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801112c:	ed97 0a6c 	vldr	s0, [r7, #432]	@ 0x1b0
 8011130:	f006 fd3e 	bl	8017bb0 <powf>
 8011134:	eeb0 8a40 	vmov.f32	s16, s0
 8011138:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801113c:	ed97 0a6b 	vldr	s0, [r7, #428]	@ 0x1ac
 8011140:	f006 fd36 	bl	8017bb0 <powf>
 8011144:	eef0 7a40 	vmov.f32	s15, s0
 8011148:	ee38 8a27 	vadd.f32	s16, s16, s15
 801114c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8011150:	ed97 0a6a 	vldr	s0, [r7, #424]	@ 0x1a8
 8011154:	f006 fd2c 	bl	8017bb0 <powf>
 8011158:	eef0 7a40 	vmov.f32	s15, s0
 801115c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8011160:	eeb0 0a67 	vmov.f32	s0, s15
 8011164:	f7ff fd78 	bl	8010c58 <arm_sqrt>
 8011168:	ed87 0a62 	vstr	s0, [r7, #392]	@ 0x188
        // innovation term based on x_check
        float error_iter = measuredDistance - predicted_iter; 
 801116c:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 8011170:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8011174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011178:	edc7 7a61 	vstr	s15, [r7, #388]	@ 0x184

        float e_y = error_iter;
 801117c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8011180:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

        if (predicted_iter != 0.0f) {
 8011184:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8011188:	eef5 7a40 	vcmp.f32	s15, #0.0
 801118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011190:	d018      	beq.n	80111c4 <kalmanCoreRobustUpdateWithDistance+0x290>
            // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
            h[KC_STATE_X] = dx/predicted_iter;
 8011192:	edd7 6a6c 	vldr	s13, [r7, #432]	@ 0x1b0
 8011196:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 801119a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801119e:	edc7 7a57 	vstr	s15, [r7, #348]	@ 0x15c
            h[KC_STATE_Y] = dy/predicted_iter;
 80111a2:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 80111a6:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 80111aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111ae:	edc7 7a58 	vstr	s15, [r7, #352]	@ 0x160
            h[KC_STATE_Z] = dz/predicted_iter;
 80111b2:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 80111b6:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 80111ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111be:	edc7 7a59 	vstr	s15, [r7, #356]	@ 0x164
 80111c2:	e00b      	b.n	80111dc <kalmanCoreRobustUpdateWithDistance+0x2a8>

        } else {
            // Avoid divide by zero
            h[KC_STATE_X] = 1.0f;
 80111c4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80111c8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
            h[KC_STATE_Y] = 0.0f;
 80111cc:	f04f 0300 	mov.w	r3, #0
 80111d0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
            h[KC_STATE_Z] = 0.0f;
 80111d4:	f04f 0300 	mov.w	r3, #0
 80111d8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
        }
        // check the measurement noise
        if (fabsf(R_chol - 0.0f) < 0.0001f){
 80111dc:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 80111e0:	eef0 7ae7 	vabs.f32	s15, s15
 80111e4:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80113e0 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 80111e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80111ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111f0:	d508      	bpl.n	8011204 <kalmanCoreRobustUpdateWithDistance+0x2d0>
            e_y = error_iter / 0.0001f;
 80111f2:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 80111f6:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 80113e0 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 80111fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80111fe:	edc7 7a75 	vstr	s15, [r7, #468]	@ 0x1d4
 8011202:	e007      	b.n	8011214 <kalmanCoreRobustUpdateWithDistance+0x2e0>
        }
        else{ 
            e_y = error_iter / R_chol;
 8011204:	edd7 6a61 	vldr	s13, [r7, #388]	@ 0x184
 8011208:	ed97 7a66 	vldr	s14, [r7, #408]	@ 0x198
 801120c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011210:	edc7 7a75 	vstr	s15, [r7, #468]	@ 0x1d4
        }
        // Make sure P_chol, lower trangular matrix, is numerically stable              
        for (int col=0; col<KC_STATE_DIM; col++) {
 8011214:	2300      	movs	r3, #0
 8011216:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 801121a:	e095      	b.n	8011348 <kalmanCoreRobustUpdateWithDistance+0x414>
            for (int row=col; row<KC_STATE_DIM; row++) {
 801121c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8011220:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8011224:	e086      	b.n	8011334 <kalmanCoreRobustUpdateWithDistance+0x400>
                if (isnan(P_chol[row][col]) || P_chol[row][col] > UPPER_BOUND) {
 8011226:	496b      	ldr	r1, [pc, #428]	@ (80113d4 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8011228:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801122c:	4613      	mov	r3, r2
 801122e:	00db      	lsls	r3, r3, #3
 8011230:	4413      	add	r3, r2
 8011232:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8011236:	4413      	add	r3, r2
 8011238:	009b      	lsls	r3, r3, #2
 801123a:	440b      	add	r3, r1
 801123c:	edd3 7a00 	vldr	s15, [r3]
 8011240:	eef4 7a67 	vcmp.f32	s15, s15
 8011244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011248:	d613      	bvs.n	8011272 <kalmanCoreRobustUpdateWithDistance+0x33e>
 801124a:	4962      	ldr	r1, [pc, #392]	@ (80113d4 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 801124c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8011250:	4613      	mov	r3, r2
 8011252:	00db      	lsls	r3, r3, #3
 8011254:	4413      	add	r3, r2
 8011256:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801125a:	4413      	add	r3, r2
 801125c:	009b      	lsls	r3, r3, #2
 801125e:	440b      	add	r3, r1
 8011260:	edd3 7a00 	vldr	s15, [r3]
 8011264:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80113e4 <kalmanCoreRobustUpdateWithDistance+0x4b0>
 8011268:	eef4 7ac7 	vcmpe.f32	s15, s14
 801126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011270:	dd0d      	ble.n	801128e <kalmanCoreRobustUpdateWithDistance+0x35a>
                    P_chol[row][col] = UPPER_BOUND;
 8011272:	4958      	ldr	r1, [pc, #352]	@ (80113d4 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8011274:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8011278:	4613      	mov	r3, r2
 801127a:	00db      	lsls	r3, r3, #3
 801127c:	4413      	add	r3, r2
 801127e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8011282:	4413      	add	r3, r2
 8011284:	009b      	lsls	r3, r3, #2
 8011286:	440b      	add	r3, r1
 8011288:	4a57      	ldr	r2, [pc, #348]	@ (80113e8 <kalmanCoreRobustUpdateWithDistance+0x4b4>)
 801128a:	601a      	str	r2, [r3, #0]
 801128c:	e04d      	b.n	801132a <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row!=col && P_chol[row][col] < LOWER_BOUND){
 801128e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8011292:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8011296:	429a      	cmp	r2, r3
 8011298:	d021      	beq.n	80112de <kalmanCoreRobustUpdateWithDistance+0x3aa>
 801129a:	494e      	ldr	r1, [pc, #312]	@ (80113d4 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 801129c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80112a0:	4613      	mov	r3, r2
 80112a2:	00db      	lsls	r3, r3, #3
 80112a4:	4413      	add	r3, r2
 80112a6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80112aa:	4413      	add	r3, r2
 80112ac:	009b      	lsls	r3, r3, #2
 80112ae:	440b      	add	r3, r1
 80112b0:	edd3 7a00 	vldr	s15, [r3]
 80112b4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80113ec <kalmanCoreRobustUpdateWithDistance+0x4b8>
 80112b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c0:	d50d      	bpl.n	80112de <kalmanCoreRobustUpdateWithDistance+0x3aa>
                    P_chol[row][col] = LOWER_BOUND;
 80112c2:	4944      	ldr	r1, [pc, #272]	@ (80113d4 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 80112c4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80112c8:	4613      	mov	r3, r2
 80112ca:	00db      	lsls	r3, r3, #3
 80112cc:	4413      	add	r3, r2
 80112ce:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80112d2:	4413      	add	r3, r2
 80112d4:	009b      	lsls	r3, r3, #2
 80112d6:	440b      	add	r3, r1
 80112d8:	4a45      	ldr	r2, [pc, #276]	@ (80113f0 <kalmanCoreRobustUpdateWithDistance+0x4bc>)
 80112da:	601a      	str	r2, [r3, #0]
 80112dc:	e025      	b.n	801132a <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row==col && P_chol[row][col]<0.0f){
 80112de:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80112e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d11f      	bne.n	801132a <kalmanCoreRobustUpdateWithDistance+0x3f6>
 80112ea:	493a      	ldr	r1, [pc, #232]	@ (80113d4 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 80112ec:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80112f0:	4613      	mov	r3, r2
 80112f2:	00db      	lsls	r3, r3, #3
 80112f4:	4413      	add	r3, r2
 80112f6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80112fa:	4413      	add	r3, r2
 80112fc:	009b      	lsls	r3, r3, #2
 80112fe:	440b      	add	r3, r1
 8011300:	edd3 7a00 	vldr	s15, [r3]
 8011304:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801130c:	d50d      	bpl.n	801132a <kalmanCoreRobustUpdateWithDistance+0x3f6>
                    P_chol[row][col] = 0.0f;
 801130e:	4931      	ldr	r1, [pc, #196]	@ (80113d4 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8011310:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8011314:	4613      	mov	r3, r2
 8011316:	00db      	lsls	r3, r3, #3
 8011318:	4413      	add	r3, r2
 801131a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801131e:	4413      	add	r3, r2
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	440b      	add	r3, r1
 8011324:	f04f 0200 	mov.w	r2, #0
 8011328:	601a      	str	r2, [r3, #0]
            for (int row=col; row<KC_STATE_DIM; row++) {
 801132a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 801132e:	3301      	adds	r3, #1
 8011330:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8011334:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8011338:	2b08      	cmp	r3, #8
 801133a:	f77f af74 	ble.w	8011226 <kalmanCoreRobustUpdateWithDistance+0x2f2>
        for (int col=0; col<KC_STATE_DIM; col++) {
 801133e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8011342:	3301      	adds	r3, #1
 8011344:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8011348:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801134c:	2b08      	cmp	r3, #8
 801134e:	f77f af65 	ble.w	801121c <kalmanCoreRobustUpdateWithDistance+0x2e8>
                } 
            }
        }
        // Matrix inversion is numerically sensitive.
        // Add small values on the diagonal of P_chol to avoid numerical problems.
        float dummy_value = 1e-9f;
 8011352:	4b28      	ldr	r3, [pc, #160]	@ (80113f4 <kalmanCoreRobustUpdateWithDistance+0x4c0>)
 8011354:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        for (int k=0; k<KC_STATE_DIM; k++){
 8011358:	2300      	movs	r3, #0
 801135a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 801135e:	e01c      	b.n	801139a <kalmanCoreRobustUpdateWithDistance+0x466>
            P_chol[k][k] = P_chol[k][k] + dummy_value;
 8011360:	491c      	ldr	r1, [pc, #112]	@ (80113d4 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8011362:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8011366:	4613      	mov	r3, r2
 8011368:	009b      	lsls	r3, r3, #2
 801136a:	4413      	add	r3, r2
 801136c:	00db      	lsls	r3, r3, #3
 801136e:	440b      	add	r3, r1
 8011370:	ed93 7a00 	vldr	s14, [r3]
 8011374:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 8011378:	ee77 7a27 	vadd.f32	s15, s14, s15
 801137c:	4915      	ldr	r1, [pc, #84]	@ (80113d4 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 801137e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8011382:	4613      	mov	r3, r2
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	4413      	add	r3, r2
 8011388:	00db      	lsls	r3, r3, #3
 801138a:	440b      	add	r3, r1
 801138c:	edc3 7a00 	vstr	s15, [r3]
        for (int k=0; k<KC_STATE_DIM; k++){
 8011390:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8011394:	3301      	adds	r3, #1
 8011396:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 801139a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801139e:	2b08      	cmp	r3, #8
 80113a0:	ddde      	ble.n	8011360 <kalmanCoreRobustUpdateWithDistance+0x42c>
        }
        // keep P_chol
        memcpy(tmp1, P_chol, sizeof(tmp1));
 80113a2:	4a15      	ldr	r2, [pc, #84]	@ (80113f8 <kalmanCoreRobustUpdateWithDistance+0x4c4>)
 80113a4:	4b0b      	ldr	r3, [pc, #44]	@ (80113d4 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 80113a6:	4610      	mov	r0, r2
 80113a8:	4619      	mov	r1, r3
 80113aa:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 80113ae:	461a      	mov	r2, r3
 80113b0:	f006 fb32 	bl	8017a18 <memcpy>
        mat_inv(&tmp1m, &Pc_inv_m);                            // Pc_inv_m = inv(Pc_m) = inv(P_chol)
 80113b4:	4911      	ldr	r1, [pc, #68]	@ (80113fc <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 80113b6:	4812      	ldr	r0, [pc, #72]	@ (8011400 <kalmanCoreRobustUpdateWithDistance+0x4cc>)
 80113b8:	f7ff fc04 	bl	8010bc4 <mat_inv>
        mat_mult(&Pc_inv_m, &x_errm, &e_x_m);                  // e_x_m = Pc_inv_m.dot(x_errm) 
 80113bc:	4a11      	ldr	r2, [pc, #68]	@ (8011404 <kalmanCoreRobustUpdateWithDistance+0x4d0>)
 80113be:	4912      	ldr	r1, [pc, #72]	@ (8011408 <kalmanCoreRobustUpdateWithDistance+0x4d4>)
 80113c0:	480e      	ldr	r0, [pc, #56]	@ (80113fc <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 80113c2:	f7ff fc21 	bl	8010c08 <mat_mult>

        // compute w_x, w_y --> weighting matrix
        // Since w_x is diagnal matrix, directly compute the inverse
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 80113c6:	2300      	movs	r3, #0
 80113c8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80113cc:	e04f      	b.n	801146e <kalmanCoreRobustUpdateWithDistance+0x53a>
 80113ce:	bf00      	nop
 80113d0:	200098a8 	.word	0x200098a8
 80113d4:	200098cc 	.word	0x200098cc
 80113d8:	200000e8 	.word	0x200000e8
 80113dc:	200000e0 	.word	0x200000e0
 80113e0:	38d1b717 	.word	0x38d1b717
 80113e4:	42c80000 	.word	0x42c80000
 80113e8:	42c80000 	.word	0x42c80000
 80113ec:	c2c80000 	.word	0xc2c80000
 80113f0:	c2c80000 	.word	0xc2c80000
 80113f4:	3089705f 	.word	0x3089705f
 80113f8:	20009a10 	.word	0x20009a10
 80113fc:	200000f8 	.word	0x200000f8
 8011400:	200000f0 	.word	0x200000f0
 8011404:	20000108 	.word	0x20000108
 8011408:	20000100 	.word	0x20000100
            GM_state(e_x[state_k], &wx_inv[state_k][state_k]);
 801140c:	4a93      	ldr	r2, [pc, #588]	@ (801165c <kalmanCoreRobustUpdateWithDistance+0x728>)
 801140e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8011412:	009b      	lsls	r3, r3, #2
 8011414:	4413      	add	r3, r2
 8011416:	edd3 7a00 	vldr	s15, [r3]
 801141a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 801141e:	4613      	mov	r3, r2
 8011420:	009b      	lsls	r3, r3, #2
 8011422:	4413      	add	r3, r2
 8011424:	00db      	lsls	r3, r3, #3
 8011426:	4a8e      	ldr	r2, [pc, #568]	@ (8011660 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 8011428:	4413      	add	r3, r2
 801142a:	4618      	mov	r0, r3
 801142c:	eeb0 0a67 	vmov.f32	s0, s15
 8011430:	f7ff fd59 	bl	8010ee6 <GM_state>
            wx_inv[state_k][state_k] = (float)1.0 / wx_inv[state_k][state_k];
 8011434:	498a      	ldr	r1, [pc, #552]	@ (8011660 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 8011436:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 801143a:	4613      	mov	r3, r2
 801143c:	009b      	lsls	r3, r3, #2
 801143e:	4413      	add	r3, r2
 8011440:	00db      	lsls	r3, r3, #3
 8011442:	440b      	add	r3, r1
 8011444:	ed93 7a00 	vldr	s14, [r3]
 8011448:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801144c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011450:	4983      	ldr	r1, [pc, #524]	@ (8011660 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 8011452:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8011456:	4613      	mov	r3, r2
 8011458:	009b      	lsls	r3, r3, #2
 801145a:	4413      	add	r3, r2
 801145c:	00db      	lsls	r3, r3, #3
 801145e:	440b      	add	r3, r1
 8011460:	edc3 7a00 	vstr	s15, [r3]
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 8011464:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8011468:	3301      	adds	r3, #1
 801146a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 801146e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8011472:	2b08      	cmp	r3, #8
 8011474:	ddca      	ble.n	801140c <kalmanCoreRobustUpdateWithDistance+0x4d8>
        }

        // rescale covariance matrix P 
        mat_mult(&Pc_m, &wx_invm, &Pc_w_invm);           // Pc_w_invm = P_chol.dot(linalg.inv(w_x))
 8011476:	4a7b      	ldr	r2, [pc, #492]	@ (8011664 <kalmanCoreRobustUpdateWithDistance+0x730>)
 8011478:	497b      	ldr	r1, [pc, #492]	@ (8011668 <kalmanCoreRobustUpdateWithDistance+0x734>)
 801147a:	487c      	ldr	r0, [pc, #496]	@ (801166c <kalmanCoreRobustUpdateWithDistance+0x738>)
 801147c:	f7ff fbc4 	bl	8010c08 <mat_mult>
        mat_mult(&Pc_w_invm, &Pc_tran_m, &P_w_m);        // P_w_m = Pc_w_invm.dot(Pc_tran_m) = P_chol.dot(linalg.inv(w_x)).dot(P_chol.T)
 8011480:	4a7b      	ldr	r2, [pc, #492]	@ (8011670 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 8011482:	497c      	ldr	r1, [pc, #496]	@ (8011674 <kalmanCoreRobustUpdateWithDistance+0x740>)
 8011484:	4877      	ldr	r0, [pc, #476]	@ (8011664 <kalmanCoreRobustUpdateWithDistance+0x730>)
 8011486:	f7ff fbbf 	bl	8010c08 <mat_mult>

        // rescale R matrix                 
        float w_y=0.0;      float R_w = 0.0f;
 801148a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801148e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011492:	f04f 0200 	mov.w	r2, #0
 8011496:	601a      	str	r2, [r3, #0]
 8011498:	f04f 0300 	mov.w	r3, #0
 801149c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        GM_UWB(e_y, &w_y);                              // compute the weighted measurement error: w_y
 80114a0:	f107 030c 	add.w	r3, r7, #12
 80114a4:	4618      	mov	r0, r3
 80114a6:	ed97 0a75 	vldr	s0, [r7, #468]	@ 0x1d4
 80114aa:	f7ff fcf6 	bl	8010e9a <GM_UWB>
        if (fabsf(w_y - 0.0f) < 0.0001f){
 80114ae:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80114b2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80114b6:	edd3 7a00 	vldr	s15, [r3]
 80114ba:	eef0 7ae7 	vabs.f32	s15, s15
 80114be:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8011678 <kalmanCoreRobustUpdateWithDistance+0x744>
 80114c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80114c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ca:	d50a      	bpl.n	80114e2 <kalmanCoreRobustUpdateWithDistance+0x5ae>
            R_w = (R_chol * R_chol) / 0.0001f;
 80114cc:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 80114d0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80114d4:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8011678 <kalmanCoreRobustUpdateWithDistance+0x744>
 80114d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80114dc:	edc7 7a70 	vstr	s15, [r7, #448]	@ 0x1c0
 80114e0:	e00d      	b.n	80114fe <kalmanCoreRobustUpdateWithDistance+0x5ca>
        }
        else{
            R_w = (R_chol * R_chol) / w_y;
 80114e2:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 80114e6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80114ea:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80114ee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80114f2:	ed93 7a00 	vldr	s14, [r3]
 80114f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114fa:	edc7 7a70 	vstr	s15, [r7, #448]	@ 0x1c0
        }
        // ====== INNOVATION COVARIANCE ====== //

        mat_trans(&H, &HTm);
 80114fe:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8011502:	495e      	ldr	r1, [pc, #376]	@ (801167c <kalmanCoreRobustUpdateWithDistance+0x748>)
 8011504:	4618      	mov	r0, r3
 8011506:	f7ff fb3b 	bl	8010b80 <mat_trans>
        mat_mult(&P_w_m, &HTm, &PHTm);        // PHTm = P_w.dot(H.T). The P is the updated P_w 
 801150a:	4a5d      	ldr	r2, [pc, #372]	@ (8011680 <kalmanCoreRobustUpdateWithDistance+0x74c>)
 801150c:	495b      	ldr	r1, [pc, #364]	@ (801167c <kalmanCoreRobustUpdateWithDistance+0x748>)
 801150e:	4858      	ldr	r0, [pc, #352]	@ (8011670 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 8011510:	f7ff fb7a 	bl	8010c08 <mat_mult>

        float HPHR = R_w;                     // HPH' + R.            The R is the updated R_w 
 8011514:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011518:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 801151c:	2300      	movs	r3, #0
 801151e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8011522:	e01c      	b.n	801155e <kalmanCoreRobustUpdateWithDistance+0x62a>
            HPHR += h[i]*PHTd[i];             // this only works if the update is scalar (as in this function)
 8011524:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8011528:	009b      	lsls	r3, r3, #2
 801152a:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 801152e:	443b      	add	r3, r7
 8011530:	3b84      	subs	r3, #132	@ 0x84
 8011532:	ed93 7a00 	vldr	s14, [r3]
 8011536:	4a53      	ldr	r2, [pc, #332]	@ (8011684 <kalmanCoreRobustUpdateWithDistance+0x750>)
 8011538:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	4413      	add	r3, r2
 8011540:	edd3 7a00 	vldr	s15, [r3]
 8011544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011548:	ed97 7a6f 	vldr	s14, [r7, #444]	@ 0x1bc
 801154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011550:	edc7 7a6f 	vstr	s15, [r7, #444]	@ 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 8011554:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8011558:	3301      	adds	r3, #1
 801155a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 801155e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8011562:	2b08      	cmp	r3, #8
 8011564:	ddde      	ble.n	8011524 <kalmanCoreRobustUpdateWithDistance+0x5f0>
        }
        // ====== MEASUREMENT UPDATE ======
        // Calculate the Kalman gain and perform the state update
        for (int i=0; i<KC_STATE_DIM; i++) {
 8011566:	2300      	movs	r3, #0
 8011568:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 801156c:	e043      	b.n	80115f6 <kalmanCoreRobustUpdateWithDistance+0x6c2>
            Kw[i] = PHTd[i]/HPHR;                     // rescaled kalman gain = (PH' (HPH' + R )^-1) with the updated P_w and R_w
 801156e:	4a45      	ldr	r2, [pc, #276]	@ (8011684 <kalmanCoreRobustUpdateWithDistance+0x750>)
 8011570:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8011574:	009b      	lsls	r3, r3, #2
 8011576:	4413      	add	r3, r2
 8011578:	edd3 6a00 	vldr	s13, [r3]
 801157c:	ed97 7a6f 	vldr	s14, [r7, #444]	@ 0x1bc
 8011580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011584:	4a40      	ldr	r2, [pc, #256]	@ (8011688 <kalmanCoreRobustUpdateWithDistance+0x754>)
 8011586:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	4413      	add	r3, r2
 801158e:	edc3 7a00 	vstr	s15, [r3]
            //[Note]: The error_check here is the innovation term based on x_check, which doesn't change during iterations.
            x_err[i] = Kw[i] * error_check;           // error state for next iteration
 8011592:	4a3d      	ldr	r2, [pc, #244]	@ (8011688 <kalmanCoreRobustUpdateWithDistance+0x754>)
 8011594:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8011598:	009b      	lsls	r3, r3, #2
 801159a:	4413      	add	r3, r2
 801159c:	ed93 7a00 	vldr	s14, [r3]
 80115a0:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80115a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115a8:	4a38      	ldr	r2, [pc, #224]	@ (801168c <kalmanCoreRobustUpdateWithDistance+0x758>)
 80115aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	4413      	add	r3, r2
 80115b2:	edc3 7a00 	vstr	s15, [r3]
            X_state[i] = this->S[i] + x_err[i];       // convert to nominal state
 80115b6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80115ba:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80115c4:	009b      	lsls	r3, r3, #2
 80115c6:	4413      	add	r3, r2
 80115c8:	ed93 7a00 	vldr	s14, [r3]
 80115cc:	4a2f      	ldr	r2, [pc, #188]	@ (801168c <kalmanCoreRobustUpdateWithDistance+0x758>)
 80115ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80115d2:	009b      	lsls	r3, r3, #2
 80115d4:	4413      	add	r3, r2
 80115d6:	edd3 7a00 	vldr	s15, [r3]
 80115da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115de:	4a2c      	ldr	r2, [pc, #176]	@ (8011690 <kalmanCoreRobustUpdateWithDistance+0x75c>)
 80115e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80115e4:	009b      	lsls	r3, r3, #2
 80115e6:	4413      	add	r3, r2
 80115e8:	edc3 7a00 	vstr	s15, [r3]
        for (int i=0; i<KC_STATE_DIM; i++) {
 80115ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80115f0:	3301      	adds	r3, #1
 80115f2:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80115f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80115fa:	2b08      	cmp	r3, #8
 80115fc:	ddb7      	ble.n	801156e <kalmanCoreRobustUpdateWithDistance+0x63a>
        }
        // update P_iter matrix and R matrix for next iteration
        memcpy(P_iter, P_w, sizeof(P_iter));
 80115fe:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8011602:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8011606:	4a23      	ldr	r2, [pc, #140]	@ (8011694 <kalmanCoreRobustUpdateWithDistance+0x760>)
 8011608:	4618      	mov	r0, r3
 801160a:	4611      	mov	r1, r2
 801160c:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8011610:	461a      	mov	r2, r3
 8011612:	f006 fa01 	bl	8017a18 <memcpy>
        R_iter = R_w;
 8011616:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801161a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    for (int iter = 0; iter < MAX_ITER; iter++){
 801161e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8011622:	3301      	adds	r3, #1
 8011624:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8011628:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 801162c:	2b01      	cmp	r3, #1
 801162e:	f77f ad37 	ble.w	80110a0 <kalmanCoreRobustUpdateWithDistance+0x16c>
    }


    // After n iterations, we obtain the rescaled (1) P = P_iter, (2) R = R_iter, (3) Kw.
    // Call the kalman update function with weighted P, weighted K, h, and error_check
    kalmanCoreUpdateWithPKE(this, &H, &Kwm, &P_w_m, error_check);
 8011632:	f507 71aa 	add.w	r1, r7, #340	@ 0x154
 8011636:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801163a:	f5a3 70ee 	sub.w	r0, r3, #476	@ 0x1dc
 801163e:	ed97 0a67 	vldr	s0, [r7, #412]	@ 0x19c
 8011642:	4b0b      	ldr	r3, [pc, #44]	@ (8011670 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 8011644:	4a14      	ldr	r2, [pc, #80]	@ (8011698 <kalmanCoreRobustUpdateWithDistance+0x764>)
 8011646:	6800      	ldr	r0, [r0, #0]
 8011648:	f7fc ff1e 	bl	800e488 <kalmanCoreUpdateWithPKE>

}  
 801164c:	bf00      	nop
 801164e:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 8011652:	46bd      	mov	sp, r7
 8011654:	ecbd 8b02 	vpop	{d8}
 8011658:	bd80      	pop	{r7, pc}
 801165a:	bf00      	nop
 801165c:	20009b54 	.word	0x20009b54
 8011660:	20009b78 	.word	0x20009b78
 8011664:	20000118 	.word	0x20000118
 8011668:	20000110 	.word	0x20000110
 801166c:	200000e0 	.word	0x200000e0
 8011670:	20000120 	.word	0x20000120
 8011674:	200000e8 	.word	0x200000e8
 8011678:	38d1b717 	.word	0x38d1b717
 801167c:	20000128 	.word	0x20000128
 8011680:	20000130 	.word	0x20000130
 8011684:	20009cbc 	.word	0x20009cbc
 8011688:	20009ce0 	.word	0x20009ce0
 801168c:	20009d04 	.word	0x20009d04
 8011690:	200098a8 	.word	0x200098a8
 8011694:	20009d28 	.word	0x20009d28
 8011698:	20000138 	.word	0x20000138

0801169c <kalmanCoreUpdateWithFlow>:
static float predictedNY;
static float measuredNX;
static float measuredNY;

void kalmanCoreUpdateWithFlow(kalmanCoreData_t* this, const flowMeasurement_t *flow, const Axis3f *gyro)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b0a2      	sub	sp, #136	@ 0x88
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	607a      	str	r2, [r7, #4]
  // Inclusion of flow measurements in the EKF done by two scalar updates

  // ~~~ Camera constants ~~~
  // The angle of aperture is guessed from the raw data register and thankfully look to be symmetric
  float Npix = 35.0;                      // [pixels] (same in x and y)
 80116a8:	4ba2      	ldr	r3, [pc, #648]	@ (8011934 <kalmanCoreUpdateWithFlow+0x298>)
 80116aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  //float thetapix = DEG_TO_RAD * 4.0f;     // [rad]    (same in x and y)
  float thetapix = 0.71674f;// 2*sin(42/2); 42degree is the agnle of aperture, here we computed the corresponding ground length
 80116ae:	4ba2      	ldr	r3, [pc, #648]	@ (8011938 <kalmanCoreUpdateWithFlow+0x29c>)
 80116b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  //~~~ Body rates ~~~
  // TODO check if this is feasible or if some filtering has to be done
  float omegax_b = gyro->x * DEG_TO_RAD;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	edd3 7a00 	vldr	s15, [r3]
 80116b8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 801193c <kalmanCoreUpdateWithFlow+0x2a0>
 80116bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116c0:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
  float omegay_b = gyro->y * DEG_TO_RAD;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80116ca:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 801193c <kalmanCoreUpdateWithFlow+0x2a0>
 80116ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116d2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
  // Modification 1
  //dx_g = R[0][0] * S[KC_STATE_PX] + R[0][1] * S[KC_STATE_PY] + R[0][2] * S[KC_STATE_PZ];
  //dy_g = R[1][0] * S[KC_STATE_PX] + R[1][1] * S[KC_STATE_PY] + R[1][2] * S[KC_STATE_PZ];


  float dx_g = this->S[KC_STATE_PX];
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	68db      	ldr	r3, [r3, #12]
 80116da:	673b      	str	r3, [r7, #112]	@ 0x70
  float dy_g = this->S[KC_STATE_PY];
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	691b      	ldr	r3, [r3, #16]
 80116e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  float z_g = 0.0;
 80116e2:	f04f 0300 	mov.w	r3, #0
 80116e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  // Saturate elevation in prediction and correction to avoid singularities
  if ( this->S[KC_STATE_Z] < 0.1f ) {
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80116f0:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8011940 <kalmanCoreUpdateWithFlow+0x2a4>
 80116f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80116f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116fc:	d503      	bpl.n	8011706 <kalmanCoreUpdateWithFlow+0x6a>
      z_g = 0.1;
 80116fe:	4b91      	ldr	r3, [pc, #580]	@ (8011944 <kalmanCoreUpdateWithFlow+0x2a8>)
 8011700:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011704:	e003      	b.n	801170e <kalmanCoreUpdateWithFlow+0x72>
  } else {
      z_g = this->S[KC_STATE_Z];
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	689b      	ldr	r3, [r3, #8]
 801170a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  }

  // ~~~ X velocity prediction and update ~~~
  // predicts the number of accumulated pixels in the x-direction
  float hx[KC_STATE_DIM] = {0};
 801170e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011712:	2224      	movs	r2, #36	@ 0x24
 8011714:	2100      	movs	r1, #0
 8011716:	4618      	mov	r0, r3
 8011718:	f006 f938 	bl	801798c <memset>
  arm_matrix_instance_f32 Hx = {1, KC_STATE_DIM, hx};
 801171c:	2301      	movs	r3, #1
 801171e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8011722:	2309      	movs	r3, #9
 8011724:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8011728:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801172c:	647b      	str	r3, [r7, #68]	@ 0x44
  predictedNX = (flow->dt * Npix / thetapix ) * ((dx_g * this->R[2][2] / z_g) - omegay_b);
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	ed93 7a05 	vldr	s14, [r3, #20]
 8011734:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8011738:	ee67 6a27 	vmul.f32	s13, s14, s15
 801173c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8011740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 801174a:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 801174e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8011752:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8011756:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801175a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 801175e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011766:	4b78      	ldr	r3, [pc, #480]	@ (8011948 <kalmanCoreUpdateWithFlow+0x2ac>)
 8011768:	edc3 7a00 	vstr	s15, [r3]
  measuredNX = flow->dpixelx*FLOW_RESOLUTION;
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	edd3 7a01 	vldr	s15, [r3, #4]
 8011772:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8011940 <kalmanCoreUpdateWithFlow+0x2a4>
 8011776:	ee67 7a87 	vmul.f32	s15, s15, s14
 801177a:	4b74      	ldr	r3, [pc, #464]	@ (801194c <kalmanCoreUpdateWithFlow+0x2b0>)
 801177c:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dx (and z?)
  hx[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dx_g) / (-z_g * z_g));
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	ed93 7a05 	vldr	s14, [r3, #20]
 8011786:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 801178a:	ee67 6a27 	vmul.f32	s13, s14, s15
 801178e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8011792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 801179c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80117a0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80117a4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80117a8:	eef1 6a67 	vneg.f32	s13, s15
 80117ac:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80117b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80117b4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80117b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117bc:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
  hx[KC_STATE_PX] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	ed93 7a05 	vldr	s14, [r3, #20]
 80117c6:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80117ca:	ee67 6a27 	vmul.f32	s13, s14, s15
 80117ce:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80117d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 80117dc:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 80117e0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80117e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117e8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

  //First update
  kalmanCoreScalarUpdate(this, &Hx, (measuredNX-predictedNX), flow->stdDevX*FLOW_RESOLUTION);
 80117ec:	4b57      	ldr	r3, [pc, #348]	@ (801194c <kalmanCoreUpdateWithFlow+0x2b0>)
 80117ee:	ed93 7a00 	vldr	s14, [r3]
 80117f2:	4b55      	ldr	r3, [pc, #340]	@ (8011948 <kalmanCoreUpdateWithFlow+0x2ac>)
 80117f4:	edd3 7a00 	vldr	s15, [r3]
 80117f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8011802:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8011940 <kalmanCoreUpdateWithFlow+0x2a4>
 8011806:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801180a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801180e:	eef0 0a67 	vmov.f32	s1, s15
 8011812:	eeb0 0a47 	vmov.f32	s0, s14
 8011816:	4619      	mov	r1, r3
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	f7fc fc35 	bl	800e088 <kalmanCoreScalarUpdate>

  // ~~~ Y velocity prediction and update ~~~
  float hy[KC_STATE_DIM] = {0};
 801181e:	f107 031c 	add.w	r3, r7, #28
 8011822:	2224      	movs	r2, #36	@ 0x24
 8011824:	2100      	movs	r1, #0
 8011826:	4618      	mov	r0, r3
 8011828:	f006 f8b0 	bl	801798c <memset>
  arm_matrix_instance_f32 Hy = {1, KC_STATE_DIM, hy};
 801182c:	2301      	movs	r3, #1
 801182e:	82bb      	strh	r3, [r7, #20]
 8011830:	2309      	movs	r3, #9
 8011832:	82fb      	strh	r3, [r7, #22]
 8011834:	f107 031c 	add.w	r3, r7, #28
 8011838:	61bb      	str	r3, [r7, #24]
  predictedNY = (flow->dt * Npix / thetapix ) * ((dy_g * this->R[2][2] / z_g) + omegax_b);
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	ed93 7a05 	vldr	s14, [r3, #20]
 8011840:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8011844:	ee67 6a27 	vmul.f32	s13, s14, s15
 8011848:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 801184c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8011856:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 801185a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 801185e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8011862:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8011866:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 801186a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801186e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011872:	4b37      	ldr	r3, [pc, #220]	@ (8011950 <kalmanCoreUpdateWithFlow+0x2b4>)
 8011874:	edc3 7a00 	vstr	s15, [r3]
  measuredNY = flow->dpixely*FLOW_RESOLUTION;
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	edd3 7a02 	vldr	s15, [r3, #8]
 801187e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8011940 <kalmanCoreUpdateWithFlow+0x2a4>
 8011882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011886:	4b33      	ldr	r3, [pc, #204]	@ (8011954 <kalmanCoreUpdateWithFlow+0x2b8>)
 8011888:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dy (and z?)
  hy[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dy_g) / (-z_g * z_g));
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	ed93 7a05 	vldr	s14, [r3, #20]
 8011892:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8011896:	ee67 6a27 	vmul.f32	s13, s14, s15
 801189a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 801189e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80118a8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80118ac:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80118b0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80118b4:	eef1 6a67 	vneg.f32	s13, s15
 80118b8:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80118bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80118c0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80118c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118c8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  hy[KC_STATE_PY] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	ed93 7a05 	vldr	s14, [r3, #20]
 80118d2:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80118d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80118da:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80118de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 80118e8:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 80118ec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80118f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118f4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

  // Second update
  kalmanCoreScalarUpdate(this, &Hy, (measuredNY-predictedNY), flow->stdDevY*FLOW_RESOLUTION);
 80118f8:	4b16      	ldr	r3, [pc, #88]	@ (8011954 <kalmanCoreUpdateWithFlow+0x2b8>)
 80118fa:	ed93 7a00 	vldr	s14, [r3]
 80118fe:	4b14      	ldr	r3, [pc, #80]	@ (8011950 <kalmanCoreUpdateWithFlow+0x2b4>)
 8011900:	edd3 7a00 	vldr	s15, [r3]
 8011904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	edd3 7a04 	vldr	s15, [r3, #16]
 801190e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8011940 <kalmanCoreUpdateWithFlow+0x2a4>
 8011912:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011916:	f107 0314 	add.w	r3, r7, #20
 801191a:	eef0 0a67 	vmov.f32	s1, s15
 801191e:	eeb0 0a47 	vmov.f32	s0, s14
 8011922:	4619      	mov	r1, r3
 8011924:	68f8      	ldr	r0, [r7, #12]
 8011926:	f7fc fbaf 	bl	800e088 <kalmanCoreScalarUpdate>
}
 801192a:	bf00      	nop
 801192c:	3788      	adds	r7, #136	@ 0x88
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop
 8011934:	420c0000 	.word	0x420c0000
 8011938:	3f377c46 	.word	0x3f377c46
 801193c:	3c8efa35 	.word	0x3c8efa35
 8011940:	3dcccccd 	.word	0x3dcccccd
 8011944:	3dcccccd 	.word	0x3dcccccd
 8011948:	2000a25c 	.word	0x2000a25c
 801194c:	2000a264 	.word	0x2000a264
 8011950:	2000a260 	.word	0x2000a260
 8011954:	2000a268 	.word	0x2000a268

08011958 <mkvec>:
//
// constructors
//

// construct a vector from 3 floats.
static inline struct vec mkvec(float x, float y, float z) {
 8011958:	b480      	push	{r7}
 801195a:	b08f      	sub	sp, #60	@ 0x3c
 801195c:	af00      	add	r7, sp, #0
 801195e:	ed87 0a07 	vstr	s0, [r7, #28]
 8011962:	edc7 0a06 	vstr	s1, [r7, #24]
 8011966:	ed87 1a05 	vstr	s2, [r7, #20]
	struct vec v;
	v.x = x; v.y = y; v.z = z;
 801196a:	69fb      	ldr	r3, [r7, #28]
 801196c:	623b      	str	r3, [r7, #32]
 801196e:	69bb      	ldr	r3, [r7, #24]
 8011970:	627b      	str	r3, [r7, #36]	@ 0x24
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	62bb      	str	r3, [r7, #40]	@ 0x28
	return v;
 8011976:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801197a:	f107 0220 	add.w	r2, r7, #32
 801197e:	ca07      	ldmia	r2, {r0, r1, r2}
 8011980:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011984:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801198a:	ee06 1a90 	vmov	s13, r1
 801198e:	ee07 2a10 	vmov	s14, r2
 8011992:	ee07 3a90 	vmov	s15, r3
}
 8011996:	eeb0 0a66 	vmov.f32	s0, s13
 801199a:	eef0 0a47 	vmov.f32	s1, s14
 801199e:	eeb0 1a67 	vmov.f32	s2, s15
 80119a2:	373c      	adds	r7, #60	@ 0x3c
 80119a4:	46bd      	mov	sp, r7
 80119a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119aa:	4770      	bx	lr

080119ac <vscl>:
//
// operators
//

// multiply a vector by a scalar.
static inline struct vec vscl(float s, struct vec v) {
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b08c      	sub	sp, #48	@ 0x30
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	ed87 0a07 	vstr	s0, [r7, #28]
 80119b6:	eef0 6a60 	vmov.f32	s13, s1
 80119ba:	eeb0 7a41 	vmov.f32	s14, s2
 80119be:	eef0 7a61 	vmov.f32	s15, s3
 80119c2:	edc7 6a04 	vstr	s13, [r7, #16]
 80119c6:	ed87 7a05 	vstr	s14, [r7, #20]
 80119ca:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(s * v.x , s * v.y, s * v.z);
 80119ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80119d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80119d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80119da:	ed97 7a05 	vldr	s14, [r7, #20]
 80119de:	edd7 7a07 	vldr	s15, [r7, #28]
 80119e2:	ee27 6a27 	vmul.f32	s12, s14, s15
 80119e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80119ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80119ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119f2:	eeb0 1a67 	vmov.f32	s2, s15
 80119f6:	eef0 0a46 	vmov.f32	s1, s12
 80119fa:	eeb0 0a66 	vmov.f32	s0, s13
 80119fe:	f7ff ffab 	bl	8011958 <mkvec>
 8011a02:	eef0 6a40 	vmov.f32	s13, s0
 8011a06:	eeb0 7a60 	vmov.f32	s14, s1
 8011a0a:	eef0 7a41 	vmov.f32	s15, s2
 8011a0e:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8011a12:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8011a16:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8011a1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011a1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a20:	ee06 1a90 	vmov	s13, r1
 8011a24:	ee07 2a10 	vmov	s14, r2
 8011a28:	ee07 3a90 	vmov	s15, r3
}
 8011a2c:	eeb0 0a66 	vmov.f32	s0, s13
 8011a30:	eef0 0a47 	vmov.f32	s1, s14
 8011a34:	eeb0 1a67 	vmov.f32	s2, s15
 8011a38:	3730      	adds	r7, #48	@ 0x30
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}

08011a3e <mkquat>:
//
// constructors
//

// construct a quaternion from its x, y, z, w elements.
static inline struct quat mkquat(float x, float y, float z, float w) {
 8011a3e:	b490      	push	{r4, r7}
 8011a40:	b090      	sub	sp, #64	@ 0x40
 8011a42:	af00      	add	r7, sp, #0
 8011a44:	ed87 0a07 	vstr	s0, [r7, #28]
 8011a48:	edc7 0a06 	vstr	s1, [r7, #24]
 8011a4c:	ed87 1a05 	vstr	s2, [r7, #20]
 8011a50:	edc7 1a04 	vstr	s3, [r7, #16]
	struct quat q;
	q.x = x; q.y = y; q.z = z; q.w = w;
 8011a54:	69fb      	ldr	r3, [r7, #28]
 8011a56:	623b      	str	r3, [r7, #32]
 8011a58:	69bb      	ldr	r3, [r7, #24]
 8011a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return q;
 8011a64:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8011a68:	f107 0320 	add.w	r3, r7, #32
 8011a6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011a72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a74:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011a76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a7a:	ee06 0a10 	vmov	s12, r0
 8011a7e:	ee06 1a90 	vmov	s13, r1
 8011a82:	ee07 2a10 	vmov	s14, r2
 8011a86:	ee07 3a90 	vmov	s15, r3
}
 8011a8a:	eeb0 0a46 	vmov.f32	s0, s12
 8011a8e:	eef0 0a66 	vmov.f32	s1, s13
 8011a92:	eeb0 1a47 	vmov.f32	s2, s14
 8011a96:	eef0 1a67 	vmov.f32	s3, s15
 8011a9a:	3740      	adds	r7, #64	@ 0x40
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bc90      	pop	{r4, r7}
 8011aa0:	4770      	bx	lr

08011aa2 <quatimagpart>:
		angle -= 2.0f * M_PI_F;
	}
	return angle;
}
// vector containing the imaginary part of the quaternion, i.e. (x, y, z)
static inline struct vec quatimagpart(struct quat q) {
 8011aa2:	b580      	push	{r7, lr}
 8011aa4:	b08c      	sub	sp, #48	@ 0x30
 8011aa6:	af00      	add	r7, sp, #0
 8011aa8:	eeb0 6a40 	vmov.f32	s12, s0
 8011aac:	eef0 6a60 	vmov.f32	s13, s1
 8011ab0:	eeb0 7a41 	vmov.f32	s14, s2
 8011ab4:	eef0 7a61 	vmov.f32	s15, s3
 8011ab8:	ed87 6a04 	vstr	s12, [r7, #16]
 8011abc:	edc7 6a05 	vstr	s13, [r7, #20]
 8011ac0:	ed87 7a06 	vstr	s14, [r7, #24]
 8011ac4:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkvec(q.x, q.y, q.z);
 8011ac8:	edd7 7a04 	vldr	s15, [r7, #16]
 8011acc:	ed97 7a05 	vldr	s14, [r7, #20]
 8011ad0:	edd7 6a06 	vldr	s13, [r7, #24]
 8011ad4:	eeb0 1a66 	vmov.f32	s2, s13
 8011ad8:	eef0 0a47 	vmov.f32	s1, s14
 8011adc:	eeb0 0a67 	vmov.f32	s0, s15
 8011ae0:	f7ff ff3a 	bl	8011958 <mkvec>
 8011ae4:	eef0 6a40 	vmov.f32	s13, s0
 8011ae8:	eeb0 7a60 	vmov.f32	s14, s1
 8011aec:	eef0 7a41 	vmov.f32	s15, s2
 8011af0:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8011af4:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8011af8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8011afc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b02:	ee06 1a90 	vmov	s13, r1
 8011b06:	ee07 2a10 	vmov	s14, r2
 8011b0a:	ee07 3a90 	vmov	s15, r3
}
 8011b0e:	eeb0 0a66 	vmov.f32	s0, s13
 8011b12:	eef0 0a47 	vmov.f32	s1, s14
 8011b16:	eeb0 1a67 	vmov.f32	s2, s15
 8011b1a:	3730      	adds	r7, #48	@ 0x30
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}

08011b20 <qqmul>:
		vscl(2.0f * q.w, vcross(qv, v))
	);
}
// multiply (compose) two quaternions
// such that qvrot(qqmul(q, p), v) == qvrot(q, qvrot(p, v)).
static inline struct quat qqmul(struct quat q, struct quat p) {
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b094      	sub	sp, #80	@ 0x50
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	eeb0 4a40 	vmov.f32	s8, s0
 8011b2a:	eef0 4a60 	vmov.f32	s9, s1
 8011b2e:	eeb0 5a41 	vmov.f32	s10, s2
 8011b32:	eef0 5a61 	vmov.f32	s11, s3
 8011b36:	eeb0 6a42 	vmov.f32	s12, s4
 8011b3a:	eef0 6a62 	vmov.f32	s13, s5
 8011b3e:	eeb0 7a43 	vmov.f32	s14, s6
 8011b42:	eef0 7a63 	vmov.f32	s15, s7
 8011b46:	ed87 4a08 	vstr	s8, [r7, #32]
 8011b4a:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 8011b4e:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 8011b52:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 8011b56:	ed87 6a04 	vstr	s12, [r7, #16]
 8011b5a:	edc7 6a05 	vstr	s13, [r7, #20]
 8011b5e:	ed87 7a06 	vstr	s14, [r7, #24]
 8011b62:	edc7 7a07 	vstr	s15, [r7, #28]
	float x =  q.w*p.x + q.z*p.y - q.y*p.z + q.x*p.w;
 8011b66:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8011b6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8011b6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011b72:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8011b76:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011b82:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011b86:	edd7 7a06 	vldr	s15, [r7, #24]
 8011b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011b92:	edd7 6a08 	vldr	s13, [r7, #32]
 8011b96:	edd7 7a07 	vldr	s15, [r7, #28]
 8011b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ba2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	float y = -q.z*p.x + q.w*p.y + q.x*p.z + q.y*p.w;
 8011ba6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011baa:	eeb1 7a67 	vneg.f32	s14, s15
 8011bae:	edd7 7a04 	vldr	s15, [r7, #16]
 8011bb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011bb6:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8011bba:	edd7 7a05 	vldr	s15, [r7, #20]
 8011bbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011bc6:	edd7 6a08 	vldr	s13, [r7, #32]
 8011bca:	edd7 7a06 	vldr	s15, [r7, #24]
 8011bce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011bd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011bd6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011bda:	edd7 7a07 	vldr	s15, [r7, #28]
 8011bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011be6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	float z =  q.y*p.x - q.x*p.y + q.w*p.z + q.z*p.w;
 8011bea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8011bee:	edd7 7a04 	vldr	s15, [r7, #16]
 8011bf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011bf6:	edd7 6a08 	vldr	s13, [r7, #32]
 8011bfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8011bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011c06:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8011c0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8011c0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011c16:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8011c1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8011c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c26:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	float w = -q.x*p.x - q.y*p.y - q.z*p.z + q.w*p.w;
 8011c2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8011c2e:	eeb1 7a67 	vneg.f32	s14, s15
 8011c32:	edd7 7a04 	vldr	s15, [r7, #16]
 8011c36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011c3a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011c3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011c4a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8011c4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8011c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011c5a:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8011c5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8011c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c6a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	return mkquat(x, y, z, w);
 8011c6e:	edd7 1a10 	vldr	s3, [r7, #64]	@ 0x40
 8011c72:	ed97 1a11 	vldr	s2, [r7, #68]	@ 0x44
 8011c76:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 8011c7a:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8011c7e:	f7ff fede 	bl	8011a3e <mkquat>
 8011c82:	eeb0 6a40 	vmov.f32	s12, s0
 8011c86:	eef0 6a60 	vmov.f32	s13, s1
 8011c8a:	eeb0 7a41 	vmov.f32	s14, s2
 8011c8e:	eef0 7a61 	vmov.f32	s15, s3
 8011c92:	ed87 6a0c 	vstr	s12, [r7, #48]	@ 0x30
 8011c96:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8011c9a:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8011c9e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8011ca2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011ca4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011ca6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011caa:	ee06 0a10 	vmov	s12, r0
 8011cae:	ee06 1a90 	vmov	s13, r1
 8011cb2:	ee07 2a10 	vmov	s14, r2
 8011cb6:	ee07 3a90 	vmov	s15, r3
}
 8011cba:	eeb0 0a46 	vmov.f32	s0, s12
 8011cbe:	eef0 0a66 	vmov.f32	s1, s13
 8011cc2:	eeb0 1a47 	vmov.f32	s2, s14
 8011cc6:	eef0 1a67 	vmov.f32	s3, s15
 8011cca:	3750      	adds	r7, #80	@ 0x50
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}

08011cd0 <qinv>:
// invert a quaternion.
static inline struct quat qinv(struct quat q) {
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b08c      	sub	sp, #48	@ 0x30
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	eeb0 6a40 	vmov.f32	s12, s0
 8011cda:	eef0 6a60 	vmov.f32	s13, s1
 8011cde:	eeb0 7a41 	vmov.f32	s14, s2
 8011ce2:	eef0 7a61 	vmov.f32	s15, s3
 8011ce6:	ed87 6a04 	vstr	s12, [r7, #16]
 8011cea:	edc7 6a05 	vstr	s13, [r7, #20]
 8011cee:	ed87 7a06 	vstr	s14, [r7, #24]
 8011cf2:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkquat(-q.x, -q.y, -q.z, q.w);
 8011cf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8011cfa:	eeb1 7a67 	vneg.f32	s14, s15
 8011cfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8011d02:	eef1 6a67 	vneg.f32	s13, s15
 8011d06:	edd7 7a06 	vldr	s15, [r7, #24]
 8011d0a:	eef1 7a67 	vneg.f32	s15, s15
 8011d0e:	ed97 6a07 	vldr	s12, [r7, #28]
 8011d12:	eef0 1a46 	vmov.f32	s3, s12
 8011d16:	eeb0 1a67 	vmov.f32	s2, s15
 8011d1a:	eef0 0a66 	vmov.f32	s1, s13
 8011d1e:	eeb0 0a47 	vmov.f32	s0, s14
 8011d22:	f7ff fe8c 	bl	8011a3e <mkquat>
 8011d26:	eeb0 6a40 	vmov.f32	s12, s0
 8011d2a:	eef0 6a60 	vmov.f32	s13, s1
 8011d2e:	eeb0 7a41 	vmov.f32	s14, s2
 8011d32:	eef0 7a61 	vmov.f32	s15, s3
 8011d36:	ed87 6a08 	vstr	s12, [r7, #32]
 8011d3a:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8011d3e:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8011d42:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8011d46:	6a38      	ldr	r0, [r7, #32]
 8011d48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d4e:	ee06 0a10 	vmov	s12, r0
 8011d52:	ee06 1a90 	vmov	s13, r1
 8011d56:	ee07 2a10 	vmov	s14, r2
 8011d5a:	ee07 3a90 	vmov	s15, r3
}
 8011d5e:	eeb0 0a46 	vmov.f32	s0, s12
 8011d62:	eef0 0a66 	vmov.f32	s1, s13
 8011d66:	eeb0 1a47 	vmov.f32	s2, s14
 8011d6a:	eef0 1a67 	vmov.f32	s3, s15
 8011d6e:	3730      	adds	r7, #48	@ 0x30
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <kalmanCoreUpdateWithPose>:

#include "mm_pose.h"
#include "math3d.h"

void kalmanCoreUpdateWithPose(kalmanCoreData_t* this, poseMeasurement_t *pose)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	ed2d 8b02 	vpush	{d8}
 8011d7a:	b0a6      	sub	sp, #152	@ 0x98
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z, and orientation
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 8011d82:	2300      	movs	r3, #0
 8011d84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011d88:	e038      	b.n	8011dfc <kalmanCoreUpdateWithPose+0x88>
    float h[KC_STATE_DIM] = {0};
 8011d8a:	f107 0308 	add.w	r3, r7, #8
 8011d8e:	2224      	movs	r2, #36	@ 0x24
 8011d90:	2100      	movs	r1, #0
 8011d92:	4618      	mov	r0, r3
 8011d94:	f005 fdfa 	bl	801798c <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8011d98:	2301      	movs	r3, #1
 8011d9a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8011d9c:	2309      	movs	r3, #9
 8011d9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011da0:	f107 0308 	add.w	r3, r7, #8
 8011da4:	63bb      	str	r3, [r7, #56]	@ 0x38
    h[KC_STATE_X+i] = 1;
 8011da6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011daa:	009b      	lsls	r3, r3, #2
 8011dac:	3398      	adds	r3, #152	@ 0x98
 8011dae:	443b      	add	r3, r7
 8011db0:	3b90      	subs	r3, #144	@ 0x90
 8011db2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011db6:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, pose->pos[i] - this->S[KC_STATE_X+i], pose->stdDevPos);
 8011db8:	683a      	ldr	r2, [r7, #0]
 8011dba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011dbe:	009b      	lsls	r3, r3, #2
 8011dc0:	4413      	add	r3, r2
 8011dc2:	ed93 7a00 	vldr	s14, [r3]
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011dcc:	009b      	lsls	r3, r3, #2
 8011dce:	4413      	add	r3, r2
 8011dd0:	edd3 7a00 	vldr	s15, [r3]
 8011dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	ed93 7a07 	vldr	s14, [r3, #28]
 8011dde:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011de2:	eef0 0a47 	vmov.f32	s1, s14
 8011de6:	eeb0 0a67 	vmov.f32	s0, s15
 8011dea:	4619      	mov	r1, r3
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f7fc f94b 	bl	800e088 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 8011df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011df6:	3301      	adds	r3, #1
 8011df8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011e00:	2b02      	cmp	r3, #2
 8011e02:	ddc2      	ble.n	8011d8a <kalmanCoreUpdateWithPose+0x16>
  }

  // compute orientation error
  struct quat const q_ekf = mkquat(this->q[1], this->q[2], this->q[3], this->q[0]);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8011e1c:	eef0 1a46 	vmov.f32	s3, s12
 8011e20:	eeb0 1a66 	vmov.f32	s2, s13
 8011e24:	eef0 0a47 	vmov.f32	s1, s14
 8011e28:	eeb0 0a67 	vmov.f32	s0, s15
 8011e2c:	f7ff fe07 	bl	8011a3e <mkquat>
 8011e30:	eeb0 6a40 	vmov.f32	s12, s0
 8011e34:	eef0 6a60 	vmov.f32	s13, s1
 8011e38:	eeb0 7a41 	vmov.f32	s14, s2
 8011e3c:	eef0 7a61 	vmov.f32	s15, s3
 8011e40:	ed87 6a1a 	vstr	s12, [r7, #104]	@ 0x68
 8011e44:	edc7 6a1b 	vstr	s13, [r7, #108]	@ 0x6c
 8011e48:	ed87 7a1c 	vstr	s14, [r7, #112]	@ 0x70
 8011e4c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
  struct quat const q_measured = mkquat(pose->quat.x, pose->quat.y, pose->quat.z, pose->quat.w);
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	edd3 7a03 	vldr	s15, [r3, #12]
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	ed93 7a04 	vldr	s14, [r3, #16]
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	edd3 6a05 	vldr	s13, [r3, #20]
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	ed93 6a06 	vldr	s12, [r3, #24]
 8011e68:	eef0 1a46 	vmov.f32	s3, s12
 8011e6c:	eeb0 1a66 	vmov.f32	s2, s13
 8011e70:	eef0 0a47 	vmov.f32	s1, s14
 8011e74:	eeb0 0a67 	vmov.f32	s0, s15
 8011e78:	f7ff fde1 	bl	8011a3e <mkquat>
 8011e7c:	eeb0 6a40 	vmov.f32	s12, s0
 8011e80:	eef0 6a60 	vmov.f32	s13, s1
 8011e84:	eeb0 7a41 	vmov.f32	s14, s2
 8011e88:	eef0 7a61 	vmov.f32	s15, s3
 8011e8c:	ed87 6a16 	vstr	s12, [r7, #88]	@ 0x58
 8011e90:	edc7 6a17 	vstr	s13, [r7, #92]	@ 0x5c
 8011e94:	ed87 7a18 	vstr	s14, [r7, #96]	@ 0x60
 8011e98:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
  struct quat const q_residual = qqmul(qinv(q_ekf), q_measured);
 8011e9c:	ed97 6a1a 	vldr	s12, [r7, #104]	@ 0x68
 8011ea0:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8011ea4:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8011ea8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8011eac:	eeb0 0a46 	vmov.f32	s0, s12
 8011eb0:	eef0 0a66 	vmov.f32	s1, s13
 8011eb4:	eeb0 1a47 	vmov.f32	s2, s14
 8011eb8:	eef0 1a67 	vmov.f32	s3, s15
 8011ebc:	f7ff ff08 	bl	8011cd0 <qinv>
 8011ec0:	eeb0 6a40 	vmov.f32	s12, s0
 8011ec4:	eef0 6a60 	vmov.f32	s13, s1
 8011ec8:	eeb0 7a41 	vmov.f32	s14, s2
 8011ecc:	eef0 7a61 	vmov.f32	s15, s3
 8011ed0:	ed87 6a1e 	vstr	s12, [r7, #120]	@ 0x78
 8011ed4:	edc7 6a1f 	vstr	s13, [r7, #124]	@ 0x7c
 8011ed8:	ed87 7a20 	vstr	s14, [r7, #128]	@ 0x80
 8011edc:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 8011ee0:	ed97 4a16 	vldr	s8, [r7, #88]	@ 0x58
 8011ee4:	edd7 4a17 	vldr	s9, [r7, #92]	@ 0x5c
 8011ee8:	ed97 5a18 	vldr	s10, [r7, #96]	@ 0x60
 8011eec:	edd7 5a19 	vldr	s11, [r7, #100]	@ 0x64
 8011ef0:	ed97 6a1e 	vldr	s12, [r7, #120]	@ 0x78
 8011ef4:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8011ef8:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8011efc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8011f00:	eeb0 2a44 	vmov.f32	s4, s8
 8011f04:	eef0 2a64 	vmov.f32	s5, s9
 8011f08:	eeb0 3a45 	vmov.f32	s6, s10
 8011f0c:	eef0 3a65 	vmov.f32	s7, s11
 8011f10:	eeb0 0a46 	vmov.f32	s0, s12
 8011f14:	eef0 0a66 	vmov.f32	s1, s13
 8011f18:	eeb0 1a47 	vmov.f32	s2, s14
 8011f1c:	eef0 1a67 	vmov.f32	s3, s15
 8011f20:	f7ff fdfe 	bl	8011b20 <qqmul>
 8011f24:	eeb0 6a40 	vmov.f32	s12, s0
 8011f28:	eef0 6a60 	vmov.f32	s13, s1
 8011f2c:	eeb0 7a41 	vmov.f32	s14, s2
 8011f30:	eef0 7a61 	vmov.f32	s15, s3
 8011f34:	ed87 6a12 	vstr	s12, [r7, #72]	@ 0x48
 8011f38:	edc7 6a13 	vstr	s13, [r7, #76]	@ 0x4c
 8011f3c:	ed87 7a14 	vstr	s14, [r7, #80]	@ 0x50
 8011f40:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
  // small angle approximation, see eq. 141 in http://mars.cs.umn.edu/tr/reports/Trawny05b.pdf
  struct vec const err_quat = vscl(2.0f / q_residual.w, quatimagpart(q_residual));
 8011f44:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8011f48:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8011f4c:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8011f50:	ed97 6a12 	vldr	s12, [r7, #72]	@ 0x48
 8011f54:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8011f58:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8011f5c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8011f60:	eeb0 0a46 	vmov.f32	s0, s12
 8011f64:	eef0 0a66 	vmov.f32	s1, s13
 8011f68:	eeb0 1a47 	vmov.f32	s2, s14
 8011f6c:	eef0 1a67 	vmov.f32	s3, s15
 8011f70:	f7ff fd97 	bl	8011aa2 <quatimagpart>
 8011f74:	eef0 6a40 	vmov.f32	s13, s0
 8011f78:	eeb0 7a60 	vmov.f32	s14, s1
 8011f7c:	eef0 7a41 	vmov.f32	s15, s2
 8011f80:	edc7 6a22 	vstr	s13, [r7, #136]	@ 0x88
 8011f84:	ed87 7a23 	vstr	s14, [r7, #140]	@ 0x8c
 8011f88:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 8011f8c:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8011f90:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8011f94:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8011f98:	eef0 0a66 	vmov.f32	s1, s13
 8011f9c:	eeb0 1a47 	vmov.f32	s2, s14
 8011fa0:	eef0 1a67 	vmov.f32	s3, s15
 8011fa4:	eeb0 0a48 	vmov.f32	s0, s16
 8011fa8:	f7ff fd00 	bl	80119ac <vscl>
 8011fac:	eef0 6a40 	vmov.f32	s13, s0
 8011fb0:	eeb0 7a60 	vmov.f32	s14, s1
 8011fb4:	eef0 7a41 	vmov.f32	s15, s2
 8011fb8:	edc7 6a0f 	vstr	s13, [r7, #60]	@ 0x3c
 8011fbc:	ed87 7a10 	vstr	s14, [r7, #64]	@ 0x40
 8011fc0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

  // do a scalar update for each state
  {
    float h[KC_STATE_DIM] = {0};
 8011fc4:	f107 0308 	add.w	r3, r7, #8
 8011fc8:	2224      	movs	r2, #36	@ 0x24
 8011fca:	2100      	movs	r1, #0
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f005 fcdd 	bl	801798c <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011fd6:	2309      	movs	r3, #9
 8011fd8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011fda:	f107 0308 	add.w	r3, r7, #8
 8011fde:	633b      	str	r3, [r7, #48]	@ 0x30
    h[KC_STATE_D0] = 1;
 8011fe0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8011fe4:	623b      	str	r3, [r7, #32]
    kalmanCoreScalarUpdate(this, &H, err_quat.x, pose->stdDevQuat);
 8011fe6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	ed93 7a08 	vldr	s14, [r3, #32]
 8011ff0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011ff4:	eef0 0a47 	vmov.f32	s1, s14
 8011ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f7fc f842 	bl	800e088 <kalmanCoreScalarUpdate>
    h[KC_STATE_D0] = 0;
 8012004:	f04f 0300 	mov.w	r3, #0
 8012008:	623b      	str	r3, [r7, #32]

    h[KC_STATE_D1] = 1;
 801200a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801200e:	627b      	str	r3, [r7, #36]	@ 0x24
    kalmanCoreScalarUpdate(this, &H, err_quat.y, pose->stdDevQuat);
 8012010:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	ed93 7a08 	vldr	s14, [r3, #32]
 801201a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801201e:	eef0 0a47 	vmov.f32	s1, s14
 8012022:	eeb0 0a67 	vmov.f32	s0, s15
 8012026:	4619      	mov	r1, r3
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f7fc f82d 	bl	800e088 <kalmanCoreScalarUpdate>
    h[KC_STATE_D1] = 0;
 801202e:	f04f 0300 	mov.w	r3, #0
 8012032:	627b      	str	r3, [r7, #36]	@ 0x24

    h[KC_STATE_D2] = 1;
 8012034:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8012038:	62bb      	str	r3, [r7, #40]	@ 0x28
    kalmanCoreScalarUpdate(this, &H, err_quat.z, pose->stdDevQuat);
 801203a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	ed93 7a08 	vldr	s14, [r3, #32]
 8012044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012048:	eef0 0a47 	vmov.f32	s1, s14
 801204c:	eeb0 0a67 	vmov.f32	s0, s15
 8012050:	4619      	mov	r1, r3
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f7fc f818 	bl	800e088 <kalmanCoreScalarUpdate>
  }
}
 8012058:	bf00      	nop
 801205a:	3798      	adds	r7, #152	@ 0x98
 801205c:	46bd      	mov	sp, r7
 801205e:	ecbd 8b02 	vpop	{d8}
 8012062:	bd80      	pop	{r7, pc}

08012064 <kalmanCoreUpdateWithPosition>:
 */

#include "mm_position.h"

void kalmanCoreUpdateWithPosition(kalmanCoreData_t* this, positionMeasurement_t *xyz)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b08e      	sub	sp, #56	@ 0x38
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 801206e:	2300      	movs	r3, #0
 8012070:	637b      	str	r3, [r7, #52]	@ 0x34
 8012072:	e033      	b.n	80120dc <kalmanCoreUpdateWithPosition+0x78>
    float h[KC_STATE_DIM] = {0};
 8012074:	f107 0308 	add.w	r3, r7, #8
 8012078:	2224      	movs	r2, #36	@ 0x24
 801207a:	2100      	movs	r1, #0
 801207c:	4618      	mov	r0, r3
 801207e:	f005 fc85 	bl	801798c <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8012082:	2301      	movs	r3, #1
 8012084:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8012086:	2309      	movs	r3, #9
 8012088:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801208a:	f107 0308 	add.w	r3, r7, #8
 801208e:	633b      	str	r3, [r7, #48]	@ 0x30
    h[KC_STATE_X+i] = 1;
 8012090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012092:	009b      	lsls	r3, r3, #2
 8012094:	3338      	adds	r3, #56	@ 0x38
 8012096:	443b      	add	r3, r7
 8012098:	3b30      	subs	r3, #48	@ 0x30
 801209a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801209e:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, xyz->pos[i] - this->S[KC_STATE_X+i], xyz->stdDev);
 80120a0:	683a      	ldr	r2, [r7, #0]
 80120a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120a4:	009b      	lsls	r3, r3, #2
 80120a6:	4413      	add	r3, r2
 80120a8:	ed93 7a00 	vldr	s14, [r3]
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120b0:	009b      	lsls	r3, r3, #2
 80120b2:	4413      	add	r3, r2
 80120b4:	edd3 7a00 	vldr	s15, [r3]
 80120b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	ed93 7a03 	vldr	s14, [r3, #12]
 80120c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80120c6:	eef0 0a47 	vmov.f32	s1, s14
 80120ca:	eeb0 0a67 	vmov.f32	s0, s15
 80120ce:	4619      	mov	r1, r3
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f7fb ffd9 	bl	800e088 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 80120d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120d8:	3301      	adds	r3, #1
 80120da:	637b      	str	r3, [r7, #52]	@ 0x34
 80120dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120de:	2b02      	cmp	r3, #2
 80120e0:	ddc8      	ble.n	8012074 <kalmanCoreUpdateWithPosition+0x10>
  }
}
 80120e2:	bf00      	nop
 80120e4:	bf00      	nop
 80120e6:	3738      	adds	r7, #56	@ 0x38
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	0000      	movs	r0, r0
	...

080120f0 <kalmanCoreUpdateWithTof>:
 */

#include "mm_tof.h"

void kalmanCoreUpdateWithTof(kalmanCoreData_t* this, tofMeasurement_t *tof)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	ed2d 8b02 	vpush	{d8}
 80120f6:	b090      	sub	sp, #64	@ 0x40
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	6039      	str	r1, [r7, #0]
  // Updates the filter with a measured distance in the zb direction using the
  float h[KC_STATE_DIM] = {0};
 80120fe:	f107 0310 	add.w	r3, r7, #16
 8012102:	2224      	movs	r2, #36	@ 0x24
 8012104:	2100      	movs	r1, #0
 8012106:	4618      	mov	r0, r3
 8012108:	f005 fc40 	bl	801798c <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 801210c:	2301      	movs	r3, #1
 801210e:	813b      	strh	r3, [r7, #8]
 8012110:	2309      	movs	r3, #9
 8012112:	817b      	strh	r3, [r7, #10]
 8012114:	f107 0310 	add.w	r3, r7, #16
 8012118:	60fb      	str	r3, [r7, #12]

  // Only update the filter if the measurement is reliable (\hat{h} -> infty when R[2][2] -> 0)
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8012120:	eef0 7ae7 	vabs.f32	s15, s15
 8012124:	ee17 0a90 	vmov	r0, s15
 8012128:	f7ee f9c0 	bl	80004ac <__aeabi_f2d>
 801212c:	a331      	add	r3, pc, #196	@ (adr r3, 80121f4 <kalmanCoreUpdateWithTof+0x104>)
 801212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012132:	f7ee fca3 	bl	8000a7c <__aeabi_dcmpgt>
 8012136:	4603      	mov	r3, r0
 8012138:	2b00      	cmp	r3, #0
 801213a:	d100      	bne.n	801213e <kalmanCoreUpdateWithTof+0x4e>
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below

    // Scalar update
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
  }
}
 801213c:	e050      	b.n	80121e0 <kalmanCoreUpdateWithTof+0xf0>
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8012144:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214c:	dc00      	bgt.n	8012150 <kalmanCoreUpdateWithTof+0x60>
}
 801214e:	e047      	b.n	80121e0 <kalmanCoreUpdateWithTof+0xf0>
    float angle = fabsf(acosf(this->R[2][2])) - DEG_TO_RAD * (15.0f / 2.0f);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8012156:	eeb0 0a67 	vmov.f32	s0, s15
 801215a:	f005 fc6b 	bl	8017a34 <acosf>
 801215e:	eef0 7a40 	vmov.f32	s15, s0
 8012162:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80121f0 <kalmanCoreUpdateWithTof+0x100>
 8012166:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801216a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    if (angle < 0.0f) {
 801216e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8012172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801217a:	d502      	bpl.n	8012182 <kalmanCoreUpdateWithTof+0x92>
      angle = 0.0f;
 801217c:	f04f 0300 	mov.w	r3, #0
 8012180:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float predictedDistance = this->S[KC_STATE_Z] / cosf(angle);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	ed93 8a02 	vldr	s16, [r3, #8]
 8012188:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 801218c:	f005 fd86 	bl	8017c9c <cosf>
 8012190:	eeb0 7a40 	vmov.f32	s14, s0
 8012194:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8012198:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float measuredDistance = tof->distance; // [m]
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	685b      	ldr	r3, [r3, #4]
 80121a0:	637b      	str	r3, [r7, #52]	@ 0x34
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below
 80121a2:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80121a6:	f005 fd79 	bl	8017c9c <cosf>
 80121aa:	eeb0 7a40 	vmov.f32	s14, s0
 80121ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80121b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80121b6:	edc7 7a06 	vstr	s15, [r7, #24]
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
 80121ba:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80121be:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80121c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80121cc:	f107 0308 	add.w	r3, r7, #8
 80121d0:	eef0 0a47 	vmov.f32	s1, s14
 80121d4:	eeb0 0a67 	vmov.f32	s0, s15
 80121d8:	4619      	mov	r1, r3
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f7fb ff54 	bl	800e088 <kalmanCoreScalarUpdate>
}
 80121e0:	bf00      	nop
 80121e2:	3740      	adds	r7, #64	@ 0x40
 80121e4:	46bd      	mov	sp, r7
 80121e6:	ecbd 8b02 	vpop	{d8}
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	f3af 8000 	nop.w
 80121f0:	3e060a92 	.word	0x3e060a92
 80121f4:	9999999a 	.word	0x9999999a
 80121f8:	3fb99999 	.word	0x3fb99999

080121fc <kalmanCoreUpdateWithYawError>:
 */

#include "mm_yaw_error.h"

void kalmanCoreUpdateWithYawError(kalmanCoreData_t *this, yawErrorMeasurement_t *error)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b08e      	sub	sp, #56	@ 0x38
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6039      	str	r1, [r7, #0]
    float h[KC_STATE_DIM] = {0};
 8012206:	f107 0314 	add.w	r3, r7, #20
 801220a:	2224      	movs	r2, #36	@ 0x24
 801220c:	2100      	movs	r1, #0
 801220e:	4618      	mov	r0, r3
 8012210:	f005 fbbc 	bl	801798c <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8012214:	2301      	movs	r3, #1
 8012216:	81bb      	strh	r3, [r7, #12]
 8012218:	2309      	movs	r3, #9
 801221a:	81fb      	strh	r3, [r7, #14]
 801221c:	f107 0314 	add.w	r3, r7, #20
 8012220:	613b      	str	r3, [r7, #16]

    h[KC_STATE_D2] = 1;
 8012222:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8012226:	637b      	str	r3, [r7, #52]	@ 0x34
    kalmanCoreScalarUpdate(this, &H, this->S[KC_STATE_D2] - error->yawError, error->stdDev);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	ed93 7a08 	vldr	s14, [r3, #32]
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	edd3 7a01 	vldr	s15, [r3, #4]
 8012234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	ed93 7a02 	vldr	s14, [r3, #8]
 801223e:	f107 030c 	add.w	r3, r7, #12
 8012242:	eef0 0a47 	vmov.f32	s1, s14
 8012246:	eeb0 0a67 	vmov.f32	s0, s15
 801224a:	4619      	mov	r1, r3
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f7fb ff1b 	bl	800e088 <kalmanCoreScalarUpdate>
}
 8012252:	bf00      	nop
 8012254:	3738      	adds	r7, #56	@ 0x38
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}

0801225a <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 801225a:	b580      	push	{r7, lr}
 801225c:	b084      	sub	sp, #16
 801225e:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 8012260:	2300      	movs	r3, #0
 8012262:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 8012264:	1d3b      	adds	r3, r7, #4
 8012266:	4618      	mov	r0, r3
 8012268:	f000 f8a6 	bl	80123b8 <platformGetListOfConfigurations>
 801226c:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	4619      	mov	r1, r3
 8012272:	68f8      	ldr	r0, [r7, #12]
 8012274:	f000 f856 	bl	8012324 <platformInitConfiguration>
 8012278:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d001      	beq.n	8012284 <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 8012280:	2301      	movs	r3, #1
 8012282:	e002      	b.n	801228a <platformInit+0x30>
  }

  platformInitHardware();
 8012284:	f000 f8a8 	bl	80123d8 <platformInitHardware>
  return 0;
 8012288:	2300      	movs	r3, #0
}
 801228a:	4618      	mov	r0, r3
 801228c:	3710      	adds	r7, #16
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}

08012292 <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 8012292:	b580      	push	{r7, lr}
 8012294:	b086      	sub	sp, #24
 8012296:	af00      	add	r7, sp, #0
 8012298:	6078      	str	r0, [r7, #4]
 801229a:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	2b30      	cmp	r3, #48	@ 0x30
 80122a2:	d104      	bne.n	80122ae <platformParseDeviceTypeString+0x1c>
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	3301      	adds	r3, #1
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	2b3b      	cmp	r3, #59	@ 0x3b
 80122ac:	d001      	beq.n	80122b2 <platformParseDeviceTypeString+0x20>
    return 1;
 80122ae:	2301      	movs	r3, #1
 80122b0:	e034      	b.n	801231c <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 80122b2:	2302      	movs	r3, #2
 80122b4:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	3304      	adds	r3, #4
 80122ba:	60fb      	str	r3, [r7, #12]
  int end = 0;
 80122bc:	2300      	movs	r3, #0
 80122be:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 80122c0:	693b      	ldr	r3, [r7, #16]
 80122c2:	617b      	str	r3, [r7, #20]
 80122c4:	e00e      	b.n	80122e4 <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	687a      	ldr	r2, [r7, #4]
 80122ca:	4413      	add	r3, r2
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d00c      	beq.n	80122ec <platformParseDeviceTypeString+0x5a>
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	687a      	ldr	r2, [r7, #4]
 80122d6:	4413      	add	r3, r2
 80122d8:	781b      	ldrb	r3, [r3, #0]
 80122da:	2b3b      	cmp	r3, #59	@ 0x3b
 80122dc:	d006      	beq.n	80122ec <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	3301      	adds	r3, #1
 80122e2:	617b      	str	r3, [r7, #20]
 80122e4:	697a      	ldr	r2, [r7, #20]
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	429a      	cmp	r2, r3
 80122ea:	ddec      	ble.n	80122c6 <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 80122ec:	697a      	ldr	r2, [r7, #20]
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	429a      	cmp	r2, r3
 80122f2:	dd01      	ble.n	80122f8 <platformParseDeviceTypeString+0x66>
    return 1;
 80122f4:	2301      	movs	r3, #1
 80122f6:	e011      	b.n	801231c <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 80122f8:	697a      	ldr	r2, [r7, #20]
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	1ad3      	subs	r3, r2, r3
 80122fe:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	687a      	ldr	r2, [r7, #4]
 8012304:	4413      	add	r3, r2
 8012306:	68ba      	ldr	r2, [r7, #8]
 8012308:	4619      	mov	r1, r3
 801230a:	6838      	ldr	r0, [r7, #0]
 801230c:	f005 fb84 	bl	8017a18 <memcpy>
  deviceType[length] = '\0';
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	683a      	ldr	r2, [r7, #0]
 8012314:	4413      	add	r3, r2
 8012316:	2200      	movs	r2, #0
 8012318:	701a      	strb	r2, [r3, #0]
  return 0;
 801231a:	2300      	movs	r3, #0
}
 801231c:	4618      	mov	r0, r3
 801231e:	3718      	adds	r7, #24
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8012324:	b580      	push	{r7, lr}
 8012326:	b090      	sub	sp, #64	@ 0x40
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 801232e:	f107 0314 	add.w	r3, r7, #20
 8012332:	4618      	mov	r0, r3
 8012334:	f000 f866 	bl	8012404 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8012338:	f107 020c 	add.w	r2, r7, #12
 801233c:	f107 0314 	add.w	r3, r7, #20
 8012340:	4611      	mov	r1, r2
 8012342:	4618      	mov	r0, r3
 8012344:	f7ff ffa5 	bl	8012292 <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8012348:	2300      	movs	r3, #0
 801234a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801234c:	e01a      	b.n	8012384 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 801234e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012350:	4613      	mov	r3, r2
 8012352:	00db      	lsls	r3, r3, #3
 8012354:	4413      	add	r3, r2
 8012356:	009b      	lsls	r3, r3, #2
 8012358:	4413      	add	r3, r2
 801235a:	687a      	ldr	r2, [r7, #4]
 801235c:	4413      	add	r3, r2
 801235e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8012360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012362:	f107 020c 	add.w	r2, r7, #12
 8012366:	4611      	mov	r1, r2
 8012368:	4618      	mov	r0, r3
 801236a:	f7ed ff31 	bl	80001d0 <strcmp>
 801236e:	4603      	mov	r3, r0
 8012370:	2b00      	cmp	r3, #0
 8012372:	d104      	bne.n	801237e <platformInitConfiguration+0x5a>
      active_config = config;
 8012374:	4a08      	ldr	r2, [pc, #32]	@ (8012398 <platformInitConfiguration+0x74>)
 8012376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012378:	6013      	str	r3, [r2, #0]
      return 0;
 801237a:	2300      	movs	r3, #0
 801237c:	e007      	b.n	801238e <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 801237e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012380:	3301      	adds	r3, #1
 8012382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012384:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	429a      	cmp	r2, r3
 801238a:	dbe0      	blt.n	801234e <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 801238c:	2301      	movs	r3, #1
}
 801238e:	4618      	mov	r0, r3
 8012390:	3740      	adds	r7, #64	@ 0x40
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
 8012396:	bf00      	nop
 8012398:	2000a26c 	.word	0x2000a26c

0801239c <platformConfigGetSensorImplementation>:

const char* platformConfigGetDeviceTypeName() {
  return active_config->deviceTypeName;
}

SensorImplementation_t platformConfigGetSensorImplementation() {
 801239c:	b480      	push	{r7}
 801239e:	af00      	add	r7, sp, #0
  return active_config->sensorImplementation;
 80123a0:	4b04      	ldr	r3, [pc, #16]	@ (80123b4 <platformConfigGetSensorImplementation+0x18>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	46bd      	mov	sp, r7
 80123ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b0:	4770      	bx	lr
 80123b2:	bf00      	nop
 80123b4:	2000a26c 	.word	0x2000a26c

080123b8 <platformGetListOfConfigurations>:
//    .motorMap = motorMapCF21Brushless,
//  },
//#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 80123b8:	b480      	push	{r7}
 80123ba:	b083      	sub	sp, #12
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2201      	movs	r2, #1
 80123c4:	601a      	str	r2, [r3, #0]
  return configs;
 80123c6:	4b03      	ldr	r3, [pc, #12]	@ (80123d4 <platformGetListOfConfigurations+0x1c>)
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	370c      	adds	r7, #12
 80123cc:	46bd      	mov	sp, r7
 80123ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d2:	4770      	bx	lr
 80123d4:	20000140 	.word	0x20000140

080123d8 <platformInitHardware>:

void platformInitHardware() {
 80123d8:	b580      	push	{r7, lr}
 80123da:	af00      	add	r7, sp, #0
  //Low level init: Clock and Interrupt controller
  nvicInit();
 80123dc:	f7f7 fbe4 	bl	8009ba8 <nvicInit>

  //EXTI interrupts
//  extiInit();
}
 80123e0:	bf00      	nop
 80123e2:	bd80      	pop	{r7, pc}

080123e4 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;DG20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 80123e4:	b480      	push	{r7}
 80123e6:	b083      	sub	sp, #12
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 80123f2:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 80123f6:	015b      	lsls	r3, r3, #5
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	370c      	adds	r7, #12
 80123fc:	46bd      	mov	sp, r7
 80123fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012402:	4770      	bx	lr

08012404 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8012404:	b580      	push	{r7, lr}
 8012406:	b086      	sub	sp, #24
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  char* block = 0;
 801240c:	2300      	movs	r3, #0
 801240e:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8012410:	2300      	movs	r3, #0
 8012412:	613b      	str	r3, [r7, #16]
 8012414:	e00d      	b.n	8012432 <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 8012416:	6938      	ldr	r0, [r7, #16]
 8012418:	f7ff ffe4 	bl	80123e4 <getAddressOfOtpMemoryBlock>
 801241c:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d002      	beq.n	801242c <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	617b      	str	r3, [r7, #20]
      break;
 801242a:	e005      	b.n	8012438 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 801242c:	693b      	ldr	r3, [r7, #16]
 801242e:	3301      	adds	r3, #1
 8012430:	613b      	str	r3, [r7, #16]
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	2b0f      	cmp	r3, #15
 8012436:	ddee      	ble.n	8012416 <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d003      	beq.n	8012446 <platformGetDeviceTypeString+0x42>
 801243e:	697b      	ldr	r3, [r7, #20]
 8012440:	781b      	ldrb	r3, [r3, #0]
 8012442:	2bff      	cmp	r3, #255	@ 0xff
 8012444:	d101      	bne.n	801244a <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 8012446:	4b07      	ldr	r3, [pc, #28]	@ (8012464 <platformGetDeviceTypeString+0x60>)
 8012448:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 801244a:	2220      	movs	r2, #32
 801244c:	6979      	ldr	r1, [r7, #20]
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f005 faa4 	bl	801799c <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	3320      	adds	r3, #32
 8012458:	2200      	movs	r2, #0
 801245a:	701a      	strb	r2, [r3, #0]
}
 801245c:	bf00      	nop
 801245e:	3718      	adds	r7, #24
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}
 8012464:	0801a8a8 	.word	0x0801a8a8

08012468 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b086      	sub	sp, #24
 801246c:	af00      	add	r7, sp, #0
 801246e:	60f8      	str	r0, [r7, #12]
 8012470:	60b9      	str	r1, [r7, #8]
 8012472:	607a      	str	r2, [r7, #4]
        __asm volatile
 8012474:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8012478:	f383 8811 	msr	BASEPRI, r3
 801247c:	f3bf 8f6f 	isb	sy
 8012480:	f3bf 8f4f 	dsb	sy
 8012484:	617b      	str	r3, [r7, #20]
    }
 8012486:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 8012488:	6879      	ldr	r1, [r7, #4]
 801248a:	68b8      	ldr	r0, [r7, #8]
 801248c:	f000 f804 	bl	8012498 <storeAssertFileData>
//  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
//  {
//    // Only reset if debugger is not connected
//    NVIC_SystemReset();
//  }
}
 8012490:	bf00      	nop
 8012492:	3718      	adds	r7, #24
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8012498:	b480      	push	{r7}
 801249a:	b083      	sub	sp, #12
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
 80124a0:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 80124a2:	4b0b      	ldr	r3, [pc, #44]	@ (80124d0 <storeAssertFileData+0x38>)
 80124a4:	4a0b      	ldr	r2, [pc, #44]	@ (80124d4 <storeAssertFileData+0x3c>)
 80124a6:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 80124a8:	4b09      	ldr	r3, [pc, #36]	@ (80124d0 <storeAssertFileData+0x38>)
 80124aa:	2201      	movs	r2, #1
 80124ac:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 80124ae:	4b08      	ldr	r3, [pc, #32]	@ (80124d0 <storeAssertFileData+0x38>)
 80124b0:	791a      	ldrb	r2, [r3, #4]
 80124b2:	4b09      	ldr	r3, [pc, #36]	@ (80124d8 <storeAssertFileData+0x40>)
 80124b4:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 80124b6:	4a06      	ldr	r2, [pc, #24]	@ (80124d0 <storeAssertFileData+0x38>)
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 80124bc:	4a04      	ldr	r2, [pc, #16]	@ (80124d0 <storeAssertFileData+0x38>)
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	60d3      	str	r3, [r2, #12]
}
 80124c2:	bf00      	nop
 80124c4:	370c      	adds	r7, #12
 80124c6:	46bd      	mov	sp, r7
 80124c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124cc:	4770      	bx	lr
 80124ce:	bf00      	nop
 80124d0:	200001d0 	.word	0x200001d0
 80124d4:	2f8a001f 	.word	0x2f8a001f
 80124d8:	2000a270 	.word	0x2000a270

080124dc <lpf2pInit>:

/**
 * 2-Pole low pass filter
 */
void lpf2pInit(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	60f8      	str	r0, [r7, #12]
 80124e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80124e8:	edc7 0a01 	vstr	s1, [r7, #4]
  if (lpfData == NULL || cutoff_freq <= 0.0f) {
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d00e      	beq.n	8012510 <lpf2pInit+0x34>
 80124f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80124f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80124fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fe:	d907      	bls.n	8012510 <lpf2pInit+0x34>
    return;
  }

  lpf2pSetCutoffFreq(lpfData, sample_freq, cutoff_freq);
 8012500:	edd7 0a01 	vldr	s1, [r7, #4]
 8012504:	ed97 0a02 	vldr	s0, [r7, #8]
 8012508:	68f8      	ldr	r0, [r7, #12]
 801250a:	f000 f805 	bl	8012518 <lpf2pSetCutoffFreq>
 801250e:	e000      	b.n	8012512 <lpf2pInit+0x36>
    return;
 8012510:	bf00      	nop
}
 8012512:	3710      	adds	r7, #16
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <lpf2pSetCutoffFreq>:

void lpf2pSetCutoffFreq(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b088      	sub	sp, #32
 801251c:	af00      	add	r7, sp, #0
 801251e:	60f8      	str	r0, [r7, #12]
 8012520:	ed87 0a02 	vstr	s0, [r7, #8]
 8012524:	edc7 0a01 	vstr	s1, [r7, #4]
  float fr = sample_freq/cutoff_freq;
 8012528:	edd7 6a02 	vldr	s13, [r7, #8]
 801252c:	ed97 7a01 	vldr	s14, [r7, #4]
 8012530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012534:	edc7 7a07 	vstr	s15, [r7, #28]
  float ohm = tanf(M_PI_F/fr);
 8012538:	eddf 6a34 	vldr	s13, [pc, #208]	@ 801260c <lpf2pSetCutoffFreq+0xf4>
 801253c:	edd7 7a07 	vldr	s15, [r7, #28]
 8012540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012544:	eeb0 0a47 	vmov.f32	s0, s14
 8012548:	f005 fc3a 	bl	8017dc0 <tanf>
 801254c:	ed87 0a06 	vstr	s0, [r7, #24]
  float c = 1.0f+2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm;
 8012550:	edd7 7a06 	vldr	s15, [r7, #24]
 8012554:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8012610 <lpf2pSetCutoffFreq+0xf8>
 8012558:	ee67 7a87 	vmul.f32	s15, s15, s14
 801255c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012560:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012564:	edd7 7a06 	vldr	s15, [r7, #24]
 8012568:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801256c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012570:	edc7 7a05 	vstr	s15, [r7, #20]
  lpfData->b0 = ohm*ohm/c;
 8012574:	edd7 7a06 	vldr	s15, [r7, #24]
 8012578:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801257c:	ed97 7a05 	vldr	s14, [r7, #20]
 8012580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	edc3 7a02 	vstr	s15, [r3, #8]
  lpfData->b1 = 2.0f*lpfData->b0;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012590:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	edc3 7a03 	vstr	s15, [r3, #12]
  lpfData->b2 = lpfData->b0;
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	689a      	ldr	r2, [r3, #8]
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	611a      	str	r2, [r3, #16]
  lpfData->a1 = 2.0f*(ohm*ohm-1.0f)/c;
 80125a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80125a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80125aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80125ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80125b2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80125b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80125ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	edc3 7a00 	vstr	s15, [r3]
  lpfData->a2 = (1.0f-2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm)/c;
 80125c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80125c8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8012610 <lpf2pSetCutoffFreq+0xf8>
 80125cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80125d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80125d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80125dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80125e0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80125e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80125e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	edc3 7a01 	vstr	s15, [r3, #4]
  lpfData->delay_element_1 = 0.0f;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	f04f 0200 	mov.w	r2, #0
 80125f8:	615a      	str	r2, [r3, #20]
  lpfData->delay_element_2 = 0.0f;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	f04f 0200 	mov.w	r2, #0
 8012600:	619a      	str	r2, [r3, #24]
}
 8012602:	bf00      	nop
 8012604:	3720      	adds	r7, #32
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
 801260a:	bf00      	nop
 801260c:	40490fdb 	.word	0x40490fdb
 8012610:	3fb504f3 	.word	0x3fb504f3

08012614 <lpf2pApply>:

float lpf2pApply(lpf2pData* lpfData, float sample)
{
 8012614:	b480      	push	{r7}
 8012616:	b085      	sub	sp, #20
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
 801261c:	ed87 0a00 	vstr	s0, [r7]
  float delay_element_0 = sample - lpfData->delay_element_1 * lpfData->a1 - lpfData->delay_element_2 * lpfData->a2;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	ed93 7a05 	vldr	s14, [r3, #20]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	edd3 7a00 	vldr	s15, [r3]
 801262c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012630:	ed97 7a00 	vldr	s14, [r7]
 8012634:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	edd3 6a06 	vldr	s13, [r3, #24]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	edd3 7a01 	vldr	s15, [r3, #4]
 8012644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012648:	ee77 7a67 	vsub.f32	s15, s14, s15
 801264c:	edc7 7a03 	vstr	s15, [r7, #12]
  if (!isfinite(delay_element_0)) {
 8012650:	edd7 7a03 	vldr	s15, [r7, #12]
 8012654:	eef0 7ae7 	vabs.f32	s15, s15
 8012658:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80126c8 <lpf2pApply+0xb4>
 801265c:	eef4 7a47 	vcmp.f32	s15, s14
 8012660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012664:	d901      	bls.n	801266a <lpf2pApply+0x56>
    // don't allow bad values to propigate via the filter
    delay_element_0 = sample;
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	60fb      	str	r3, [r7, #12]
  }

  float output = delay_element_0 * lpfData->b0 + lpfData->delay_element_1 * lpfData->b1 + lpfData->delay_element_2 * lpfData->b2;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	ed93 7a02 	vldr	s14, [r3, #8]
 8012670:	edd7 7a03 	vldr	s15, [r7, #12]
 8012674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	edd3 6a05 	vldr	s13, [r3, #20]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	edd3 7a03 	vldr	s15, [r3, #12]
 8012684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012688:	ee37 7a27 	vadd.f32	s14, s14, s15
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	edd3 6a06 	vldr	s13, [r3, #24]
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	edd3 7a04 	vldr	s15, [r3, #16]
 8012698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801269c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80126a0:	edc7 7a02 	vstr	s15, [r7, #8]

  lpfData->delay_element_2 = lpfData->delay_element_1;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	695a      	ldr	r2, [r3, #20]
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	619a      	str	r2, [r3, #24]
  lpfData->delay_element_1 = delay_element_0;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	68fa      	ldr	r2, [r7, #12]
 80126b0:	615a      	str	r2, [r3, #20]
  return output;
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	ee07 3a90 	vmov	s15, r3
}
 80126b8:	eeb0 0a67 	vmov.f32	s0, s15
 80126bc:	3714      	adds	r7, #20
 80126be:	46bd      	mov	sp, r7
 80126c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c4:	4770      	bx	lr
 80126c6:	bf00      	nop
 80126c8:	7f7fffff 	.word	0x7f7fffff

080126cc <deadband>:
{
  return fminf(maxVal, fmaxf(minVal,value));
}

float deadband(float value, const float threshold)
{
 80126cc:	b480      	push	{r7}
 80126ce:	b083      	sub	sp, #12
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80126d6:	edc7 0a00 	vstr	s1, [r7]
  if (fabsf(value) < threshold)
 80126da:	edd7 7a01 	vldr	s15, [r7, #4]
 80126de:	eef0 7ae7 	vabs.f32	s15, s15
 80126e2:	ed97 7a00 	vldr	s14, [r7]
 80126e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ee:	dd03      	ble.n	80126f8 <deadband+0x2c>
  {
    value = 0;
 80126f0:	f04f 0300 	mov.w	r3, #0
 80126f4:	607b      	str	r3, [r7, #4]
 80126f6:	e01e      	b.n	8012736 <deadband+0x6a>
  }
  else if (value > 0)
 80126f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80126fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012704:	dd08      	ble.n	8012718 <deadband+0x4c>
  {
    value -= threshold;
 8012706:	ed97 7a01 	vldr	s14, [r7, #4]
 801270a:	edd7 7a00 	vldr	s15, [r7]
 801270e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012712:	edc7 7a01 	vstr	s15, [r7, #4]
 8012716:	e00e      	b.n	8012736 <deadband+0x6a>
  }
  else if (value < 0)
 8012718:	edd7 7a01 	vldr	s15, [r7, #4]
 801271c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012724:	d507      	bpl.n	8012736 <deadband+0x6a>
  {
    value += threshold;
 8012726:	ed97 7a01 	vldr	s14, [r7, #4]
 801272a:	edd7 7a00 	vldr	s15, [r7]
 801272e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012732:	edc7 7a01 	vstr	s15, [r7, #4]
  }
  return value;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	ee07 3a90 	vmov	s15, r3
}
 801273c:	eeb0 0a67 	vmov.f32	s0, s15
 8012740:	370c      	adds	r7, #12
 8012742:	46bd      	mov	sp, r7
 8012744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012748:	4770      	bx	lr

0801274a <rateSupervisorInit>:
 * rateSupervisor.c - functionality to supervise the rate of modules
 */

#include "rateSupervisor.h"

void rateSupervisorInit(rateSupervisor_t* context, const uint32_t osTimeMs, const uint32_t evaluationIntervalMs, const uint32_t minCount, const uint32_t maxCount, const uint8_t skip) {
 801274a:	b480      	push	{r7}
 801274c:	b085      	sub	sp, #20
 801274e:	af00      	add	r7, sp, #0
 8012750:	60f8      	str	r0, [r7, #12]
 8012752:	60b9      	str	r1, [r7, #8]
 8012754:	607a      	str	r2, [r7, #4]
 8012756:	603b      	str	r3, [r7, #0]
    context->count = 0;
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	2200      	movs	r2, #0
 801275c:	601a      	str	r2, [r3, #0]
    context->evaluationIntervalMs = evaluationIntervalMs;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	611a      	str	r2, [r3, #16]
    context->expectedMin = minCount;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	683a      	ldr	r2, [r7, #0]
 8012768:	605a      	str	r2, [r3, #4]
    context->expectedMax = maxCount;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	69ba      	ldr	r2, [r7, #24]
 801276e:	609a      	str	r2, [r3, #8]
    context->nextEvaluationTimeMs = osTimeMs + evaluationIntervalMs;
 8012770:	68ba      	ldr	r2, [r7, #8]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	441a      	add	r2, r3
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	60da      	str	r2, [r3, #12]
    context->latestCount = 0;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	2200      	movs	r2, #0
 801277e:	615a      	str	r2, [r3, #20]
    context->skip = skip;
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	7f3a      	ldrb	r2, [r7, #28]
 8012784:	761a      	strb	r2, [r3, #24]
}
 8012786:	bf00      	nop
 8012788:	3714      	adds	r7, #20
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr

08012792 <rateSupervisorValidate>:

bool rateSupervisorValidate(rateSupervisor_t* context, const uint32_t osTimeMs) {
 8012792:	b480      	push	{r7}
 8012794:	b085      	sub	sp, #20
 8012796:	af00      	add	r7, sp, #0
 8012798:	6078      	str	r0, [r7, #4]
 801279a:	6039      	str	r1, [r7, #0]
    bool result = true;
 801279c:	2301      	movs	r3, #1
 801279e:	73fb      	strb	r3, [r7, #15]

    context->count += 1;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	1c5a      	adds	r2, r3, #1
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	601a      	str	r2, [r3, #0]
    if (osTimeMs > context->nextEvaluationTimeMs) {
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	68db      	ldr	r3, [r3, #12]
 80127ae:	683a      	ldr	r2, [r7, #0]
 80127b0:	429a      	cmp	r2, r3
 80127b2:	d927      	bls.n	8012804 <rateSupervisorValidate+0x72>
        uint32_t actual = context->count;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	60bb      	str	r3, [r7, #8]
        if (actual < context->expectedMin || actual > context->expectedMax) {
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	68ba      	ldr	r2, [r7, #8]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d304      	bcc.n	80127ce <rateSupervisorValidate+0x3c>
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	689b      	ldr	r3, [r3, #8]
 80127c8:	68ba      	ldr	r2, [r7, #8]
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d901      	bls.n	80127d2 <rateSupervisorValidate+0x40>
            result = false;
 80127ce:	2300      	movs	r3, #0
 80127d0:	73fb      	strb	r3, [r7, #15]
        }

        context->latestCount = context->count;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681a      	ldr	r2, [r3, #0]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	615a      	str	r2, [r3, #20]
        context->count = 0;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2200      	movs	r2, #0
 80127de:	601a      	str	r2, [r3, #0]
        context->nextEvaluationTimeMs = osTimeMs + context->evaluationIntervalMs;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	691a      	ldr	r2, [r3, #16]
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	441a      	add	r2, r3
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	60da      	str	r2, [r3, #12]

        if (context->skip > 0) {
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	7e1b      	ldrb	r3, [r3, #24]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d007      	beq.n	8012804 <rateSupervisorValidate+0x72>
            result = true;
 80127f4:	2301      	movs	r3, #1
 80127f6:	73fb      	strb	r3, [r7, #15]
            context->skip -= 1;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	7e1b      	ldrb	r3, [r3, #24]
 80127fc:	3b01      	subs	r3, #1
 80127fe:	b2da      	uxtb	r2, r3
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	761a      	strb	r2, [r3, #24]
        }
    }

    return result;
 8012804:	7bfb      	ldrb	r3, [r7, #15]
}
 8012806:	4618      	mov	r0, r3
 8012808:	3714      	adds	r7, #20
 801280a:	46bd      	mov	sp, r7
 801280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012810:	4770      	bx	lr

08012812 <VL53L1_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8012812:	b580      	push	{r7, lr}
 8012814:	b084      	sub	sp, #16
 8012816:	af00      	add	r7, sp, #0
 8012818:	6078      	str	r0, [r7, #4]
 801281a:	460b      	mov	r3, r1
 801281c:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801281e:	2300      	movs	r3, #0
 8012820:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8012822:	78fb      	ldrb	r3, [r7, #3]
 8012824:	461a      	mov	r2, r3
 8012826:	2101      	movs	r1, #1
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f7f7 fd4e 	bl	800a2ca <VL53L1_WrByte>
 801282e:	4603      	mov	r3, r0
 8012830:	73fb      	strb	r3, [r7, #15]
		DeviceAddress);

	LOG_FUNCTION_END(Status);
	return Status;
 8012832:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012836:	4618      	mov	r0, r3
 8012838:	3710      	adds	r7, #16
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}

0801283e <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 801283e:	b580      	push	{r7, lr}
 8012840:	b084      	sub	sp, #16
 8012842:	af00      	add	r7, sp, #0
 8012844:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8012846:	2300      	movs	r3, #0
 8012848:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* 2V8 power mode selection codex 447463 */
#ifdef USE_I2C_2V8
	Status = VL53L1_RdByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG, &i);
 801284a:	f107 030e 	add.w	r3, r7, #14
 801284e:	461a      	mov	r2, r3
 8012850:	212e      	movs	r1, #46	@ 0x2e
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f7f7 fd5e 	bl	800a314 <VL53L1_RdByte>
 8012858:	4603      	mov	r3, r0
 801285a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L1_ERROR_NONE) {
 801285c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d10c      	bne.n	801287e <VL53L1_DataInit+0x40>
		i = (i & 0xfe) | 0x01;
 8012864:	7bbb      	ldrb	r3, [r7, #14]
 8012866:	f043 0301 	orr.w	r3, r3, #1
 801286a:	b2db      	uxtb	r3, r3
 801286c:	73bb      	strb	r3, [r7, #14]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
 801286e:	7bbb      	ldrb	r3, [r7, #14]
 8012870:	461a      	mov	r2, r3
 8012872:	212e      	movs	r1, #46	@ 0x2e
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f7f7 fd28 	bl	800a2ca <VL53L1_WrByte>
 801287a:	4603      	mov	r3, r0
 801287c:	73fb      	strb	r3, [r7, #15]
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 801287e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d105      	bne.n	8012892 <VL53L1_DataInit+0x54>
		Status = VL53L1_data_init(Dev, 1);
 8012886:	2101      	movs	r1, #1
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f000 fe77 	bl	801357c <VL53L1_data_init>
 801288e:	4603      	mov	r3, r0
 8012890:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8012892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d107      	bne.n	80128aa <VL53L1_DataInit+0x6c>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2201      	movs	r2, #1
 801289e:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378
		PALDevDataSet(Dev, CurrentParameters.PresetMode,
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2208      	movs	r2, #8
 80128a6:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80128aa:	2300      	movs	r3, #0
 80128ac:	73bb      	strb	r3, [r7, #14]
 80128ae:	e012      	b.n	80128d6 <VL53L1_DataInit+0x98>
		if (Status == VL53L1_ERROR_NONE)
 80128b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d112      	bne.n	80128de <VL53L1_DataInit+0xa0>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80128b8:	7bbb      	ldrb	r3, [r7, #14]
 80128ba:	2201      	movs	r2, #1
 80128bc:	4619      	mov	r1, r3
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f000 fb04 	bl	8012ecc <VL53L1_SetLimitCheckEnable>
 80128c4:	4603      	mov	r3, r0
 80128c6:	461a      	mov	r2, r3
 80128c8:	7bfb      	ldrb	r3, [r7, #15]
 80128ca:	4313      	orrs	r3, r2
 80128cc:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80128ce:	7bbb      	ldrb	r3, [r7, #14]
 80128d0:	3301      	adds	r3, #1
 80128d2:	b2db      	uxtb	r3, r3
 80128d4:	73bb      	strb	r3, [r7, #14]
 80128d6:	7bbb      	ldrb	r3, [r7, #14]
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d9e9      	bls.n	80128b0 <VL53L1_DataInit+0x72>
 80128dc:	e000      	b.n	80128e0 <VL53L1_DataInit+0xa2>
		else
			break;
 80128de:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 80128e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d107      	bne.n	80128f8 <VL53L1_DataInit+0xba>
		Status = VL53L1_SetLimitCheckValue(Dev,
 80128e8:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 80128ec:	2100      	movs	r1, #0
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f000 fb4d 	bl	8012f8e <VL53L1_SetLimitCheckValue>
 80128f4:	4603      	mov	r3, r0
 80128f6:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 80128f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d107      	bne.n	8012910 <VL53L1_DataInit+0xd2>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8012900:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8012904:	2101      	movs	r1, #1
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f000 fb41 	bl	8012f8e <VL53L1_SetLimitCheckValue>
 801290c:	4603      	mov	r3, r0
 801290e:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8012910:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012914:	4618      	mov	r0, r3
 8012916:	3710      	adds	r7, #16
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b084      	sub	sp, #16
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8012924:	2300      	movs	r3, #0
 8012926:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	PALDevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2203      	movs	r2, #3
 801292c:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8012930:	2320      	movs	r3, #32
 8012932:	73bb      	strb	r3, [r7, #14]
	PALDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	7bba      	ldrb	r2, [r7, #14]
 8012938:	709a      	strb	r2, [r3, #2]

	PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2203      	movs	r2, #3
 801293e:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
			VL53L1_DISTANCEMODE_LONG);

	PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2203      	movs	r2, #3
 8012946:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
			VL53L1_DISTANCEMODE_LONG);

	PALDevDataSet(Dev, CurrentParameters.DistanceMode,
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2203      	movs	r2, #3
 801294e:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8012952:	2108      	movs	r1, #8
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f000 f8d8 	bl	8012b0a <VL53L1_SetPresetMode>
 801295a:	4603      	mov	r3, r0
 801295c:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 801295e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012962:	4618      	mov	r0, r3
 8012964:	3710      	adds	r7, #16
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
	...

0801296c <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 801296c:	b480      	push	{r7}
 801296e:	b087      	sub	sp, #28
 8012970:	af00      	add	r7, sp, #0
 8012972:	4603      	mov	r3, r0
 8012974:	603a      	str	r2, [r7, #0]
 8012976:	71fb      	strb	r3, [r7, #7]
 8012978:	460b      	mov	r3, r1
 801297a:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801297c:	2300      	movs	r3, #0
 801297e:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8012980:	4a2b      	ldr	r2, [pc, #172]	@ (8012a30 <ComputeDevicePresetMode+0xc4>)
 8012982:	f107 0310 	add.w	r3, r7, #16
 8012986:	6812      	ldr	r2, [r2, #0]
 8012988:	4611      	mov	r1, r2
 801298a:	8019      	strh	r1, [r3, #0]
 801298c:	3302      	adds	r3, #2
 801298e:	0c12      	lsrs	r2, r2, #16
 8012990:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8012992:	4a28      	ldr	r2, [pc, #160]	@ (8012a34 <ComputeDevicePresetMode+0xc8>)
 8012994:	f107 030c 	add.w	r3, r7, #12
 8012998:	6812      	ldr	r2, [r2, #0]
 801299a:	4611      	mov	r1, r2
 801299c:	8019      	strh	r1, [r3, #0]
 801299e:	3302      	adds	r3, #2
 80129a0:	0c12      	lsrs	r2, r2, #16
 80129a2:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80129a4:	4a24      	ldr	r2, [pc, #144]	@ (8012a38 <ComputeDevicePresetMode+0xcc>)
 80129a6:	f107 0308 	add.w	r3, r7, #8
 80129aa:	6812      	ldr	r2, [r2, #0]
 80129ac:	4611      	mov	r1, r2
 80129ae:	8019      	strh	r1, [r3, #0]
 80129b0:	3302      	adds	r3, #2
 80129b2:	0c12      	lsrs	r2, r2, #16
 80129b4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	2201      	movs	r2, #1
 80129ba:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 80129bc:	79bb      	ldrb	r3, [r7, #6]
 80129be:	2b01      	cmp	r3, #1
 80129c0:	d002      	beq.n	80129c8 <ComputeDevicePresetMode+0x5c>
 80129c2:	2b02      	cmp	r3, #2
 80129c4:	d003      	beq.n	80129ce <ComputeDevicePresetMode+0x62>
 80129c6:	e005      	b.n	80129d4 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80129c8:	2300      	movs	r3, #0
 80129ca:	75bb      	strb	r3, [r7, #22]
		break;
 80129cc:	e004      	b.n	80129d8 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80129ce:	2301      	movs	r3, #1
 80129d0:	75bb      	strb	r3, [r7, #22]
		break;
 80129d2:	e001      	b.n	80129d8 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 80129d4:	2302      	movs	r3, #2
 80129d6:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 80129d8:	79fb      	ldrb	r3, [r7, #7]
 80129da:	2b08      	cmp	r3, #8
 80129dc:	d015      	beq.n	8012a0a <ComputeDevicePresetMode+0x9e>
 80129de:	2b08      	cmp	r3, #8
 80129e0:	dc1b      	bgt.n	8012a1a <ComputeDevicePresetMode+0xae>
 80129e2:	2b03      	cmp	r3, #3
 80129e4:	d009      	beq.n	80129fa <ComputeDevicePresetMode+0x8e>
 80129e6:	2b04      	cmp	r3, #4
 80129e8:	d117      	bne.n	8012a1a <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 80129ea:	7dbb      	ldrb	r3, [r7, #22]
 80129ec:	3318      	adds	r3, #24
 80129ee:	443b      	add	r3, r7
 80129f0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	701a      	strb	r2, [r3, #0]
		break;
 80129f8:	e011      	b.n	8012a1e <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 80129fa:	7dbb      	ldrb	r3, [r7, #22]
 80129fc:	3318      	adds	r3, #24
 80129fe:	443b      	add	r3, r7
 8012a00:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	701a      	strb	r2, [r3, #0]
		break;
 8012a08:	e009      	b.n	8012a1e <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8012a0a:	7dbb      	ldrb	r3, [r7, #22]
 8012a0c:	3318      	adds	r3, #24
 8012a0e:	443b      	add	r3, r7
 8012a10:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	701a      	strb	r2, [r3, #0]
		break;
 8012a18:	e001      	b.n	8012a1e <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8012a1a:	23f8      	movs	r3, #248	@ 0xf8
 8012a1c:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8012a1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	371c      	adds	r7, #28
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr
 8012a2e:	bf00      	nop
 8012a30:	0801a8dc 	.word	0x0801a8dc
 8012a34:	0801a8e0 	.word	0x0801a8e0
 8012a38:	0801a8e4 	.word	0x0801a8e4

08012a3c <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8012a3c:	b5b0      	push	{r4, r5, r7, lr}
 8012a3e:	b08e      	sub	sp, #56	@ 0x38
 8012a40:	af04      	add	r7, sp, #16
 8012a42:	60f8      	str	r0, [r7, #12]
 8012a44:	607b      	str	r3, [r7, #4]
 8012a46:	460b      	mov	r3, r1
 8012a48:	72fb      	strb	r3, [r7, #11]
 8012a4a:	4613      	mov	r3, r2
 8012a4c:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8012a54:	7afb      	ldrb	r3, [r7, #11]
 8012a56:	2b03      	cmp	r3, #3
 8012a58:	d002      	beq.n	8012a60 <SetPresetMode+0x24>
 8012a5a:	7afb      	ldrb	r3, [r7, #11]
 8012a5c:	2b08      	cmp	r3, #8
 8012a5e:	d103      	bne.n	8012a68 <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8012a60:	2340      	movs	r3, #64	@ 0x40
 8012a62:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012a66:	e002      	b.n	8012a6e <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8012a68:	2320      	movs	r3, #32
 8012a6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8012a6e:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 8012a72:	7ab9      	ldrb	r1, [r7, #10]
 8012a74:	7afb      	ldrb	r3, [r7, #11]
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7ff ff78 	bl	801296c <ComputeDevicePresetMode>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8012a82:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d112      	bne.n	8012ab0 <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8012a8a:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8012a8e:	f107 001c 	add.w	r0, r7, #28
 8012a92:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8012a96:	f107 0314 	add.w	r3, r7, #20
 8012a9a:	9301      	str	r3, [sp, #4]
 8012a9c:	f107 0318 	add.w	r3, r7, #24
 8012aa0:	9300      	str	r3, [sp, #0]
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	68f8      	ldr	r0, [r7, #12]
 8012aa6:	f001 f801 	bl	8013aac <VL53L1_get_preset_mode_timing_cfg>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8012ab0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d112      	bne.n	8012ade <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 8012ab8:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 8012abc:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 8012abe:	69fd      	ldr	r5, [r7, #28]
 8012ac0:	69bb      	ldr	r3, [r7, #24]
 8012ac2:	697a      	ldr	r2, [r7, #20]
 8012ac4:	6879      	ldr	r1, [r7, #4]
 8012ac6:	9102      	str	r1, [sp, #8]
 8012ac8:	9201      	str	r2, [sp, #4]
 8012aca:	9300      	str	r3, [sp, #0]
 8012acc:	462b      	mov	r3, r5
 8012ace:	4622      	mov	r2, r4
 8012ad0:	4601      	mov	r1, r0
 8012ad2:	68f8      	ldr	r0, [r7, #12]
 8012ad4:	f001 f894 	bl	8013c00 <VL53L1_set_preset_mode>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8012ade:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d103      	bne.n	8012aee <SetPresetMode+0xb2>
		PALDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8012aec:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 8012aee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d103      	bne.n	8012afe <SetPresetMode+0xc2>
		PALDevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	7afa      	ldrb	r2, [r7, #11]
 8012afa:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8012afe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	3728      	adds	r7, #40	@ 0x28
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bdb0      	pop	{r4, r5, r7, pc}

08012b0a <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8012b0a:	b580      	push	{r7, lr}
 8012b0c:	b084      	sub	sp, #16
 8012b0e:	af00      	add	r7, sp, #0
 8012b10:	6078      	str	r0, [r7, #4]
 8012b12:	460b      	mov	r3, r1
 8012b14:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8012b16:	2300      	movs	r3, #0
 8012b18:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8012b1a:	2303      	movs	r3, #3
 8012b1c:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 8012b1e:	7bba      	ldrb	r2, [r7, #14]
 8012b20:	78f9      	ldrb	r1, [r7, #3]
 8012b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f7ff ff88 	bl	8012a3c <SetPresetMode>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8012b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d11f      	bne.n	8012b78 <VL53L1_SetPresetMode+0x6e>
		PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	7bba      	ldrb	r2, [r7, #14]
 8012b3c:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
				DistanceMode);

		PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	7bba      	ldrb	r2, [r7, #14]
 8012b44:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8012b48:	78fb      	ldrb	r3, [r7, #3]
 8012b4a:	2b04      	cmp	r3, #4
 8012b4c:	d005      	beq.n	8012b5a <VL53L1_SetPresetMode+0x50>
 8012b4e:	78fb      	ldrb	r3, [r7, #3]
 8012b50:	2b03      	cmp	r3, #3
 8012b52:	d002      	beq.n	8012b5a <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8012b54:	78fb      	ldrb	r3, [r7, #3]
 8012b56:	2b08      	cmp	r3, #8
 8012b58:	d107      	bne.n	8012b6a <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8012b5a:	f24a 0128 	movw	r1, #41000	@ 0xa028
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f000 f8a2 	bl	8012ca8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8012b64:	4603      	mov	r3, r0
 8012b66:	73fb      	strb	r3, [r7, #15]
 8012b68:	e006      	b.n	8012b78 <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8012b6a:	f248 2135 	movw	r1, #33333	@ 0x8235
 8012b6e:	6878      	ldr	r0, [r7, #4]
 8012b70:	f000 f89a 	bl	8012ca8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8012b74:	4603      	mov	r3, r0
 8012b76:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8012b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d106      	bne.n	8012b8e <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8012b80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f000 f965 	bl	8012e54 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8012b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3710      	adds	r7, #16
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}

08012b9a <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8012b9a:	b580      	push	{r7, lr}
 8012b9c:	b088      	sub	sp, #32
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
 8012ba2:	460b      	mov	r3, r1
 8012ba4:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	77fb      	strb	r3, [r7, #31]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = PALDevDataGet(Dev, CurrentParameters.PresetMode);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8012bb0:	777b      	strb	r3, [r7, #29]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8012bb2:	78fb      	ldrb	r3, [r7, #3]
 8012bb4:	2b01      	cmp	r3, #1
 8012bb6:	d008      	beq.n	8012bca <VL53L1_SetDistanceMode+0x30>
 8012bb8:	78fb      	ldrb	r3, [r7, #3]
 8012bba:	2b02      	cmp	r3, #2
 8012bbc:	d005      	beq.n	8012bca <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8012bbe:	78fb      	ldrb	r3, [r7, #3]
 8012bc0:	2b03      	cmp	r3, #3
 8012bc2:	d002      	beq.n	8012bca <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8012bc4:	f06f 0303 	mvn.w	r3, #3
 8012bc8:	e069      	b.n	8012c9e <VL53L1_SetDistanceMode+0x104>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 8012bca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d10a      	bne.n	8012be8 <VL53L1_SetDistanceMode+0x4e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 8012bd2:	78fb      	ldrb	r3, [r7, #3]
 8012bd4:	2b01      	cmp	r3, #1
 8012bd6:	d002      	beq.n	8012bde <VL53L1_SetDistanceMode+0x44>
 8012bd8:	78fb      	ldrb	r3, [r7, #3]
 8012bda:	2b02      	cmp	r3, #2
 8012bdc:	d102      	bne.n	8012be4 <VL53L1_SetDistanceMode+0x4a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 8012bde:	78fb      	ldrb	r3, [r7, #3]
 8012be0:	77bb      	strb	r3, [r7, #30]
 8012be2:	e001      	b.n	8012be8 <VL53L1_SetDistanceMode+0x4e>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8012be4:	2303      	movs	r3, #3
 8012be6:	77bb      	strb	r3, [r7, #30]
	}

	if (Status == VL53L1_ERROR_NONE)
 8012be8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d107      	bne.n	8012c00 <VL53L1_SetDistanceMode+0x66>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8012bf0:	f107 0308 	add.w	r3, r7, #8
 8012bf4:	4619      	mov	r1, r3
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f000 ff01 	bl	80139fe <VL53L1_get_user_zone>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  PALDevDataGet(Dev,
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	695b      	ldr	r3, [r3, #20]
 8012c04:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8012c06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d10a      	bne.n	8012c24 <VL53L1_SetDistanceMode+0x8a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8012c0e:	f107 0314 	add.w	r3, r7, #20
 8012c12:	f107 0210 	add.w	r2, r7, #16
 8012c16:	f107 010c 	add.w	r1, r7, #12
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f000 fe2c 	bl	8013878 <VL53L1_get_timeouts_us>
 8012c20:	4603      	mov	r3, r0
 8012c22:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8012c24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d107      	bne.n	8012c3c <VL53L1_SetDistanceMode+0xa2>
		Status = SetPresetMode(Dev,
 8012c2c:	7fba      	ldrb	r2, [r7, #30]
 8012c2e:	7f79      	ldrb	r1, [r7, #29]
 8012c30:	69bb      	ldr	r3, [r7, #24]
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f7ff ff02 	bl	8012a3c <SetPresetMode>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8012c3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d10b      	bne.n	8012c5c <VL53L1_SetDistanceMode+0xc2>
		PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	7fba      	ldrb	r2, [r7, #30]
 8012c48:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
				InternalDistanceMode);
		PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	7fba      	ldrb	r2, [r7, #30]
 8012c50:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
				InternalDistanceMode);
		PALDevDataSet(Dev, CurrentParameters.DistanceMode,
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	78fa      	ldrb	r2, [r7, #3]
 8012c58:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8012c5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d10e      	bne.n	8012c82 <VL53L1_SetDistanceMode+0xe8>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8012c64:	68f9      	ldr	r1, [r7, #12]
 8012c66:	693a      	ldr	r2, [r7, #16]
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f000 fdcc 	bl	8013808 <VL53L1_set_timeouts_us>
 8012c70:	4603      	mov	r3, r0
 8012c72:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8012c74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d102      	bne.n	8012c82 <VL53L1_SetDistanceMode+0xe8>
			PALDevDataSet(Dev, LLData.range_config_timeout_us,
 8012c7c:	697a      	ldr	r2, [r7, #20]
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8012c82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d107      	bne.n	8012c9a <VL53L1_SetDistanceMode+0x100>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8012c8a:	f107 0308 	add.w	r3, r7, #8
 8012c8e:	4619      	mov	r1, r3
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f000 fe91 	bl	80139b8 <VL53L1_set_user_zone>
 8012c96:	4603      	mov	r3, r0
 8012c98:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8012c9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3720      	adds	r7, #32
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd80      	pop	{r7, pc}
	...

08012ca8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b08e      	sub	sp, #56	@ 0x38
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
 8012cb0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8012cb8:	4b64      	ldr	r3, [pc, #400]	@ (8012e4c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 8012cba:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_LLDriverData_t   *pLLData;

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	4a64      	ldr	r2, [pc, #400]	@ (8012e50 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a8>)
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d902      	bls.n	8012cca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8012cc4:	23fc      	movs	r3, #252	@ 0xfc
 8012cc6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (Status == VL53L1_ERROR_NONE) {
 8012cca:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d109      	bne.n	8012ce6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8012cd2:	f107 0317 	add.w	r3, r7, #23
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	2105      	movs	r1, #5
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f000 f9e7 	bl	80130ae <VL53L1_GetSequenceStepEnable>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8012ce6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d109      	bne.n	8012d02 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8012cee:	f107 0316 	add.w	r3, r7, #22
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	2106      	movs	r1, #6
 8012cf6:	6878      	ldr	r0, [r7, #4]
 8012cf8:	f000 f9d9 	bl	80130ae <VL53L1_GetSequenceStepEnable>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8012d02:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d10b      	bne.n	8012d22 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 8012d0a:	f107 0310 	add.w	r3, r7, #16
 8012d0e:	f107 020c 	add.w	r2, r7, #12
 8012d12:	f107 0108 	add.w	r1, r7, #8
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f000 fdae 	bl	8013878 <VL53L1_get_timeouts_us>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8012d22:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	f040 8081 	bne.w	8012e2e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
		PresetMode = PALDevDataGet(Dev, CurrentParameters.PresetMode);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8012d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		TimingGuard = 0;
 8012d36:	2300      	movs	r3, #0
 8012d38:	633b      	str	r3, [r7, #48]	@ 0x30
		divisor = 1;
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		switch (PresetMode) {
 8012d3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012d42:	2b08      	cmp	r3, #8
 8012d44:	d026      	beq.n	8012d94 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 8012d46:	2b08      	cmp	r3, #8
 8012d48:	dc41      	bgt.n	8012dce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
 8012d4a:	2b03      	cmp	r3, #3
 8012d4c:	d00f      	beq.n	8012d6e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 8012d4e:	2b04      	cmp	r3, #4
 8012d50:	d13d      	bne.n	8012dce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8012d52:	7dfb      	ldrb	r3, [r7, #23]
 8012d54:	2b01      	cmp	r3, #1
 8012d56:	d002      	beq.n	8012d5e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb6>
 8012d58:	7dbb      	ldrb	r3, [r7, #22]
 8012d5a:	2b01      	cmp	r3, #1
 8012d5c:	d103      	bne.n	8012d66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbe>
				TimingGuard = 5000;
 8012d5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8012d62:	633b      	str	r3, [r7, #48]	@ 0x30
			else
				TimingGuard = 1000;
		break;
 8012d64:	e036      	b.n	8012dd4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				TimingGuard = 1000;
 8012d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012d6a:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 8012d6c:	e032      	b.n	8012dd4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8012d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d70:	005b      	lsls	r3, r3, #1
 8012d72:	627b      	str	r3, [r7, #36]	@ 0x24
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8012d74:	7dfb      	ldrb	r3, [r7, #23]
 8012d76:	2b01      	cmp	r3, #1
 8012d78:	d002      	beq.n	8012d80 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd8>
 8012d7a:	7dbb      	ldrb	r3, [r7, #22]
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d103      	bne.n	8012d88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe0>
				TimingGuard = 26600;
 8012d80:	f246 73e8 	movw	r3, #26600	@ 0x67e8
 8012d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8012d86:	e002      	b.n	8012d8e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe6>
			else
				TimingGuard = 21600;
 8012d88:	f245 4360 	movw	r3, #21600	@ 0x5460
 8012d8c:	633b      	str	r3, [r7, #48]	@ 0x30
			divisor = 2;
 8012d8e:	2302      	movs	r3, #2
 8012d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
		break;
 8012d92:	e01f      	b.n	8012dd4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8012d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d96:	005b      	lsls	r3, r3, #1
 8012d98:	627b      	str	r3, [r7, #36]	@ 0x24
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8012d9a:	23f5      	movs	r3, #245	@ 0xf5
 8012d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
			pLLData =  VL53L1DevStructGetLLDriverHandle(Dev);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	61fb      	str	r3, [r7, #28]
			vhv_loops = pLLData->low_power_auto_data.vhv_loop_bound;
 8012da2:	69fb      	ldr	r3, [r7, #28]
 8012da4:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8012da8:	61bb      	str	r3, [r7, #24]
			if (vhv_loops > 0) {
 8012daa:	69bb      	ldr	r3, [r7, #24]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	dd07      	ble.n	8012dc0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x118>
				vhv += vhv_loops *
 8012db0:	69bb      	ldr	r3, [r7, #24]
 8012db2:	22f5      	movs	r2, #245	@ 0xf5
 8012db4:	fb02 f303 	mul.w	r3, r2, r3
 8012db8:	461a      	mov	r2, r3
 8012dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dbc:	4413      	add	r3, r2
 8012dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8012dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dc2:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8012dc6:	633b      	str	r3, [r7, #48]	@ 0x30
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8012dc8:	2302      	movs	r3, #2
 8012dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		break;
 8012dcc:	e002      	b.n	8012dd4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8012dce:	23f8      	movs	r3, #248	@ 0xf8
 8012dd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8012dd4:	683a      	ldr	r2, [r7, #0]
 8012dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d803      	bhi.n	8012de4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8012ddc:	23fc      	movs	r3, #252	@ 0xfc
 8012dde:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8012de2:	e003      	b.n	8012dec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x144>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8012de4:	683a      	ldr	r2, [r7, #0]
 8012de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012de8:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8012dea:	613b      	str	r3, [r7, #16]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8012dec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d11c      	bne.n	8012e2e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d203      	bcs.n	8012e04 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x15c>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8012dfc:	23fc      	movs	r3, #252	@ 0xfc
 8012dfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8012e02:	e00d      	b.n	8012e20 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
			else {
				TimingBudget /= divisor;
 8012e04:	693a      	ldr	r2, [r7, #16]
 8012e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e0c:	613b      	str	r3, [r7, #16]
				Status = VL53L1_set_timeouts_us(
 8012e0e:	68b9      	ldr	r1, [r7, #8]
 8012e10:	68fa      	ldr	r2, [r7, #12]
 8012e12:	693b      	ldr	r3, [r7, #16]
 8012e14:	6878      	ldr	r0, [r7, #4]
 8012e16:	f000 fcf7 	bl	8013808 <VL53L1_set_timeouts_us>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8012e20:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d102      	bne.n	8012e2e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
				PALDevDataSet(Dev,
 8012e28:	693a      	ldr	r2, [r7, #16]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8012e2e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d103      	bne.n	8012e3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		PALDevDataSet(Dev,
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	683a      	ldr	r2, [r7, #0]
 8012e3a:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8012e3e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8012e42:	4618      	mov	r0, r3
 8012e44:	3738      	adds	r7, #56	@ 0x38
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}
 8012e4a:	bf00      	nop
 8012e4c:	00086470 	.word	0x00086470
 8012e50:	00989680 	.word	0x00989680

08012e54 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b084      	sub	sp, #16
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
 8012e5c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8012e62:	6839      	ldr	r1, [r7, #0]
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f000 fca6 	bl	80137b6 <VL53L1_set_inter_measurement_period_ms>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	73fb      	strb	r3, [r7, #15]
			InterMeasurementPeriodMilliSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8012e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	3710      	adds	r7, #16
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}

08012e7a <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8012e7a:	b580      	push	{r7, lr}
 8012e7c:	b086      	sub	sp, #24
 8012e7e:	af00      	add	r7, sp, #0
 8012e80:	60f8      	str	r0, [r7, #12]
 8012e82:	460b      	mov	r3, r1
 8012e84:	607a      	str	r2, [r7, #4]
 8012e86:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8012e8c:	897b      	ldrh	r3, [r7, #10]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d002      	beq.n	8012e98 <SetLimitValue+0x1e>
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d009      	beq.n	8012eaa <SetLimitValue+0x30>
 8012e96:	e011      	b.n	8012ebc <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	0b9b      	lsrs	r3, r3, #14
 8012e9c:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8012e9e:	8abb      	ldrh	r3, [r7, #20]
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	68f8      	ldr	r0, [r7, #12]
 8012ea4:	f001 f838 	bl	8013f18 <VL53L1_set_lite_sigma_threshold>
		break;
 8012ea8:	e00a      	b.n	8012ec0 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	0a5b      	lsrs	r3, r3, #9
 8012eae:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8012eb0:	8abb      	ldrh	r3, [r7, #20]
 8012eb2:	4619      	mov	r1, r3
 8012eb4:	68f8      	ldr	r0, [r7, #12]
 8012eb6:	f001 f85b 	bl	8013f70 <VL53L1_set_lite_min_count_rate>
		break;
 8012eba:	e001      	b.n	8012ec0 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8012ebc:	23fc      	movs	r3, #252	@ 0xfc
 8012ebe:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8012ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3718      	adds	r7, #24
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}

08012ecc <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b084      	sub	sp, #16
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	460b      	mov	r3, r1
 8012ed6:	807b      	strh	r3, [r7, #2]
 8012ed8:	4613      	mov	r3, r2
 8012eda:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8012edc:	2300      	movs	r3, #0
 8012ede:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8012ee4:	887b      	ldrh	r3, [r7, #2]
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	d902      	bls.n	8012ef0 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8012eea:	23fc      	movs	r3, #252	@ 0xfc
 8012eec:	73fb      	strb	r3, [r7, #15]
 8012eee:	e014      	b.n	8012f1a <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8012ef0:	787b      	ldrb	r3, [r7, #1]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d102      	bne.n	8012efc <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	60bb      	str	r3, [r7, #8]
 8012efa:	e006      	b.n	8012f0a <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8012efc:	887b      	ldrh	r3, [r7, #2]
 8012efe:	687a      	ldr	r2, [r7, #4]
 8012f00:	33e0      	adds	r3, #224	@ 0xe0
 8012f02:	009b      	lsls	r3, r3, #2
 8012f04:	4413      	add	r3, r2
 8012f06:	689b      	ldr	r3, [r3, #8]
 8012f08:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8012f0a:	887b      	ldrh	r3, [r7, #2]
 8012f0c:	68ba      	ldr	r2, [r7, #8]
 8012f0e:	4619      	mov	r1, r3
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f7ff ffb2 	bl	8012e7a <SetLimitValue>
 8012f16:	4603      	mov	r3, r0
 8012f18:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8012f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d10c      	bne.n	8012f3c <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8012f22:	787b      	ldrb	r3, [r7, #1]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	bf14      	ite	ne
 8012f28:	2301      	movne	r3, #1
 8012f2a:	2300      	moveq	r3, #0
 8012f2c:	b2da      	uxtb	r2, r3
 8012f2e:	887b      	ldrh	r3, [r7, #2]
 8012f30:	4611      	mov	r1, r2
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	4413      	add	r3, r2
 8012f36:	460a      	mov	r2, r1
 8012f38:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8012f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3710      	adds	r7, #16
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8012f48:	b480      	push	{r7}
 8012f4a:	b087      	sub	sp, #28
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	60f8      	str	r0, [r7, #12]
 8012f50:	460b      	mov	r3, r1
 8012f52:	607a      	str	r2, [r7, #4]
 8012f54:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8012f56:	2300      	movs	r3, #0
 8012f58:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8012f5a:	897b      	ldrh	r3, [r7, #10]
 8012f5c:	2b01      	cmp	r3, #1
 8012f5e:	d905      	bls.n	8012f6c <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8012f60:	23fc      	movs	r3, #252	@ 0xfc
 8012f62:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2200      	movs	r2, #0
 8012f68:	701a      	strb	r2, [r3, #0]
 8012f6a:	e008      	b.n	8012f7e <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8012f6c:	897b      	ldrh	r3, [r7, #10]
 8012f6e:	68fa      	ldr	r2, [r7, #12]
 8012f70:	4413      	add	r3, r2
 8012f72:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 8012f76:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	7dba      	ldrb	r2, [r7, #22]
 8012f7c:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8012f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	371c      	adds	r7, #28
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr

08012f8e <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8012f8e:	b580      	push	{r7, lr}
 8012f90:	b086      	sub	sp, #24
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	60f8      	str	r0, [r7, #12]
 8012f96:	460b      	mov	r3, r1
 8012f98:	607a      	str	r2, [r7, #4]
 8012f9a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8012fa0:	897b      	ldrh	r3, [r7, #10]
 8012fa2:	2b01      	cmp	r3, #1
 8012fa4:	d902      	bls.n	8012fac <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8012fa6:	23fc      	movs	r3, #252	@ 0xfc
 8012fa8:	75fb      	strb	r3, [r7, #23]
 8012faa:	e023      	b.n	8012ff4 <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8012fac:	897b      	ldrh	r3, [r7, #10]
 8012fae:	68fa      	ldr	r2, [r7, #12]
 8012fb0:	4413      	add	r3, r2
 8012fb2:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 8012fb6:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 8012fb8:	7dbb      	ldrb	r3, [r7, #22]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d107      	bne.n	8012fce <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8012fbe:	897b      	ldrh	r3, [r7, #10]
 8012fc0:	68fa      	ldr	r2, [r7, #12]
 8012fc2:	33e0      	adds	r3, #224	@ 0xe0
 8012fc4:	009b      	lsls	r3, r3, #2
 8012fc6:	4413      	add	r3, r2
 8012fc8:	687a      	ldr	r2, [r7, #4]
 8012fca:	609a      	str	r2, [r3, #8]
 8012fcc:	e012      	b.n	8012ff4 <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 8012fce:	897b      	ldrh	r3, [r7, #10]
 8012fd0:	687a      	ldr	r2, [r7, #4]
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	68f8      	ldr	r0, [r7, #12]
 8012fd6:	f7ff ff50 	bl	8012e7a <SetLimitValue>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 8012fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d106      	bne.n	8012ff4 <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8012fe6:	897b      	ldrh	r3, [r7, #10]
 8012fe8:	68fa      	ldr	r2, [r7, #12]
 8012fea:	33e0      	adds	r3, #224	@ 0xe0
 8012fec:	009b      	lsls	r3, r3, #2
 8012fee:	4413      	add	r3, r2
 8012ff0:	687a      	ldr	r2, [r7, #4]
 8012ff2:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8012ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3718      	adds	r7, #24
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}

08013000 <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b088      	sub	sp, #32
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	460b      	mov	r3, r1
 801300a:	607a      	str	r2, [r7, #4]
 801300c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801300e:	2300      	movs	r3, #0
 8013010:	77fb      	strb	r3, [r7, #31]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8013012:	897b      	ldrh	r3, [r7, #10]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d002      	beq.n	801301e <VL53L1_GetLimitCheckValue+0x1e>
 8013018:	2b01      	cmp	r3, #1
 801301a:	d00c      	beq.n	8013036 <VL53L1_GetLimitCheckValue+0x36>
 801301c:	e017      	b.n	801304e <VL53L1_GetLimitCheckValue+0x4e>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 801301e:	f107 0314 	add.w	r3, r7, #20
 8013022:	4619      	mov	r1, r3
 8013024:	68f8      	ldr	r0, [r7, #12]
 8013026:	f000 ff61 	bl	8013eec <VL53L1_get_lite_sigma_threshold>
 801302a:	4603      	mov	r3, r0
 801302c:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 801302e:	8abb      	ldrh	r3, [r7, #20]
 8013030:	039b      	lsls	r3, r3, #14
 8013032:	61bb      	str	r3, [r7, #24]
		break;
 8013034:	e00d      	b.n	8013052 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8013036:	f107 0316 	add.w	r3, r7, #22
 801303a:	4619      	mov	r1, r3
 801303c:	68f8      	ldr	r0, [r7, #12]
 801303e:	f000 ff81 	bl	8013f44 <VL53L1_get_lite_min_count_rate>
 8013042:	4603      	mov	r3, r0
 8013044:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8013046:	8afb      	ldrh	r3, [r7, #22]
 8013048:	025b      	lsls	r3, r3, #9
 801304a:	61bb      	str	r3, [r7, #24]
		break;
 801304c:	e001      	b.n	8013052 <VL53L1_GetLimitCheckValue+0x52>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 801304e:	23fc      	movs	r3, #252	@ 0xfc
 8013050:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8013052:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d123      	bne.n	80130a2 <VL53L1_GetLimitCheckValue+0xa2>

		if (TempFix1616 == 0) {
 801305a:	69bb      	ldr	r3, [r7, #24]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d110      	bne.n	8013082 <VL53L1_GetLimitCheckValue+0x82>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8013060:	897b      	ldrh	r3, [r7, #10]
 8013062:	68fa      	ldr	r2, [r7, #12]
 8013064:	33e0      	adds	r3, #224	@ 0xe0
 8013066:	009b      	lsls	r3, r3, #2
 8013068:	4413      	add	r3, r2
 801306a:	689b      	ldr	r3, [r3, #8]
 801306c:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	69ba      	ldr	r2, [r7, #24]
 8013072:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8013074:	897b      	ldrh	r3, [r7, #10]
 8013076:	68fa      	ldr	r2, [r7, #12]
 8013078:	4413      	add	r3, r2
 801307a:	2200      	movs	r2, #0
 801307c:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 8013080:	e00f      	b.n	80130a2 <VL53L1_GetLimitCheckValue+0xa2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	69ba      	ldr	r2, [r7, #24]
 8013086:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8013088:	897b      	ldrh	r3, [r7, #10]
 801308a:	68fa      	ldr	r2, [r7, #12]
 801308c:	33e0      	adds	r3, #224	@ 0xe0
 801308e:	009b      	lsls	r3, r3, #2
 8013090:	4413      	add	r3, r2
 8013092:	69ba      	ldr	r2, [r7, #24]
 8013094:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8013096:	897b      	ldrh	r3, [r7, #10]
 8013098:	68fa      	ldr	r2, [r7, #12]
 801309a:	4413      	add	r3, r2
 801309c:	2201      	movs	r2, #1
 801309e:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 80130a2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3720      	adds	r7, #32
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}

080130ae <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 80130ae:	b580      	push	{r7, lr}
 80130b0:	b086      	sub	sp, #24
 80130b2:	af00      	add	r7, sp, #0
 80130b4:	60f8      	str	r0, [r7, #12]
 80130b6:	460b      	mov	r3, r1
 80130b8:	607a      	str	r2, [r7, #4]
 80130ba:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80130bc:	2300      	movs	r3, #0
 80130be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 80130c0:	7afb      	ldrb	r3, [r7, #11]
 80130c2:	687a      	ldr	r2, [r7, #4]
 80130c4:	4619      	mov	r1, r3
 80130c6:	68f8      	ldr	r0, [r7, #12]
 80130c8:	f000 fc3f 	bl	801394a <VL53L1_get_sequence_config_bit>
 80130cc:	4603      	mov	r3, r0
 80130ce:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 80130d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80130d4:	4618      	mov	r0, r3
 80130d6:	3718      	adds	r7, #24
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}

080130dc <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b084      	sub	sp, #16
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80130e4:	2300      	movs	r3, #0
 80130e6:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;

	LOG_FUNCTION_START("");

	CurrPalState = PALDevDataGet(Dev, PalState);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	f893 3378 	ldrb.w	r3, [r3, #888]	@ 0x378
 80130ee:	73bb      	strb	r3, [r7, #14]
	switch (CurrPalState) {
 80130f0:	7bbb      	ldrb	r3, [r7, #14]
 80130f2:	2b63      	cmp	r3, #99	@ 0x63
 80130f4:	dc12      	bgt.n	801311c <VL53L1_StartMeasurement+0x40>
 80130f6:	2b62      	cmp	r3, #98	@ 0x62
 80130f8:	da0d      	bge.n	8013116 <VL53L1_StartMeasurement+0x3a>
 80130fa:	2b05      	cmp	r3, #5
 80130fc:	dc0e      	bgt.n	801311c <VL53L1_StartMeasurement+0x40>
 80130fe:	2b04      	cmp	r3, #4
 8013100:	da09      	bge.n	8013116 <VL53L1_StartMeasurement+0x3a>
 8013102:	2b02      	cmp	r3, #2
 8013104:	dc02      	bgt.n	801310c <VL53L1_StartMeasurement+0x30>
 8013106:	2b00      	cmp	r3, #0
 8013108:	da05      	bge.n	8013116 <VL53L1_StartMeasurement+0x3a>
 801310a:	e007      	b.n	801311c <VL53L1_StartMeasurement+0x40>
 801310c:	2b03      	cmp	r3, #3
 801310e:	d105      	bne.n	801311c <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8013110:	2300      	movs	r3, #0
 8013112:	73fb      	strb	r3, [r7, #15]
		break;
 8013114:	e004      	b.n	8013120 <VL53L1_StartMeasurement+0x44>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8013116:	23f2      	movs	r3, #242	@ 0xf2
 8013118:	73fb      	strb	r3, [r7, #15]
		break;
 801311a:	e001      	b.n	8013120 <VL53L1_StartMeasurement+0x44>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 801311c:	23fd      	movs	r3, #253	@ 0xfd
 801311e:	73fb      	strb	r3, [r7, #15]
	}

	DeviceMeasurementMode = PALDevDataGet(Dev, LLData.measurement_mode);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	789b      	ldrb	r3, [r3, #2]
 8013124:	737b      	strb	r3, [r7, #13]

	if (Status == VL53L1_ERROR_NONE)
 8013126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d107      	bne.n	801313e <VL53L1_StartMeasurement+0x62>
		Status = VL53L1_init_and_start_range(
 801312e:	7b7b      	ldrb	r3, [r7, #13]
 8013130:	2206      	movs	r2, #6
 8013132:	4619      	mov	r1, r3
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f000 ff51 	bl	8013fdc <VL53L1_init_and_start_range>
 801313a:	4603      	mov	r3, r0
 801313c:	73fb      	strb	r3, [r7, #15]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 801313e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d103      	bne.n	801314e <VL53L1_StartMeasurement+0x72>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2204      	movs	r2, #4
 801314a:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 801314e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013152:	4618      	mov	r0, r3
 8013154:	3710      	adds	r7, #16
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}

0801315a <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 801315a:	b580      	push	{r7, lr}
 801315c:	b084      	sub	sp, #16
 801315e:	af00      	add	r7, sp, #0
 8013160:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013162:	2300      	movs	r3, #0
 8013164:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	f001 f99a 	bl	80144a0 <VL53L1_stop_range>
 801316c:	4603      	mov	r3, r0
 801316e:	73fb      	strb	r3, [r7, #15]

	/* Set PAL State to Idle */
	if (Status == VL53L1_ERROR_NONE)
 8013170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d103      	bne.n	8013180 <VL53L1_StopMeasurement+0x26>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2203      	movs	r2, #3
 801317c:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	LOG_FUNCTION_END(Status);
	return Status;
 8013180:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013184:	4618      	mov	r0, r3
 8013186:	3710      	adds	r7, #16
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}

0801318c <VL53L1_GetMeasurementDataReady>:
}


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b084      	sub	sp, #16
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013196:	2300      	movs	r3, #0
 8013198:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 801319a:	6839      	ldr	r1, [r7, #0]
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f004 f8d7 	bl	8017350 <VL53L1_is_new_data_ready>
 80131a2:	4603      	mov	r3, r0
 80131a4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80131a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3710      	adds	r7, #16
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
	...

080131b4 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b08d      	sub	sp, #52	@ 0x34
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	4603      	mov	r3, r0
 80131bc:	603a      	str	r2, [r7, #0]
 80131be:	71fb      	strb	r3, [r7, #7]
 80131c0:	460b      	mov	r3, r1
 80131c2:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 80131c4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80131c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t SRAS = 30;
 80131ca:	231e      	movs	r3, #30
 80131cc:	847b      	strh	r3, [r7, #34]	@ 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 80131ce:	4b33      	ldr	r3, [pc, #204]	@ (801329c <ComputeRQL+0xe8>)
 80131d0:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 80131d2:	4b33      	ldr	r3, [pc, #204]	@ (80132a0 <ComputeRQL+0xec>)
 80131d4:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 80131d6:	f641 139a 	movw	r3, #6554	@ 0x199a
 80131da:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 80131dc:	79fb      	ldrb	r3, [r7, #7]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d103      	bne.n	80131ea <ComputeRQL+0x36>
		returnvalue = 0;
 80131e2:	2300      	movs	r3, #0
 80131e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80131e8:	e04f      	b.n	801328a <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 80131ea:	79bb      	ldrb	r3, [r7, #6]
 80131ec:	2b07      	cmp	r3, #7
 80131ee:	d103      	bne.n	80131f8 <ComputeRQL+0x44>
		returnvalue = 50;
 80131f0:	2332      	movs	r3, #50	@ 0x32
 80131f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80131f6:	e048      	b.n	801328a <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80131fe:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8013202:	429a      	cmp	r2, r3
 8013204:	dd03      	ble.n	801320e <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 8013206:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013208:	041b      	lsls	r3, r3, #16
 801320a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801320c:	e007      	b.n	801321e <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013214:	461a      	mov	r2, r3
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	fb02 f303 	mul.w	r3, r2, r3
 801321c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 801321e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013220:	2b00      	cmp	r3, #0
 8013222:	d020      	beq.n	8013266 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 8013224:	683b      	ldr	r3, [r7, #0]
 8013226:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013228:	461a      	mov	r2, r3
 801322a:	69bb      	ldr	r3, [r7, #24]
 801322c:	fb02 f303 	mul.w	r3, r2, r3
 8013230:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8013232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013234:	085b      	lsrs	r3, r3, #1
 8013236:	693a      	ldr	r2, [r7, #16]
 8013238:	4413      	add	r3, r2
 801323a:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 801323c:	693a      	ldr	r2, [r7, #16]
 801323e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013240:	fbb2 f3f3 	udiv	r3, r2, r3
 8013244:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	041b      	lsls	r3, r3, #16
 801324a:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 801324c:	693a      	ldr	r2, [r7, #16]
 801324e:	69fb      	ldr	r3, [r7, #28]
 8013250:	429a      	cmp	r2, r3
 8013252:	d804      	bhi.n	801325e <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8013254:	69fa      	ldr	r2, [r7, #28]
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	1ad3      	subs	r3, r2, r3
 801325a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801325c:	e006      	b.n	801326c <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 801325e:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8013262:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013264:	e002      	b.n	801326c <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 8013266:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 801326a:	62bb      	str	r3, [r7, #40]	@ 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 801326c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801326e:	0c1b      	lsrs	r3, r3, #16
 8013270:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8013272:	7bfb      	ldrb	r3, [r7, #15]
 8013274:	2b32      	cmp	r3, #50	@ 0x32
 8013276:	d905      	bls.n	8013284 <ComputeRQL+0xd0>
 8013278:	7bfb      	ldrb	r3, [r7, #15]
 801327a:	2b64      	cmp	r3, #100	@ 0x64
 801327c:	bf28      	it	cs
 801327e:	2364      	movcs	r3, #100	@ 0x64
 8013280:	b2db      	uxtb	r3, r3
 8013282:	e000      	b.n	8013286 <ComputeRQL+0xd2>
 8013284:	2332      	movs	r3, #50	@ 0x32
 8013286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return returnvalue;
 801328a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801328e:	4618      	mov	r0, r3
 8013290:	3734      	adds	r7, #52	@ 0x34
 8013292:	46bd      	mov	sp, r7
 8013294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013298:	4770      	bx	lr
 801329a:	bf00      	nop
 801329c:	0075b333 	.word	0x0075b333
 80132a0:	0030cccd 	.word	0x0030cccd

080132a4 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 80132a4:	b480      	push	{r7}
 80132a6:	b085      	sub	sp, #20
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	4603      	mov	r3, r0
 80132ac:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 80132ae:	79fb      	ldrb	r3, [r7, #7]
 80132b0:	3b04      	subs	r3, #4
 80132b2:	2b0f      	cmp	r3, #15
 80132b4:	d83d      	bhi.n	8013332 <ConvertStatusLite+0x8e>
 80132b6:	a201      	add	r2, pc, #4	@ (adr r2, 80132bc <ConvertStatusLite+0x18>)
 80132b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132bc:	0801330f 	.word	0x0801330f
 80132c0:	08013309 	.word	0x08013309
 80132c4:	08013315 	.word	0x08013315
 80132c8:	0801331b 	.word	0x0801331b
 80132cc:	08013327 	.word	0x08013327
 80132d0:	0801332d 	.word	0x0801332d
 80132d4:	08013333 	.word	0x08013333
 80132d8:	08013333 	.word	0x08013333
 80132dc:	08013321 	.word	0x08013321
 80132e0:	08013333 	.word	0x08013333
 80132e4:	08013333 	.word	0x08013333
 80132e8:	08013333 	.word	0x08013333
 80132ec:	08013333 	.word	0x08013333
 80132f0:	08013333 	.word	0x08013333
 80132f4:	080132fd 	.word	0x080132fd
 80132f8:	08013303 	.word	0x08013303
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80132fc:	230a      	movs	r3, #10
 80132fe:	73fb      	strb	r3, [r7, #15]
		break;
 8013300:	e019      	b.n	8013336 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8013302:	2306      	movs	r3, #6
 8013304:	73fb      	strb	r3, [r7, #15]
		break;
 8013306:	e016      	b.n	8013336 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8013308:	2304      	movs	r3, #4
 801330a:	73fb      	strb	r3, [r7, #15]
		break;
 801330c:	e013      	b.n	8013336 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 801330e:	2302      	movs	r3, #2
 8013310:	73fb      	strb	r3, [r7, #15]
		break;
 8013312:	e010      	b.n	8013336 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8013314:	2301      	movs	r3, #1
 8013316:	73fb      	strb	r3, [r7, #15]
		break;
 8013318:	e00d      	b.n	8013336 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 801331a:	2307      	movs	r3, #7
 801331c:	73fb      	strb	r3, [r7, #15]
		break;
 801331e:	e00a      	b.n	8013336 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8013320:	2309      	movs	r3, #9
 8013322:	73fb      	strb	r3, [r7, #15]
		break;
 8013324:	e007      	b.n	8013336 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8013326:	2303      	movs	r3, #3
 8013328:	73fb      	strb	r3, [r7, #15]
		break;
 801332a:	e004      	b.n	8013336 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 801332c:	2300      	movs	r3, #0
 801332e:	73fb      	strb	r3, [r7, #15]
		break;
 8013330:	e001      	b.n	8013336 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8013332:	23ff      	movs	r3, #255	@ 0xff
 8013334:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8013336:	7bfb      	ldrb	r3, [r7, #15]
}
 8013338:	4618      	mov	r0, r3
 801333a:	3714      	adds	r7, #20
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr

08013344 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b08c      	sub	sp, #48	@ 0x30
 8013348:	af00      	add	r7, sp, #0
 801334a:	60f8      	str	r0, [r7, #12]
 801334c:	607b      	str	r3, [r7, #4]
 801334e:	460b      	mov	r3, r1
 8013350:	72fb      	strb	r3, [r7, #11]
 8013352:	4613      	mov	r3, r2
 8013354:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013356:	2300      	movs	r3, #0
 8013358:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	685a      	ldr	r2, [r3, #4]
 8013360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013362:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801336a:	f003 031f 	and.w	r3, r3, #31
 801336e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8013372:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8013376:	7afb      	ldrb	r3, [r7, #11]
 8013378:	687a      	ldr	r2, [r7, #4]
 801337a:	4618      	mov	r0, r3
 801337c:	f7ff ff1a 	bl	80131b4 <ComputeRQL>
 8013380:	4603      	mov	r3, r0
 8013382:	461a      	mov	r2, r3
 8013384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013386:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801338c:	025b      	lsls	r3, r3, #9
 801338e:	62bb      	str	r3, [r7, #40]	@ 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8013390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013392:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013394:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801339a:	025b      	lsls	r3, r3, #9
 801339c:	627b      	str	r3, [r7, #36]	@ 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 801339e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80133a2:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 80133a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133aa:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80133b0:	025b      	lsls	r3, r3, #9
 80133b2:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 80133b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b6:	6a3a      	ldr	r2, [r7, #32]
 80133b8:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 80133c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133c2:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 80133c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133c6:	2200      	movs	r2, #0
 80133c8:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 80133ca:	7abb      	ldrb	r3, [r7, #10]
 80133cc:	2b11      	cmp	r3, #17
 80133ce:	d009      	beq.n	80133e4 <SetSimpleData+0xa0>
 80133d0:	2b11      	cmp	r3, #17
 80133d2:	dc0f      	bgt.n	80133f4 <SetSimpleData+0xb0>
 80133d4:	2b03      	cmp	r3, #3
 80133d6:	dc02      	bgt.n	80133de <SetSimpleData+0x9a>
 80133d8:	2b00      	cmp	r3, #0
 80133da:	dc03      	bgt.n	80133e4 <SetSimpleData+0xa0>
 80133dc:	e00a      	b.n	80133f4 <SetSimpleData+0xb0>
 80133de:	2b0d      	cmp	r3, #13
 80133e0:	d004      	beq.n	80133ec <SetSimpleData+0xa8>
 80133e2:	e007      	b.n	80133f4 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 80133e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133e6:	2205      	movs	r2, #5
 80133e8:	76da      	strb	r2, [r3, #27]
		break;
 80133ea:	e006      	b.n	80133fa <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 80133ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ee:	220d      	movs	r2, #13
 80133f0:	76da      	strb	r2, [r3, #27]
		break;
 80133f2:	e002      	b.n	80133fa <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80133f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133f6:	2200      	movs	r2, #0
 80133f8:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 80133fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133fc:	7edb      	ldrb	r3, [r3, #27]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d108      	bne.n	8013414 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8013402:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8013406:	4618      	mov	r0, r3
 8013408:	f7ff ff4c 	bl	80132a4 <ConvertStatusLite>
 801340c:	4603      	mov	r3, r0
 801340e:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8013410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013412:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013418:	025b      	lsls	r3, r3, #9
 801341a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	6a3a      	ldr	r2, [r7, #32]
 8013420:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013428:	025b      	lsls	r3, r3, #9
 801342a:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	6a3a      	ldr	r2, [r7, #32]
 8013430:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8013434:	f107 0314 	add.w	r3, r7, #20
 8013438:	461a      	mov	r2, r3
 801343a:	2100      	movs	r1, #0
 801343c:	68f8      	ldr	r0, [r7, #12]
 801343e:	f7ff fddf 	bl	8013000 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8013442:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8013446:	2b06      	cmp	r3, #6
 8013448:	bf0c      	ite	eq
 801344a:	2301      	moveq	r3, #1
 801344c:	2300      	movne	r3, #0
 801344e:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8013450:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8013452:	f107 0319 	add.w	r3, r7, #25
 8013456:	461a      	mov	r2, r3
 8013458:	2100      	movs	r1, #0
 801345a:	68f8      	ldr	r0, [r7, #12]
 801345c:	f7ff fd74 	bl	8012f48 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8013460:	7e7b      	ldrb	r3, [r7, #25]
 8013462:	2b01      	cmp	r3, #1
 8013464:	d104      	bne.n	8013470 <SetSimpleData+0x12c>
 8013466:	7ffb      	ldrb	r3, [r7, #31]
 8013468:	2b01      	cmp	r3, #1
 801346a:	d101      	bne.n	8013470 <SetSimpleData+0x12c>
 801346c:	2301      	movs	r3, #1
 801346e:	e000      	b.n	8013472 <SetSimpleData+0x12e>
 8013470:	2300      	movs	r3, #0
 8013472:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	7fba      	ldrb	r2, [r7, #30]
 8013478:	f883 2386 	strb.w	r2, [r3, #902]	@ 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 801347c:	f107 0314 	add.w	r3, r7, #20
 8013480:	461a      	mov	r2, r3
 8013482:	2101      	movs	r1, #1
 8013484:	68f8      	ldr	r0, [r7, #12]
 8013486:	f7ff fdbb 	bl	8013000 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 801348a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801348e:	2b04      	cmp	r3, #4
 8013490:	bf0c      	ite	eq
 8013492:	2301      	moveq	r3, #1
 8013494:	2300      	movne	r3, #0
 8013496:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8013498:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 801349a:	f107 0319 	add.w	r3, r7, #25
 801349e:	461a      	mov	r2, r3
 80134a0:	2101      	movs	r1, #1
 80134a2:	68f8      	ldr	r0, [r7, #12]
 80134a4:	f7ff fd50 	bl	8012f48 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80134a8:	7e7b      	ldrb	r3, [r7, #25]
 80134aa:	2b01      	cmp	r3, #1
 80134ac:	d104      	bne.n	80134b8 <SetSimpleData+0x174>
 80134ae:	7f7b      	ldrb	r3, [r7, #29]
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	d101      	bne.n	80134b8 <SetSimpleData+0x174>
 80134b4:	2301      	movs	r3, #1
 80134b6:	e000      	b.n	80134ba <SetSimpleData+0x176>
 80134b8:	2300      	movs	r3, #0
 80134ba:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	7fba      	ldrb	r2, [r7, #30]
 80134c0:	f883 2387 	strb.w	r2, [r3, #903]	@ 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 80134c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134c6:	8b1b      	ldrh	r3, [r3, #24]
 80134c8:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80134ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134cc:	7edb      	ldrb	r3, [r3, #27]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d110      	bne.n	80134f4 <SetSimpleData+0x1b0>
 80134d2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	da0c      	bge.n	80134f4 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 80134da:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80134de:	4b08      	ldr	r3, [pc, #32]	@ (8013500 <SetSimpleData+0x1bc>)
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	429a      	cmp	r2, r3
 80134e4:	da03      	bge.n	80134ee <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 80134e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134e8:	220e      	movs	r2, #14
 80134ea:	76da      	strb	r2, [r3, #27]
 80134ec:	e002      	b.n	80134f4 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80134ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134f0:	2200      	movs	r2, #0
 80134f2:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 80134f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80134f8:	4618      	mov	r0, r3
 80134fa:	3730      	adds	r7, #48	@ 0x30
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}
 8013500:	20000168 	.word	0x20000168

08013504 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b0a8      	sub	sp, #160	@ 0xa0
 8013508:	af02      	add	r7, sp, #8
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801350e:	2300      	movs	r3, #0
 8013510:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 8013514:	f107 0308 	add.w	r3, r7, #8
 8013518:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 801351c:	221c      	movs	r2, #28
 801351e:	21ff      	movs	r1, #255	@ 0xff
 8013520:	6838      	ldr	r0, [r7, #0]
 8013522:	f004 fa33 	bl	801798c <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8013526:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801352a:	2102      	movs	r1, #2
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f001 f8ad 	bl	801468c <VL53L1_get_device_results>
 8013532:	4603      	mov	r3, r0
 8013534:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8013538:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801353c:	2b00      	cmp	r3, #0
 801353e:	d117      	bne.n	8013570 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8013540:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013544:	789a      	ldrb	r2, [r3, #2]
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 801354a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801354e:	3304      	adds	r3, #4
 8013550:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		Status = SetSimpleData(Dev, 1,
 8013554:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013558:	78da      	ldrb	r2, [r3, #3]
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	9300      	str	r3, [sp, #0]
 801355e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013562:	2101      	movs	r1, #1
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f7ff feed 	bl	8013344 <SetSimpleData>
 801356a:	4603      	mov	r3, r0
 801356c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8013570:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8013574:	4618      	mov	r0, r3
 8013576:	3798      	adds	r7, #152	@ 0x98
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}

0801357c <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 801357c:	b5b0      	push	{r4, r5, r7, lr}
 801357e:	b088      	sub	sp, #32
 8013580:	af04      	add	r7, sp, #16
 8013582:	6078      	str	r0, [r7, #4]
 8013584:	460b      	mov	r3, r1
 8013586:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8013588:	2300      	movs	r3, #0
 801358a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8013590:	2162      	movs	r1, #98	@ 0x62
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f001 fee9 	bl	801536a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	2200      	movs	r2, #0
 801359c:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	2201      	movs	r2, #1
 80135a2:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	2200      	movs	r2, #0
 80135a8:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	2201      	movs	r2, #1
 80135ae:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	2201      	movs	r2, #1
 80135b4:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80135bc:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80135c4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80135cc:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	2264      	movs	r2, #100	@ 0x64
 80135d2:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80135da:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	2200      	movs	r2, #0
 80135e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	f240 72db 	movw	r2, #2011	@ 0x7db
 80135ea:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f001 fea0 	bl	8015334 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80135f4:	78fb      	ldrb	r3, [r7, #3]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d008      	beq.n	801360c <VL53L1_data_init+0x90>
 80135fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d104      	bne.n	801360c <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f000 f857 	bl	80136b6 <VL53L1_read_p2p_data>
 8013608:	4603      	mov	r3, r0
 801360a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 801360c:	68bb      	ldr	r3, [r7, #8]
 801360e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8013612:	4618      	mov	r0, r3
 8013614:	f001 f9d2 	bl	80149bc <VL53L1_init_refspadchar_config_struct>
 8013618:	4603      	mov	r3, r0
 801361a:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013622:	4618      	mov	r0, r3
 8013624:	f001 f9ee 	bl	8014a04 <VL53L1_init_ssc_config_struct>
 8013628:	4603      	mov	r3, r0
 801362a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 801362c:	68bb      	ldr	r3, [r7, #8]
 801362e:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 8013632:	68bb      	ldr	r3, [r7, #8]
 8013634:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8013638:	4619      	mov	r1, r3
 801363a:	4610      	mov	r0, r2
 801363c:	f001 fa03 	bl	8014a46 <VL53L1_init_xtalk_config_struct>
 8013640:	4603      	mov	r3, r0
 8013642:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 801364a:	4618      	mov	r0, r3
 801364c:	f001 fa5d 	bl	8014b0a <VL53L1_init_offset_cal_config_struct>
 8013650:	4603      	mov	r3, r0
 8013652:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	33a4      	adds	r3, #164	@ 0xa4
 8013658:	4618      	mov	r0, r3
 801365a:	f001 fa7d 	bl	8014b58 <VL53L1_init_tuning_parm_storage_struct>
 801365e:	4603      	mov	r3, r0
 8013660:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8013662:	2120      	movs	r1, #32
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f000 fc99 	bl	8013f9c <VL53L1_set_vhv_loopbound>
 801366a:	4603      	mov	r3, r0
 801366c:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 801366e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d116      	bne.n	80136a4 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	7858      	ldrb	r0, [r3, #1]
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	8b1c      	ldrh	r4, [r3, #24]
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	689d      	ldr	r5, [r3, #8]
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	68db      	ldr	r3, [r3, #12]
 8013686:	68ba      	ldr	r2, [r7, #8]
 8013688:	6912      	ldr	r2, [r2, #16]
 801368a:	68b9      	ldr	r1, [r7, #8]
 801368c:	6949      	ldr	r1, [r1, #20]
 801368e:	9102      	str	r1, [sp, #8]
 8013690:	9201      	str	r2, [sp, #4]
 8013692:	9300      	str	r3, [sp, #0]
 8013694:	462b      	mov	r3, r5
 8013696:	4622      	mov	r2, r4
 8013698:	4601      	mov	r1, r0
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f000 fab0 	bl	8013c00 <VL53L1_set_preset_mode>
 80136a0:	4603      	mov	r3, r0
 80136a2:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 80136a4:	6878      	ldr	r0, [r7, #4]
 80136a6:	f002 fbaf 	bl	8015e08 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80136aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3710      	adds	r7, #16
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bdb0      	pop	{r4, r5, r7, pc}

080136b6 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 80136b6:	b580      	push	{r7, lr}
 80136b8:	b084      	sub	sp, #16
 80136ba:	af00      	add	r7, sp, #0
 80136bc:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80136be:	2300      	movs	r3, #0
 80136c0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80136c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d108      	bne.n	80136e0 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 80136ce:	68bb      	ldr	r3, [r7, #8]
 80136d0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80136d4:	4619      	mov	r1, r3
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f002 fdeb 	bl	80162b2 <VL53L1_get_static_nvm_managed>
 80136dc:	4603      	mov	r3, r0
 80136de:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80136e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d107      	bne.n	80136f8 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	3342      	adds	r3, #66	@ 0x42
 80136ec:	4619      	mov	r1, r3
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f002 ff1d 	bl	801652e <VL53L1_get_customer_nvm_managed>
 80136f4:	4603      	mov	r3, r0
 80136f6:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 80136f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d115      	bne.n	801372c <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	f503 73fd 	add.w	r3, r3, #506	@ 0x1fa
 8013706:	4619      	mov	r1, r3
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	f003 fdf6 	bl	80172fa <VL53L1_get_nvm_copy_data>
 801370e:	4603      	mov	r3, r0
 8013710:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8013712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d108      	bne.n	801372c <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	f503 72fd 	add.w	r2, r3, #506	@ 0x1fa
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	33f0      	adds	r3, #240	@ 0xf0
 8013724:	4619      	mov	r1, r3
 8013726:	4610      	mov	r0, r2
 8013728:	f001 ff81 	bl	801562e <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 801372c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d109      	bne.n	8013748 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 801373a:	461a      	mov	r2, r3
 801373c:	21de      	movs	r1, #222	@ 0xde
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f7f6 fe12 	bl	800a368 <VL53L1_RdWord>
 8013744:	4603      	mov	r3, r0
 8013746:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 801374e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013752:	d204      	bcs.n	801375e <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 801375a:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 801375e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d107      	bne.n	8013776 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	339e      	adds	r3, #158	@ 0x9e
 801376a:	4619      	mov	r1, r3
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	f000 f968 	bl	8013a42 <VL53L1_get_mode_mitigation_roi>
 8013772:	4603      	mov	r3, r0
 8013774:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 801377c:	2b00      	cmp	r3, #0
 801377e:	d114      	bne.n	80137aa <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8013786:	2b00      	cmp	r3, #0
 8013788:	d10f      	bne.n	80137aa <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8013790:	011b      	lsls	r3, r3, #4
 8013792:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 80137a0:	011b      	lsls	r3, r3, #4
 80137a2:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 80137aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3710      	adds	r7, #16
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}

080137b6 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80137b6:	b480      	push	{r7}
 80137b8:	b085      	sub	sp, #20
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	6078      	str	r0, [r7, #4]
 80137be:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80137c0:	2300      	movs	r3, #0
 80137c2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d101      	bne.n	80137d6 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80137d2:	23f1      	movs	r3, #241	@ 0xf1
 80137d4:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 80137d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d10c      	bne.n	80137f8 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	683a      	ldr	r2, [r7, #0]
 80137e2:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80137e4:	68bb      	ldr	r3, [r7, #8]
 80137e6:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 80137ea:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80137ec:	683b      	ldr	r3, [r7, #0]
 80137ee:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 80137f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3714      	adds	r7, #20
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr

08013808 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b088      	sub	sp, #32
 801380c:	af02      	add	r7, sp, #8
 801380e:	60f8      	str	r0, [r7, #12]
 8013810:	60b9      	str	r1, [r7, #8]
 8013812:	607a      	str	r2, [r7, #4]
 8013814:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013816:	2300      	movs	r3, #0
 8013818:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 801381e:	693b      	ldr	r3, [r7, #16]
 8013820:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8013824:	2b00      	cmp	r3, #0
 8013826:	d101      	bne.n	801382c <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013828:	23f1      	movs	r3, #241	@ 0xf1
 801382a:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 801382c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d11b      	bne.n	801386c <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8013834:	693b      	ldr	r3, [r7, #16]
 8013836:	68ba      	ldr	r2, [r7, #8]
 8013838:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 801383a:	693b      	ldr	r3, [r7, #16]
 801383c:	687a      	ldr	r2, [r7, #4]
 801383e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	683a      	ldr	r2, [r7, #0]
 8013844:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	f8b3 115e 	ldrh.w	r1, [r3, #350]	@ 0x15e
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8013852:	693a      	ldr	r2, [r7, #16]
 8013854:	f502 72ce 	add.w	r2, r2, #412	@ 0x19c
 8013858:	9201      	str	r2, [sp, #4]
 801385a:	9300      	str	r3, [sp, #0]
 801385c:	460b      	mov	r3, r1
 801385e:	683a      	ldr	r2, [r7, #0]
 8013860:	6879      	ldr	r1, [r7, #4]
 8013862:	68b8      	ldr	r0, [r7, #8]
 8013864:	f002 fa02 	bl	8015c6c <VL53L1_calc_timeout_register_values>
 8013868:	4603      	mov	r3, r0
 801386a:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 801386c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013870:	4618      	mov	r0, r3
 8013872:	3718      	adds	r7, #24
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b088      	sub	sp, #32
 801387c:	af00      	add	r7, sp, #0
 801387e:	60f8      	str	r0, [r7, #12]
 8013880:	60b9      	str	r1, [r7, #8]
 8013882:	607a      	str	r2, [r7, #4]
 8013884:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013886:	2300      	movs	r3, #0
 8013888:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 801388e:	2300      	movs	r3, #0
 8013890:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8013892:	2300      	movs	r3, #0
 8013894:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8013896:	69bb      	ldr	r3, [r7, #24]
 8013898:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 801389c:	2b00      	cmp	r3, #0
 801389e:	d101      	bne.n	80138a4 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80138a0:	23f1      	movs	r3, #241	@ 0xf1
 80138a2:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 80138a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d148      	bne.n	801393e <VL53L1_get_timeouts_us+0xc6>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 80138ac:	69bb      	ldr	r3, [r7, #24]
 80138ae:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 80138b2:	69bb      	ldr	r3, [r7, #24]
 80138b4:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 80138b8:	4619      	mov	r1, r3
 80138ba:	4610      	mov	r0, r2
 80138bc:	f002 f87d 	bl	80159ba <VL53L1_calc_macro_period_us>
 80138c0:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 80138c2:	69bb      	ldr	r3, [r7, #24]
 80138c4:	f893 318b 	ldrb.w	r3, [r3, #395]	@ 0x18b
			VL53L1_calc_timeout_us(
 80138c8:	6979      	ldr	r1, [r7, #20]
 80138ca:	4618      	mov	r0, r3
 80138cc:	f002 f935 	bl	8015b3a <VL53L1_calc_timeout_us>
 80138d0:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 80138d6:	69bb      	ldr	r3, [r7, #24]
 80138d8:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
		timeout_encoded =
 80138dc:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80138de:	8a7b      	ldrh	r3, [r7, #18]
 80138e0:	021b      	lsls	r3, r3, #8
 80138e2:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80138e4:	69ba      	ldr	r2, [r7, #24]
 80138e6:	f892 219d 	ldrb.w	r2, [r2, #413]	@ 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 80138ea:	4413      	add	r3, r2
 80138ec:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80138ee:	8a7b      	ldrh	r3, [r7, #18]
 80138f0:	6979      	ldr	r1, [r7, #20]
 80138f2:	4618      	mov	r0, r3
 80138f4:	f002 f961 	bl	8015bba <VL53L1_calc_decoded_timeout_us>
 80138f8:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80138fe:	69bb      	ldr	r3, [r7, #24]
 8013900:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
		timeout_encoded =
 8013904:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8013906:	8a7b      	ldrh	r3, [r7, #18]
 8013908:	021b      	lsls	r3, r3, #8
 801390a:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 801390c:	69ba      	ldr	r2, [r7, #24]
 801390e:	f892 21a1 	ldrb.w	r2, [r2, #417]	@ 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 8013912:	4413      	add	r3, r2
 8013914:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8013916:	8a7b      	ldrh	r3, [r7, #18]
 8013918:	6979      	ldr	r1, [r7, #20]
 801391a:	4618      	mov	r0, r3
 801391c:	f002 f94d 	bl	8015bba <VL53L1_calc_decoded_timeout_us>
 8013920:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	681a      	ldr	r2, [r3, #0]
 801392a:	69bb      	ldr	r3, [r7, #24]
 801392c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	681a      	ldr	r2, [r3, #0]
 8013932:	69bb      	ldr	r3, [r7, #24]
 8013934:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	681a      	ldr	r2, [r3, #0]
 801393a:	69bb      	ldr	r3, [r7, #24]
 801393c:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 801393e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013942:	4618      	mov	r0, r3
 8013944:	3720      	adds	r7, #32
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}

0801394a <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 801394a:	b480      	push	{r7}
 801394c:	b087      	sub	sp, #28
 801394e:	af00      	add	r7, sp, #0
 8013950:	60f8      	str	r0, [r7, #12]
 8013952:	460b      	mov	r3, r1
 8013954:	607a      	str	r2, [r7, #4]
 8013956:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013958:	2300      	movs	r3, #0
 801395a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8013960:	2301      	movs	r3, #1
 8013962:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8013964:	7afb      	ldrb	r3, [r7, #11]
 8013966:	2b07      	cmp	r3, #7
 8013968:	d81c      	bhi.n	80139a4 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 801396a:	7afb      	ldrb	r3, [r7, #11]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d004      	beq.n	801397a <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8013970:	7afb      	ldrb	r3, [r7, #11]
 8013972:	2201      	movs	r2, #1
 8013974:	fa02 f303 	lsl.w	r3, r2, r3
 8013978:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	f893 21c5 	ldrb.w	r2, [r3, #453]	@ 0x1c5
		*pvalue =
 8013980:	7dbb      	ldrb	r3, [r7, #22]
 8013982:	4013      	ands	r3, r2
 8013984:	b2da      	uxtb	r2, r3
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 801398a:	7afb      	ldrb	r3, [r7, #11]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d00b      	beq.n	80139a8 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	461a      	mov	r2, r3
 8013996:	7afb      	ldrb	r3, [r7, #11]
 8013998:	fa42 f303 	asr.w	r3, r2, r3
 801399c:	b2da      	uxtb	r2, r3
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	701a      	strb	r2, [r3, #0]
 80139a2:	e001      	b.n	80139a8 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 80139a4:	23fc      	movs	r3, #252	@ 0xfc
 80139a6:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 80139a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	371c      	adds	r7, #28
 80139b0:	46bd      	mov	sp, r7
 80139b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b6:	4770      	bx	lr

080139b8 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b084      	sub	sp, #16
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80139c2:	2300      	movs	r3, #0
 80139c4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	7858      	ldrb	r0, [r3, #1]
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	7819      	ldrb	r1, [r3, #0]
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	f203 13c3 	addw	r3, r3, #451	@ 0x1c3
 80139d8:	461a      	mov	r2, r3
 80139da:	f002 f9c0 	bl	8015d5e <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	7898      	ldrb	r0, [r3, #2]
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	78d9      	ldrb	r1, [r3, #3]
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80139ec:	461a      	mov	r2, r3
 80139ee:	f002 f9f5 	bl	8015ddc <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 80139f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80139f6:	4618      	mov	r0, r3
 80139f8:	3710      	adds	r7, #16
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}

080139fe <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80139fe:	b580      	push	{r7, lr}
 8013a00:	b084      	sub	sp, #16
 8013a02:	af00      	add	r7, sp, #0
 8013a04:	6078      	str	r0, [r7, #4]
 8013a06:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	f893 01c3 	ldrb.w	r0, [r3, #451]	@ 0x1c3
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	3301      	adds	r3, #1
 8013a1a:	683a      	ldr	r2, [r7, #0]
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	f002 fb64 	bl	80160ea <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8013a22:	68bb      	ldr	r3, [r7, #8]
 8013a24:	f893 01c4 	ldrb.w	r0, [r3, #452]	@ 0x1c4
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	1c99      	adds	r1, r3, #2
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	3303      	adds	r3, #3
 8013a30:	461a      	mov	r2, r3
 8013a32:	f002 f9bb 	bl	8015dac <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8013a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3710      	adds	r7, #16
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}

08013a42 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8013a42:	b580      	push	{r7, lr}
 8013a44:	b086      	sub	sp, #24
 8013a46:	af00      	add	r7, sp, #0
 8013a48:	6078      	str	r0, [r7, #4]
 8013a4a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8013a54:	2300      	movs	r3, #0
 8013a56:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8013a58:	2300      	movs	r3, #0
 8013a5a:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8013a60:	693b      	ldr	r3, [r7, #16]
 8013a62:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 8013a66:	f107 020e 	add.w	r2, r7, #14
 8013a6a:	f107 010d 	add.w	r1, r7, #13
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f002 fb3b 	bl	80160ea <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8013a74:	7bba      	ldrb	r2, [r7, #14]
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8013a7a:	7b7a      	ldrb	r2, [r7, #13]
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8013a80:	693b      	ldr	r3, [r7, #16]
 8013a82:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 8013a86:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8013a88:	7bfb      	ldrb	r3, [r7, #15]
 8013a8a:	091b      	lsrs	r3, r3, #4
 8013a8c:	b2da      	uxtb	r2, r3
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8013a92:	7bfb      	ldrb	r3, [r7, #15]
 8013a94:	f003 030f 	and.w	r3, r3, #15
 8013a98:	b2da      	uxtb	r2, r3
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8013a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3718      	adds	r7, #24
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}
	...

08013aac <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8013aac:	b480      	push	{r7}
 8013aae:	b087      	sub	sp, #28
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	60f8      	str	r0, [r7, #12]
 8013ab4:	607a      	str	r2, [r7, #4]
 8013ab6:	603b      	str	r3, [r7, #0]
 8013ab8:	460b      	mov	r3, r1
 8013aba:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013abc:	2300      	movs	r3, #0
 8013abe:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8013ac4:	7afb      	ldrb	r3, [r7, #11]
 8013ac6:	3b01      	subs	r3, #1
 8013ac8:	2b25      	cmp	r3, #37	@ 0x25
 8013aca:	f200 808e 	bhi.w	8013bea <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8013ace:	a201      	add	r2, pc, #4	@ (adr r2, 8013ad4 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8013ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ad4:	08013b6d 	.word	0x08013b6d
 8013ad8:	08013b6d 	.word	0x08013b6d
 8013adc:	08013b6d 	.word	0x08013b6d
 8013ae0:	08013b6d 	.word	0x08013b6d
 8013ae4:	08013b6d 	.word	0x08013b6d
 8013ae8:	08013b97 	.word	0x08013b97
 8013aec:	08013b97 	.word	0x08013b97
 8013af0:	08013b97 	.word	0x08013b97
 8013af4:	08013beb 	.word	0x08013beb
 8013af8:	08013beb 	.word	0x08013beb
 8013afc:	08013beb 	.word	0x08013beb
 8013b00:	08013beb 	.word	0x08013beb
 8013b04:	08013beb 	.word	0x08013beb
 8013b08:	08013beb 	.word	0x08013beb
 8013b0c:	08013beb 	.word	0x08013beb
 8013b10:	08013beb 	.word	0x08013beb
 8013b14:	08013b6d 	.word	0x08013b6d
 8013b18:	08013b97 	.word	0x08013b97
 8013b1c:	08013beb 	.word	0x08013beb
 8013b20:	08013beb 	.word	0x08013beb
 8013b24:	08013beb 	.word	0x08013beb
 8013b28:	08013beb 	.word	0x08013beb
 8013b2c:	08013beb 	.word	0x08013beb
 8013b30:	08013beb 	.word	0x08013beb
 8013b34:	08013beb 	.word	0x08013beb
 8013b38:	08013beb 	.word	0x08013beb
 8013b3c:	08013beb 	.word	0x08013beb
 8013b40:	08013beb 	.word	0x08013beb
 8013b44:	08013beb 	.word	0x08013beb
 8013b48:	08013beb 	.word	0x08013beb
 8013b4c:	08013beb 	.word	0x08013beb
 8013b50:	08013beb 	.word	0x08013beb
 8013b54:	08013beb 	.word	0x08013beb
 8013b58:	08013beb 	.word	0x08013beb
 8013b5c:	08013beb 	.word	0x08013beb
 8013b60:	08013bc1 	.word	0x08013bc1
 8013b64:	08013bc1 	.word	0x08013bc1
 8013b68:	08013bc1 	.word	0x08013bc1
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8013b6c:	693b      	ldr	r3, [r7, #16]
 8013b6e:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	@ 0xca
		*pdss_config__target_total_rate_mcps =
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8013b76:	693b      	ldr	r3, [r7, #16]
 8013b78:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
		*pphasecal_config_timeout_us =
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8013b80:	693b      	ldr	r3, [r7, #16]
 8013b82:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
		*pmm_config_timeout_us =
 8013b86:	6a3b      	ldr	r3, [r7, #32]
 8013b88:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
		*prange_config_timeout_us =
 8013b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b92:	601a      	str	r2, [r3, #0]
	break;
 8013b94:	e02c      	b.n	8013bf0 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8013ba0:	693b      	ldr	r3, [r7, #16]
 8013ba2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
		*pmm_config_timeout_us =
 8013bb0:	6a3b      	ldr	r3, [r7, #32]
 8013bb2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
		*prange_config_timeout_us =
 8013bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bbc:	601a      	str	r2, [r3, #0]
	break;
 8013bbe:	e017      	b.n	8013bf0 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8013bc0:	693b      	ldr	r3, [r7, #16]
 8013bc2:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
		*pmm_config_timeout_us =
 8013bda:	6a3b      	ldr	r3, [r7, #32]
 8013bdc:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
		*prange_config_timeout_us =
 8013be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013be6:	601a      	str	r2, [r3, #0]
	break;
 8013be8:	e002      	b.n	8013bf0 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8013bea:	23fc      	movs	r3, #252	@ 0xfc
 8013bec:	75fb      	strb	r3, [r7, #23]
		break;
 8013bee:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8013bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	371c      	adds	r7, #28
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfe:	4770      	bx	lr

08013c00 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b092      	sub	sp, #72	@ 0x48
 8013c04:	af04      	add	r7, sp, #16
 8013c06:	60f8      	str	r0, [r7, #12]
 8013c08:	607b      	str	r3, [r7, #4]
 8013c0a:	460b      	mov	r3, r1
 8013c0c:	72fb      	strb	r3, [r7, #11]
 8013c0e:	4613      	mov	r3, r2
 8013c10:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013c12:	2300      	movs	r3, #0
 8013c14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53L1_LLDriverData_t *pdev =
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	633b      	str	r3, [r7, #48]	@ 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8013c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8013c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c26:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8013c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8013c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c2e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8013c32:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8013c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c36:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8013c3a:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8013c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c3e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8013c42:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8013c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c46:	33a4      	adds	r3, #164	@ 0xa4
 8013c48:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8013c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c4c:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8013c50:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8013c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c54:	7afa      	ldrb	r2, [r7, #11]
 8013c56:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8013c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013c5c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8013c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013c62:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8013c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013c68:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8013c6a:	2103      	movs	r1, #3
 8013c6c:	68f8      	ldr	r0, [r7, #12]
 8013c6e:	f001 fb7c 	bl	801536a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8013c72:	7afb      	ldrb	r3, [r7, #11]
 8013c74:	3b01      	subs	r3, #1
 8013c76:	2b25      	cmp	r3, #37	@ 0x25
 8013c78:	f200 810c 	bhi.w	8013e94 <VL53L1_set_preset_mode+0x294>
 8013c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8013c84 <VL53L1_set_preset_mode+0x84>)
 8013c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c82:	bf00      	nop
 8013c84:	08013d1d 	.word	0x08013d1d
 8013c88:	08013d39 	.word	0x08013d39
 8013c8c:	08013d55 	.word	0x08013d55
 8013c90:	08013d71 	.word	0x08013d71
 8013c94:	08013d8d 	.word	0x08013d8d
 8013c98:	08013da9 	.word	0x08013da9
 8013c9c:	08013dc5 	.word	0x08013dc5
 8013ca0:	08013de1 	.word	0x08013de1
 8013ca4:	08013e95 	.word	0x08013e95
 8013ca8:	08013e95 	.word	0x08013e95
 8013cac:	08013e95 	.word	0x08013e95
 8013cb0:	08013e95 	.word	0x08013e95
 8013cb4:	08013e95 	.word	0x08013e95
 8013cb8:	08013e95 	.word	0x08013e95
 8013cbc:	08013e95 	.word	0x08013e95
 8013cc0:	08013e95 	.word	0x08013e95
 8013cc4:	08013dfd 	.word	0x08013dfd
 8013cc8:	08013e19 	.word	0x08013e19
 8013ccc:	08013e95 	.word	0x08013e95
 8013cd0:	08013e95 	.word	0x08013e95
 8013cd4:	08013e95 	.word	0x08013e95
 8013cd8:	08013e95 	.word	0x08013e95
 8013cdc:	08013e95 	.word	0x08013e95
 8013ce0:	08013e95 	.word	0x08013e95
 8013ce4:	08013e95 	.word	0x08013e95
 8013ce8:	08013e95 	.word	0x08013e95
 8013cec:	08013e95 	.word	0x08013e95
 8013cf0:	08013e95 	.word	0x08013e95
 8013cf4:	08013e95 	.word	0x08013e95
 8013cf8:	08013e95 	.word	0x08013e95
 8013cfc:	08013e95 	.word	0x08013e95
 8013d00:	08013e95 	.word	0x08013e95
 8013d04:	08013e95 	.word	0x08013e95
 8013d08:	08013e95 	.word	0x08013e95
 8013d0c:	08013e95 	.word	0x08013e95
 8013d10:	08013e35 	.word	0x08013e35
 8013d14:	08013e55 	.word	0x08013e55
 8013d18:	08013e75 	.word	0x08013e75

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8013d1c:	69bb      	ldr	r3, [r7, #24]
 8013d1e:	9301      	str	r3, [sp, #4]
 8013d20:	69fb      	ldr	r3, [r7, #28]
 8013d22:	9300      	str	r3, [sp, #0]
 8013d24:	6a3b      	ldr	r3, [r7, #32]
 8013d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013d2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d2c:	f000 ffa0 	bl	8014c70 <VL53L1_preset_mode_standard_ranging>
 8013d30:	4603      	mov	r3, r0
 8013d32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8013d36:	e0b1      	b.n	8013e9c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8013d38:	69bb      	ldr	r3, [r7, #24]
 8013d3a:	9301      	str	r3, [sp, #4]
 8013d3c:	69fb      	ldr	r3, [r7, #28]
 8013d3e:	9300      	str	r3, [sp, #0]
 8013d40:	6a3b      	ldr	r3, [r7, #32]
 8013d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013d46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d48:	f001 f8b0 	bl	8014eac <VL53L1_preset_mode_standard_ranging_short_range>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8013d52:	e0a3      	b.n	8013e9c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8013d54:	69bb      	ldr	r3, [r7, #24]
 8013d56:	9301      	str	r3, [sp, #4]
 8013d58:	69fb      	ldr	r3, [r7, #28]
 8013d5a:	9300      	str	r3, [sp, #0]
 8013d5c:	6a3b      	ldr	r3, [r7, #32]
 8013d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013d62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d64:	f001 f8e3 	bl	8014f2e <VL53L1_preset_mode_standard_ranging_long_range>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8013d6e:	e095      	b.n	8013e9c <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8013d70:	69bb      	ldr	r3, [r7, #24]
 8013d72:	9301      	str	r3, [sp, #4]
 8013d74:	69fb      	ldr	r3, [r7, #28]
 8013d76:	9300      	str	r3, [sp, #0]
 8013d78:	6a3b      	ldr	r3, [r7, #32]
 8013d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013d7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d80:	f001 f916 	bl	8014fb0 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8013d84:	4603      	mov	r3, r0
 8013d86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8013d8a:	e087      	b.n	8013e9c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8013d8c:	69bb      	ldr	r3, [r7, #24]
 8013d8e:	9301      	str	r3, [sp, #4]
 8013d90:	69fb      	ldr	r3, [r7, #28]
 8013d92:	9300      	str	r3, [sp, #0]
 8013d94:	6a3b      	ldr	r3, [r7, #32]
 8013d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013d9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d9c:	f001 f92d 	bl	8014ffa <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8013da0:	4603      	mov	r3, r0
 8013da2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8013da6:	e079      	b.n	8013e9c <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8013da8:	69bb      	ldr	r3, [r7, #24]
 8013daa:	9301      	str	r3, [sp, #4]
 8013dac:	69fb      	ldr	r3, [r7, #28]
 8013dae:	9300      	str	r3, [sp, #0]
 8013db0:	6a3b      	ldr	r3, [r7, #32]
 8013db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013db4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013db6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013db8:	f001 f944 	bl	8015044 <VL53L1_preset_mode_timed_ranging>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8013dc2:	e06b      	b.n	8013e9c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8013dc4:	69bb      	ldr	r3, [r7, #24]
 8013dc6:	9301      	str	r3, [sp, #4]
 8013dc8:	69fb      	ldr	r3, [r7, #28]
 8013dca:	9300      	str	r3, [sp, #0]
 8013dcc:	6a3b      	ldr	r3, [r7, #32]
 8013dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013dd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013dd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013dd4:	f001 f970 	bl	80150b8 <VL53L1_preset_mode_timed_ranging_short_range>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8013dde:	e05d      	b.n	8013e9c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8013de0:	69bb      	ldr	r3, [r7, #24]
 8013de2:	9301      	str	r3, [sp, #4]
 8013de4:	69fb      	ldr	r3, [r7, #28]
 8013de6:	9300      	str	r3, [sp, #0]
 8013de8:	6a3b      	ldr	r3, [r7, #32]
 8013dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013dec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013dee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013df0:	f001 f99c 	bl	801512c <VL53L1_preset_mode_timed_ranging_long_range>
 8013df4:	4603      	mov	r3, r0
 8013df6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8013dfa:	e04f      	b.n	8013e9c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8013dfc:	69bb      	ldr	r3, [r7, #24]
 8013dfe:	9301      	str	r3, [sp, #4]
 8013e00:	69fb      	ldr	r3, [r7, #28]
 8013e02:	9300      	str	r3, [sp, #0]
 8013e04:	6a3b      	ldr	r3, [r7, #32]
 8013e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013e0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013e0c:	f001 fa70 	bl	80152f0 <VL53L1_preset_mode_olt>
 8013e10:	4603      	mov	r3, r0
 8013e12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8013e16:	e041      	b.n	8013e9c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8013e18:	69bb      	ldr	r3, [r7, #24]
 8013e1a:	9301      	str	r3, [sp, #4]
 8013e1c:	69fb      	ldr	r3, [r7, #28]
 8013e1e:	9300      	str	r3, [sp, #0]
 8013e20:	6a3b      	ldr	r3, [r7, #32]
 8013e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013e26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013e28:	f001 fa2c 	bl	8015284 <VL53L1_preset_mode_singleshot_ranging>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8013e32:	e033      	b.n	8013e9c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	9302      	str	r3, [sp, #8]
 8013e38:	69bb      	ldr	r3, [r7, #24]
 8013e3a:	9301      	str	r3, [sp, #4]
 8013e3c:	69fb      	ldr	r3, [r7, #28]
 8013e3e:	9300      	str	r3, [sp, #0]
 8013e40:	6a3b      	ldr	r3, [r7, #32]
 8013e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013e46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013e48:	f001 f9d0 	bl	80151ec <VL53L1_preset_mode_low_power_auto_short_ranging>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8013e52:	e023      	b.n	8013e9c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8013e54:	697b      	ldr	r3, [r7, #20]
 8013e56:	9302      	str	r3, [sp, #8]
 8013e58:	69bb      	ldr	r3, [r7, #24]
 8013e5a:	9301      	str	r3, [sp, #4]
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	9300      	str	r3, [sp, #0]
 8013e60:	6a3b      	ldr	r3, [r7, #32]
 8013e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013e66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013e68:	f001 f99a 	bl	80151a0 <VL53L1_preset_mode_low_power_auto_ranging>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8013e72:	e013      	b.n	8013e9c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8013e74:	697b      	ldr	r3, [r7, #20]
 8013e76:	9302      	str	r3, [sp, #8]
 8013e78:	69bb      	ldr	r3, [r7, #24]
 8013e7a:	9301      	str	r3, [sp, #4]
 8013e7c:	69fb      	ldr	r3, [r7, #28]
 8013e7e:	9300      	str	r3, [sp, #0]
 8013e80:	6a3b      	ldr	r3, [r7, #32]
 8013e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013e86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013e88:	f001 f9d6 	bl	8015238 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8013e92:	e003      	b.n	8013e9c <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8013e94:	23fc      	movs	r3, #252	@ 0xfc
 8013e96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 8013e9a:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8013e9c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d105      	bne.n	8013eb0 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 8013ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ea6:	893a      	ldrh	r2, [r7, #8]
 8013ea8:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8013eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eac:	893a      	ldrh	r2, [r7, #8]
 8013eae:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 8013eb0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d108      	bne.n	8013eca <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 8013eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013eba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013ebc:	6879      	ldr	r1, [r7, #4]
 8013ebe:	68f8      	ldr	r0, [r7, #12]
 8013ec0:	f7ff fca2 	bl	8013808 <VL53L1_set_timeouts_us>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8013eca:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d106      	bne.n	8013ee0 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8013ed2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013ed4:	68f8      	ldr	r0, [r7, #12]
 8013ed6:	f7ff fc6e 	bl	80137b6 <VL53L1_set_inter_measurement_period_ms>
 8013eda:	4603      	mov	r3, r0
 8013edc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8013ee0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3738      	adds	r7, #56	@ 0x38
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}

08013eec <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8013eec:	b480      	push	{r7}
 8013eee:	b085      	sub	sp, #20
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	@ 0x1a6
	*plite_sigma =
 8013f04:	683b      	ldr	r3, [r7, #0]
 8013f06:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8013f08:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3714      	adds	r7, #20
 8013f10:	46bd      	mov	sp, r7
 8013f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f16:	4770      	bx	lr

08013f18 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8013f18:	b480      	push	{r7}
 8013f1a:	b085      	sub	sp, #20
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	460b      	mov	r3, r1
 8013f22:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013f24:	2300      	movs	r3, #0
 8013f26:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	887a      	ldrh	r2, [r7, #2]
 8013f30:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 8013f34:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3714      	adds	r7, #20
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f42:	4770      	bx	lr

08013f44 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8013f44:	b480      	push	{r7}
 8013f46:	b085      	sub	sp, #20
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
 8013f4c:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	@ 0x1a8
	*plite_mincountrate =
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8013f60:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8013f64:	4618      	mov	r0, r3
 8013f66:	3714      	adds	r7, #20
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6e:	4770      	bx	lr

08013f70 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8013f70:	b480      	push	{r7}
 8013f72:	b085      	sub	sp, #20
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	460b      	mov	r3, r1
 8013f7a:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	887a      	ldrh	r2, [r7, #2]
 8013f88:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8013f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8013f90:	4618      	mov	r0, r3
 8013f92:	3714      	adds	r7, #20
 8013f94:	46bd      	mov	sp, r7
 8013f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9a:	4770      	bx	lr

08013f9c <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 8013f9c:	b480      	push	{r7}
 8013f9e:	b085      	sub	sp, #20
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013fa8:	2300      	movs	r3, #0
 8013faa:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8013fb6:	f003 0303 	and.w	r3, r3, #3
 8013fba:	b2da      	uxtb	r2, r3
 8013fbc:	78fb      	ldrb	r3, [r7, #3]
 8013fbe:	009b      	lsls	r3, r3, #2
 8013fc0:	b2db      	uxtb	r3, r3
 8013fc2:	4413      	add	r3, r2
 8013fc4:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8013fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3714      	adds	r7, #20
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fda:	4770      	bx	lr

08013fdc <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b0d0      	sub	sp, #320	@ 0x140
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013fe6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8013fea:	6018      	str	r0, [r3, #0]
 8013fec:	4608      	mov	r0, r1
 8013fee:	4611      	mov	r1, r2
 8013ff0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013ff4:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8013ff8:	4602      	mov	r2, r0
 8013ffa:	701a      	strb	r2, [r3, #0]
 8013ffc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014000:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8014004:	460a      	mov	r2, r1
 8014006:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014008:	2300      	movs	r3, #0
 801400a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801400e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014012:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 801401c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014020:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8014024:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8014028:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801402c:	3342      	adds	r3, #66	@ 0x42
 801402e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8014032:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014036:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801403a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 801403e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014042:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8014046:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 801404a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801404e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8014052:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8014056:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801405a:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 801405e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8014062:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014066:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 801406a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 801406e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014072:	332c      	adds	r3, #44	@ 0x2c
 8014074:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8014078:	f107 030c 	add.w	r3, r7, #12
 801407c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	uint16_t i                          = 0;
 8014080:	2300      	movs	r3, #0
 8014082:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t i2c_index                  = 0;
 8014086:	2300      	movs	r3, #0
 8014088:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 801408c:	2300      	movs	r3, #0
 801408e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8014092:	2300      	movs	r3, #0
 8014094:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8014098:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801409c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80140a0:	f2a2 123d 	subw	r2, r2, #317	@ 0x13d
 80140a4:	7812      	ldrb	r2, [r2, #0]
 80140a6:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 80140a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80140ac:	791b      	ldrb	r3, [r3, #4]
 80140ae:	b25b      	sxtb	r3, r3
 80140b0:	f003 030f 	and.w	r3, r3, #15
 80140b4:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80140b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80140ba:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 80140be:	f993 3000 	ldrsb.w	r3, [r3]
 80140c2:	4313      	orrs	r3, r2
 80140c4:	b25b      	sxtb	r3, r3
 80140c6:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 80140c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80140cc:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 80140ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80140d2:	f8b3 2142 	ldrh.w	r2, [r3, #322]	@ 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80140d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80140da:	f8a3 217c 	strh.w	r2, [r3, #380]	@ 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 80140de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80140e2:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 80140e6:	2bff      	cmp	r3, #255	@ 0xff
 80140e8:	d104      	bne.n	80140f4 <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80140ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80140ee:	2200      	movs	r2, #0
 80140f0:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80140f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80140f8:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	d139      	bne.n	8014174 <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8014100:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014104:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8014108:	2b00      	cmp	r3, #0
 801410a:	d133      	bne.n	8014174 <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 801410c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014110:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8014114:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014118:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 801411c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014120:	2220      	movs	r2, #32
 8014122:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 8014126:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801412a:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 801412e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014132:	2b00      	cmp	r3, #0
 8014134:	d10c      	bne.n	8014150 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8014136:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801413a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 801413e:	b29b      	uxth	r3, r3
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	b29b      	uxth	r3, r3
 8014144:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 8014146:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801414a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 801414e:	e004      	b.n	801415a <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8014150:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014154:	2200      	movs	r2, #0
 8014156:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 801415a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801415e:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8014162:	781b      	ldrb	r3, [r3, #0]
 8014164:	2b04      	cmp	r3, #4
 8014166:	d805      	bhi.n	8014174 <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8014168:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801416c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8014170:	2205      	movs	r2, #5
 8014172:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8014174:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014178:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 801417c:	2b01      	cmp	r3, #1
 801417e:	d113      	bne.n	80141a8 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8014180:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014184:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8014188:	2b01      	cmp	r3, #1
 801418a:	d10d      	bne.n	80141a8 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 801418c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014190:	f893 22e7 	ldrb.w	r2, [r3, #743]	@ 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8014194:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014198:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 801419c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80141a0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80141a4:	2206      	movs	r2, #6
 80141a6:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 80141a8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80141ac:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	3b01      	subs	r3, #1
 80141b4:	2b05      	cmp	r3, #5
 80141b6:	d827      	bhi.n	8014208 <VL53L1_init_and_start_range+0x22c>
 80141b8:	a201      	add	r2, pc, #4	@ (adr r2, 80141c0 <VL53L1_init_and_start_range+0x1e4>)
 80141ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141be:	bf00      	nop
 80141c0:	08014201 	.word	0x08014201
 80141c4:	080141f9 	.word	0x080141f9
 80141c8:	080141f1 	.word	0x080141f1
 80141cc:	080141e9 	.word	0x080141e9
 80141d0:	080141e1 	.word	0x080141e1
 80141d4:	080141d9 	.word	0x080141d9
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 80141d8:	2301      	movs	r3, #1
 80141da:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80141de:	e017      	b.n	8014210 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 80141e0:	230d      	movs	r3, #13
 80141e2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80141e6:	e013      	b.n	8014210 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 80141e8:	2324      	movs	r3, #36	@ 0x24
 80141ea:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80141ee:	e00f      	b.n	8014210 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 80141f0:	2344      	movs	r3, #68	@ 0x44
 80141f2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80141f6:	e00b      	b.n	8014210 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 80141f8:	235a      	movs	r3, #90	@ 0x5a
 80141fa:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80141fe:	e007      	b.n	8014210 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8014200:	2371      	movs	r3, #113	@ 0x71
 8014202:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8014206:	e003      	b.n	8014210 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8014208:	2383      	movs	r3, #131	@ 0x83
 801420a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 801420e:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8014210:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8014214:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 8014218:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 801421c:	f107 030c 	add.w	r3, r7, #12
 8014220:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8014224:	2300      	movs	r3, #0
 8014226:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 801422a:	e00b      	b.n	8014244 <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 801422c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014230:	1c5a      	adds	r2, r3, #1
 8014232:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 8014236:	2200      	movs	r2, #0
 8014238:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 801423a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 801423e:	3301      	adds	r3, #1
 8014240:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8014244:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8014248:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 801424c:	429a      	cmp	r2, r3
 801424e:	d3ed      	bcc.n	801422c <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8014250:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014254:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8014258:	781b      	ldrb	r3, [r3, #0]
 801425a:	2b05      	cmp	r3, #5
 801425c:	d917      	bls.n	801428e <VL53L1_init_and_start_range+0x2b2>
 801425e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8014262:	2b00      	cmp	r3, #0
 8014264:	d113      	bne.n	801428e <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8014266:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801426a:	f1c3 0301 	rsb	r3, r3, #1
 801426e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8014272:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8014276:	f107 020c 	add.w	r2, r7, #12
 801427a:	4413      	add	r3, r2
 801427c:	461a      	mov	r2, r3
 801427e:	210b      	movs	r1, #11
 8014280:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8014284:	f001 ff60 	bl	8016148 <VL53L1_i2c_encode_static_nvm_managed>
 8014288:	4603      	mov	r3, r0
 801428a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 801428e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014292:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8014296:	781b      	ldrb	r3, [r3, #0]
 8014298:	2b04      	cmp	r3, #4
 801429a:	d917      	bls.n	80142cc <VL53L1_init_and_start_range+0x2f0>
 801429c:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d113      	bne.n	80142cc <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80142a4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80142a8:	f1c3 030d 	rsb	r3, r3, #13
 80142ac:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80142b0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 80142b4:	f107 020c 	add.w	r2, r7, #12
 80142b8:	4413      	add	r3, r2
 80142ba:	461a      	mov	r2, r3
 80142bc:	2117      	movs	r1, #23
 80142be:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80142c2:	f002 f81d 	bl	8016300 <VL53L1_i2c_encode_customer_nvm_managed>
 80142c6:	4603      	mov	r3, r0
 80142c8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80142cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80142d0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	2b03      	cmp	r3, #3
 80142d8:	d917      	bls.n	801430a <VL53L1_init_and_start_range+0x32e>
 80142da:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d113      	bne.n	801430a <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80142e2:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80142e6:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80142ea:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80142ee:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_config(
 80142f2:	f107 020c 	add.w	r2, r7, #12
 80142f6:	4413      	add	r3, r2
 80142f8:	461a      	mov	r2, r3
 80142fa:	2120      	movs	r1, #32
 80142fc:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8014300:	f002 f93c 	bl	801657c <VL53L1_i2c_encode_static_config>
 8014304:	4603      	mov	r3, r0
 8014306:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 801430a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801430e:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8014312:	781b      	ldrb	r3, [r3, #0]
 8014314:	2b02      	cmp	r3, #2
 8014316:	d917      	bls.n	8014348 <VL53L1_init_and_start_range+0x36c>
 8014318:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 801431c:	2b00      	cmp	r3, #0
 801431e:	d113      	bne.n	8014348 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8014320:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8014324:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8014328:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 801432c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_general_config(
 8014330:	f107 020c 	add.w	r2, r7, #12
 8014334:	4413      	add	r3, r2
 8014336:	461a      	mov	r2, r3
 8014338:	2116      	movs	r1, #22
 801433a:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 801433e:	f002 fa00 	bl	8016742 <VL53L1_i2c_encode_general_config>
 8014342:	4603      	mov	r3, r0
 8014344:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8014348:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801434c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	2b01      	cmp	r3, #1
 8014354:	d917      	bls.n	8014386 <VL53L1_init_and_start_range+0x3aa>
 8014356:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 801435a:	2b00      	cmp	r3, #0
 801435c:	d113      	bne.n	8014386 <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 801435e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8014362:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8014366:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 801436a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_timing_config(
 801436e:	f107 020c 	add.w	r2, r7, #12
 8014372:	4413      	add	r3, r2
 8014374:	461a      	mov	r2, r3
 8014376:	2117      	movs	r1, #23
 8014378:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 801437c:	f002 fa65 	bl	801684a <VL53L1_i2c_encode_timing_config>
 8014380:	4603      	mov	r3, r0
 8014382:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8014386:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801438a:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 801438e:	781b      	ldrb	r3, [r3, #0]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d036      	beq.n	8014402 <VL53L1_init_and_start_range+0x426>
 8014394:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8014398:	2b00      	cmp	r3, #0
 801439a:	d132      	bne.n	8014402 <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 801439c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80143a0:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 80143a4:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 80143a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80143ac:	791b      	ldrb	r3, [r3, #4]
 80143ae:	f003 0320 	and.w	r3, r3, #32
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d017      	beq.n	80143e6 <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 80143b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80143ba:	789b      	ldrb	r3, [r3, #2]
 80143bc:	f043 0301 	orr.w	r3, r3, #1
 80143c0:	b2da      	uxtb	r2, r3
 80143c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80143c6:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 80143c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80143cc:	789b      	ldrb	r3, [r3, #2]
 80143ce:	f043 0301 	orr.w	r3, r3, #1
 80143d2:	b2da      	uxtb	r2, r3
 80143d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80143d8:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 80143da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80143de:	789a      	ldrb	r2, [r3, #2]
 80143e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80143e4:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80143e6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_dynamic_config(
 80143ea:	f107 020c 	add.w	r2, r7, #12
 80143ee:	4413      	add	r3, r2
 80143f0:	461a      	mov	r2, r3
 80143f2:	2112      	movs	r1, #18
 80143f4:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80143f8:	f002 faa9 	bl	801694e <VL53L1_i2c_encode_dynamic_config>
 80143fc:	4603      	mov	r3, r0
 80143fe:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 8014402:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8014406:	2b00      	cmp	r3, #0
 8014408:	d113      	bne.n	8014432 <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 801440a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801440e:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 8014412:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8014416:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_system_control(
 801441a:	f107 020c 	add.w	r2, r7, #12
 801441e:	4413      	add	r3, r2
 8014420:	461a      	mov	r2, r3
 8014422:	2105      	movs	r1, #5
 8014424:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8014428:	f002 fb16 	bl	8016a58 <VL53L1_i2c_encode_system_control>
 801442c:	4603      	mov	r3, r0
 801442e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8014432:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8014436:	2b00      	cmp	r3, #0
 8014438:	d10f      	bne.n	801445a <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 801443a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 801443e:	f107 020c 	add.w	r2, r7, #12
 8014442:	f8b7 1134 	ldrh.w	r1, [r7, #308]	@ 0x134
 8014446:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 801444a:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 801444e:	6800      	ldr	r0, [r0, #0]
 8014450:	f7f5 feef 	bl	800a232 <VL53L1_WriteMulti>
 8014454:	4603      	mov	r3, r0
 8014456:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 801445a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 801445e:	2b00      	cmp	r3, #0
 8014460:	d109      	bne.n	8014476 <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8014462:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014466:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801446a:	6818      	ldr	r0, [r3, #0]
 801446c:	f000 ffa6 	bl	80153bc <VL53L1_update_ll_driver_rd_state>
 8014470:	4603      	mov	r3, r0
 8014472:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	if (status == VL53L1_ERROR_NONE)
 8014476:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 801447a:	2b00      	cmp	r3, #0
 801447c:	d109      	bne.n	8014492 <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 801447e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014482:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014486:	6818      	ldr	r0, [r3, #0]
 8014488:	f001 f86b 	bl	8015562 <VL53L1_update_ll_driver_cfg_state>
 801448c:	4603      	mov	r3, r0
 801448e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	LOG_FUNCTION_END(status);

	return status;
 8014492:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 8014496:	4618      	mov	r0, r3
 8014498:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80144a8:	2300      	movs	r3, #0
 80144aa:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80144b6:	b25b      	sxtb	r3, r3
 80144b8:	f003 030f 	and.w	r3, r3, #15
 80144bc:	b25b      	sxtb	r3, r3
 80144be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80144c2:	b25b      	sxtb	r3, r3
 80144c4:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80144d2:	4619      	mov	r1, r3
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f002 fafa 	bl	8016ace <VL53L1_set_system_control>
 80144da:	4603      	mov	r3, r0
 80144dc:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80144e4:	f003 030f 	and.w	r3, r3, #15
 80144e8:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 80144f0:	2103      	movs	r1, #3
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f000 ff39 	bl	801536a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80144fe:	2b01      	cmp	r3, #1
 8014500:	d102      	bne.n	8014508 <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f001 fcb4 	bl	8015e70 <VL53L1_low_power_auto_data_stop_range>

	return status;
 8014508:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801450c:	4618      	mov	r0, r3
 801450e:	3710      	adds	r7, #16
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}

08014514 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b0c8      	sub	sp, #288	@ 0x120
 8014518:	af00      	add	r7, sp, #0
 801451a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801451e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014522:	6018      	str	r0, [r3, #0]
 8014524:	460a      	mov	r2, r1
 8014526:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801452a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 801452e:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014530:	2300      	movs	r3, #0
 8014532:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014536:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801453a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8014544:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8014548:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 801454c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8014550:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8014554:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8014558:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 801455c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8014560:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8014564:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8014568:	2388      	movs	r3, #136	@ 0x88
 801456a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 801456e:	2300      	movs	r3, #0
 8014570:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8014574:	2300      	movs	r3, #0
 8014576:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 801457a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801457e:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	2b01      	cmp	r3, #1
 8014586:	d008      	beq.n	801459a <VL53L1_get_measurement_results+0x86>
 8014588:	2b02      	cmp	r3, #2
 801458a:	d10d      	bne.n	80145a8 <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 801458c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8014590:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 8014594:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8014598:	e00a      	b.n	80145b0 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 801459a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 801459e:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 80145a2:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80145a6:	e003      	b.n	80145b0 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 80145a8:	232c      	movs	r3, #44	@ 0x2c
 80145aa:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80145ae:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80145b0:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d10f      	bne.n	80145d8 <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 80145b8:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80145bc:	f107 0208 	add.w	r2, r7, #8
 80145c0:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 80145c4:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80145c8:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 80145cc:	6800      	ldr	r0, [r0, #0]
 80145ce:	f7f5 fe56 	bl	800a27e <VL53L1_ReadMulti>
 80145d2:	4603      	mov	r3, r0
 80145d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 80145d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80145dc:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	2b01      	cmp	r3, #1
 80145e4:	d917      	bls.n	8014616 <VL53L1_get_measurement_results+0x102>
 80145e6:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d113      	bne.n	8014616 <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80145ee:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80145f2:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 80145f6:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80145fa:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_debug_results(
 80145fe:	f107 0208 	add.w	r2, r7, #8
 8014602:	4413      	add	r3, r2
 8014604:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8014608:	4619      	mov	r1, r3
 801460a:	2038      	movs	r0, #56	@ 0x38
 801460c:	f002 fbdd 	bl	8016dca <VL53L1_i2c_decode_debug_results>
 8014610:	4603      	mov	r3, r0
 8014612:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8014616:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801461a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d017      	beq.n	8014654 <VL53L1_get_measurement_results+0x140>
 8014624:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8014628:	2b00      	cmp	r3, #0
 801462a:	d113      	bne.n	8014654 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 801462c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8014630:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8014634:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8014638:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_core_results(
 801463c:	f107 0208 	add.w	r2, r7, #8
 8014640:	4413      	add	r3, r2
 8014642:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8014646:	4619      	mov	r1, r3
 8014648:	2021      	movs	r0, #33	@ 0x21
 801464a:	f002 fb5d 	bl	8016d08 <VL53L1_i2c_decode_core_results>
 801464e:	4603      	mov	r3, r0
 8014650:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8014654:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8014658:	2b00      	cmp	r3, #0
 801465a:	d110      	bne.n	801467e <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 801465c:	2300      	movs	r3, #0
 801465e:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8014662:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_system_results(
 8014666:	f107 0208 	add.w	r2, r7, #8
 801466a:	4413      	add	r3, r2
 801466c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8014670:	4619      	mov	r1, r3
 8014672:	202c      	movs	r0, #44	@ 0x2c
 8014674:	f002 fa52 	bl	8016b1c <VL53L1_i2c_decode_system_results>
 8014678:	4603      	mov	r3, r0
 801467a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 801467e:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8014682:	4618      	mov	r0, r3
 8014684:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b088      	sub	sp, #32
 8014690:	af00      	add	r7, sp, #0
 8014692:	60f8      	str	r0, [r7, #12]
 8014694:	460b      	mov	r3, r1
 8014696:	607a      	str	r2, [r7, #4]
 8014698:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801469a:	2300      	movs	r3, #0
 801469c:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80146a8:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 80146aa:	697b      	ldr	r3, [r7, #20]
 80146ac:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80146ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d106      	bne.n	80146c4 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 80146b6:	7afb      	ldrb	r3, [r7, #11]
 80146b8:	4619      	mov	r1, r3
 80146ba:	68f8      	ldr	r0, [r7, #12]
 80146bc:	f7ff ff2a 	bl	8014514 <VL53L1_get_measurement_results>
 80146c0:	4603      	mov	r3, r0
 80146c2:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 80146c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d10c      	bne.n	80146e6 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 80146cc:	69bb      	ldr	r3, [r7, #24]
 80146ce:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 80146d2:	4618      	mov	r0, r3
 80146d4:	69bb      	ldr	r3, [r7, #24]
 80146d6:	f503 71e7 	add.w	r1, r3, #462	@ 0x1ce
 80146da:	69bb      	ldr	r3, [r7, #24]
 80146dc:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 80146e0:	693b      	ldr	r3, [r7, #16]
 80146e2:	f000 f851 	bl	8014788 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 80146e6:	69bb      	ldr	r3, [r7, #24]
 80146e8:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80146ec:	2b01      	cmp	r3, #1
 80146ee:	d12d      	bne.n	801474c <VL53L1_get_device_results+0xc0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 80146f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d10e      	bne.n	8014716 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80146f8:	69bb      	ldr	r3, [r7, #24]
 80146fa:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d109      	bne.n	8014716 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8014702:	68f8      	ldr	r0, [r7, #12]
 8014704:	f001 fc0e 	bl	8015f24 <VL53L1_low_power_auto_setup_manual_calibration>
 8014708:	4603      	mov	r3, r0
 801470a:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 801470c:	69bb      	ldr	r3, [r7, #24]
 801470e:	2201      	movs	r2, #1
 8014710:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
 8014714:	e00c      	b.n	8014730 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8014716:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d108      	bne.n	8014730 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 801471e:	69bb      	ldr	r3, [r7, #24]
 8014720:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 8014724:	2b01      	cmp	r3, #1
 8014726:	d103      	bne.n	8014730 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8014728:	69bb      	ldr	r3, [r7, #24]
 801472a:	2202      	movs	r2, #2
 801472c:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 8014730:	69bb      	ldr	r3, [r7, #24]
 8014732:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8014736:	2bff      	cmp	r3, #255	@ 0xff
 8014738:	d008      	beq.n	801474c <VL53L1_get_device_results+0xc0>
 801473a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d104      	bne.n	801474c <VL53L1_get_device_results+0xc0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 8014742:	68f8      	ldr	r0, [r7, #12]
 8014744:	f001 fc33 	bl	8015fae <VL53L1_low_power_auto_update_DSS>
 8014748:	4603      	mov	r3, r0
 801474a:	77fb      	strb	r3, [r7, #31]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 801474c:	69bb      	ldr	r3, [r7, #24]
 801474e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8014752:	693b      	ldr	r3, [r7, #16]
 8014754:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8014756:	69bb      	ldr	r3, [r7, #24]
 8014758:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801475c:	693b      	ldr	r3, [r7, #16]
 801475e:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 8014760:	2284      	movs	r2, #132	@ 0x84
 8014762:	6939      	ldr	r1, [r7, #16]
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f003 f957 	bl	8017a18 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 801476a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d104      	bne.n	801477c <VL53L1_get_device_results+0xf0>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8014772:	68f8      	ldr	r0, [r7, #12]
 8014774:	f000 feaa 	bl	80154cc <VL53L1_check_ll_driver_rd_state>
 8014778:	4603      	mov	r3, r0
 801477a:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 801477c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014780:	4618      	mov	r0, r3
 8014782:	3720      	adds	r7, #32
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}

08014788 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8014788:	b480      	push	{r7}
 801478a:	b089      	sub	sp, #36	@ 0x24
 801478c:	af00      	add	r7, sp, #0
 801478e:	60f8      	str	r0, [r7, #12]
 8014790:	60b9      	str	r1, [r7, #8]
 8014792:	607a      	str	r2, [r7, #4]
 8014794:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8014796:	2300      	movs	r3, #0
 8014798:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 801479a:	2300      	movs	r3, #0
 801479c:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 801479e:	2300      	movs	r3, #0
 80147a0:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 80147a2:	68bb      	ldr	r3, [r7, #8]
 80147a4:	78da      	ldrb	r2, [r3, #3]
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	3304      	adds	r3, #4
 80147ae:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 80147b0:	2300      	movs	r3, #0
 80147b2:	77fb      	strb	r3, [r7, #31]
 80147b4:	e0d0      	b.n	8014958 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 80147b6:	69bb      	ldr	r3, [r7, #24]
 80147b8:	7ffa      	ldrb	r2, [r7, #31]
 80147ba:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 80147bc:	69bb      	ldr	r3, [r7, #24]
 80147be:	2200      	movs	r2, #0
 80147c0:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 80147c2:	68bb      	ldr	r3, [r7, #8]
 80147c4:	78db      	ldrb	r3, [r3, #3]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d10a      	bne.n	80147e0 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	785b      	ldrb	r3, [r3, #1]
 80147ce:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 80147d2:	2b09      	cmp	r3, #9
 80147d4:	d104      	bne.n	80147e0 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 80147d6:	69bb      	ldr	r3, [r7, #24]
 80147d8:	2213      	movs	r2, #19
 80147da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80147de:	e007      	b.n	80147f0 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	785b      	ldrb	r3, [r3, #1]
 80147e4:	f003 031f 	and.w	r3, r3, #31
 80147e8:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80147ea:	69bb      	ldr	r3, [r7, #24]
 80147ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		}

		switch (i) {
 80147f0:	7ffb      	ldrb	r3, [r7, #31]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d002      	beq.n	80147fc <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 80147f6:	2b01      	cmp	r3, #1
 80147f8:	d05d      	beq.n	80148b6 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 80147fa:	e0a7      	b.n	801494c <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 80147fc:	68bb      	ldr	r3, [r7, #8]
 80147fe:	789b      	ldrb	r3, [r3, #2]
 8014800:	2b07      	cmp	r3, #7
 8014802:	d104      	bne.n	801480e <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8014808:	69bb      	ldr	r3, [r7, #24]
 801480a:	821a      	strh	r2, [r3, #16]
 801480c:	e00c      	b.n	8014828 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	789b      	ldrb	r3, [r3, #2]
 8014812:	2b08      	cmp	r3, #8
 8014814:	d104      	bne.n	8014820 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 801481a:	69bb      	ldr	r3, [r7, #24]
 801481c:	821a      	strh	r2, [r3, #16]
 801481e:	e003      	b.n	8014828 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8014824:	69bb      	ldr	r3, [r7, #24]
 8014826:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8014828:	68bb      	ldr	r3, [r7, #8]
 801482a:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 801482c:	69bb      	ldr	r3, [r7, #24]
 801482e:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8014834:	69bb      	ldr	r3, [r7, #24]
 8014836:	85da      	strh	r2, [r3, #46]	@ 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 801483c:	69bb      	ldr	r3, [r7, #24]
 801483e:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	895b      	ldrh	r3, [r3, #10]
 8014844:	015b      	lsls	r3, r3, #5
 8014846:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8014848:	697b      	ldr	r3, [r7, #20]
 801484a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801484e:	d302      	bcc.n	8014856 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8014850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014854:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8014856:	697b      	ldr	r3, [r7, #20]
 8014858:	b29a      	uxth	r2, r3
 801485a:	69bb      	ldr	r3, [r7, #24]
 801485c:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 801485e:	68bb      	ldr	r3, [r7, #8]
 8014860:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 8014862:	69bb      	ldr	r3, [r7, #24]
 8014864:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8014866:	68bb      	ldr	r3, [r7, #8]
 8014868:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 801486a:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	68fa      	ldr	r2, [r7, #12]
 8014870:	fb02 f303 	mul.w	r3, r2, r3
 8014874:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801487c:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 801487e:	693b      	ldr	r3, [r7, #16]
 8014880:	2b00      	cmp	r3, #0
 8014882:	da01      	bge.n	8014888 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 8014884:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8014888:	12db      	asrs	r3, r3, #11
 801488a:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 801488c:	693b      	ldr	r3, [r7, #16]
 801488e:	b21a      	sxth	r2, r3
 8014890:	69bb      	ldr	r3, [r7, #24]
 8014892:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8014898:	69bb      	ldr	r3, [r7, #24]
 801489a:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 80148a0:	69bb      	ldr	r3, [r7, #24]
 80148a2:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80148a8:	69bb      	ldr	r3, [r7, #24]
 80148aa:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 80148b0:	69bb      	ldr	r3, [r7, #24]
 80148b2:	621a      	str	r2, [r3, #32]

			break;
 80148b4:	e04a      	b.n	801494c <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 80148ba:	69bb      	ldr	r3, [r7, #24]
 80148bc:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80148c2:	69bb      	ldr	r3, [r7, #24]
 80148c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
 80148c6:	69bb      	ldr	r3, [r7, #24]
 80148c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80148cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80148d2:	69bb      	ldr	r3, [r7, #24]
 80148d4:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	8bdb      	ldrh	r3, [r3, #30]
 80148da:	015b      	lsls	r3, r3, #5
 80148dc:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 80148de:	697b      	ldr	r3, [r7, #20]
 80148e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80148e4:	d302      	bcc.n	80148ec <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 80148e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80148ea:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	b29a      	uxth	r2, r3
 80148f0:	69bb      	ldr	r3, [r7, #24]
 80148f2:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 80148f4:	68bb      	ldr	r3, [r7, #8]
 80148f6:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 80148f8:	69bb      	ldr	r3, [r7, #24]
 80148fa:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm =
 8014900:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8014902:	693b      	ldr	r3, [r7, #16]
 8014904:	68fa      	ldr	r2, [r7, #12]
 8014906:	fb02 f303 	mul.w	r3, r2, r3
 801490a:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 801490c:	693b      	ldr	r3, [r7, #16]
 801490e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8014912:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	2b00      	cmp	r3, #0
 8014918:	da01      	bge.n	801491e <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 801491a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 801491e:	12db      	asrs	r3, r3, #11
 8014920:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8014922:	693b      	ldr	r3, [r7, #16]
 8014924:	b21a      	sxth	r2, r3
 8014926:	69bb      	ldr	r3, [r7, #24]
 8014928:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 801492e:	69bb      	ldr	r3, [r7, #24]
 8014930:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 8014936:	69bb      	ldr	r3, [r7, #24]
 8014938:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 801493e:	69bb      	ldr	r3, [r7, #24]
 8014940:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8014946:	69bb      	ldr	r3, [r7, #24]
 8014948:	621a      	str	r2, [r3, #32]

			break;
 801494a:	bf00      	nop
		}

		pdata++;
 801494c:	69bb      	ldr	r3, [r7, #24]
 801494e:	3340      	adds	r3, #64	@ 0x40
 8014950:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 8014952:	7ffb      	ldrb	r3, [r7, #31]
 8014954:	3301      	adds	r3, #1
 8014956:	77fb      	strb	r3, [r7, #31]
 8014958:	7ffb      	ldrb	r3, [r7, #31]
 801495a:	2b01      	cmp	r3, #1
 801495c:	f67f af2b 	bls.w	80147b6 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	2200      	movs	r2, #0
 8014964:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 8014966:	68bb      	ldr	r3, [r7, #8]
 8014968:	785b      	ldrb	r3, [r3, #1]
 801496a:	f003 031f 	and.w	r3, r3, #31
 801496e:	2b11      	cmp	r3, #17
 8014970:	bf8c      	ite	hi
 8014972:	2201      	movhi	r2, #1
 8014974:	2200      	movls	r2, #0
 8014976:	b2d2      	uxtb	r2, r2
 8014978:	2a00      	cmp	r2, #0
 801497a:	d117      	bne.n	80149ac <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 801497c:	4a0e      	ldr	r2, [pc, #56]	@ (80149b8 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 801497e:	fa22 f303 	lsr.w	r3, r2, r3
 8014982:	f003 0301 	and.w	r3, r3, #1
 8014986:	2b00      	cmp	r3, #0
 8014988:	bf14      	ite	ne
 801498a:	2301      	movne	r3, #1
 801498c:	2300      	moveq	r3, #0
 801498e:	b2db      	uxtb	r3, r3
 8014990:	2b00      	cmp	r3, #0
 8014992:	d00b      	beq.n	80149ac <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8014994:	68bb      	ldr	r3, [r7, #8]
 8014996:	785b      	ldrb	r3, [r3, #1]
 8014998:	f003 031f 	and.w	r3, r3, #31
 801499c:	b2da      	uxtb	r2, r3
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 80149a2:	683b      	ldr	r3, [r7, #0]
 80149a4:	2200      	movs	r2, #0
 80149a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	break;
 80149aa:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80149ac:	bf00      	nop
 80149ae:	3724      	adds	r7, #36	@ 0x24
 80149b0:	46bd      	mov	sp, r7
 80149b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b6:	4770      	bx	lr
 80149b8:	0002200e 	.word	0x0002200e

080149bc <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80149bc:	b480      	push	{r7}
 80149be:	b085      	sub	sp, #20
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80149c4:	2300      	movs	r3, #0
 80149c6:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2208      	movs	r2, #8
 80149cc:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	220b      	movs	r2, #11
 80149d2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80149da:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80149e2:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80149ea:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80149f2:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80149f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	3714      	adds	r7, #20
 80149fc:	46bd      	mov	sp, r7
 80149fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a02:	4770      	bx	lr

08014a04 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8014a04:	b480      	push	{r7}
 8014a06:	b085      	sub	sp, #20
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	2200      	movs	r2, #0
 8014a14:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	2212      	movs	r2, #18
 8014a1a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	220f      	movs	r2, #15
 8014a20:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2202      	movs	r2, #2
 8014a26:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8014a2e:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	220c      	movs	r2, #12
 8014a34:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8014a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3714      	adds	r7, #20
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a44:	4770      	bx	lr

08014a46 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8014a46:	b580      	push	{r7, lr}
 8014a48:	b084      	sub	sp, #16
 8014a4a:	af00      	add	r7, sp, #0
 8014a4c:	6078      	str	r0, [r7, #4]
 8014a4e:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014a50:	2300      	movs	r3, #0
 8014a52:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	895b      	ldrh	r3, [r3, #10]
 8014a58:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8014a5a:	683b      	ldr	r3, [r7, #0]
 8014a5c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8014a64:	683b      	ldr	r3, [r7, #0]
 8014a66:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	895b      	ldrh	r3, [r3, #10]
 8014a76:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8014a82:	683b      	ldr	r3, [r7, #0]
 8014a84:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	2200      	movs	r2, #0
 8014a94:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	2240      	movs	r2, #64	@ 0x40
 8014a9a:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d10d      	bne.n	8014ac0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d108      	bne.n	8014ac0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d103      	bne.n	8014ac0 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8014ab8:	683b      	ldr	r3, [r7, #0]
 8014aba:	2200      	movs	r2, #0
 8014abc:	741a      	strb	r2, [r3, #16]
 8014abe:	e002      	b.n	8014ac6 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	2201      	movs	r2, #1
 8014ac4:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8014ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d114      	bne.n	8014af8 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8014ad2:	2b01      	cmp	r3, #1
 8014ad4:	d110      	bne.n	8014af8 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	6818      	ldr	r0, [r3, #0]
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	7d1b      	ldrb	r3, [r3, #20]
 8014aea:	f000 ff95 	bl	8015a18 <VL53L1_calc_range_ignore_threshold>
 8014aee:	4603      	mov	r3, r0
 8014af0:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	82da      	strh	r2, [r3, #22]
 8014af6:	e002      	b.n	8014afe <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	2200      	movs	r2, #0
 8014afc:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 8014afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014b02:	4618      	mov	r0, r3
 8014b04:	3710      	adds	r7, #16
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}

08014b0a <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8014b0a:	b480      	push	{r7}
 8014b0c:	b085      	sub	sp, #20
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014b12:	2300      	movs	r3, #0
 8014b14:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8014b1c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014b24:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8014b2c:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8014b34:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	2208      	movs	r2, #8
 8014b3a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2228      	movs	r2, #40	@ 0x28
 8014b40:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	2209      	movs	r2, #9
 8014b46:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8014b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	3714      	adds	r7, #20
 8014b50:	46bd      	mov	sp, r7
 8014b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b56:	4770      	bx	lr

08014b58 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8014b58:	b480      	push	{r7}
 8014b5a:	b085      	sub	sp, #20
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014b60:	2300      	movs	r3, #0
 8014b62:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	f248 0203 	movw	r2, #32771	@ 0x8003
 8014b6a:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f248 0201 	movw	r2, #32769	@ 0x8001
 8014b72:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f248 0241 	movw	r2, #32833	@ 0x8041
 8014b7a:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	220e      	movs	r2, #14
 8014b80:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	220a      	movs	r2, #10
 8014b86:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2206      	movs	r2, #6
 8014b8c:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	220e      	movs	r2, #14
 8014b92:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	220a      	movs	r2, #10
 8014b98:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	2206      	movs	r2, #6
 8014b9e:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	2202      	movs	r2, #2
 8014ba4:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	2221      	movs	r2, #33	@ 0x21
 8014baa:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	2200      	movs	r2, #0
 8014bb0:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	223c      	movs	r2, #60	@ 0x3c
 8014bbc:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	223c      	movs	r2, #60	@ 0x3c
 8014bc2:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014bca:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2280      	movs	r2, #128	@ 0x80
 8014bd0:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	2280      	movs	r2, #128	@ 0x80
 8014bd6:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	22c0      	movs	r2, #192	@ 0xc0
 8014bdc:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	2208      	movs	r2, #8
 8014be2:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2210      	movs	r2, #16
 8014be8:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	2201      	movs	r2, #1
 8014bee:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	2202      	movs	r2, #2
 8014bf6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	2201      	movs	r2, #1
 8014bfe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	2202      	movs	r2, #2
 8014c06:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8014c18:	84da      	strh	r2, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8014c20:	851a      	strh	r2, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	f248 0230 	movw	r2, #32816	@ 0x8030
 8014c28:	62da      	str	r2, [r3, #44]	@ 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014c30:	631a      	str	r2, [r3, #48]	@ 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8014c38:	635a      	str	r2, [r3, #52]	@ 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8014c40:	639a      	str	r2, [r3, #56]	@ 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8014c48:	641a      	str	r2, [r3, #64]	@ 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8014c50:	645a      	str	r2, [r3, #68]	@ 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	2201      	movs	r2, #1
 8014c56:	63da      	str	r2, [r3, #60]	@ 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8014c5e:	649a      	str	r2, [r3, #72]	@ 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8014c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014c64:	4618      	mov	r0, r3
 8014c66:	3714      	adds	r7, #20
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6e:	4770      	bx	lr

08014c70 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8014c70:	b480      	push	{r7}
 8014c72:	b087      	sub	sp, #28
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	60f8      	str	r0, [r7, #12]
 8014c78:	60b9      	str	r1, [r7, #8]
 8014c7a:	607a      	str	r2, [r7, #4]
 8014c7c:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8014c88:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2200      	movs	r2, #0
 8014c94:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2200      	movs	r2, #0
 8014c9a:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	2200      	movs	r2, #0
 8014cac:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	2200      	movs	r2, #0
 8014cb2:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	2211      	movs	r2, #17
 8014cca:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	2202      	movs	r2, #2
 8014cd0:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	2202      	movs	r2, #2
 8014cdc:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	2208      	movs	r2, #8
 8014ce2:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8014cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cec:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8014cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cf4:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8014cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cfc:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	2201      	movs	r2, #1
 8014d08:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	2200      	movs	r2, #0
 8014d14:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	2200      	movs	r2, #0
 8014d1a:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	22ff      	movs	r2, #255	@ 0xff
 8014d20:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8014d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d24:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8014d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d2c:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	2200      	movs	r2, #0
 8014d36:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	2200      	movs	r2, #0
 8014d42:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	2200      	movs	r2, #0
 8014d48:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	2220      	movs	r2, #32
 8014d54:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	220b      	movs	r2, #11
 8014d5a:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8014d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d5e:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8014d64:	68bb      	ldr	r3, [r7, #8]
 8014d66:	2202      	movs	r2, #2
 8014d68:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8014d6a:	68bb      	ldr	r3, [r7, #8]
 8014d6c:	220d      	movs	r2, #13
 8014d6e:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8014d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d72:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8014d74:	68bb      	ldr	r3, [r7, #8]
 8014d76:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 8014d78:	68bb      	ldr	r3, [r7, #8]
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	2201      	movs	r2, #1
 8014d82:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	2200      	movs	r2, #0
 8014d88:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8014d8a:	68bb      	ldr	r3, [r7, #8]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8014d90:	68bb      	ldr	r3, [r7, #8]
 8014d92:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8014d96:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8014d9e:	68bb      	ldr	r3, [r7, #8]
 8014da0:	2238      	movs	r2, #56	@ 0x38
 8014da2:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 8014da4:	68bb      	ldr	r3, [r7, #8]
 8014da6:	22ff      	movs	r2, #255	@ 0xff
 8014da8:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8014daa:	68bb      	ldr	r3, [r7, #8]
 8014dac:	2201      	movs	r2, #1
 8014dae:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	2200      	movs	r2, #0
 8014db4:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	221a      	movs	r2, #26
 8014dba:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2220      	movs	r2, #32
 8014dc6:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	2201      	movs	r2, #1
 8014dcc:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	22cc      	movs	r2, #204	@ 0xcc
 8014dd2:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	220b      	movs	r2, #11
 8014dd8:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	2201      	movs	r2, #1
 8014dde:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	22f5      	movs	r2, #245	@ 0xf5
 8014de4:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	2209      	movs	r2, #9
 8014dea:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8014dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dee:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8014df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014df6:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	2208      	movs	r2, #8
 8014e00:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2278      	movs	r2, #120	@ 0x78
 8014e06:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	2200      	movs	r2, #0
 8014e12:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8014e14:	683b      	ldr	r3, [r7, #0]
 8014e16:	2201      	movs	r2, #1
 8014e18:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8014e20:	683b      	ldr	r3, [r7, #0]
 8014e22:	2200      	movs	r2, #0
 8014e24:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8014e26:	683b      	ldr	r3, [r7, #0]
 8014e28:	2200      	movs	r2, #0
 8014e2a:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8014e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e2e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
	pdynamic->system__seed_config =
 8014e32:	683b      	ldr	r3, [r7, #0]
 8014e34:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8014e36:	683b      	ldr	r3, [r7, #0]
 8014e38:	220b      	movs	r2, #11
 8014e3a:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	2209      	movs	r2, #9
 8014e40:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8014e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e44:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 8014e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e4c:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	2201      	movs	r2, #1
 8014e56:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8014e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e5a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pdynamic->sd_config__first_order_select =
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8014e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e64:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
	pdynamic->sd_config__quantifier         =
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	22c7      	movs	r2, #199	@ 0xc7
 8014e70:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	22ff      	movs	r2, #255	@ 0xff
 8014e76:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	22db      	movs	r2, #219	@ 0xdb
 8014e7c:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	2202      	movs	r2, #2
 8014e82:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8014e84:	6a3b      	ldr	r3, [r7, #32]
 8014e86:	2200      	movs	r2, #0
 8014e88:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 8014e8a:	6a3b      	ldr	r3, [r7, #32]
 8014e8c:	2201      	movs	r2, #1
 8014e8e:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 8014e90:	6a3b      	ldr	r3, [r7, #32]
 8014e92:	2201      	movs	r2, #1
 8014e94:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 8014e96:	6a3b      	ldr	r3, [r7, #32]
 8014e98:	2221      	movs	r2, #33	@ 0x21
 8014e9a:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8014e9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	371c      	adds	r7, #28
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eaa:	4770      	bx	lr

08014eac <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b088      	sub	sp, #32
 8014eb0:	af02      	add	r7, sp, #8
 8014eb2:	60f8      	str	r0, [r7, #12]
 8014eb4:	60b9      	str	r1, [r7, #8]
 8014eb6:	607a      	str	r2, [r7, #4]
 8014eb8:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8014ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ec0:	9301      	str	r3, [sp, #4]
 8014ec2:	6a3b      	ldr	r3, [r7, #32]
 8014ec4:	9300      	str	r3, [sp, #0]
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	68b9      	ldr	r1, [r7, #8]
 8014ecc:	68f8      	ldr	r0, [r7, #12]
 8014ece:	f7ff fecf 	bl	8014c70 <VL53L1_preset_mode_standard_ranging>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8014ed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d121      	bne.n	8014f22 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	2207      	movs	r2, #7
 8014ee2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	2205      	movs	r2, #5
 8014ee8:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8014eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014eec:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8014ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ef4:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	2208      	movs	r2, #8
 8014efe:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2238      	movs	r2, #56	@ 0x38
 8014f04:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	2207      	movs	r2, #7
 8014f0a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8014f0c:	683b      	ldr	r3, [r7, #0]
 8014f0e:	2205      	movs	r2, #5
 8014f10:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8014f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f14:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8014f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f1c:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8014f1e:	683b      	ldr	r3, [r7, #0]
 8014f20:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8014f22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014f26:	4618      	mov	r0, r3
 8014f28:	3718      	adds	r7, #24
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd80      	pop	{r7, pc}

08014f2e <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8014f2e:	b580      	push	{r7, lr}
 8014f30:	b088      	sub	sp, #32
 8014f32:	af02      	add	r7, sp, #8
 8014f34:	60f8      	str	r0, [r7, #12]
 8014f36:	60b9      	str	r1, [r7, #8]
 8014f38:	607a      	str	r2, [r7, #4]
 8014f3a:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8014f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f42:	9301      	str	r3, [sp, #4]
 8014f44:	6a3b      	ldr	r3, [r7, #32]
 8014f46:	9300      	str	r3, [sp, #0]
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	687a      	ldr	r2, [r7, #4]
 8014f4c:	68b9      	ldr	r1, [r7, #8]
 8014f4e:	68f8      	ldr	r0, [r7, #12]
 8014f50:	f7ff fe8e 	bl	8014c70 <VL53L1_preset_mode_standard_ranging>
 8014f54:	4603      	mov	r3, r0
 8014f56:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8014f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d121      	bne.n	8014fa4 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	220f      	movs	r2, #15
 8014f64:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	220d      	movs	r2, #13
 8014f6a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8014f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f6e:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8014f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f76:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	2208      	movs	r2, #8
 8014f80:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	22b8      	movs	r2, #184	@ 0xb8
 8014f86:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	220f      	movs	r2, #15
 8014f8c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	220d      	movs	r2, #13
 8014f92:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8014f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f96:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8014f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f9e:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8014fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3718      	adds	r7, #24
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}

08014fb0 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b088      	sub	sp, #32
 8014fb4:	af02      	add	r7, sp, #8
 8014fb6:	60f8      	str	r0, [r7, #12]
 8014fb8:	60b9      	str	r1, [r7, #8]
 8014fba:	607a      	str	r2, [r7, #4]
 8014fbc:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8014fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fc4:	9301      	str	r3, [sp, #4]
 8014fc6:	6a3b      	ldr	r3, [r7, #32]
 8014fc8:	9300      	str	r3, [sp, #0]
 8014fca:	683b      	ldr	r3, [r7, #0]
 8014fcc:	687a      	ldr	r2, [r7, #4]
 8014fce:	68b9      	ldr	r1, [r7, #8]
 8014fd0:	68f8      	ldr	r0, [r7, #12]
 8014fd2:	f7ff fe4d 	bl	8014c70 <VL53L1_preset_mode_standard_ranging>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8014fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d105      	bne.n	8014fee <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	2202      	movs	r2, #2
 8014fe6:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	223b      	movs	r2, #59	@ 0x3b
 8014fec:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8014fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	3718      	adds	r7, #24
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}

08014ffa <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8014ffa:	b580      	push	{r7, lr}
 8014ffc:	b088      	sub	sp, #32
 8014ffe:	af02      	add	r7, sp, #8
 8015000:	60f8      	str	r0, [r7, #12]
 8015002:	60b9      	str	r1, [r7, #8]
 8015004:	607a      	str	r2, [r7, #4]
 8015006:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015008:	2300      	movs	r3, #0
 801500a:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 801500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801500e:	9301      	str	r3, [sp, #4]
 8015010:	6a3b      	ldr	r3, [r7, #32]
 8015012:	9300      	str	r3, [sp, #0]
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	687a      	ldr	r2, [r7, #4]
 8015018:	68b9      	ldr	r1, [r7, #8]
 801501a:	68f8      	ldr	r0, [r7, #12]
 801501c:	f7ff fe28 	bl	8014c70 <VL53L1_preset_mode_standard_ranging>
 8015020:	4603      	mov	r3, r0
 8015022:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8015024:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d105      	bne.n	8015038 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 801502c:	68bb      	ldr	r3, [r7, #8]
 801502e:	2202      	movs	r2, #2
 8015030:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8015032:	683b      	ldr	r3, [r7, #0]
 8015034:	225b      	movs	r2, #91	@ 0x5b
 8015036:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8015038:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801503c:	4618      	mov	r0, r3
 801503e:	3718      	adds	r7, #24
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}

08015044 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b088      	sub	sp, #32
 8015048:	af02      	add	r7, sp, #8
 801504a:	60f8      	str	r0, [r7, #12]
 801504c:	60b9      	str	r1, [r7, #8]
 801504e:	607a      	str	r2, [r7, #4]
 8015050:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015052:	2300      	movs	r3, #0
 8015054:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8015056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015058:	9301      	str	r3, [sp, #4]
 801505a:	6a3b      	ldr	r3, [r7, #32]
 801505c:	9300      	str	r3, [sp, #0]
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	687a      	ldr	r2, [r7, #4]
 8015062:	68b9      	ldr	r1, [r7, #8]
 8015064:	68f8      	ldr	r0, [r7, #12]
 8015066:	f7ff fe03 	bl	8014c70 <VL53L1_preset_mode_standard_ranging>
 801506a:	4603      	mov	r3, r0
 801506c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 801506e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d11a      	bne.n	80150ac <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	2200      	movs	r2, #0
 801507a:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2200      	movs	r2, #0
 8015080:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	22b1      	movs	r2, #177	@ 0xb1
 8015086:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	2200      	movs	r2, #0
 801508c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	22d4      	movs	r2, #212	@ 0xd4
 8015092:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 801509a:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 801509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801509e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80150a2:	683b      	ldr	r3, [r7, #0]
 80150a4:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80150a6:	6a3b      	ldr	r3, [r7, #32]
 80150a8:	2240      	movs	r2, #64	@ 0x40
 80150aa:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80150ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3718      	adds	r7, #24
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}

080150b8 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b088      	sub	sp, #32
 80150bc:	af02      	add	r7, sp, #8
 80150be:	60f8      	str	r0, [r7, #12]
 80150c0:	60b9      	str	r1, [r7, #8]
 80150c2:	607a      	str	r2, [r7, #4]
 80150c4:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80150c6:	2300      	movs	r3, #0
 80150c8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 80150ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150cc:	9301      	str	r3, [sp, #4]
 80150ce:	6a3b      	ldr	r3, [r7, #32]
 80150d0:	9300      	str	r3, [sp, #0]
 80150d2:	683b      	ldr	r3, [r7, #0]
 80150d4:	687a      	ldr	r2, [r7, #4]
 80150d6:	68b9      	ldr	r1, [r7, #8]
 80150d8:	68f8      	ldr	r0, [r7, #12]
 80150da:	f7ff fee7 	bl	8014eac <VL53L1_preset_mode_standard_ranging_short_range>
 80150de:	4603      	mov	r3, r0
 80150e0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80150e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d11a      	bne.n	8015120 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	2200      	movs	r2, #0
 80150ee:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	2201      	movs	r2, #1
 80150f4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	2284      	movs	r2, #132	@ 0x84
 80150fa:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2201      	movs	r2, #1
 8015100:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	22b1      	movs	r2, #177	@ 0xb1
 8015106:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 801510e:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8015110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015112:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8015116:	683b      	ldr	r3, [r7, #0]
 8015118:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 801511a:	6a3b      	ldr	r3, [r7, #32]
 801511c:	2240      	movs	r2, #64	@ 0x40
 801511e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8015120:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015124:	4618      	mov	r0, r3
 8015126:	3718      	adds	r7, #24
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}

0801512c <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b088      	sub	sp, #32
 8015130:	af02      	add	r7, sp, #8
 8015132:	60f8      	str	r0, [r7, #12]
 8015134:	60b9      	str	r1, [r7, #8]
 8015136:	607a      	str	r2, [r7, #4]
 8015138:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801513a:	2300      	movs	r3, #0
 801513c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 801513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015140:	9301      	str	r3, [sp, #4]
 8015142:	6a3b      	ldr	r3, [r7, #32]
 8015144:	9300      	str	r3, [sp, #0]
 8015146:	683b      	ldr	r3, [r7, #0]
 8015148:	687a      	ldr	r2, [r7, #4]
 801514a:	68b9      	ldr	r1, [r7, #8]
 801514c:	68f8      	ldr	r0, [r7, #12]
 801514e:	f7ff feee 	bl	8014f2e <VL53L1_preset_mode_standard_ranging_long_range>
 8015152:	4603      	mov	r3, r0
 8015154:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8015156:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d11a      	bne.n	8015194 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 801515e:	683b      	ldr	r3, [r7, #0]
 8015160:	2200      	movs	r2, #0
 8015162:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2200      	movs	r2, #0
 8015168:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2297      	movs	r2, #151	@ 0x97
 801516e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2200      	movs	r2, #0
 8015174:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	22b1      	movs	r2, #177	@ 0xb1
 801517a:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8015182:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8015184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015186:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 801518e:	6a3b      	ldr	r3, [r7, #32]
 8015190:	2240      	movs	r2, #64	@ 0x40
 8015192:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8015194:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015198:	4618      	mov	r0, r3
 801519a:	3718      	adds	r7, #24
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}

080151a0 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b088      	sub	sp, #32
 80151a4:	af02      	add	r7, sp, #8
 80151a6:	60f8      	str	r0, [r7, #12]
 80151a8:	60b9      	str	r1, [r7, #8]
 80151aa:	607a      	str	r2, [r7, #4]
 80151ac:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80151ae:	2300      	movs	r3, #0
 80151b0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 80151b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151b4:	9301      	str	r3, [sp, #4]
 80151b6:	6a3b      	ldr	r3, [r7, #32]
 80151b8:	9300      	str	r3, [sp, #0]
 80151ba:	683b      	ldr	r3, [r7, #0]
 80151bc:	687a      	ldr	r2, [r7, #4]
 80151be:	68b9      	ldr	r1, [r7, #8]
 80151c0:	68f8      	ldr	r0, [r7, #12]
 80151c2:	f7ff ff3f 	bl	8015044 <VL53L1_preset_mode_timed_ranging>
 80151c6:	4603      	mov	r3, r0
 80151c8:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80151ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d106      	bne.n	80151e0 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80151d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80151d4:	6839      	ldr	r1, [r7, #0]
 80151d6:	68b8      	ldr	r0, [r7, #8]
 80151d8:	f000 fe84 	bl	8015ee4 <VL53L1_config_low_power_auto_mode>
 80151dc:	4603      	mov	r3, r0
 80151de:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80151e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80151e4:	4618      	mov	r0, r3
 80151e6:	3718      	adds	r7, #24
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd80      	pop	{r7, pc}

080151ec <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b088      	sub	sp, #32
 80151f0:	af02      	add	r7, sp, #8
 80151f2:	60f8      	str	r0, [r7, #12]
 80151f4:	60b9      	str	r1, [r7, #8]
 80151f6:	607a      	str	r2, [r7, #4]
 80151f8:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80151fa:	2300      	movs	r3, #0
 80151fc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 80151fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015200:	9301      	str	r3, [sp, #4]
 8015202:	6a3b      	ldr	r3, [r7, #32]
 8015204:	9300      	str	r3, [sp, #0]
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	687a      	ldr	r2, [r7, #4]
 801520a:	68b9      	ldr	r1, [r7, #8]
 801520c:	68f8      	ldr	r0, [r7, #12]
 801520e:	f7ff ff53 	bl	80150b8 <VL53L1_preset_mode_timed_ranging_short_range>
 8015212:	4603      	mov	r3, r0
 8015214:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8015216:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d106      	bne.n	801522c <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 801521e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015220:	6839      	ldr	r1, [r7, #0]
 8015222:	68b8      	ldr	r0, [r7, #8]
 8015224:	f000 fe5e 	bl	8015ee4 <VL53L1_config_low_power_auto_mode>
 8015228:	4603      	mov	r3, r0
 801522a:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 801522c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015230:	4618      	mov	r0, r3
 8015232:	3718      	adds	r7, #24
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}

08015238 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b088      	sub	sp, #32
 801523c:	af02      	add	r7, sp, #8
 801523e:	60f8      	str	r0, [r7, #12]
 8015240:	60b9      	str	r1, [r7, #8]
 8015242:	607a      	str	r2, [r7, #4]
 8015244:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015246:	2300      	movs	r3, #0
 8015248:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 801524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801524c:	9301      	str	r3, [sp, #4]
 801524e:	6a3b      	ldr	r3, [r7, #32]
 8015250:	9300      	str	r3, [sp, #0]
 8015252:	683b      	ldr	r3, [r7, #0]
 8015254:	687a      	ldr	r2, [r7, #4]
 8015256:	68b9      	ldr	r1, [r7, #8]
 8015258:	68f8      	ldr	r0, [r7, #12]
 801525a:	f7ff ff67 	bl	801512c <VL53L1_preset_mode_timed_ranging_long_range>
 801525e:	4603      	mov	r3, r0
 8015260:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8015262:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d106      	bne.n	8015278 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 801526a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801526c:	6839      	ldr	r1, [r7, #0]
 801526e:	68b8      	ldr	r0, [r7, #8]
 8015270:	f000 fe38 	bl	8015ee4 <VL53L1_config_low_power_auto_mode>
 8015274:	4603      	mov	r3, r0
 8015276:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8015278:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801527c:	4618      	mov	r0, r3
 801527e:	3718      	adds	r7, #24
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}

08015284 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b088      	sub	sp, #32
 8015288:	af02      	add	r7, sp, #8
 801528a:	60f8      	str	r0, [r7, #12]
 801528c:	60b9      	str	r1, [r7, #8]
 801528e:	607a      	str	r2, [r7, #4]
 8015290:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015292:	2300      	movs	r3, #0
 8015294:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8015296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015298:	9301      	str	r3, [sp, #4]
 801529a:	6a3b      	ldr	r3, [r7, #32]
 801529c:	9300      	str	r3, [sp, #0]
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	687a      	ldr	r2, [r7, #4]
 80152a2:	68b9      	ldr	r1, [r7, #8]
 80152a4:	68f8      	ldr	r0, [r7, #12]
 80152a6:	f7ff fce3 	bl	8014c70 <VL53L1_preset_mode_standard_ranging>
 80152aa:	4603      	mov	r3, r0
 80152ac:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80152ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d116      	bne.n	80152e4 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80152b6:	683b      	ldr	r3, [r7, #0]
 80152b8:	2200      	movs	r2, #0
 80152ba:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2200      	movs	r2, #0
 80152c0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	22b1      	movs	r2, #177	@ 0xb1
 80152c6:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2200      	movs	r2, #0
 80152cc:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	22d4      	movs	r2, #212	@ 0xd4
 80152d2:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80152d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152d6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80152da:	683b      	ldr	r3, [r7, #0]
 80152dc:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 80152de:	6a3b      	ldr	r3, [r7, #32]
 80152e0:	2210      	movs	r2, #16
 80152e2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 80152e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	3718      	adds	r7, #24
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}

080152f0 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b088      	sub	sp, #32
 80152f4:	af02      	add	r7, sp, #8
 80152f6:	60f8      	str	r0, [r7, #12]
 80152f8:	60b9      	str	r1, [r7, #8]
 80152fa:	607a      	str	r2, [r7, #4]
 80152fc:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80152fe:	2300      	movs	r3, #0
 8015300:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8015302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015304:	9301      	str	r3, [sp, #4]
 8015306:	6a3b      	ldr	r3, [r7, #32]
 8015308:	9300      	str	r3, [sp, #0]
 801530a:	683b      	ldr	r3, [r7, #0]
 801530c:	687a      	ldr	r2, [r7, #4]
 801530e:	68b9      	ldr	r1, [r7, #8]
 8015310:	68f8      	ldr	r0, [r7, #12]
 8015312:	f7ff fcad 	bl	8014c70 <VL53L1_preset_mode_standard_ranging>
 8015316:	4603      	mov	r3, r0
 8015318:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 801531a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d102      	bne.n	8015328 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8015322:	6a3b      	ldr	r3, [r7, #32]
 8015324:	2201      	movs	r2, #1
 8015326:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8015328:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801532c:	4618      	mov	r0, r3
 801532e:	3718      	adds	r7, #24
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}

08015334 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8015334:	b480      	push	{r7}
 8015336:	b085      	sub	sp, #20
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	2201      	movs	r2, #1
 8015344:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	2202      	movs	r2, #2
 801534c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	2209      	movs	r2, #9
 8015354:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	224b      	movs	r2, #75	@ 0x4b
 801535c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801535e:	bf00      	nop
 8015360:	3714      	adds	r7, #20
 8015362:	46bd      	mov	sp, r7
 8015364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015368:	4770      	bx	lr

0801536a <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 801536a:	b480      	push	{r7}
 801536c:	b085      	sub	sp, #20
 801536e:	af00      	add	r7, sp, #0
 8015370:	6078      	str	r0, [r7, #4]
 8015372:	460b      	mov	r3, r1
 8015374:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	332c      	adds	r3, #44	@ 0x2c
 801537e:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	78fa      	ldrb	r2, [r7, #3]
 8015384:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8015386:	68bb      	ldr	r3, [r7, #8]
 8015388:	2200      	movs	r2, #0
 801538a:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	2202      	movs	r2, #2
 8015390:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	2200      	movs	r2, #0
 8015396:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	78fa      	ldrb	r2, [r7, #3]
 801539c:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	2200      	movs	r2, #0
 80153a2:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80153a4:	68bb      	ldr	r3, [r7, #8]
 80153a6:	2202      	movs	r2, #2
 80153a8:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 80153aa:	68bb      	ldr	r3, [r7, #8]
 80153ac:	2200      	movs	r2, #0
 80153ae:	71da      	strb	r2, [r3, #7]

}
 80153b0:	bf00      	nop
 80153b2:	3714      	adds	r7, #20
 80153b4:	46bd      	mov	sp, r7
 80153b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ba:	4770      	bx	lr

080153bc <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 80153bc:	b480      	push	{r7}
 80153be:	b087      	sub	sp, #28
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 80153c4:	2300      	movs	r3, #0
 80153c6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	332c      	adds	r3, #44	@ 0x2c
 80153d0:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80153d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d10c      	bne.n	80153fa <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	2203      	movs	r2, #3
 80153e4:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	2200      	movs	r2, #0
 80153ea:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	2202      	movs	r2, #2
 80153f0:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	2200      	movs	r2, #0
 80153f6:	71da      	strb	r2, [r3, #7]
 80153f8:	e060      	b.n	80154bc <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	795b      	ldrb	r3, [r3, #5]
 80153fe:	2bff      	cmp	r3, #255	@ 0xff
 8015400:	d103      	bne.n	801540a <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	2280      	movs	r2, #128	@ 0x80
 8015406:	715a      	strb	r2, [r3, #5]
 8015408:	e005      	b.n	8015416 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	795b      	ldrb	r3, [r3, #5]
 801540e:	3301      	adds	r3, #1
 8015410:	b2da      	uxtb	r2, r3
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	799b      	ldrb	r3, [r3, #6]
 801541a:	f083 0302 	eor.w	r3, r3, #2
 801541e:	b2da      	uxtb	r2, r3
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	791b      	ldrb	r3, [r3, #4]
 8015428:	3b03      	subs	r3, #3
 801542a:	2b05      	cmp	r3, #5
 801542c:	d839      	bhi.n	80154a2 <VL53L1_update_ll_driver_rd_state+0xe6>
 801542e:	a201      	add	r2, pc, #4	@ (adr r2, 8015434 <VL53L1_update_ll_driver_rd_state+0x78>)
 8015430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015434:	0801544d 	.word	0x0801544d
 8015438:	080154a3 	.word	0x080154a3
 801543c:	080154a3 	.word	0x080154a3
 8015440:	08015477 	.word	0x08015477
 8015444:	08015485 	.word	0x08015485
 8015448:	0801548d 	.word	0x0801548d

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 801544c:	693b      	ldr	r3, [r7, #16]
 801544e:	f893 31c6 	ldrb.w	r3, [r3, #454]	@ 0x1c6
 8015452:	f003 0302 	and.w	r3, r3, #2
 8015456:	2b00      	cmp	r3, #0
 8015458:	dd03      	ble.n	8015462 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	2206      	movs	r2, #6
 801545e:	711a      	strb	r2, [r3, #4]
 8015460:	e002      	b.n	8015468 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	2208      	movs	r2, #8
 8015466:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	2200      	movs	r2, #0
 801546c:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	2200      	movs	r2, #0
 8015472:	71da      	strb	r2, [r3, #7]

		break;
 8015474:	e022      	b.n	80154bc <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	2200      	movs	r2, #0
 801547a:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	2208      	movs	r2, #8
 8015480:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8015482:	e01b      	b.n	80154bc <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	2208      	movs	r2, #8
 8015488:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 801548a:	e017      	b.n	80154bc <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	79db      	ldrb	r3, [r3, #7]
 8015490:	f083 0301 	eor.w	r3, r3, #1
 8015494:	b2da      	uxtb	r2, r3
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	2208      	movs	r2, #8
 801549e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 80154a0:	e00c      	b.n	80154bc <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	2203      	movs	r2, #3
 80154a6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	2200      	movs	r2, #0
 80154ac:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	2202      	movs	r2, #2
 80154b2:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	2200      	movs	r2, #0
 80154b8:	71da      	strb	r2, [r3, #7]

		break;
 80154ba:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80154bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80154c0:	4618      	mov	r0, r3
 80154c2:	371c      	adds	r7, #28
 80154c4:	46bd      	mov	sp, r7
 80154c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ca:	4770      	bx	lr

080154cc <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 80154cc:	b480      	push	{r7}
 80154ce:	b089      	sub	sp, #36	@ 0x24
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 80154d4:	2300      	movs	r3, #0
 80154d6:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 80154dc:	69bb      	ldr	r3, [r7, #24]
 80154de:	332c      	adds	r3, #44	@ 0x2c
 80154e0:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 80154e2:	69bb      	ldr	r3, [r7, #24]
 80154e4:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 80154e8:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 80154ea:	2300      	movs	r3, #0
 80154ec:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 80154ee:	2300      	movs	r3, #0
 80154f0:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 80154f2:	2300      	movs	r3, #0
 80154f4:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 80154f6:	693b      	ldr	r3, [r7, #16]
 80154f8:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 80154fa:	f003 031f 	and.w	r3, r3, #31
 80154fe:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8015500:	693b      	ldr	r3, [r7, #16]
 8015502:	78db      	ldrb	r3, [r3, #3]
 8015504:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8015506:	693b      	ldr	r3, [r7, #16]
 8015508:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 801550a:	111b      	asrs	r3, r3, #4
 801550c:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 801550e:	f003 0302 	and.w	r3, r3, #2
 8015512:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8015514:	69bb      	ldr	r3, [r7, #24]
 8015516:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 801551a:	f003 0320 	and.w	r3, r3, #32
 801551e:	2b00      	cmp	r3, #0
 8015520:	d017      	beq.n	8015552 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	791b      	ldrb	r3, [r3, #4]
 8015526:	2b06      	cmp	r3, #6
 8015528:	d105      	bne.n	8015536 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 801552a:	7bfb      	ldrb	r3, [r7, #15]
 801552c:	2b12      	cmp	r3, #18
 801552e:	d010      	beq.n	8015552 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8015530:	23ef      	movs	r3, #239	@ 0xef
 8015532:	77fb      	strb	r3, [r7, #31]
 8015534:	e00d      	b.n	8015552 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	795b      	ldrb	r3, [r3, #5]
 801553a:	7bba      	ldrb	r2, [r7, #14]
 801553c:	429a      	cmp	r2, r3
 801553e:	d001      	beq.n	8015544 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8015540:	23ee      	movs	r3, #238	@ 0xee
 8015542:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	799b      	ldrb	r3, [r3, #6]
 8015548:	7b7a      	ldrb	r2, [r7, #13]
 801554a:	429a      	cmp	r2, r3
 801554c:	d001      	beq.n	8015552 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 801554e:	23ed      	movs	r3, #237	@ 0xed
 8015550:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 8015552:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015556:	4618      	mov	r0, r3
 8015558:	3724      	adds	r7, #36	@ 0x24
 801555a:	46bd      	mov	sp, r7
 801555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015560:	4770      	bx	lr

08015562 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 8015562:	b480      	push	{r7}
 8015564:	b087      	sub	sp, #28
 8015566:	af00      	add	r7, sp, #0
 8015568:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 801556a:	2300      	movs	r3, #0
 801556c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8015572:	693b      	ldr	r3, [r7, #16]
 8015574:	332c      	adds	r3, #44	@ 0x2c
 8015576:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 801557e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015582:	2b00      	cmp	r3, #0
 8015584:	d10c      	bne.n	80155a0 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	2203      	movs	r2, #3
 801558a:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	2200      	movs	r2, #0
 8015590:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	2202      	movs	r2, #2
 8015596:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	2200      	movs	r2, #0
 801559c:	70da      	strb	r2, [r3, #3]
 801559e:	e03e      	b.n	801561e <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	785b      	ldrb	r3, [r3, #1]
 80155a4:	2bff      	cmp	r3, #255	@ 0xff
 80155a6:	d103      	bne.n	80155b0 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	2280      	movs	r2, #128	@ 0x80
 80155ac:	705a      	strb	r2, [r3, #1]
 80155ae:	e005      	b.n	80155bc <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	785b      	ldrb	r3, [r3, #1]
 80155b4:	3301      	adds	r3, #1
 80155b6:	b2da      	uxtb	r2, r3
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	789b      	ldrb	r3, [r3, #2]
 80155c0:	f083 0302 	eor.w	r3, r3, #2
 80155c4:	b2da      	uxtb	r2, r3
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	781b      	ldrb	r3, [r3, #0]
 80155ce:	2b03      	cmp	r3, #3
 80155d0:	d002      	beq.n	80155d8 <VL53L1_update_ll_driver_cfg_state+0x76>
 80155d2:	2b04      	cmp	r3, #4
 80155d4:	d00e      	beq.n	80155f4 <VL53L1_update_ll_driver_cfg_state+0x92>
 80155d6:	e015      	b.n	8015604 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	78db      	ldrb	r3, [r3, #3]
 80155dc:	f083 0301 	eor.w	r3, r3, #1
 80155e0:	b2da      	uxtb	r2, r3
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	2201      	movs	r2, #1
 80155ea:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	2204      	movs	r2, #4
 80155f0:	701a      	strb	r2, [r3, #0]
		break;
 80155f2:	e014      	b.n	801561e <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	78db      	ldrb	r3, [r3, #3]
 80155f8:	f083 0301 	eor.w	r3, r3, #1
 80155fc:	b2da      	uxtb	r2, r3
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	70da      	strb	r2, [r3, #3]

		break;
 8015602:	e00c      	b.n	801561e <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	2203      	movs	r2, #3
 8015608:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	2200      	movs	r2, #0
 801560e:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	2202      	movs	r2, #2
 8015614:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	2200      	movs	r2, #0
 801561a:	70da      	strb	r2, [r3, #3]

		break;
 801561c:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 801561e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015622:	4618      	mov	r0, r3
 8015624:	371c      	adds	r7, #28
 8015626:	46bd      	mov	sp, r7
 8015628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562c:	4770      	bx	lr

0801562e <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 801562e:	b480      	push	{r7}
 8015630:	b083      	sub	sp, #12
 8015632:	af00      	add	r7, sp, #0
 8015634:	6078      	str	r0, [r7, #4]
 8015636:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	7c1a      	ldrb	r2, [r3, #16]
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	3301      	adds	r3, #1
 8015644:	687a      	ldr	r2, [r7, #4]
 8015646:	7c52      	ldrb	r2, [r2, #17]
 8015648:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 801564a:	683b      	ldr	r3, [r7, #0]
 801564c:	3302      	adds	r3, #2
 801564e:	687a      	ldr	r2, [r7, #4]
 8015650:	7c92      	ldrb	r2, [r2, #18]
 8015652:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8015654:	683b      	ldr	r3, [r7, #0]
 8015656:	3303      	adds	r3, #3
 8015658:	687a      	ldr	r2, [r7, #4]
 801565a:	7cd2      	ldrb	r2, [r2, #19]
 801565c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	3304      	adds	r3, #4
 8015662:	687a      	ldr	r2, [r7, #4]
 8015664:	7d12      	ldrb	r2, [r2, #20]
 8015666:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	3305      	adds	r3, #5
 801566c:	687a      	ldr	r2, [r7, #4]
 801566e:	7d52      	ldrb	r2, [r2, #21]
 8015670:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	3306      	adds	r3, #6
 8015676:	687a      	ldr	r2, [r7, #4]
 8015678:	7d92      	ldrb	r2, [r2, #22]
 801567a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	3307      	adds	r3, #7
 8015680:	687a      	ldr	r2, [r7, #4]
 8015682:	7dd2      	ldrb	r2, [r2, #23]
 8015684:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	3308      	adds	r3, #8
 801568a:	687a      	ldr	r2, [r7, #4]
 801568c:	7e12      	ldrb	r2, [r2, #24]
 801568e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8015690:	683b      	ldr	r3, [r7, #0]
 8015692:	3309      	adds	r3, #9
 8015694:	687a      	ldr	r2, [r7, #4]
 8015696:	7e52      	ldrb	r2, [r2, #25]
 8015698:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	330a      	adds	r3, #10
 801569e:	687a      	ldr	r2, [r7, #4]
 80156a0:	7e92      	ldrb	r2, [r2, #26]
 80156a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 80156a4:	683b      	ldr	r3, [r7, #0]
 80156a6:	330b      	adds	r3, #11
 80156a8:	687a      	ldr	r2, [r7, #4]
 80156aa:	7ed2      	ldrb	r2, [r2, #27]
 80156ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 80156ae:	683b      	ldr	r3, [r7, #0]
 80156b0:	330c      	adds	r3, #12
 80156b2:	687a      	ldr	r2, [r7, #4]
 80156b4:	7f12      	ldrb	r2, [r2, #28]
 80156b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	330d      	adds	r3, #13
 80156bc:	687a      	ldr	r2, [r7, #4]
 80156be:	7f52      	ldrb	r2, [r2, #29]
 80156c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	330e      	adds	r3, #14
 80156c6:	687a      	ldr	r2, [r7, #4]
 80156c8:	7f92      	ldrb	r2, [r2, #30]
 80156ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 80156cc:	683b      	ldr	r3, [r7, #0]
 80156ce:	330f      	adds	r3, #15
 80156d0:	687a      	ldr	r2, [r7, #4]
 80156d2:	7fd2      	ldrb	r2, [r2, #31]
 80156d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 80156d6:	683b      	ldr	r3, [r7, #0]
 80156d8:	3310      	adds	r3, #16
 80156da:	687a      	ldr	r2, [r7, #4]
 80156dc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80156e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 80156e2:	683b      	ldr	r3, [r7, #0]
 80156e4:	3311      	adds	r3, #17
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 80156ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	3312      	adds	r3, #18
 80156f2:	687a      	ldr	r2, [r7, #4]
 80156f4:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 80156f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 80156fa:	683b      	ldr	r3, [r7, #0]
 80156fc:	3313      	adds	r3, #19
 80156fe:	687a      	ldr	r2, [r7, #4]
 8015700:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8015704:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8015706:	683b      	ldr	r3, [r7, #0]
 8015708:	3314      	adds	r3, #20
 801570a:	687a      	ldr	r2, [r7, #4]
 801570c:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8015710:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	3315      	adds	r3, #21
 8015716:	687a      	ldr	r2, [r7, #4]
 8015718:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 801571c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 801571e:	683b      	ldr	r3, [r7, #0]
 8015720:	3316      	adds	r3, #22
 8015722:	687a      	ldr	r2, [r7, #4]
 8015724:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8015728:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	3317      	adds	r3, #23
 801572e:	687a      	ldr	r2, [r7, #4]
 8015730:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8015734:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	3318      	adds	r3, #24
 801573a:	687a      	ldr	r2, [r7, #4]
 801573c:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8015740:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	3319      	adds	r3, #25
 8015746:	687a      	ldr	r2, [r7, #4]
 8015748:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 801574c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	331a      	adds	r3, #26
 8015752:	687a      	ldr	r2, [r7, #4]
 8015754:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8015758:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 801575a:	683b      	ldr	r3, [r7, #0]
 801575c:	331b      	adds	r3, #27
 801575e:	687a      	ldr	r2, [r7, #4]
 8015760:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8015764:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	331c      	adds	r3, #28
 801576a:	687a      	ldr	r2, [r7, #4]
 801576c:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8015770:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8015772:	683b      	ldr	r3, [r7, #0]
 8015774:	331d      	adds	r3, #29
 8015776:	687a      	ldr	r2, [r7, #4]
 8015778:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 801577c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	331e      	adds	r3, #30
 8015782:	687a      	ldr	r2, [r7, #4]
 8015784:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8015788:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	331f      	adds	r3, #31
 801578e:	687a      	ldr	r2, [r7, #4]
 8015790:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8015794:	701a      	strb	r2, [r3, #0]
}
 8015796:	bf00      	nop
 8015798:	370c      	adds	r7, #12
 801579a:	46bd      	mov	sp, r7
 801579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a0:	4770      	bx	lr

080157a2 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80157a2:	b480      	push	{r7}
 80157a4:	b085      	sub	sp, #20
 80157a6:	af00      	add	r7, sp, #0
 80157a8:	4603      	mov	r3, r0
 80157aa:	603a      	str	r2, [r7, #0]
 80157ac:	80fb      	strh	r3, [r7, #6]
 80157ae:	460b      	mov	r3, r1
 80157b0:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80157b2:	2300      	movs	r3, #0
 80157b4:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 80157b6:	2300      	movs	r3, #0
 80157b8:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 80157ba:	88fb      	ldrh	r3, [r7, #6]
 80157bc:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 80157be:	2300      	movs	r3, #0
 80157c0:	81fb      	strh	r3, [r7, #14]
 80157c2:	e00e      	b.n	80157e2 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 80157c4:	88ba      	ldrh	r2, [r7, #4]
 80157c6:	89fb      	ldrh	r3, [r7, #14]
 80157c8:	1ad3      	subs	r3, r2, r3
 80157ca:	3b01      	subs	r3, #1
 80157cc:	683a      	ldr	r2, [r7, #0]
 80157ce:	4413      	add	r3, r2
 80157d0:	89ba      	ldrh	r2, [r7, #12]
 80157d2:	b2d2      	uxtb	r2, r2
 80157d4:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 80157d6:	89bb      	ldrh	r3, [r7, #12]
 80157d8:	0a1b      	lsrs	r3, r3, #8
 80157da:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 80157dc:	89fb      	ldrh	r3, [r7, #14]
 80157de:	3301      	adds	r3, #1
 80157e0:	81fb      	strh	r3, [r7, #14]
 80157e2:	89fa      	ldrh	r2, [r7, #14]
 80157e4:	88bb      	ldrh	r3, [r7, #4]
 80157e6:	429a      	cmp	r2, r3
 80157e8:	d3ec      	bcc.n	80157c4 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 80157ea:	bf00      	nop
 80157ec:	bf00      	nop
 80157ee:	3714      	adds	r7, #20
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr

080157f8 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80157f8:	b480      	push	{r7}
 80157fa:	b085      	sub	sp, #20
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	4603      	mov	r3, r0
 8015800:	6039      	str	r1, [r7, #0]
 8015802:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 8015804:	2300      	movs	r3, #0
 8015806:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8015808:	e00a      	b.n	8015820 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 801580a:	89fb      	ldrh	r3, [r7, #14]
 801580c:	021b      	lsls	r3, r3, #8
 801580e:	b21a      	sxth	r2, r3
 8015810:	683b      	ldr	r3, [r7, #0]
 8015812:	1c59      	adds	r1, r3, #1
 8015814:	6039      	str	r1, [r7, #0]
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	b21b      	sxth	r3, r3
 801581a:	4313      	orrs	r3, r2
 801581c:	b21b      	sxth	r3, r3
 801581e:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8015820:	88fb      	ldrh	r3, [r7, #6]
 8015822:	1e5a      	subs	r2, r3, #1
 8015824:	80fa      	strh	r2, [r7, #6]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d1ef      	bne.n	801580a <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 801582a:	89fb      	ldrh	r3, [r7, #14]
}
 801582c:	4618      	mov	r0, r3
 801582e:	3714      	adds	r7, #20
 8015830:	46bd      	mov	sp, r7
 8015832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015836:	4770      	bx	lr

08015838 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8015838:	b480      	push	{r7}
 801583a:	b085      	sub	sp, #20
 801583c:	af00      	add	r7, sp, #0
 801583e:	4603      	mov	r3, r0
 8015840:	603a      	str	r2, [r7, #0]
 8015842:	80fb      	strh	r3, [r7, #6]
 8015844:	460b      	mov	r3, r1
 8015846:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8015848:	2300      	movs	r3, #0
 801584a:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 801584c:	2300      	movs	r3, #0
 801584e:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8015850:	88fb      	ldrh	r3, [r7, #6]
 8015852:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8015854:	2300      	movs	r3, #0
 8015856:	81fb      	strh	r3, [r7, #14]
 8015858:	e00f      	b.n	801587a <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 801585a:	88ba      	ldrh	r2, [r7, #4]
 801585c:	89fb      	ldrh	r3, [r7, #14]
 801585e:	1ad3      	subs	r3, r2, r3
 8015860:	3b01      	subs	r3, #1
 8015862:	683a      	ldr	r2, [r7, #0]
 8015864:	4413      	add	r3, r2
 8015866:	89ba      	ldrh	r2, [r7, #12]
 8015868:	b2d2      	uxtb	r2, r2
 801586a:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 801586c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015870:	121b      	asrs	r3, r3, #8
 8015872:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8015874:	89fb      	ldrh	r3, [r7, #14]
 8015876:	3301      	adds	r3, #1
 8015878:	81fb      	strh	r3, [r7, #14]
 801587a:	89fa      	ldrh	r2, [r7, #14]
 801587c:	88bb      	ldrh	r3, [r7, #4]
 801587e:	429a      	cmp	r2, r3
 8015880:	d3eb      	bcc.n	801585a <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 8015882:	bf00      	nop
 8015884:	bf00      	nop
 8015886:	3714      	adds	r7, #20
 8015888:	46bd      	mov	sp, r7
 801588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588e:	4770      	bx	lr

08015890 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8015890:	b480      	push	{r7}
 8015892:	b085      	sub	sp, #20
 8015894:	af00      	add	r7, sp, #0
 8015896:	4603      	mov	r3, r0
 8015898:	6039      	str	r1, [r7, #0]
 801589a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 801589c:	2300      	movs	r3, #0
 801589e:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	781b      	ldrb	r3, [r3, #0]
 80158a4:	b25b      	sxtb	r3, r3
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	da0e      	bge.n	80158c8 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 80158aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80158ae:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 80158b0:	e00a      	b.n	80158c8 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 80158b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80158b6:	021b      	lsls	r3, r3, #8
 80158b8:	b21a      	sxth	r2, r3
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	1c59      	adds	r1, r3, #1
 80158be:	6039      	str	r1, [r7, #0]
 80158c0:	781b      	ldrb	r3, [r3, #0]
 80158c2:	b21b      	sxth	r3, r3
 80158c4:	4313      	orrs	r3, r2
 80158c6:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 80158c8:	88fb      	ldrh	r3, [r7, #6]
 80158ca:	1e5a      	subs	r2, r3, #1
 80158cc:	80fa      	strh	r2, [r7, #6]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d1ef      	bne.n	80158b2 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 80158d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80158d6:	4618      	mov	r0, r3
 80158d8:	3714      	adds	r7, #20
 80158da:	46bd      	mov	sp, r7
 80158dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e0:	4770      	bx	lr

080158e2 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80158e2:	b480      	push	{r7}
 80158e4:	b087      	sub	sp, #28
 80158e6:	af00      	add	r7, sp, #0
 80158e8:	60f8      	str	r0, [r7, #12]
 80158ea:	460b      	mov	r3, r1
 80158ec:	607a      	str	r2, [r7, #4]
 80158ee:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80158f0:	2300      	movs	r3, #0
 80158f2:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 80158f4:	2300      	movs	r3, #0
 80158f6:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 80158fc:	2300      	movs	r3, #0
 80158fe:	82fb      	strh	r3, [r7, #22]
 8015900:	e00e      	b.n	8015920 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8015902:	897a      	ldrh	r2, [r7, #10]
 8015904:	8afb      	ldrh	r3, [r7, #22]
 8015906:	1ad3      	subs	r3, r2, r3
 8015908:	3b01      	subs	r3, #1
 801590a:	687a      	ldr	r2, [r7, #4]
 801590c:	4413      	add	r3, r2
 801590e:	693a      	ldr	r2, [r7, #16]
 8015910:	b2d2      	uxtb	r2, r2
 8015912:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8015914:	693b      	ldr	r3, [r7, #16]
 8015916:	0a1b      	lsrs	r3, r3, #8
 8015918:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 801591a:	8afb      	ldrh	r3, [r7, #22]
 801591c:	3301      	adds	r3, #1
 801591e:	82fb      	strh	r3, [r7, #22]
 8015920:	8afa      	ldrh	r2, [r7, #22]
 8015922:	897b      	ldrh	r3, [r7, #10]
 8015924:	429a      	cmp	r2, r3
 8015926:	d3ec      	bcc.n	8015902 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8015928:	bf00      	nop
 801592a:	bf00      	nop
 801592c:	371c      	adds	r7, #28
 801592e:	46bd      	mov	sp, r7
 8015930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015934:	4770      	bx	lr

08015936 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8015936:	b480      	push	{r7}
 8015938:	b085      	sub	sp, #20
 801593a:	af00      	add	r7, sp, #0
 801593c:	4603      	mov	r3, r0
 801593e:	6039      	str	r1, [r7, #0]
 8015940:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8015942:	2300      	movs	r3, #0
 8015944:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 8015946:	e007      	b.n	8015958 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	021a      	lsls	r2, r3, #8
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	1c59      	adds	r1, r3, #1
 8015950:	6039      	str	r1, [r7, #0]
 8015952:	781b      	ldrb	r3, [r3, #0]
 8015954:	4313      	orrs	r3, r2
 8015956:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8015958:	88fb      	ldrh	r3, [r7, #6]
 801595a:	1e5a      	subs	r2, r3, #1
 801595c:	80fa      	strh	r2, [r7, #6]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d1f2      	bne.n	8015948 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 8015962:	68fb      	ldr	r3, [r7, #12]
}
 8015964:	4618      	mov	r0, r3
 8015966:	3714      	adds	r7, #20
 8015968:	46bd      	mov	sp, r7
 801596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596e:	4770      	bx	lr

08015970 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8015970:	b480      	push	{r7}
 8015972:	b085      	sub	sp, #20
 8015974:	af00      	add	r7, sp, #0
 8015976:	4603      	mov	r3, r0
 8015978:	6039      	str	r1, [r7, #0]
 801597a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 801597c:	2300      	movs	r3, #0
 801597e:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	781b      	ldrb	r3, [r3, #0]
 8015984:	b25b      	sxtb	r3, r3
 8015986:	2b00      	cmp	r3, #0
 8015988:	da0b      	bge.n	80159a2 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 801598a:	f04f 33ff 	mov.w	r3, #4294967295
 801598e:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 8015990:	e007      	b.n	80159a2 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	021a      	lsls	r2, r3, #8
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	1c59      	adds	r1, r3, #1
 801599a:	6039      	str	r1, [r7, #0]
 801599c:	781b      	ldrb	r3, [r3, #0]
 801599e:	4313      	orrs	r3, r2
 80159a0:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 80159a2:	88fb      	ldrh	r3, [r7, #6]
 80159a4:	1e5a      	subs	r2, r3, #1
 80159a6:	80fa      	strh	r2, [r7, #6]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d1f2      	bne.n	8015992 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 80159ac:	68fb      	ldr	r3, [r7, #12]
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	3714      	adds	r7, #20
 80159b2:	46bd      	mov	sp, r7
 80159b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b8:	4770      	bx	lr

080159ba <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 80159ba:	b580      	push	{r7, lr}
 80159bc:	b086      	sub	sp, #24
 80159be:	af00      	add	r7, sp, #0
 80159c0:	4603      	mov	r3, r0
 80159c2:	460a      	mov	r2, r1
 80159c4:	80fb      	strh	r3, [r7, #6]
 80159c6:	4613      	mov	r3, r2
 80159c8:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 80159ca:	2300      	movs	r3, #0
 80159cc:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 80159ce:	2300      	movs	r3, #0
 80159d0:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80159d2:	2300      	movs	r3, #0
 80159d4:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 80159d6:	88fb      	ldrh	r3, [r7, #6]
 80159d8:	4618      	mov	r0, r3
 80159da:	f000 fb5f 	bl	801609c <VL53L1_calc_pll_period_us>
 80159de:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 80159e0:	797b      	ldrb	r3, [r7, #5]
 80159e2:	4618      	mov	r0, r3
 80159e4:	f000 fb6e 	bl	80160c4 <VL53L1_decode_vcsel_period>
 80159e8:	4603      	mov	r3, r0
 80159ea:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 80159ec:	697a      	ldr	r2, [r7, #20]
 80159ee:	4613      	mov	r3, r2
 80159f0:	00db      	lsls	r3, r3, #3
 80159f2:	4413      	add	r3, r2
 80159f4:	021b      	lsls	r3, r3, #8
 80159f6:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	099b      	lsrs	r3, r3, #6
 80159fc:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 80159fe:	7cfa      	ldrb	r2, [r7, #19]
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	fb02 f303 	mul.w	r3, r2, r3
 8015a06:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	099b      	lsrs	r3, r3, #6
 8015a0c:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8015a0e:	68fb      	ldr	r3, [r7, #12]
}
 8015a10:	4618      	mov	r0, r3
 8015a12:	3718      	adds	r7, #24
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}

08015a18 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8015a18:	b480      	push	{r7}
 8015a1a:	b089      	sub	sp, #36	@ 0x24
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	60f8      	str	r0, [r7, #12]
 8015a20:	4608      	mov	r0, r1
 8015a22:	4611      	mov	r1, r2
 8015a24:	461a      	mov	r2, r3
 8015a26:	4603      	mov	r3, r0
 8015a28:	817b      	strh	r3, [r7, #10]
 8015a2a:	460b      	mov	r3, r1
 8015a2c:	813b      	strh	r3, [r7, #8]
 8015a2e:	4613      	mov	r3, r2
 8015a30:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 8015a32:	2300      	movs	r3, #0
 8015a34:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8015a36:	2300      	movs	r3, #0
 8015a38:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8015a3e:	2300      	movs	r3, #0
 8015a40:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8015a42:	2300      	movs	r3, #0
 8015a44:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	011b      	lsls	r3, r3, #4
 8015a4a:	4a23      	ldr	r2, [pc, #140]	@ (8015ad8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8015a4c:	fb82 1203 	smull	r1, r2, r2, r3
 8015a50:	1192      	asrs	r2, r2, #6
 8015a52:	17db      	asrs	r3, r3, #31
 8015a54:	1ad3      	subs	r3, r2, r3
 8015a56:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 8015a58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	da03      	bge.n	8015a68 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8015a60:	897b      	ldrh	r3, [r7, #10]
 8015a62:	425b      	negs	r3, r3
 8015a64:	b29b      	uxth	r3, r3
 8015a66:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 8015a68:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	da03      	bge.n	8015a78 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8015a70:	893b      	ldrh	r3, [r7, #8]
 8015a72:	425b      	negs	r3, r3
 8015a74:	b29b      	uxth	r3, r3
 8015a76:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8015a78:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8015a7c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015a80:	4413      	add	r3, r2
 8015a82:	015b      	lsls	r3, r3, #5
 8015a84:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8015a86:	697b      	ldr	r3, [r7, #20]
 8015a88:	4a13      	ldr	r2, [pc, #76]	@ (8015ad8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8015a8a:	fb82 1203 	smull	r1, r2, r2, r3
 8015a8e:	1192      	asrs	r2, r2, #6
 8015a90:	17db      	asrs	r3, r3, #31
 8015a92:	1ad3      	subs	r3, r2, r3
 8015a94:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8015a96:	697a      	ldr	r2, [r7, #20]
 8015a98:	693b      	ldr	r3, [r7, #16]
 8015a9a:	4413      	add	r3, r2
 8015a9c:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8015a9e:	79fa      	ldrb	r2, [r7, #7]
 8015aa0:	697b      	ldr	r3, [r7, #20]
 8015aa2:	fb02 f303 	mul.w	r3, r2, r3
 8015aa6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8015aa8:	697b      	ldr	r3, [r7, #20]
 8015aaa:	3310      	adds	r3, #16
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	da00      	bge.n	8015ab2 <VL53L1_calc_range_ignore_threshold+0x9a>
 8015ab0:	331f      	adds	r3, #31
 8015ab2:	115b      	asrs	r3, r3, #5
 8015ab4:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015abc:	db03      	blt.n	8015ac6 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8015abe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015ac2:	83fb      	strh	r3, [r7, #30]
 8015ac4:	e001      	b.n	8015aca <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8015aca:	8bfb      	ldrh	r3, [r7, #30]
}
 8015acc:	4618      	mov	r0, r3
 8015ace:	3724      	adds	r7, #36	@ 0x24
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad6:	4770      	bx	lr
 8015ad8:	10624dd3 	.word	0x10624dd3

08015adc <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8015adc:	b480      	push	{r7}
 8015ade:	b085      	sub	sp, #20
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
 8015ae4:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	031a      	lsls	r2, r3, #12
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	085b      	lsrs	r3, r3, #1
 8015af2:	441a      	add	r2, r3
	timeout_mclks   =
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8015afa:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8015afc:	68fb      	ldr	r3, [r7, #12]
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3714      	adds	r7, #20
 8015b02:	46bd      	mov	sp, r7
 8015b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b08:	4770      	bx	lr

08015b0a <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8015b0a:	b580      	push	{r7, lr}
 8015b0c:	b084      	sub	sp, #16
 8015b0e:	af00      	add	r7, sp, #0
 8015b10:	6078      	str	r0, [r7, #4]
 8015b12:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8015b14:	2300      	movs	r3, #0
 8015b16:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8015b18:	2300      	movs	r3, #0
 8015b1a:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8015b1c:	6839      	ldr	r1, [r7, #0]
 8015b1e:	6878      	ldr	r0, [r7, #4]
 8015b20:	f7ff ffdc 	bl	8015adc <VL53L1_calc_timeout_mclks>
 8015b24:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 8015b26:	68f8      	ldr	r0, [r7, #12]
 8015b28:	f000 f860 	bl	8015bec <VL53L1_encode_timeout>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8015b30:	897b      	ldrh	r3, [r7, #10]
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3710      	adds	r7, #16
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}

08015b3a <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8015b3a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8015b3e:	b087      	sub	sp, #28
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
 8015b44:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 8015b46:	2100      	movs	r1, #0
 8015b48:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8015b4a:	f04f 0000 	mov.w	r0, #0
 8015b4e:	f04f 0100 	mov.w	r1, #0
 8015b52:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8015b56:	6879      	ldr	r1, [r7, #4]
 8015b58:	2000      	movs	r0, #0
 8015b5a:	4688      	mov	r8, r1
 8015b5c:	4681      	mov	r9, r0
 8015b5e:	6839      	ldr	r1, [r7, #0]
 8015b60:	2000      	movs	r0, #0
 8015b62:	460c      	mov	r4, r1
 8015b64:	4605      	mov	r5, r0
 8015b66:	fb04 f009 	mul.w	r0, r4, r9
 8015b6a:	fb08 f105 	mul.w	r1, r8, r5
 8015b6e:	4401      	add	r1, r0
 8015b70:	fba8 2304 	umull	r2, r3, r8, r4
 8015b74:	4419      	add	r1, r3
 8015b76:	460b      	mov	r3, r1
 8015b78:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8015b7c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8015b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015b84:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8015b88:	f143 0b00 	adc.w	fp, r3, #0
 8015b8c:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8015b90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015b94:	f04f 0200 	mov.w	r2, #0
 8015b98:	f04f 0300 	mov.w	r3, #0
 8015b9c:	0b02      	lsrs	r2, r0, #12
 8015b9e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8015ba2:	0b0b      	lsrs	r3, r1, #12
 8015ba4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8015ba8:	68bb      	ldr	r3, [r7, #8]
 8015baa:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8015bac:	697b      	ldr	r3, [r7, #20]
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	371c      	adds	r7, #28
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8015bb8:	4770      	bx	lr

08015bba <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8015bba:	b580      	push	{r7, lr}
 8015bbc:	b084      	sub	sp, #16
 8015bbe:	af00      	add	r7, sp, #0
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	6039      	str	r1, [r7, #0]
 8015bc4:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8015bca:	2300      	movs	r3, #0
 8015bcc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8015bce:	88fb      	ldrh	r3, [r7, #6]
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f000 f835 	bl	8015c40 <VL53L1_decode_timeout>
 8015bd6:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8015bd8:	6839      	ldr	r1, [r7, #0]
 8015bda:	68f8      	ldr	r0, [r7, #12]
 8015bdc:	f7ff ffad 	bl	8015b3a <VL53L1_calc_timeout_us>
 8015be0:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8015be2:	68bb      	ldr	r3, [r7, #8]
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	3710      	adds	r7, #16
 8015be8:	46bd      	mov	sp, r7
 8015bea:	bd80      	pop	{r7, pc}

08015bec <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8015bec:	b480      	push	{r7}
 8015bee:	b087      	sub	sp, #28
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d015      	beq.n	8015c32 <VL53L1_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	3b01      	subs	r3, #1
 8015c0a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8015c0c:	e005      	b.n	8015c1a <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8015c0e:	693b      	ldr	r3, [r7, #16]
 8015c10:	085b      	lsrs	r3, r3, #1
 8015c12:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8015c14:	89fb      	ldrh	r3, [r7, #14]
 8015c16:	3301      	adds	r3, #1
 8015c18:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8015c1a:	693b      	ldr	r3, [r7, #16]
 8015c1c:	2bff      	cmp	r3, #255	@ 0xff
 8015c1e:	d8f6      	bhi.n	8015c0e <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8015c20:	89fb      	ldrh	r3, [r7, #14]
 8015c22:	021b      	lsls	r3, r3, #8
 8015c24:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8015c26:	693b      	ldr	r3, [r7, #16]
 8015c28:	b29b      	uxth	r3, r3
 8015c2a:	b2db      	uxtb	r3, r3
 8015c2c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8015c2e:	4413      	add	r3, r2
 8015c30:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8015c32:	8afb      	ldrh	r3, [r7, #22]
}
 8015c34:	4618      	mov	r0, r3
 8015c36:	371c      	adds	r7, #28
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c3e:	4770      	bx	lr

08015c40 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8015c40:	b480      	push	{r7}
 8015c42:	b085      	sub	sp, #20
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	4603      	mov	r3, r0
 8015c48:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8015c4e:	88fb      	ldrh	r3, [r7, #6]
 8015c50:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8015c52:	88fa      	ldrh	r2, [r7, #6]
 8015c54:	0a12      	lsrs	r2, r2, #8
 8015c56:	b292      	uxth	r2, r2
 8015c58:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8015c5a:	3301      	adds	r3, #1
 8015c5c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8015c5e:	68fb      	ldr	r3, [r7, #12]
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	3714      	adds	r7, #20
 8015c64:	46bd      	mov	sp, r7
 8015c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6a:	4770      	bx	lr

08015c6c <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b088      	sub	sp, #32
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	607a      	str	r2, [r7, #4]
 8015c78:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8015c7e:	2300      	movs	r3, #0
 8015c80:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8015c82:	2300      	movs	r3, #0
 8015c84:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8015c86:	2300      	movs	r3, #0
 8015c88:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8015c8a:	887b      	ldrh	r3, [r7, #2]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d102      	bne.n	8015c96 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8015c90:	23f1      	movs	r3, #241	@ 0xf1
 8015c92:	77fb      	strb	r3, [r7, #31]
 8015c94:	e05d      	b.n	8015d52 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8015c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c98:	799a      	ldrb	r2, [r3, #6]
 8015c9a:	887b      	ldrh	r3, [r7, #2]
 8015c9c:	4611      	mov	r1, r2
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f7ff fe8b 	bl	80159ba <VL53L1_calc_macro_period_us>
 8015ca4:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 8015ca6:	6979      	ldr	r1, [r7, #20]
 8015ca8:	68f8      	ldr	r0, [r7, #12]
 8015caa:	f7ff ff17 	bl	8015adc <VL53L1_calc_timeout_mclks>
 8015cae:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8015cb0:	69bb      	ldr	r3, [r7, #24]
 8015cb2:	2bff      	cmp	r3, #255	@ 0xff
 8015cb4:	d901      	bls.n	8015cba <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8015cb6:	23ff      	movs	r3, #255	@ 0xff
 8015cb8:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8015cba:	69bb      	ldr	r3, [r7, #24]
 8015cbc:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8015cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cc0:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8015cc2:	6979      	ldr	r1, [r7, #20]
 8015cc4:	68b8      	ldr	r0, [r7, #8]
 8015cc6:	f7ff ff20 	bl	8015b0a <VL53L1_calc_encoded_timeout>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8015cce:	8a7b      	ldrh	r3, [r7, #18]
 8015cd0:	0a1b      	lsrs	r3, r3, #8
 8015cd2:	b29b      	uxth	r3, r3
 8015cd4:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8015cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cd8:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8015cda:	8a7b      	ldrh	r3, [r7, #18]
 8015cdc:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8015cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ce0:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8015ce2:	6979      	ldr	r1, [r7, #20]
 8015ce4:	6878      	ldr	r0, [r7, #4]
 8015ce6:	f7ff ff10 	bl	8015b0a <VL53L1_calc_encoded_timeout>
 8015cea:	4603      	mov	r3, r0
 8015cec:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8015cee:	8a7b      	ldrh	r3, [r7, #18]
 8015cf0:	0a1b      	lsrs	r3, r3, #8
 8015cf2:	b29b      	uxth	r3, r3
 8015cf4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8015cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cf8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8015cfa:	8a7b      	ldrh	r3, [r7, #18]
 8015cfc:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8015cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d00:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8015d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d04:	7a5a      	ldrb	r2, [r3, #9]
 8015d06:	887b      	ldrh	r3, [r7, #2]
 8015d08:	4611      	mov	r1, r2
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7ff fe55 	bl	80159ba <VL53L1_calc_macro_period_us>
 8015d10:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 8015d12:	6979      	ldr	r1, [r7, #20]
 8015d14:	68b8      	ldr	r0, [r7, #8]
 8015d16:	f7ff fef8 	bl	8015b0a <VL53L1_calc_encoded_timeout>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8015d1e:	8a7b      	ldrh	r3, [r7, #18]
 8015d20:	0a1b      	lsrs	r3, r3, #8
 8015d22:	b29b      	uxth	r3, r3
 8015d24:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8015d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d28:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8015d2a:	8a7b      	ldrh	r3, [r7, #18]
 8015d2c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8015d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d30:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8015d32:	6979      	ldr	r1, [r7, #20]
 8015d34:	6878      	ldr	r0, [r7, #4]
 8015d36:	f7ff fee8 	bl	8015b0a <VL53L1_calc_encoded_timeout>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8015d3e:	8a7b      	ldrh	r3, [r7, #18]
 8015d40:	0a1b      	lsrs	r3, r3, #8
 8015d42:	b29b      	uxth	r3, r3
 8015d44:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8015d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d48:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8015d4a:	8a7b      	ldrh	r3, [r7, #18]
 8015d4c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8015d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d50:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8015d52:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8015d56:	4618      	mov	r0, r3
 8015d58:	3720      	adds	r7, #32
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}

08015d5e <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8015d5e:	b480      	push	{r7}
 8015d60:	b083      	sub	sp, #12
 8015d62:	af00      	add	r7, sp, #0
 8015d64:	4603      	mov	r3, r0
 8015d66:	603a      	str	r2, [r7, #0]
 8015d68:	71fb      	strb	r3, [r7, #7]
 8015d6a:	460b      	mov	r3, r1
 8015d6c:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8015d6e:	79fb      	ldrb	r3, [r7, #7]
 8015d70:	2b07      	cmp	r3, #7
 8015d72:	d90a      	bls.n	8015d8a <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8015d74:	79bb      	ldrb	r3, [r7, #6]
 8015d76:	00db      	lsls	r3, r3, #3
 8015d78:	b2da      	uxtb	r2, r3
 8015d7a:	79fb      	ldrb	r3, [r7, #7]
 8015d7c:	1ad3      	subs	r3, r2, r3
 8015d7e:	b2db      	uxtb	r3, r3
 8015d80:	3b71      	subs	r3, #113	@ 0x71
 8015d82:	b2da      	uxtb	r2, r3
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8015d88:	e00a      	b.n	8015da0 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8015d8a:	79bb      	ldrb	r3, [r7, #6]
 8015d8c:	f1c3 030f 	rsb	r3, r3, #15
 8015d90:	b2db      	uxtb	r3, r3
 8015d92:	00db      	lsls	r3, r3, #3
 8015d94:	b2da      	uxtb	r2, r3
 8015d96:	79fb      	ldrb	r3, [r7, #7]
 8015d98:	4413      	add	r3, r2
 8015d9a:	b2da      	uxtb	r2, r3
 8015d9c:	683b      	ldr	r3, [r7, #0]
 8015d9e:	701a      	strb	r2, [r3, #0]
}
 8015da0:	bf00      	nop
 8015da2:	370c      	adds	r7, #12
 8015da4:	46bd      	mov	sp, r7
 8015da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015daa:	4770      	bx	lr

08015dac <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8015dac:	b480      	push	{r7}
 8015dae:	b085      	sub	sp, #20
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	4603      	mov	r3, r0
 8015db4:	60b9      	str	r1, [r7, #8]
 8015db6:	607a      	str	r2, [r7, #4]
 8015db8:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8015dba:	7bfb      	ldrb	r3, [r7, #15]
 8015dbc:	091b      	lsrs	r3, r3, #4
 8015dbe:	b2da      	uxtb	r2, r3
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8015dc4:	7bfb      	ldrb	r3, [r7, #15]
 8015dc6:	f003 030f 	and.w	r3, r3, #15
 8015dca:	b2da      	uxtb	r2, r3
 8015dcc:	68bb      	ldr	r3, [r7, #8]
 8015dce:	701a      	strb	r2, [r3, #0]

}
 8015dd0:	bf00      	nop
 8015dd2:	3714      	adds	r7, #20
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dda:	4770      	bx	lr

08015ddc <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8015ddc:	b480      	push	{r7}
 8015dde:	b083      	sub	sp, #12
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	4603      	mov	r3, r0
 8015de4:	603a      	str	r2, [r7, #0]
 8015de6:	71fb      	strb	r3, [r7, #7]
 8015de8:	460b      	mov	r3, r1
 8015dea:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8015dec:	79bb      	ldrb	r3, [r7, #6]
 8015dee:	011b      	lsls	r3, r3, #4
 8015df0:	b2da      	uxtb	r2, r3
 8015df2:	79fb      	ldrb	r3, [r7, #7]
 8015df4:	4413      	add	r3, r2
 8015df6:	b2da      	uxtb	r2, r3
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	701a      	strb	r2, [r3, #0]

}
 8015dfc:	bf00      	nop
 8015dfe:	370c      	adds	r7, #12
 8015e00:	46bd      	mov	sp, r7
 8015e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e06:	4770      	bx	lr

08015e08 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8015e08:	b480      	push	{r7}
 8015e0a:	b085      	sub	sp, #20
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015e10:	2300      	movs	r3, #0
 8015e12:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	2203      	movs	r2, #3
 8015e1c:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	2200      	movs	r2, #0
 8015e24:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8015e28:	68bb      	ldr	r3, [r7, #8]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8015e30:	68bb      	ldr	r3, [r7, #8]
 8015e32:	2200      	movs	r2, #0
 8015e34:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8015e38:	68bb      	ldr	r3, [r7, #8]
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8015e40:	68bb      	ldr	r3, [r7, #8]
 8015e42:	2200      	movs	r2, #0
 8015e44:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8015e48:	68bb      	ldr	r3, [r7, #8]
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	2200      	movs	r2, #0
 8015e54:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8015e58:	68bb      	ldr	r3, [r7, #8]
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 8015e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015e64:	4618      	mov	r0, r3
 8015e66:	3714      	adds	r7, #20
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6e:	4770      	bx	lr

08015e70 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 8015e70:	b480      	push	{r7}
 8015e72:	b085      	sub	sp, #20
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015e78:	2300      	movs	r3, #0
 8015e7a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8015e80:	68bb      	ldr	r3, [r7, #8]
 8015e82:	22ff      	movs	r2, #255	@ 0xff
 8015e84:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8015e88:	68bb      	ldr	r3, [r7, #8]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8015e90:	68bb      	ldr	r3, [r7, #8]
 8015e92:	2200      	movs	r2, #0
 8015e94:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8015e98:	68bb      	ldr	r3, [r7, #8]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8015ea0:	68bb      	ldr	r3, [r7, #8]
 8015ea2:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d005      	beq.n	8015eb6 <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 8015eaa:	68bb      	ldr	r3, [r7, #8]
 8015eac:	f893 22e8 	ldrb.w	r2, [r3, #744]	@ 0x2e8
		pdev->stat_nvm.vhv_config__init =
 8015eb0:	68bb      	ldr	r3, [r7, #8]
 8015eb2:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 8015eb6:	68bb      	ldr	r3, [r7, #8]
 8015eb8:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d005      	beq.n	8015ecc <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 8015ec0:	68bb      	ldr	r3, [r7, #8]
 8015ec2:	f893 22e9 	ldrb.w	r2, [r3, #745]	@ 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8015ec6:	68bb      	ldr	r3, [r7, #8]
 8015ec8:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 8015ecc:	68bb      	ldr	r3, [r7, #8]
 8015ece:	2200      	movs	r2, #0
 8015ed0:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d

	LOG_FUNCTION_END(status);

	return status;
 8015ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015ed8:	4618      	mov	r0, r3
 8015eda:	3714      	adds	r7, #20
 8015edc:	46bd      	mov	sp, r7
 8015ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee2:	4770      	bx	lr

08015ee4 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8015ee4:	b480      	push	{r7}
 8015ee6:	b087      	sub	sp, #28
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	60f8      	str	r0, [r7, #12]
 8015eec:	60b9      	str	r1, [r7, #8]
 8015eee:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	2201      	movs	r2, #1
 8015ef8:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2200      	movs	r2, #0
 8015efe:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8015f00:	68bb      	ldr	r3, [r7, #8]
 8015f02:	228b      	movs	r2, #139	@ 0x8b
 8015f04:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	f44f 4248 	mov.w	r2, #51200	@ 0xc800
 8015f0c:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	2202      	movs	r2, #2
 8015f12:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 8015f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f18:	4618      	mov	r0, r3
 8015f1a:	371c      	adds	r7, #28
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f22:	4770      	bx	lr

08015f24 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 8015f24:	b480      	push	{r7}
 8015f26:	b085      	sub	sp, #20
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015f30:	2300      	movs	r3, #0
 8015f32:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	f893 2163 	ldrb.w	r2, [r3, #355]	@ 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	f893 3163 	ldrb.w	r3, [r3, #355]	@ 0x163
 8015f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015f56:	b2da      	uxtb	r2, r3
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8015f64:	f003 0303 	and.w	r3, r3, #3
 8015f68:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8015f70:	009b      	lsls	r3, r3, #2
 8015f72:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8015f74:	4413      	add	r3, r2
 8015f76:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	2201      	movs	r2, #1
 8015f82:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	f893 22ae 	ldrb.w	r2, [r3, #686]	@ 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	f893 22ea 	ldrb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	f883 2187 	strb.w	r2, [r3, #391]	@ 0x187

	LOG_FUNCTION_END(status);

	return status;
 8015f9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	3714      	adds	r7, #20
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fac:	4770      	bx	lr

08015fae <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 8015fae:	b480      	push	{r7}
 8015fb0:	b087      	sub	sp, #28
 8015fb2:	af00      	add	r7, sp, #0
 8015fb4:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	f8b3 31de 	ldrh.w	r3, [r3, #478]	@ 0x1de
 8015fc4:	461a      	mov	r2, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	@ 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8015fcc:	4413      	add	r3, r2
 8015fce:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015fd6:	d302      	bcc.n	8015fde <VL53L1_low_power_auto_update_DSS+0x30>
		utemp32a = 0xFFFF;
 8015fd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015fdc:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 8015fde:	693b      	ldr	r3, [r7, #16]
 8015fe0:	041b      	lsls	r3, r3, #16
 8015fe2:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	@ 0x1d2
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d102      	bne.n	8015ff4 <VL53L1_low_power_auto_update_DSS+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8015fee:	23f1      	movs	r3, #241	@ 0xf1
 8015ff0:	75fb      	strb	r3, [r7, #23]
 8015ff2:	e035      	b.n	8016060 <VL53L1_low_power_auto_update_DSS+0xb2>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	@ 0x1d2
 8015ffa:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 8015ffc:	693b      	ldr	r3, [r7, #16]
 8015ffe:	fbb3 f3f2 	udiv	r3, r3, r2
 8016002:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	693a      	ldr	r2, [r7, #16]
 8016008:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 8016012:	041b      	lsls	r3, r3, #16
 8016014:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 801601c:	2b00      	cmp	r3, #0
 801601e:	d102      	bne.n	8016026 <VL53L1_low_power_auto_update_DSS+0x78>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8016020:	23f1      	movs	r3, #241	@ 0xf1
 8016022:	75fb      	strb	r3, [r7, #23]
 8016024:	e01c      	b.n	8016060 <VL53L1_low_power_auto_update_DSS+0xb2>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
			utemp32a = utemp32a /
 801602c:	693a      	ldr	r2, [r7, #16]
 801602e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016032:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 8016034:	693b      	ldr	r3, [r7, #16]
 8016036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801603a:	d302      	bcc.n	8016042 <VL53L1_low_power_auto_update_DSS+0x94>
				utemp32a = 0xFFFF;
 801603c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016040:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 8016042:	693b      	ldr	r3, [r7, #16]
 8016044:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	@ 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194
			pdev->gen_cfg.dss_config__roi_mode_control =
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	2202      	movs	r2, #2
 801605c:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 8016060:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016064:	f113 0f0f 	cmn.w	r3, #15
 8016068:	d110      	bne.n	801608c <VL53L1_low_power_auto_update_DSS+0xde>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8016070:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	@ 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	2202      	movs	r2, #2
 8016084:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 8016088:	2300      	movs	r3, #0
 801608a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 801608c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016090:	4618      	mov	r0, r3
 8016092:	371c      	adds	r7, #28
 8016094:	46bd      	mov	sp, r7
 8016096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609a:	4770      	bx	lr

0801609c <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 801609c:	b480      	push	{r7}
 801609e:	b085      	sub	sp, #20
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	4603      	mov	r3, r0
 80160a4:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 80160a6:	2300      	movs	r3, #0
 80160a8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 80160aa:	88fb      	ldrh	r3, [r7, #6]
 80160ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80160b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80160b4:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 80160b6:	68fb      	ldr	r3, [r7, #12]
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	3714      	adds	r7, #20
 80160bc:	46bd      	mov	sp, r7
 80160be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c2:	4770      	bx	lr

080160c4 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80160c4:	b480      	push	{r7}
 80160c6:	b085      	sub	sp, #20
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	4603      	mov	r3, r0
 80160cc:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80160ce:	2300      	movs	r3, #0
 80160d0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80160d2:	79fb      	ldrb	r3, [r7, #7]
 80160d4:	3301      	adds	r3, #1
 80160d6:	b2db      	uxtb	r3, r3
 80160d8:	005b      	lsls	r3, r3, #1
 80160da:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80160dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80160de:	4618      	mov	r0, r3
 80160e0:	3714      	adds	r7, #20
 80160e2:	46bd      	mov	sp, r7
 80160e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e8:	4770      	bx	lr

080160ea <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 80160ea:	b480      	push	{r7}
 80160ec:	b085      	sub	sp, #20
 80160ee:	af00      	add	r7, sp, #0
 80160f0:	4603      	mov	r3, r0
 80160f2:	60b9      	str	r1, [r7, #8]
 80160f4:	607a      	str	r2, [r7, #4]
 80160f6:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 80160f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	da10      	bge.n	8016122 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8016100:	7bfb      	ldrb	r3, [r7, #15]
 8016102:	43db      	mvns	r3, r3
 8016104:	b2db      	uxtb	r3, r3
 8016106:	f003 0307 	and.w	r3, r3, #7
 801610a:	b2db      	uxtb	r3, r3
 801610c:	3308      	adds	r3, #8
 801610e:	b2da      	uxtb	r2, r3
 8016110:	68bb      	ldr	r3, [r7, #8]
 8016112:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8016114:	7bfb      	ldrb	r3, [r7, #15]
 8016116:	3b80      	subs	r3, #128	@ 0x80
 8016118:	10db      	asrs	r3, r3, #3
 801611a:	b2da      	uxtb	r2, r3
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8016120:	e00c      	b.n	801613c <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 8016122:	7bfb      	ldrb	r3, [r7, #15]
 8016124:	f003 0307 	and.w	r3, r3, #7
 8016128:	b2da      	uxtb	r2, r3
 801612a:	68bb      	ldr	r3, [r7, #8]
 801612c:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 801612e:	7bfb      	ldrb	r3, [r7, #15]
 8016130:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8016134:	10db      	asrs	r3, r3, #3
 8016136:	b2da      	uxtb	r2, r3
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	701a      	strb	r2, [r3, #0]
}
 801613c:	bf00      	nop
 801613e:	3714      	adds	r7, #20
 8016140:	46bd      	mov	sp, r7
 8016142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016146:	4770      	bx	lr

08016148 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b086      	sub	sp, #24
 801614c:	af00      	add	r7, sp, #0
 801614e:	60f8      	str	r0, [r7, #12]
 8016150:	460b      	mov	r3, r1
 8016152:	607a      	str	r2, [r7, #4]
 8016154:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016156:	2300      	movs	r3, #0
 8016158:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 801615a:	897b      	ldrh	r3, [r7, #10]
 801615c:	2b0a      	cmp	r3, #10
 801615e:	d802      	bhi.n	8016166 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016160:	f06f 0309 	mvn.w	r3, #9
 8016164:	e047      	b.n	80161f6 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	781b      	ldrb	r3, [r3, #0]
 801616a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801616e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 801617c:	f002 020f 	and.w	r2, r2, #15
 8016180:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8016182:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801618c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8016190:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8016192:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 801619c:	f002 0203 	and.w	r2, r2, #3
 80161a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80161a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 80161ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80161b0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80161b2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	88d8      	ldrh	r0, [r3, #6]
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	3305      	adds	r3, #5
 80161bc:	461a      	mov	r2, r3
 80161be:	2102      	movs	r1, #2
 80161c0:	f7ff faef 	bl	80157a2 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 80161c8:	68fa      	ldr	r2, [r7, #12]
 80161ca:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80161cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 80161d2:	68fa      	ldr	r2, [r7, #12]
 80161d4:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80161d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 80161e0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80161e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80161e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 80161ec:	68fa      	ldr	r2, [r7, #12]
 80161ee:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 80161f0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80161f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161f6:	4618      	mov	r0, r3
 80161f8:	3718      	adds	r7, #24
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}

080161fe <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80161fe:	b580      	push	{r7, lr}
 8016200:	b086      	sub	sp, #24
 8016202:	af00      	add	r7, sp, #0
 8016204:	4603      	mov	r3, r0
 8016206:	60b9      	str	r1, [r7, #8]
 8016208:	607a      	str	r2, [r7, #4]
 801620a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801620c:	2300      	movs	r3, #0
 801620e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8016210:	89fb      	ldrh	r3, [r7, #14]
 8016212:	2b0a      	cmp	r3, #10
 8016214:	d802      	bhi.n	801621c <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016216:	f06f 0309 	mvn.w	r3, #9
 801621a:	e046      	b.n	80162aa <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 801621c:	68bb      	ldr	r3, [r7, #8]
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016224:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	3301      	adds	r3, #1
 801622e:	781b      	ldrb	r3, [r3, #0]
 8016230:	f003 030f 	and.w	r3, r3, #15
 8016234:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 801623a:	68bb      	ldr	r3, [r7, #8]
 801623c:	3302      	adds	r3, #2
 801623e:	781b      	ldrb	r3, [r3, #0]
 8016240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016244:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 801624a:	68bb      	ldr	r3, [r7, #8]
 801624c:	3303      	adds	r3, #3
 801624e:	781b      	ldrb	r3, [r3, #0]
 8016250:	f003 0303 	and.w	r3, r3, #3
 8016254:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 801625a:	68bb      	ldr	r3, [r7, #8]
 801625c:	3304      	adds	r3, #4
 801625e:	781b      	ldrb	r3, [r3, #0]
 8016260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016264:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 801626a:	68bb      	ldr	r3, [r7, #8]
 801626c:	3305      	adds	r3, #5
 801626e:	4619      	mov	r1, r3
 8016270:	2002      	movs	r0, #2
 8016272:	f7ff fac1 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016276:	4603      	mov	r3, r0
 8016278:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	79da      	ldrb	r2, [r3, #7]
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	7a1a      	ldrb	r2, [r3, #8]
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	3309      	adds	r3, #9
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016298:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	7a9a      	ldrb	r2, [r3, #10]
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 80162a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80162aa:	4618      	mov	r0, r3
 80162ac:	3718      	adds	r7, #24
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}

080162b2 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80162b2:	b580      	push	{r7, lr}
 80162b4:	b086      	sub	sp, #24
 80162b6:	af00      	add	r7, sp, #0
 80162b8:	6078      	str	r0, [r7, #4]
 80162ba:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80162bc:	2300      	movs	r3, #0
 80162be:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80162c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d108      	bne.n	80162da <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80162c8:	f107 020c 	add.w	r2, r7, #12
 80162cc:	230b      	movs	r3, #11
 80162ce:	2101      	movs	r1, #1
 80162d0:	6878      	ldr	r0, [r7, #4]
 80162d2:	f7f3 ffd4 	bl	800a27e <VL53L1_ReadMulti>
 80162d6:	4603      	mov	r3, r0
 80162d8:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80162da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d108      	bne.n	80162f4 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80162e2:	f107 030c 	add.w	r3, r7, #12
 80162e6:	683a      	ldr	r2, [r7, #0]
 80162e8:	4619      	mov	r1, r3
 80162ea:	200b      	movs	r0, #11
 80162ec:	f7ff ff87 	bl	80161fe <VL53L1_i2c_decode_static_nvm_managed>
 80162f0:	4603      	mov	r3, r0
 80162f2:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80162f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3718      	adds	r7, #24
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}

08016300 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b086      	sub	sp, #24
 8016304:	af00      	add	r7, sp, #0
 8016306:	60f8      	str	r0, [r7, #12]
 8016308:	460b      	mov	r3, r1
 801630a:	607a      	str	r2, [r7, #4]
 801630c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801630e:	2300      	movs	r3, #0
 8016310:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8016312:	897b      	ldrh	r3, [r7, #10]
 8016314:	2b16      	cmp	r3, #22
 8016316:	d802      	bhi.n	801631e <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016318:	f06f 0309 	mvn.w	r3, #9
 801631c:	e076      	b.n	801640c <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 801632a:	68fa      	ldr	r2, [r7, #12]
 801632c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801632e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8016334:	68fa      	ldr	r2, [r7, #12]
 8016336:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8016338:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 801633e:	68fa      	ldr	r2, [r7, #12]
 8016340:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8016342:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8016348:	68fa      	ldr	r2, [r7, #12]
 801634a:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 801634c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8016356:	f002 020f 	and.w	r2, r2, #15
 801635a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801635c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8016362:	68fa      	ldr	r2, [r7, #12]
 8016364:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8016366:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8016370:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8016374:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8016376:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8016380:	f002 0203 	and.w	r2, r2, #3
 8016384:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8016386:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	8958      	ldrh	r0, [r3, #10]
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	3309      	adds	r3, #9
 8016390:	461a      	mov	r2, r3
 8016392:	2102      	movs	r1, #2
 8016394:	f7ff fa05 	bl	80157a2 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	330b      	adds	r3, #11
 80163a2:	461a      	mov	r2, r3
 80163a4:	2102      	movs	r1, #2
 80163a6:	f7ff fa47 	bl	8015838 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	330d      	adds	r3, #13
 80163b4:	461a      	mov	r2, r3
 80163b6:	2102      	movs	r1, #2
 80163b8:	f7ff fa3e 	bl	8015838 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	8a18      	ldrh	r0, [r3, #16]
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	330f      	adds	r3, #15
 80163c4:	461a      	mov	r2, r3
 80163c6:	2102      	movs	r1, #2
 80163c8:	f7ff f9eb 	bl	80157a2 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 80163d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163d6:	b218      	sxth	r0, r3
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	3311      	adds	r3, #17
 80163dc:	461a      	mov	r2, r3
 80163de:	2102      	movs	r1, #2
 80163e0:	f7ff fa2a 	bl	8015838 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	3313      	adds	r3, #19
 80163ee:	461a      	mov	r2, r3
 80163f0:	2102      	movs	r1, #2
 80163f2:	f7ff fa21 	bl	8015838 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	3315      	adds	r3, #21
 8016400:	461a      	mov	r2, r3
 8016402:	2102      	movs	r1, #2
 8016404:	f7ff fa18 	bl	8015838 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8016408:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801640c:	4618      	mov	r0, r3
 801640e:	3718      	adds	r7, #24
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}

08016414 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b086      	sub	sp, #24
 8016418:	af00      	add	r7, sp, #0
 801641a:	4603      	mov	r3, r0
 801641c:	60b9      	str	r1, [r7, #8]
 801641e:	607a      	str	r2, [r7, #4]
 8016420:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016422:	2300      	movs	r3, #0
 8016424:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8016426:	89fb      	ldrh	r3, [r7, #14]
 8016428:	2b16      	cmp	r3, #22
 801642a:	d802      	bhi.n	8016432 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801642c:	f06f 0309 	mvn.w	r3, #9
 8016430:	e079      	b.n	8016526 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8016432:	68bb      	ldr	r3, [r7, #8]
 8016434:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 801643a:	68bb      	ldr	r3, [r7, #8]
 801643c:	785a      	ldrb	r2, [r3, #1]
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8016442:	68bb      	ldr	r3, [r7, #8]
 8016444:	789a      	ldrb	r2, [r3, #2]
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 801644a:	68bb      	ldr	r3, [r7, #8]
 801644c:	78da      	ldrb	r2, [r3, #3]
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8016452:	68bb      	ldr	r3, [r7, #8]
 8016454:	791a      	ldrb	r2, [r3, #4]
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 801645a:	68bb      	ldr	r3, [r7, #8]
 801645c:	3305      	adds	r3, #5
 801645e:	781b      	ldrb	r3, [r3, #0]
 8016460:	f003 030f 	and.w	r3, r3, #15
 8016464:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 801646a:	68bb      	ldr	r3, [r7, #8]
 801646c:	799a      	ldrb	r2, [r3, #6]
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8016472:	68bb      	ldr	r3, [r7, #8]
 8016474:	3307      	adds	r3, #7
 8016476:	781b      	ldrb	r3, [r3, #0]
 8016478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801647c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	3308      	adds	r3, #8
 8016486:	781b      	ldrb	r3, [r3, #0]
 8016488:	f003 0303 	and.w	r3, r3, #3
 801648c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8016492:	68bb      	ldr	r3, [r7, #8]
 8016494:	3309      	adds	r3, #9
 8016496:	4619      	mov	r1, r3
 8016498:	2002      	movs	r0, #2
 801649a:	f7ff f9ad 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 801649e:	4603      	mov	r3, r0
 80164a0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 80164a6:	68bb      	ldr	r3, [r7, #8]
 80164a8:	330b      	adds	r3, #11
 80164aa:	4619      	mov	r1, r3
 80164ac:	2002      	movs	r0, #2
 80164ae:	f7ff f9ef 	bl	8015890 <VL53L1_i2c_decode_int16_t>
 80164b2:	4603      	mov	r3, r0
 80164b4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80164ba:	68bb      	ldr	r3, [r7, #8]
 80164bc:	330d      	adds	r3, #13
 80164be:	4619      	mov	r1, r3
 80164c0:	2002      	movs	r0, #2
 80164c2:	f7ff f9e5 	bl	8015890 <VL53L1_i2c_decode_int16_t>
 80164c6:	4603      	mov	r3, r0
 80164c8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 80164ce:	68bb      	ldr	r3, [r7, #8]
 80164d0:	330f      	adds	r3, #15
 80164d2:	4619      	mov	r1, r3
 80164d4:	2002      	movs	r0, #2
 80164d6:	f7ff f98f 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 80164da:	4603      	mov	r3, r0
 80164dc:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 80164e2:	68bb      	ldr	r3, [r7, #8]
 80164e4:	3311      	adds	r3, #17
 80164e6:	4619      	mov	r1, r3
 80164e8:	2002      	movs	r0, #2
 80164ea:	f7ff f9d1 	bl	8015890 <VL53L1_i2c_decode_int16_t>
 80164ee:	4603      	mov	r3, r0
 80164f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164f4:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 80164fa:	68bb      	ldr	r3, [r7, #8]
 80164fc:	3313      	adds	r3, #19
 80164fe:	4619      	mov	r1, r3
 8016500:	2002      	movs	r0, #2
 8016502:	f7ff f9c5 	bl	8015890 <VL53L1_i2c_decode_int16_t>
 8016506:	4603      	mov	r3, r0
 8016508:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	3315      	adds	r3, #21
 8016512:	4619      	mov	r1, r3
 8016514:	2002      	movs	r0, #2
 8016516:	f7ff f9bb 	bl	8015890 <VL53L1_i2c_decode_int16_t>
 801651a:	4603      	mov	r3, r0
 801651c:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8016522:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016526:	4618      	mov	r0, r3
 8016528:	3718      	adds	r7, #24
 801652a:	46bd      	mov	sp, r7
 801652c:	bd80      	pop	{r7, pc}

0801652e <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 801652e:	b580      	push	{r7, lr}
 8016530:	b088      	sub	sp, #32
 8016532:	af00      	add	r7, sp, #0
 8016534:	6078      	str	r0, [r7, #4]
 8016536:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016538:	2300      	movs	r3, #0
 801653a:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 801653c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d108      	bne.n	8016556 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8016544:	f107 0208 	add.w	r2, r7, #8
 8016548:	2317      	movs	r3, #23
 801654a:	210d      	movs	r1, #13
 801654c:	6878      	ldr	r0, [r7, #4]
 801654e:	f7f3 fe96 	bl	800a27e <VL53L1_ReadMulti>
 8016552:	4603      	mov	r3, r0
 8016554:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8016556:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d108      	bne.n	8016570 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 801655e:	f107 0308 	add.w	r3, r7, #8
 8016562:	683a      	ldr	r2, [r7, #0]
 8016564:	4619      	mov	r1, r3
 8016566:	2017      	movs	r0, #23
 8016568:	f7ff ff54 	bl	8016414 <VL53L1_i2c_decode_customer_nvm_managed>
 801656c:	4603      	mov	r3, r0
 801656e:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8016570:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016574:	4618      	mov	r0, r3
 8016576:	3720      	adds	r7, #32
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}

0801657c <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b086      	sub	sp, #24
 8016580:	af00      	add	r7, sp, #0
 8016582:	60f8      	str	r0, [r7, #12]
 8016584:	460b      	mov	r3, r1
 8016586:	607a      	str	r2, [r7, #4]
 8016588:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801658a:	2300      	movs	r3, #0
 801658c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 801658e:	897b      	ldrh	r3, [r7, #10]
 8016590:	2b1f      	cmp	r3, #31
 8016592:	d802      	bhi.n	801659a <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016594:	f06f 0309 	mvn.w	r3, #9
 8016598:	e0cf      	b.n	801673a <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	881b      	ldrh	r3, [r3, #0]
 801659e:	687a      	ldr	r2, [r7, #4]
 80165a0:	2102      	movs	r1, #2
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7ff f8fd 	bl	80157a2 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 80165b0:	f002 0201 	and.w	r2, r2, #1
 80165b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80165b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 80165c0:	f002 020f 	and.w	r2, r2, #15
 80165c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80165c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 80165d0:	f002 020f 	and.w	r2, r2, #15
 80165d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80165d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80165e0:	f002 021f 	and.w	r2, r2, #31
 80165e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80165e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80165f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80165f4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80165f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8016600:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8016604:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8016606:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8016610:	f002 0201 	and.w	r2, r2, #1
 8016614:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8016616:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 801661c:	68fa      	ldr	r2, [r7, #12]
 801661e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8016620:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 801662a:	f002 0201 	and.w	r2, r2, #1
 801662e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8016630:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 801663a:	f002 0203 	and.w	r2, r2, #3
 801663e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8016640:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 801664a:	f002 021f 	and.w	r2, r2, #31
 801664e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8016650:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 801665a:	f002 0203 	and.w	r2, r2, #3
 801665e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8016660:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 801666a:	f002 0203 	and.w	r2, r2, #3
 801666e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8016670:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 801667a:	f002 0207 	and.w	r2, r2, #7
 801667e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8016680:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 801668a:	f002 021f 	and.w	r2, r2, #31
 801668e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8016690:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 801669a:	f002 0201 	and.w	r2, r2, #1
 801669e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80166a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 80166a6:	68fa      	ldr	r2, [r7, #12]
 80166a8:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80166aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 80166b0:	68fa      	ldr	r2, [r7, #12]
 80166b2:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80166b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 80166ba:	68fa      	ldr	r2, [r7, #12]
 80166bc:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80166be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 80166c4:	68fa      	ldr	r2, [r7, #12]
 80166c6:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80166c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 80166ce:	68fa      	ldr	r2, [r7, #12]
 80166d0:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 80166d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 80166d8:	68fa      	ldr	r2, [r7, #12]
 80166da:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 80166dc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	8b18      	ldrh	r0, [r3, #24]
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	3318      	adds	r3, #24
 80166e6:	461a      	mov	r2, r3
 80166e8:	2102      	movs	r1, #2
 80166ea:	f7ff f85a 	bl	80157a2 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80166f2:	68fa      	ldr	r2, [r7, #12]
 80166f4:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80166f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80166fc:	68fa      	ldr	r2, [r7, #12]
 80166fe:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8016700:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 801670a:	f002 020f 	and.w	r2, r2, #15
 801670e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8016710:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8016716:	68fa      	ldr	r2, [r7, #12]
 8016718:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 801671a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8016724:	f002 020f 	and.w	r2, r2, #15
 8016728:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 801672a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8016730:	68fa      	ldr	r2, [r7, #12]
 8016732:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8016734:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8016736:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801673a:	4618      	mov	r0, r3
 801673c:	3718      	adds	r7, #24
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}

08016742 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8016742:	b580      	push	{r7, lr}
 8016744:	b086      	sub	sp, #24
 8016746:	af00      	add	r7, sp, #0
 8016748:	60f8      	str	r0, [r7, #12]
 801674a:	460b      	mov	r3, r1
 801674c:	607a      	str	r2, [r7, #4]
 801674e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016750:	2300      	movs	r3, #0
 8016752:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8016754:	897b      	ldrh	r3, [r7, #10]
 8016756:	2b15      	cmp	r3, #21
 8016758:	d802      	bhi.n	8016760 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801675a:	f06f 0309 	mvn.w	r3, #9
 801675e:	e070      	b.n	8016842 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 801676c:	68fa      	ldr	r2, [r7, #12]
 801676e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8016770:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8016776:	68fa      	ldr	r2, [r7, #12]
 8016778:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 801677a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8016784:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8016788:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801678a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8016790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016794:	b298      	uxth	r0, r3
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	3304      	adds	r3, #4
 801679a:	461a      	mov	r2, r3
 801679c:	2102      	movs	r1, #2
 801679e:	f7ff f800 	bl	80157a2 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 80167aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80167ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80167b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 80167b6:	68fa      	ldr	r2, [r7, #12]
 80167b8:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 80167ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 80167c0:	68fa      	ldr	r2, [r7, #12]
 80167c2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80167c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 80167ce:	f002 0201 	and.w	r2, r2, #1
 80167d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80167d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 80167de:	f002 0207 	and.w	r2, r2, #7
 80167e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80167e4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	8998      	ldrh	r0, [r3, #12]
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	330c      	adds	r3, #12
 80167ee:	461a      	mov	r2, r3
 80167f0:	2102      	movs	r1, #2
 80167f2:	f7fe ffd6 	bl	80157a2 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	89d8      	ldrh	r0, [r3, #14]
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	330e      	adds	r3, #14
 80167fe:	461a      	mov	r2, r3
 8016800:	2102      	movs	r1, #2
 8016802:	f7fe ffce 	bl	80157a2 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	8a18      	ldrh	r0, [r3, #16]
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	3310      	adds	r3, #16
 801680e:	461a      	mov	r2, r3
 8016810:	2102      	movs	r1, #2
 8016812:	f7fe ffc6 	bl	80157a2 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 801681a:	68fa      	ldr	r2, [r7, #12]
 801681c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 801681e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8016824:	68fa      	ldr	r2, [r7, #12]
 8016826:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8016828:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 801682e:	68fa      	ldr	r2, [r7, #12]
 8016830:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8016832:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8016838:	68fa      	ldr	r2, [r7, #12]
 801683a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 801683c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801683e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016842:	4618      	mov	r0, r3
 8016844:	3718      	adds	r7, #24
 8016846:	46bd      	mov	sp, r7
 8016848:	bd80      	pop	{r7, pc}

0801684a <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801684a:	b580      	push	{r7, lr}
 801684c:	b086      	sub	sp, #24
 801684e:	af00      	add	r7, sp, #0
 8016850:	60f8      	str	r0, [r7, #12]
 8016852:	460b      	mov	r3, r1
 8016854:	607a      	str	r2, [r7, #4]
 8016856:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016858:	2300      	movs	r3, #0
 801685a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 801685c:	897b      	ldrh	r3, [r7, #10]
 801685e:	2b16      	cmp	r3, #22
 8016860:	d802      	bhi.n	8016868 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016862:	f06f 0309 	mvn.w	r3, #9
 8016866:	e06e      	b.n	8016946 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	781b      	ldrb	r3, [r3, #0]
 801686c:	f003 030f 	and.w	r3, r3, #15
 8016870:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 801687a:	68fa      	ldr	r2, [r7, #12]
 801687c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801687e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8016888:	f002 020f 	and.w	r2, r2, #15
 801688c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801688e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8016894:	68fa      	ldr	r2, [r7, #12]
 8016896:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8016898:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80168a2:	f002 020f 	and.w	r2, r2, #15
 80168a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80168a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 80168ae:	68fa      	ldr	r2, [r7, #12]
 80168b0:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 80168b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 80168bc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80168c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80168c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80168cc:	f002 020f 	and.w	r2, r2, #15
 80168d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80168d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 80168d8:	68fa      	ldr	r2, [r7, #12]
 80168da:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80168dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 80168e6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80168ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80168ec:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	8958      	ldrh	r0, [r3, #10]
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	330a      	adds	r3, #10
 80168f6:	461a      	mov	r2, r3
 80168f8:	2102      	movs	r1, #2
 80168fa:	f7fe ff52 	bl	80157a2 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	8998      	ldrh	r0, [r3, #12]
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	330c      	adds	r3, #12
 8016906:	461a      	mov	r2, r3
 8016908:	2102      	movs	r1, #2
 801690a:	f7fe ff4a 	bl	80157a2 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8016912:	68fa      	ldr	r2, [r7, #12]
 8016914:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8016916:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 801691c:	68fa      	ldr	r2, [r7, #12]
 801691e:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8016920:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	6918      	ldr	r0, [r3, #16]
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	3312      	adds	r3, #18
 801692a:	461a      	mov	r2, r3
 801692c:	2104      	movs	r1, #4
 801692e:	f7fe ffd8 	bl	80158e2 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 801693a:	f002 0201 	and.w	r2, r2, #1
 801693e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8016940:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8016942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016946:	4618      	mov	r0, r3
 8016948:	3718      	adds	r7, #24
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}

0801694e <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801694e:	b580      	push	{r7, lr}
 8016950:	b086      	sub	sp, #24
 8016952:	af00      	add	r7, sp, #0
 8016954:	60f8      	str	r0, [r7, #12]
 8016956:	460b      	mov	r3, r1
 8016958:	607a      	str	r2, [r7, #4]
 801695a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801695c:	2300      	movs	r3, #0
 801695e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8016960:	897b      	ldrh	r3, [r7, #10]
 8016962:	2b11      	cmp	r3, #17
 8016964:	d802      	bhi.n	801696c <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016966:	f06f 0309 	mvn.w	r3, #9
 801696a:	e071      	b.n	8016a50 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	781b      	ldrb	r3, [r3, #0]
 8016970:	f003 0303 	and.w	r3, r3, #3
 8016974:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	8858      	ldrh	r0, [r3, #2]
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	3301      	adds	r3, #1
 8016982:	461a      	mov	r2, r3
 8016984:	2102      	movs	r1, #2
 8016986:	f7fe ff0c 	bl	80157a2 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	8898      	ldrh	r0, [r3, #4]
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	3303      	adds	r3, #3
 8016992:	461a      	mov	r2, r3
 8016994:	2102      	movs	r1, #2
 8016996:	f7fe ff04 	bl	80157a2 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80169a2:	f002 0201 	and.w	r2, r2, #1
 80169a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80169a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 80169b2:	f002 0207 	and.w	r2, r2, #7
 80169b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80169b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 80169be:	68fa      	ldr	r2, [r7, #12]
 80169c0:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80169c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 80169c8:	68fa      	ldr	r2, [r7, #12]
 80169ca:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80169cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80169d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80169da:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80169dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80169e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80169ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80169ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80169f6:	f002 0203 	and.w	r2, r2, #3
 80169fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80169fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8016a06:	f002 0203 	and.w	r2, r2, #3
 8016a0a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8016a0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8016a16:	f002 020f 	and.w	r2, r2, #15
 8016a1a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8016a1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8016a22:	68fa      	ldr	r2, [r7, #12]
 8016a24:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8016a26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8016a2c:	68fa      	ldr	r2, [r7, #12]
 8016a2e:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8016a30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8016a36:	68fa      	ldr	r2, [r7, #12]
 8016a38:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8016a3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8016a44:	f002 0203 	and.w	r2, r2, #3
 8016a48:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8016a4a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8016a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	3718      	adds	r7, #24
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}

08016a58 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8016a58:	b480      	push	{r7}
 8016a5a:	b087      	sub	sp, #28
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	60f8      	str	r0, [r7, #12]
 8016a60:	460b      	mov	r3, r1
 8016a62:	607a      	str	r2, [r7, #4]
 8016a64:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016a66:	2300      	movs	r3, #0
 8016a68:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8016a6a:	897b      	ldrh	r3, [r7, #10]
 8016a6c:	2b04      	cmp	r3, #4
 8016a6e:	d802      	bhi.n	8016a76 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016a70:	f06f 0309 	mvn.w	r3, #9
 8016a74:	e025      	b.n	8016ac2 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	781b      	ldrb	r3, [r3, #0]
 8016a7a:	f003 0301 	and.w	r3, r3, #1
 8016a7e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8016a8c:	f002 0201 	and.w	r2, r2, #1
 8016a90:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8016a92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8016a9c:	f002 0201 	and.w	r2, r2, #1
 8016aa0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8016aa2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8016aac:	f002 0203 	and.w	r2, r2, #3
 8016ab0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8016ab2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8016ab8:	68fa      	ldr	r2, [r7, #12]
 8016aba:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8016abc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8016abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	371c      	adds	r7, #28
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016acc:	4770      	bx	lr

08016ace <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8016ace:	b580      	push	{r7, lr}
 8016ad0:	b084      	sub	sp, #16
 8016ad2:	af00      	add	r7, sp, #0
 8016ad4:	6078      	str	r0, [r7, #4]
 8016ad6:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016ad8:	2300      	movs	r3, #0
 8016ada:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8016adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d108      	bne.n	8016af6 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8016ae4:	f107 0308 	add.w	r3, r7, #8
 8016ae8:	461a      	mov	r2, r3
 8016aea:	2105      	movs	r1, #5
 8016aec:	6838      	ldr	r0, [r7, #0]
 8016aee:	f7ff ffb3 	bl	8016a58 <VL53L1_i2c_encode_system_control>
 8016af2:	4603      	mov	r3, r0
 8016af4:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8016af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d108      	bne.n	8016b10 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8016afe:	f107 0208 	add.w	r2, r7, #8
 8016b02:	2305      	movs	r3, #5
 8016b04:	2183      	movs	r1, #131	@ 0x83
 8016b06:	6878      	ldr	r0, [r7, #4]
 8016b08:	f7f3 fb93 	bl	800a232 <VL53L1_WriteMulti>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8016b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016b14:	4618      	mov	r0, r3
 8016b16:	3710      	adds	r7, #16
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}

08016b1c <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b086      	sub	sp, #24
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	4603      	mov	r3, r0
 8016b24:	60b9      	str	r1, [r7, #8]
 8016b26:	607a      	str	r2, [r7, #4]
 8016b28:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8016b2e:	89fb      	ldrh	r3, [r7, #14]
 8016b30:	2b2b      	cmp	r3, #43	@ 0x2b
 8016b32:	d802      	bhi.n	8016b3a <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016b34:	f06f 0309 	mvn.w	r3, #9
 8016b38:	e0e2      	b.n	8016d00 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8016b3a:	68bb      	ldr	r3, [r7, #8]
 8016b3c:	781b      	ldrb	r3, [r3, #0]
 8016b3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016b42:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8016b48:	68bb      	ldr	r3, [r7, #8]
 8016b4a:	785a      	ldrb	r2, [r3, #1]
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	3302      	adds	r3, #2
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	f003 030f 	and.w	r3, r3, #15
 8016b5a:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8016b60:	68bb      	ldr	r3, [r7, #8]
 8016b62:	78da      	ldrb	r2, [r3, #3]
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8016b68:	68bb      	ldr	r3, [r7, #8]
 8016b6a:	3304      	adds	r3, #4
 8016b6c:	4619      	mov	r1, r3
 8016b6e:	2002      	movs	r0, #2
 8016b70:	f7fe fe42 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016b74:	4603      	mov	r3, r0
 8016b76:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8016b7c:	68bb      	ldr	r3, [r7, #8]
 8016b7e:	3306      	adds	r3, #6
 8016b80:	4619      	mov	r1, r3
 8016b82:	2002      	movs	r0, #2
 8016b84:	f7fe fe38 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016b88:	4603      	mov	r3, r0
 8016b8a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	3308      	adds	r3, #8
 8016b94:	4619      	mov	r1, r3
 8016b96:	2002      	movs	r0, #2
 8016b98:	f7fe fe2e 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8016ba4:	68bb      	ldr	r3, [r7, #8]
 8016ba6:	330a      	adds	r3, #10
 8016ba8:	4619      	mov	r1, r3
 8016baa:	2002      	movs	r0, #2
 8016bac:	f7fe fe24 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8016bb8:	68bb      	ldr	r3, [r7, #8]
 8016bba:	330c      	adds	r3, #12
 8016bbc:	4619      	mov	r1, r3
 8016bbe:	2002      	movs	r0, #2
 8016bc0:	f7fe fe1a 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8016bcc:	68bb      	ldr	r3, [r7, #8]
 8016bce:	330e      	adds	r3, #14
 8016bd0:	4619      	mov	r1, r3
 8016bd2:	2002      	movs	r0, #2
 8016bd4:	f7fe fe10 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	3310      	adds	r3, #16
 8016be4:	4619      	mov	r1, r3
 8016be6:	2002      	movs	r0, #2
 8016be8:	f7fe fe06 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016bec:	4603      	mov	r3, r0
 8016bee:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8016bf4:	68bb      	ldr	r3, [r7, #8]
 8016bf6:	3312      	adds	r3, #18
 8016bf8:	4619      	mov	r1, r3
 8016bfa:	2002      	movs	r0, #2
 8016bfc:	f7fe fdfc 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016c00:	4603      	mov	r3, r0
 8016c02:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	3314      	adds	r3, #20
 8016c0c:	4619      	mov	r1, r3
 8016c0e:	2002      	movs	r0, #2
 8016c10:	f7fe fdf2 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016c14:	4603      	mov	r3, r0
 8016c16:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8016c1c:	68bb      	ldr	r3, [r7, #8]
 8016c1e:	3316      	adds	r3, #22
 8016c20:	4619      	mov	r1, r3
 8016c22:	2002      	movs	r0, #2
 8016c24:	f7fe fde8 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8016c30:	68bb      	ldr	r3, [r7, #8]
 8016c32:	3318      	adds	r3, #24
 8016c34:	4619      	mov	r1, r3
 8016c36:	2002      	movs	r0, #2
 8016c38:	f7fe fdde 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016c3c:	4603      	mov	r3, r0
 8016c3e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8016c44:	68bb      	ldr	r3, [r7, #8]
 8016c46:	331a      	adds	r3, #26
 8016c48:	4619      	mov	r1, r3
 8016c4a:	2002      	movs	r0, #2
 8016c4c:	f7fe fdd4 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016c50:	4603      	mov	r3, r0
 8016c52:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8016c58:	68bb      	ldr	r3, [r7, #8]
 8016c5a:	331c      	adds	r3, #28
 8016c5c:	4619      	mov	r1, r3
 8016c5e:	2002      	movs	r0, #2
 8016c60:	f7fe fdca 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016c64:	4603      	mov	r3, r0
 8016c66:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	331e      	adds	r3, #30
 8016c70:	4619      	mov	r1, r3
 8016c72:	2002      	movs	r0, #2
 8016c74:	f7fe fdc0 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8016c80:	68bb      	ldr	r3, [r7, #8]
 8016c82:	3320      	adds	r3, #32
 8016c84:	4619      	mov	r1, r3
 8016c86:	2002      	movs	r0, #2
 8016c88:	f7fe fdb6 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8016c94:	68bb      	ldr	r3, [r7, #8]
 8016c96:	3322      	adds	r3, #34	@ 0x22
 8016c98:	4619      	mov	r1, r3
 8016c9a:	2002      	movs	r0, #2
 8016c9c:	f7fe fdac 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8016ca8:	68bb      	ldr	r3, [r7, #8]
 8016caa:	3324      	adds	r3, #36	@ 0x24
 8016cac:	4619      	mov	r1, r3
 8016cae:	2002      	movs	r0, #2
 8016cb0:	f7fe fda2 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016cb4:	4603      	mov	r3, r0
 8016cb6:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8016cbc:	68bb      	ldr	r3, [r7, #8]
 8016cbe:	3326      	adds	r3, #38	@ 0x26
 8016cc0:	4619      	mov	r1, r3
 8016cc2:	2002      	movs	r0, #2
 8016cc4:	f7fe fd98 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8016cd0:	68bb      	ldr	r3, [r7, #8]
 8016cd2:	3328      	adds	r3, #40	@ 0x28
 8016cd4:	4619      	mov	r1, r3
 8016cd6:	2002      	movs	r0, #2
 8016cd8:	f7fe fd8e 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8016cf0:	68bb      	ldr	r3, [r7, #8]
 8016cf2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8016cfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016d00:	4618      	mov	r0, r3
 8016d02:	3718      	adds	r7, #24
 8016d04:	46bd      	mov	sp, r7
 8016d06:	bd80      	pop	{r7, pc}

08016d08 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b086      	sub	sp, #24
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	4603      	mov	r3, r0
 8016d10:	60b9      	str	r1, [r7, #8]
 8016d12:	607a      	str	r2, [r7, #4]
 8016d14:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016d16:	2300      	movs	r3, #0
 8016d18:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8016d1a:	89fb      	ldrh	r3, [r7, #14]
 8016d1c:	2b20      	cmp	r3, #32
 8016d1e:	d802      	bhi.n	8016d26 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016d20:	f06f 0309 	mvn.w	r3, #9
 8016d24:	e04d      	b.n	8016dc2 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8016d26:	68b9      	ldr	r1, [r7, #8]
 8016d28:	2004      	movs	r0, #4
 8016d2a:	f7fe fe04 	bl	8015936 <VL53L1_i2c_decode_uint32_t>
 8016d2e:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8016d34:	68bb      	ldr	r3, [r7, #8]
 8016d36:	3304      	adds	r3, #4
 8016d38:	4619      	mov	r1, r3
 8016d3a:	2004      	movs	r0, #4
 8016d3c:	f7fe fdfb 	bl	8015936 <VL53L1_i2c_decode_uint32_t>
 8016d40:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8016d46:	68bb      	ldr	r3, [r7, #8]
 8016d48:	3308      	adds	r3, #8
 8016d4a:	4619      	mov	r1, r3
 8016d4c:	2004      	movs	r0, #4
 8016d4e:	f7fe fe0f 	bl	8015970 <VL53L1_i2c_decode_int32_t>
 8016d52:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8016d58:	68bb      	ldr	r3, [r7, #8]
 8016d5a:	330c      	adds	r3, #12
 8016d5c:	4619      	mov	r1, r3
 8016d5e:	2004      	movs	r0, #4
 8016d60:	f7fe fde9 	bl	8015936 <VL53L1_i2c_decode_uint32_t>
 8016d64:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8016d6a:	68bb      	ldr	r3, [r7, #8]
 8016d6c:	3310      	adds	r3, #16
 8016d6e:	4619      	mov	r1, r3
 8016d70:	2004      	movs	r0, #4
 8016d72:	f7fe fde0 	bl	8015936 <VL53L1_i2c_decode_uint32_t>
 8016d76:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8016d7c:	68bb      	ldr	r3, [r7, #8]
 8016d7e:	3314      	adds	r3, #20
 8016d80:	4619      	mov	r1, r3
 8016d82:	2004      	movs	r0, #4
 8016d84:	f7fe fdd7 	bl	8015936 <VL53L1_i2c_decode_uint32_t>
 8016d88:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	3318      	adds	r3, #24
 8016d92:	4619      	mov	r1, r3
 8016d94:	2004      	movs	r0, #4
 8016d96:	f7fe fdeb 	bl	8015970 <VL53L1_i2c_decode_int32_t>
 8016d9a:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8016da0:	68bb      	ldr	r3, [r7, #8]
 8016da2:	331c      	adds	r3, #28
 8016da4:	4619      	mov	r1, r3
 8016da6:	2004      	movs	r0, #4
 8016da8:	f7fe fdc5 	bl	8015936 <VL53L1_i2c_decode_uint32_t>
 8016dac:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8016db2:	68bb      	ldr	r3, [r7, #8]
 8016db4:	f893 2020 	ldrb.w	r2, [r3, #32]
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8016dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	3718      	adds	r7, #24
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bd80      	pop	{r7, pc}

08016dca <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8016dca:	b580      	push	{r7, lr}
 8016dcc:	b086      	sub	sp, #24
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	60b9      	str	r1, [r7, #8]
 8016dd4:	607a      	str	r2, [r7, #4]
 8016dd6:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8016ddc:	89fb      	ldrh	r3, [r7, #14]
 8016dde:	2b37      	cmp	r3, #55	@ 0x37
 8016de0:	d802      	bhi.n	8016de8 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8016de2:	f06f 0309 	mvn.w	r3, #9
 8016de6:	e15e      	b.n	80170a6 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8016de8:	68b9      	ldr	r1, [r7, #8]
 8016dea:	2002      	movs	r0, #2
 8016dec:	f7fe fd04 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016df0:	4603      	mov	r3, r0
 8016df2:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8016df8:	68bb      	ldr	r3, [r7, #8]
 8016dfa:	3302      	adds	r3, #2
 8016dfc:	781b      	ldrb	r3, [r3, #0]
 8016dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016e02:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8016e08:	68bb      	ldr	r3, [r7, #8]
 8016e0a:	3303      	adds	r3, #3
 8016e0c:	781b      	ldrb	r3, [r3, #0]
 8016e0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016e12:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8016e18:	68bb      	ldr	r3, [r7, #8]
 8016e1a:	3304      	adds	r3, #4
 8016e1c:	781b      	ldrb	r3, [r3, #0]
 8016e1e:	f003 0303 	and.w	r3, r3, #3
 8016e22:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8016e28:	68bb      	ldr	r3, [r7, #8]
 8016e2a:	3305      	adds	r3, #5
 8016e2c:	781b      	ldrb	r3, [r3, #0]
 8016e2e:	f003 0301 	and.w	r3, r3, #1
 8016e32:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8016e38:	68bb      	ldr	r3, [r7, #8]
 8016e3a:	3306      	adds	r3, #6
 8016e3c:	781b      	ldrb	r3, [r3, #0]
 8016e3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016e42:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8016e48:	68bb      	ldr	r3, [r7, #8]
 8016e4a:	3307      	adds	r3, #7
 8016e4c:	781b      	ldrb	r3, [r3, #0]
 8016e4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016e52:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	3308      	adds	r3, #8
 8016e5c:	4619      	mov	r1, r3
 8016e5e:	2002      	movs	r0, #2
 8016e60:	f7fe fcca 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016e64:	4603      	mov	r3, r0
 8016e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016e6a:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	330a      	adds	r3, #10
 8016e74:	781b      	ldrb	r3, [r3, #0]
 8016e76:	f003 0303 	and.w	r3, r3, #3
 8016e7a:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8016e80:	68bb      	ldr	r3, [r7, #8]
 8016e82:	330b      	adds	r3, #11
 8016e84:	781b      	ldrb	r3, [r3, #0]
 8016e86:	f003 0303 	and.w	r3, r3, #3
 8016e8a:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8016e90:	68bb      	ldr	r3, [r7, #8]
 8016e92:	330c      	adds	r3, #12
 8016e94:	781b      	ldrb	r3, [r3, #0]
 8016e96:	f003 030f 	and.w	r3, r3, #15
 8016e9a:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8016ea0:	68bb      	ldr	r3, [r7, #8]
 8016ea2:	330d      	adds	r3, #13
 8016ea4:	781b      	ldrb	r3, [r3, #0]
 8016ea6:	f003 0307 	and.w	r3, r3, #7
 8016eaa:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	330e      	adds	r3, #14
 8016eb4:	781b      	ldrb	r3, [r3, #0]
 8016eb6:	f003 0301 	and.w	r3, r3, #1
 8016eba:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8016ec0:	68bb      	ldr	r3, [r7, #8]
 8016ec2:	330f      	adds	r3, #15
 8016ec4:	781b      	ldrb	r3, [r3, #0]
 8016ec6:	f003 0303 	and.w	r3, r3, #3
 8016eca:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	7c1a      	ldrb	r2, [r3, #16]
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8016ed8:	68bb      	ldr	r3, [r7, #8]
 8016eda:	7c5a      	ldrb	r2, [r3, #17]
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8016ee0:	68bb      	ldr	r3, [r7, #8]
 8016ee2:	3312      	adds	r3, #18
 8016ee4:	4619      	mov	r1, r3
 8016ee6:	2002      	movs	r0, #2
 8016ee8:	f7fe fc86 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016eec:	4603      	mov	r3, r0
 8016eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016ef2:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8016ef8:	68bb      	ldr	r3, [r7, #8]
 8016efa:	3316      	adds	r3, #22
 8016efc:	4619      	mov	r1, r3
 8016efe:	2002      	movs	r0, #2
 8016f00:	f7fe fc7a 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016f04:	4603      	mov	r3, r0
 8016f06:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	3318      	adds	r3, #24
 8016f10:	4619      	mov	r1, r3
 8016f12:	2002      	movs	r0, #2
 8016f14:	f7fe fc70 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8016f20:	68bb      	ldr	r3, [r7, #8]
 8016f22:	331a      	adds	r3, #26
 8016f24:	781b      	ldrb	r3, [r3, #0]
 8016f26:	f003 0301 	and.w	r3, r3, #1
 8016f2a:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8016f30:	68bb      	ldr	r3, [r7, #8]
 8016f32:	331b      	adds	r3, #27
 8016f34:	781b      	ldrb	r3, [r3, #0]
 8016f36:	f003 0307 	and.w	r3, r3, #7
 8016f3a:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	7f1a      	ldrb	r2, [r3, #28]
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8016f48:	68bb      	ldr	r3, [r7, #8]
 8016f4a:	7f5a      	ldrb	r2, [r3, #29]
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8016f50:	68bb      	ldr	r3, [r7, #8]
 8016f52:	331e      	adds	r3, #30
 8016f54:	781b      	ldrb	r3, [r3, #0]
 8016f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016f5a:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8016f60:	68bb      	ldr	r3, [r7, #8]
 8016f62:	331f      	adds	r3, #31
 8016f64:	781b      	ldrb	r3, [r3, #0]
 8016f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016f6a:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8016f70:	68bb      	ldr	r3, [r7, #8]
 8016f72:	3320      	adds	r3, #32
 8016f74:	781b      	ldrb	r3, [r3, #0]
 8016f76:	f003 0303 	and.w	r3, r3, #3
 8016f7a:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8016f80:	68bb      	ldr	r3, [r7, #8]
 8016f82:	3321      	adds	r3, #33	@ 0x21
 8016f84:	781b      	ldrb	r3, [r3, #0]
 8016f86:	f003 030f 	and.w	r3, r3, #15
 8016f8a:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8016f90:	68bb      	ldr	r3, [r7, #8]
 8016f92:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8016f9c:	68bb      	ldr	r3, [r7, #8]
 8016f9e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8016fa8:	68bb      	ldr	r3, [r7, #8]
 8016faa:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8016fb4:	68bb      	ldr	r3, [r7, #8]
 8016fb6:	3325      	adds	r3, #37	@ 0x25
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	f003 0301 	and.w	r3, r3, #1
 8016fbe:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8016fc6:	68bb      	ldr	r3, [r7, #8]
 8016fc8:	3326      	adds	r3, #38	@ 0x26
 8016fca:	781b      	ldrb	r3, [r3, #0]
 8016fcc:	f003 0303 	and.w	r3, r3, #3
 8016fd0:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8016fd8:	68bb      	ldr	r3, [r7, #8]
 8016fda:	3327      	adds	r3, #39	@ 0x27
 8016fdc:	781b      	ldrb	r3, [r3, #0]
 8016fde:	f003 031f 	and.w	r3, r3, #31
 8016fe2:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8016fea:	68bb      	ldr	r3, [r7, #8]
 8016fec:	3328      	adds	r3, #40	@ 0x28
 8016fee:	781b      	ldrb	r3, [r3, #0]
 8016ff0:	f003 031f 	and.w	r3, r3, #31
 8016ff4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8016ffc:	68bb      	ldr	r3, [r7, #8]
 8016ffe:	3329      	adds	r3, #41	@ 0x29
 8017000:	781b      	ldrb	r3, [r3, #0]
 8017002:	f003 031f 	and.w	r3, r3, #31
 8017006:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 801700e:	68bb      	ldr	r3, [r7, #8]
 8017010:	332a      	adds	r3, #42	@ 0x2a
 8017012:	781b      	ldrb	r3, [r3, #0]
 8017014:	f003 0301 	and.w	r3, r3, #1
 8017018:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8017020:	68bb      	ldr	r3, [r7, #8]
 8017022:	332b      	adds	r3, #43	@ 0x2b
 8017024:	781b      	ldrb	r3, [r3, #0]
 8017026:	f003 0301 	and.w	r3, r3, #1
 801702a:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8017032:	68bb      	ldr	r3, [r7, #8]
 8017034:	332c      	adds	r3, #44	@ 0x2c
 8017036:	781b      	ldrb	r3, [r3, #0]
 8017038:	f003 0303 	and.w	r3, r3, #3
 801703c:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8017044:	68bb      	ldr	r3, [r7, #8]
 8017046:	332d      	adds	r3, #45	@ 0x2d
 8017048:	781b      	ldrb	r3, [r3, #0]
 801704a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801704e:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8017056:	68bb      	ldr	r3, [r7, #8]
 8017058:	332e      	adds	r3, #46	@ 0x2e
 801705a:	4619      	mov	r1, r3
 801705c:	2004      	movs	r0, #4
 801705e:	f7fe fc6a 	bl	8015936 <VL53L1_i2c_decode_uint32_t>
 8017062:	4603      	mov	r3, r0
 8017064:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	3332      	adds	r3, #50	@ 0x32
 8017070:	4619      	mov	r1, r3
 8017072:	2004      	movs	r0, #4
 8017074:	f7fe fc5f 	bl	8015936 <VL53L1_i2c_decode_uint32_t>
 8017078:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	3336      	adds	r3, #54	@ 0x36
 8017082:	781b      	ldrb	r3, [r3, #0]
 8017084:	f003 0301 	and.w	r3, r3, #1
 8017088:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8017090:	68bb      	ldr	r3, [r7, #8]
 8017092:	3337      	adds	r3, #55	@ 0x37
 8017094:	781b      	ldrb	r3, [r3, #0]
 8017096:	f003 0301 	and.w	r3, r3, #1
 801709a:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 80170a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80170a6:	4618      	mov	r0, r3
 80170a8:	3718      	adds	r7, #24
 80170aa:	46bd      	mov	sp, r7
 80170ac:	bd80      	pop	{r7, pc}

080170ae <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80170ae:	b580      	push	{r7, lr}
 80170b0:	b086      	sub	sp, #24
 80170b2:	af00      	add	r7, sp, #0
 80170b4:	4603      	mov	r3, r0
 80170b6:	60b9      	str	r1, [r7, #8]
 80170b8:	607a      	str	r2, [r7, #4]
 80170ba:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80170bc:	2300      	movs	r3, #0
 80170be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 80170c0:	89fb      	ldrh	r3, [r7, #14]
 80170c2:	2b30      	cmp	r3, #48	@ 0x30
 80170c4:	d802      	bhi.n	80170cc <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80170c6:	f06f 0309 	mvn.w	r3, #9
 80170ca:	e112      	b.n	80172f2 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80170cc:	68bb      	ldr	r3, [r7, #8]
 80170ce:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80170d4:	68bb      	ldr	r3, [r7, #8]
 80170d6:	785a      	ldrb	r2, [r3, #1]
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	789a      	ldrb	r2, [r3, #2]
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 80170e4:	68bb      	ldr	r3, [r7, #8]
 80170e6:	3303      	adds	r3, #3
 80170e8:	4619      	mov	r1, r3
 80170ea:	2002      	movs	r0, #2
 80170ec:	f7fe fb84 	bl	80157f8 <VL53L1_i2c_decode_uint16_t>
 80170f0:	4603      	mov	r3, r0
 80170f2:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	3305      	adds	r3, #5
 80170fc:	781b      	ldrb	r3, [r3, #0]
 80170fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017102:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8017108:	68bb      	ldr	r3, [r7, #8]
 801710a:	3306      	adds	r3, #6
 801710c:	781b      	ldrb	r3, [r3, #0]
 801710e:	f003 0307 	and.w	r3, r3, #7
 8017112:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	3307      	adds	r3, #7
 801711c:	781b      	ldrb	r3, [r3, #0]
 801711e:	f003 0307 	and.w	r3, r3, #7
 8017122:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	3308      	adds	r3, #8
 801712c:	781b      	ldrb	r3, [r3, #0]
 801712e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017132:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8017138:	68bb      	ldr	r3, [r7, #8]
 801713a:	3309      	adds	r3, #9
 801713c:	781b      	ldrb	r3, [r3, #0]
 801713e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017142:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8017148:	68bb      	ldr	r3, [r7, #8]
 801714a:	330a      	adds	r3, #10
 801714c:	781b      	ldrb	r3, [r3, #0]
 801714e:	f003 0301 	and.w	r3, r3, #1
 8017152:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8017158:	68bb      	ldr	r3, [r7, #8]
 801715a:	330b      	adds	r3, #11
 801715c:	781b      	ldrb	r3, [r3, #0]
 801715e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017162:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8017168:	68bb      	ldr	r3, [r7, #8]
 801716a:	330c      	adds	r3, #12
 801716c:	781b      	ldrb	r3, [r3, #0]
 801716e:	f003 0301 	and.w	r3, r3, #1
 8017172:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	330d      	adds	r3, #13
 801717c:	781b      	ldrb	r3, [r3, #0]
 801717e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017182:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8017188:	68bb      	ldr	r3, [r7, #8]
 801718a:	330e      	adds	r3, #14
 801718c:	781b      	ldrb	r3, [r3, #0]
 801718e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017192:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8017198:	68bb      	ldr	r3, [r7, #8]
 801719a:	7bda      	ldrb	r2, [r3, #15]
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80171a0:	68bb      	ldr	r3, [r7, #8]
 80171a2:	7c1a      	ldrb	r2, [r3, #16]
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80171a8:	68bb      	ldr	r3, [r7, #8]
 80171aa:	7c5a      	ldrb	r2, [r3, #17]
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	7c9a      	ldrb	r2, [r3, #18]
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80171b8:	68bb      	ldr	r3, [r7, #8]
 80171ba:	7cda      	ldrb	r2, [r3, #19]
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80171c0:	68bb      	ldr	r3, [r7, #8]
 80171c2:	7d1a      	ldrb	r2, [r3, #20]
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80171c8:	68bb      	ldr	r3, [r7, #8]
 80171ca:	7d5a      	ldrb	r2, [r3, #21]
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80171d0:	68bb      	ldr	r3, [r7, #8]
 80171d2:	7d9a      	ldrb	r2, [r3, #22]
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80171d8:	68bb      	ldr	r3, [r7, #8]
 80171da:	7dda      	ldrb	r2, [r3, #23]
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80171e0:	68bb      	ldr	r3, [r7, #8]
 80171e2:	7e1a      	ldrb	r2, [r3, #24]
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80171e8:	68bb      	ldr	r3, [r7, #8]
 80171ea:	7e5a      	ldrb	r2, [r3, #25]
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80171f0:	68bb      	ldr	r3, [r7, #8]
 80171f2:	7e9a      	ldrb	r2, [r3, #26]
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80171f8:	68bb      	ldr	r3, [r7, #8]
 80171fa:	7eda      	ldrb	r2, [r3, #27]
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	7f1a      	ldrb	r2, [r3, #28]
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8017208:	68bb      	ldr	r3, [r7, #8]
 801720a:	7f5a      	ldrb	r2, [r3, #29]
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8017210:	68bb      	ldr	r3, [r7, #8]
 8017212:	7f9a      	ldrb	r2, [r3, #30]
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8017218:	68bb      	ldr	r3, [r7, #8]
 801721a:	7fda      	ldrb	r2, [r3, #31]
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8017222:	68bb      	ldr	r3, [r7, #8]
 8017224:	f893 2020 	ldrb.w	r2, [r3, #32]
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 801722e:	68bb      	ldr	r3, [r7, #8]
 8017230:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 801723a:	68bb      	ldr	r3, [r7, #8]
 801723c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8017246:	68bb      	ldr	r3, [r7, #8]
 8017248:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8017252:	68bb      	ldr	r3, [r7, #8]
 8017254:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 801726a:	68bb      	ldr	r3, [r7, #8]
 801726c:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8017276:	68bb      	ldr	r3, [r7, #8]
 8017278:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 801728e:	68bb      	ldr	r3, [r7, #8]
 8017290:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 801729a:	68bb      	ldr	r3, [r7, #8]
 801729c:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 80172a6:	68bb      	ldr	r3, [r7, #8]
 80172a8:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80172b2:	68bb      	ldr	r3, [r7, #8]
 80172b4:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80172be:	68bb      	ldr	r3, [r7, #8]
 80172c0:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 80172ca:	68bb      	ldr	r3, [r7, #8]
 80172cc:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80172d6:	68bb      	ldr	r3, [r7, #8]
 80172d8:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80172e2:	68bb      	ldr	r3, [r7, #8]
 80172e4:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80172ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80172f2:	4618      	mov	r0, r3
 80172f4:	3718      	adds	r7, #24
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bd80      	pop	{r7, pc}

080172fa <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80172fa:	b580      	push	{r7, lr}
 80172fc:	b090      	sub	sp, #64	@ 0x40
 80172fe:	af00      	add	r7, sp, #0
 8017300:	6078      	str	r0, [r7, #4]
 8017302:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017304:	2300      	movs	r3, #0
 8017306:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 801730a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801730e:	2b00      	cmp	r3, #0
 8017310:	d10a      	bne.n	8017328 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8017312:	f107 020c 	add.w	r2, r7, #12
 8017316:	2331      	movs	r3, #49	@ 0x31
 8017318:	f240 110f 	movw	r1, #271	@ 0x10f
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f7f2 ffae 	bl	800a27e <VL53L1_ReadMulti>
 8017322:	4603      	mov	r3, r0
 8017324:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8017328:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801732c:	2b00      	cmp	r3, #0
 801732e:	d109      	bne.n	8017344 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8017330:	f107 030c 	add.w	r3, r7, #12
 8017334:	683a      	ldr	r2, [r7, #0]
 8017336:	4619      	mov	r1, r3
 8017338:	2031      	movs	r0, #49	@ 0x31
 801733a:	f7ff feb8 	bl	80170ae <VL53L1_i2c_decode_nvm_copy_data>
 801733e:	4603      	mov	r3, r0
 8017340:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8017344:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8017348:	4618      	mov	r0, r3
 801734a:	3740      	adds	r7, #64	@ 0x40
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}

08017350 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b086      	sub	sp, #24
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
 8017358:	6039      	str	r1, [r7, #0]
	 * Determines if new range data is ready by reading bit 0 of
	 * VL53L1_GPIO__TIO_HV_STATUS to determine the current state
	 * of output interrupt pin
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801735a:	2300      	movs	r3, #0
 801735c:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8017362:	2300      	movs	r3, #0
 8017364:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8017366:	2300      	movs	r3, #0
 8017368:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 801736a:	2300      	movs	r3, #0
 801736c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801736e:	693b      	ldr	r3, [r7, #16]
 8017370:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
	gpio__mux_active_high_hv =
 8017374:	f003 0310 	and.w	r3, r3, #16
 8017378:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801737a:	7bfb      	ldrb	r3, [r7, #15]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d102      	bne.n	8017386 <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 8017380:	2301      	movs	r3, #1
 8017382:	75fb      	strb	r3, [r7, #23]
 8017384:	e001      	b.n	801738a <VL53L1_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 8017386:	2300      	movs	r3, #0
 8017388:	75fb      	strb	r3, [r7, #23]

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 801738a:	f107 030e 	add.w	r3, r7, #14
 801738e:	461a      	mov	r2, r3
 8017390:	2131      	movs	r1, #49	@ 0x31
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	f7f2 ffbe 	bl	800a314 <VL53L1_RdByte>
 8017398:	4603      	mov	r3, r0
 801739a:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 801739c:	7bbb      	ldrb	r3, [r7, #14]
 801739e:	f003 0201 	and.w	r2, r3, #1
 80173a2:	7dfb      	ldrb	r3, [r7, #23]
 80173a4:	429a      	cmp	r2, r3
 80173a6:	d103      	bne.n	80173b0 <VL53L1_is_new_data_ready+0x60>
		*pready = 0x01;
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	2201      	movs	r2, #1
 80173ac:	701a      	strb	r2, [r3, #0]
 80173ae:	e002      	b.n	80173b6 <VL53L1_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 80173b0:	683b      	ldr	r3, [r7, #0]
 80173b2:	2200      	movs	r2, #0
 80173b4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80173b6:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80173ba:	4618      	mov	r0, r3
 80173bc:	3718      	adds	r7, #24
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}
	...

080173c4 <arm_mat_trans_f32>:
 80173c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173c8:	8802      	ldrh	r2, [r0, #0]
 80173ca:	884b      	ldrh	r3, [r1, #2]
 80173cc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80173d0:	684f      	ldr	r7, [r1, #4]
 80173d2:	8840      	ldrh	r0, [r0, #2]
 80173d4:	4293      	cmp	r3, r2
 80173d6:	b083      	sub	sp, #12
 80173d8:	d14c      	bne.n	8017474 <arm_mat_trans_f32+0xb0>
 80173da:	f8b1 e000 	ldrh.w	lr, [r1]
 80173de:	4586      	cmp	lr, r0
 80173e0:	d148      	bne.n	8017474 <arm_mat_trans_f32+0xb0>
 80173e2:	ea4f 089e 	mov.w	r8, lr, lsr #2
 80173e6:	009c      	lsls	r4, r3, #2
 80173e8:	f00e 0e03 	and.w	lr, lr, #3
 80173ec:	fb08 f904 	mul.w	r9, r8, r4
 80173f0:	ea4f 028e 	mov.w	r2, lr, lsl #2
 80173f4:	011d      	lsls	r5, r3, #4
 80173f6:	00db      	lsls	r3, r3, #3
 80173f8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80173fc:	eb07 0a04 	add.w	sl, r7, r4
 8017400:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8017404:	9201      	str	r2, [sp, #4]
 8017406:	9300      	str	r3, [sp, #0]
 8017408:	463b      	mov	r3, r7
 801740a:	f1b8 0f00 	cmp.w	r8, #0
 801740e:	d01d      	beq.n	801744c <arm_mat_trans_f32+0x88>
 8017410:	9900      	ldr	r1, [sp, #0]
 8017412:	f10c 0210 	add.w	r2, ip, #16
 8017416:	4439      	add	r1, r7
 8017418:	4640      	mov	r0, r8
 801741a:	f852 6c10 	ldr.w	r6, [r2, #-16]
 801741e:	601e      	str	r6, [r3, #0]
 8017420:	ed52 7a03 	vldr	s15, [r2, #-12]
 8017424:	191e      	adds	r6, r3, r4
 8017426:	edc6 7a00 	vstr	s15, [r6]
 801742a:	f852 6c08 	ldr.w	r6, [r2, #-8]
 801742e:	600e      	str	r6, [r1, #0]
 8017430:	ed52 7a01 	vldr	s15, [r2, #-4]
 8017434:	190e      	adds	r6, r1, r4
 8017436:	3801      	subs	r0, #1
 8017438:	442b      	add	r3, r5
 801743a:	f102 0210 	add.w	r2, r2, #16
 801743e:	edc6 7a00 	vstr	s15, [r6]
 8017442:	4429      	add	r1, r5
 8017444:	d1e9      	bne.n	801741a <arm_mat_trans_f32+0x56>
 8017446:	44dc      	add	ip, fp
 8017448:	eb09 0307 	add.w	r3, r9, r7
 801744c:	f1be 0f00 	cmp.w	lr, #0
 8017450:	d009      	beq.n	8017466 <arm_mat_trans_f32+0xa2>
 8017452:	4672      	mov	r2, lr
 8017454:	4661      	mov	r1, ip
 8017456:	f851 0b04 	ldr.w	r0, [r1], #4
 801745a:	6018      	str	r0, [r3, #0]
 801745c:	3a01      	subs	r2, #1
 801745e:	4423      	add	r3, r4
 8017460:	d1f9      	bne.n	8017456 <arm_mat_trans_f32+0x92>
 8017462:	9b01      	ldr	r3, [sp, #4]
 8017464:	449c      	add	ip, r3
 8017466:	3704      	adds	r7, #4
 8017468:	4557      	cmp	r7, sl
 801746a:	d1cd      	bne.n	8017408 <arm_mat_trans_f32+0x44>
 801746c:	2000      	movs	r0, #0
 801746e:	b003      	add	sp, #12
 8017470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017474:	f06f 0002 	mvn.w	r0, #2
 8017478:	e7f9      	b.n	801746e <arm_mat_trans_f32+0xaa>
 801747a:	bf00      	nop

0801747c <arm_mat_scale_f32>:
 801747c:	b470      	push	{r4, r5, r6}
 801747e:	e9d1 3500 	ldrd	r3, r5, [r1]
 8017482:	6802      	ldr	r2, [r0, #0]
 8017484:	6846      	ldr	r6, [r0, #4]
 8017486:	429a      	cmp	r2, r3
 8017488:	d147      	bne.n	801751a <arm_mat_scale_f32+0x9e>
 801748a:	8803      	ldrh	r3, [r0, #0]
 801748c:	8840      	ldrh	r0, [r0, #2]
 801748e:	fb00 f003 	mul.w	r0, r0, r3
 8017492:	0884      	lsrs	r4, r0, #2
 8017494:	d025      	beq.n	80174e2 <arm_mat_scale_f32+0x66>
 8017496:	f106 0210 	add.w	r2, r6, #16
 801749a:	f105 0310 	add.w	r3, r5, #16
 801749e:	4621      	mov	r1, r4
 80174a0:	ed52 7a04 	vldr	s15, [r2, #-16]
 80174a4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80174a8:	3901      	subs	r1, #1
 80174aa:	ed43 7a04 	vstr	s15, [r3, #-16]
 80174ae:	ed52 7a03 	vldr	s15, [r2, #-12]
 80174b2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80174b6:	f102 0210 	add.w	r2, r2, #16
 80174ba:	ed43 7a03 	vstr	s15, [r3, #-12]
 80174be:	ed52 7a06 	vldr	s15, [r2, #-24]	@ 0xffffffe8
 80174c2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80174c6:	f103 0310 	add.w	r3, r3, #16
 80174ca:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 80174ce:	ed52 7a05 	vldr	s15, [r2, #-20]	@ 0xffffffec
 80174d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80174d6:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 80174da:	d1e1      	bne.n	80174a0 <arm_mat_scale_f32+0x24>
 80174dc:	0124      	lsls	r4, r4, #4
 80174de:	4426      	add	r6, r4
 80174e0:	4425      	add	r5, r4
 80174e2:	f010 0003 	ands.w	r0, r0, #3
 80174e6:	d015      	beq.n	8017514 <arm_mat_scale_f32+0x98>
 80174e8:	edd6 7a00 	vldr	s15, [r6]
 80174ec:	ee67 7a80 	vmul.f32	s15, s15, s0
 80174f0:	3801      	subs	r0, #1
 80174f2:	edc5 7a00 	vstr	s15, [r5]
 80174f6:	d00d      	beq.n	8017514 <arm_mat_scale_f32+0x98>
 80174f8:	edd6 7a01 	vldr	s15, [r6, #4]
 80174fc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017500:	2801      	cmp	r0, #1
 8017502:	edc5 7a01 	vstr	s15, [r5, #4]
 8017506:	d005      	beq.n	8017514 <arm_mat_scale_f32+0x98>
 8017508:	edd6 7a02 	vldr	s15, [r6, #8]
 801750c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017510:	ed85 0a02 	vstr	s0, [r5, #8]
 8017514:	2000      	movs	r0, #0
 8017516:	bc70      	pop	{r4, r5, r6}
 8017518:	4770      	bx	lr
 801751a:	f06f 0002 	mvn.w	r0, #2
 801751e:	e7fa      	b.n	8017516 <arm_mat_scale_f32+0x9a>

08017520 <arm_mat_mult_f32>:
 8017520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017524:	8845      	ldrh	r5, [r0, #2]
 8017526:	880b      	ldrh	r3, [r1, #0]
 8017528:	8806      	ldrh	r6, [r0, #0]
 801752a:	6847      	ldr	r7, [r0, #4]
 801752c:	6854      	ldr	r4, [r2, #4]
 801752e:	6848      	ldr	r0, [r1, #4]
 8017530:	b08b      	sub	sp, #44	@ 0x2c
 8017532:	42ab      	cmp	r3, r5
 8017534:	9109      	str	r1, [sp, #36]	@ 0x24
 8017536:	9604      	str	r6, [sp, #16]
 8017538:	8849      	ldrh	r1, [r1, #2]
 801753a:	f040 808a 	bne.w	8017652 <arm_mat_mult_f32+0x132>
 801753e:	8815      	ldrh	r5, [r2, #0]
 8017540:	42b5      	cmp	r5, r6
 8017542:	f040 8086 	bne.w	8017652 <arm_mat_mult_f32+0x132>
 8017546:	8852      	ldrh	r2, [r2, #2]
 8017548:	428a      	cmp	r2, r1
 801754a:	f040 8082 	bne.w	8017652 <arm_mat_mult_f32+0x132>
 801754e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8017552:	1d01      	adds	r1, r0, #4
 8017554:	0116      	lsls	r6, r2, #4
 8017556:	9108      	str	r1, [sp, #32]
 8017558:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 801755c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8017560:	9101      	str	r1, [sp, #4]
 8017562:	fb06 f108 	mul.w	r1, r6, r8
 8017566:	0095      	lsls	r5, r2, #2
 8017568:	9103      	str	r1, [sp, #12]
 801756a:	00d2      	lsls	r2, r2, #3
 801756c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8017570:	f003 0903 	and.w	r9, r3, #3
 8017574:	009b      	lsls	r3, r3, #2
 8017576:	f107 0b10 	add.w	fp, r7, #16
 801757a:	eb04 0a05 	add.w	sl, r4, r5
 801757e:	9107      	str	r1, [sp, #28]
 8017580:	9202      	str	r2, [sp, #8]
 8017582:	9306      	str	r3, [sp, #24]
 8017584:	f1ab 0310 	sub.w	r3, fp, #16
 8017588:	9305      	str	r3, [sp, #20]
 801758a:	9b07      	ldr	r3, [sp, #28]
 801758c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8017590:	eb03 0c0a 	add.w	ip, r3, sl
 8017594:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801765c <arm_mat_mult_f32+0x13c>
 8017598:	f1b8 0f00 	cmp.w	r8, #0
 801759c:	d053      	beq.n	8017646 <arm_mat_mult_f32+0x126>
 801759e:	9b02      	ldr	r3, [sp, #8]
 80175a0:	4644      	mov	r4, r8
 80175a2:	18c1      	adds	r1, r0, r3
 80175a4:	4602      	mov	r2, r0
 80175a6:	465b      	mov	r3, fp
 80175a8:	ed92 6a00 	vldr	s12, [r2]
 80175ac:	ed13 7a04 	vldr	s14, [r3, #-16]
 80175b0:	ed53 4a03 	vldr	s9, [r3, #-12]
 80175b4:	ed53 6a02 	vldr	s13, [r3, #-8]
 80175b8:	ed91 5a00 	vldr	s10, [r1]
 80175bc:	ed53 5a01 	vldr	s11, [r3, #-4]
 80175c0:	1957      	adds	r7, r2, r5
 80175c2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80175c6:	ed97 6a00 	vldr	s12, [r7]
 80175ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175ce:	ee26 6a24 	vmul.f32	s12, s12, s9
 80175d2:	194f      	adds	r7, r1, r5
 80175d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80175d8:	ee26 7a85 	vmul.f32	s14, s13, s10
 80175dc:	edd7 7a00 	vldr	s15, [r7]
 80175e0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80175e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80175e8:	3c01      	subs	r4, #1
 80175ea:	4432      	add	r2, r6
 80175ec:	4431      	add	r1, r6
 80175ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80175f2:	f103 0310 	add.w	r3, r3, #16
 80175f6:	d1d7      	bne.n	80175a8 <arm_mat_mult_f32+0x88>
 80175f8:	9b03      	ldr	r3, [sp, #12]
 80175fa:	9a01      	ldr	r2, [sp, #4]
 80175fc:	4418      	add	r0, r3
 80175fe:	f1b9 0f00 	cmp.w	r9, #0
 8017602:	d00b      	beq.n	801761c <arm_mat_mult_f32+0xfc>
 8017604:	464b      	mov	r3, r9
 8017606:	edd0 6a00 	vldr	s13, [r0]
 801760a:	ecb2 7a01 	vldmia	r2!, {s14}
 801760e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017612:	3b01      	subs	r3, #1
 8017614:	4428      	add	r0, r5
 8017616:	ee77 7a87 	vadd.f32	s15, s15, s14
 801761a:	d1f4      	bne.n	8017606 <arm_mat_mult_f32+0xe6>
 801761c:	ecec 7a01 	vstmia	ip!, {s15}
 8017620:	45d4      	cmp	ip, sl
 8017622:	4670      	mov	r0, lr
 8017624:	f10e 0e04 	add.w	lr, lr, #4
 8017628:	d1b4      	bne.n	8017594 <arm_mat_mult_f32+0x74>
 801762a:	9a01      	ldr	r2, [sp, #4]
 801762c:	9b06      	ldr	r3, [sp, #24]
 801762e:	4611      	mov	r1, r2
 8017630:	4419      	add	r1, r3
 8017632:	449b      	add	fp, r3
 8017634:	9b04      	ldr	r3, [sp, #16]
 8017636:	9101      	str	r1, [sp, #4]
 8017638:	3b01      	subs	r3, #1
 801763a:	44aa      	add	sl, r5
 801763c:	9304      	str	r3, [sp, #16]
 801763e:	d004      	beq.n	801764a <arm_mat_mult_f32+0x12a>
 8017640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017642:	6858      	ldr	r0, [r3, #4]
 8017644:	e79e      	b.n	8017584 <arm_mat_mult_f32+0x64>
 8017646:	9a05      	ldr	r2, [sp, #20]
 8017648:	e7d9      	b.n	80175fe <arm_mat_mult_f32+0xde>
 801764a:	4618      	mov	r0, r3
 801764c:	b00b      	add	sp, #44	@ 0x2c
 801764e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017652:	f06f 0002 	mvn.w	r0, #2
 8017656:	b00b      	add	sp, #44	@ 0x2c
 8017658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801765c:	00000000 	.word	0x00000000

08017660 <arm_mat_inverse_f32>:
 8017660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017664:	8843      	ldrh	r3, [r0, #2]
 8017666:	8804      	ldrh	r4, [r0, #0]
 8017668:	684e      	ldr	r6, [r1, #4]
 801766a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801766e:	b087      	sub	sp, #28
 8017670:	429c      	cmp	r4, r3
 8017672:	9301      	str	r3, [sp, #4]
 8017674:	9603      	str	r6, [sp, #12]
 8017676:	f040 80ea 	bne.w	801784e <arm_mat_inverse_f32+0x1ee>
 801767a:	880a      	ldrh	r2, [r1, #0]
 801767c:	884b      	ldrh	r3, [r1, #2]
 801767e:	4293      	cmp	r3, r2
 8017680:	f040 80e5 	bne.w	801784e <arm_mat_inverse_f32+0x1ee>
 8017684:	429c      	cmp	r4, r3
 8017686:	f040 80e2 	bne.w	801784e <arm_mat_inverse_f32+0x1ee>
 801768a:	9005      	str	r0, [sp, #20]
 801768c:	b30c      	cbz	r4, 80176d2 <arm_mat_inverse_f32+0x72>
 801768e:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 8017692:	1e67      	subs	r7, r4, #1
 8017694:	f846 bb04 	str.w	fp, [r6], #4
 8017698:	d01b      	beq.n	80176d2 <arm_mat_inverse_f32+0x72>
 801769a:	f04f 0801 	mov.w	r8, #1
 801769e:	00ba      	lsls	r2, r7, #2
 80176a0:	eb06 0a02 	add.w	sl, r6, r2
 80176a4:	ea4f 0588 	mov.w	r5, r8, lsl #2
 80176a8:	4630      	mov	r0, r6
 80176aa:	2100      	movs	r1, #0
 80176ac:	f000 f96e 	bl	801798c <memset>
 80176b0:	eb0a 0605 	add.w	r6, sl, r5
 80176b4:	462a      	mov	r2, r5
 80176b6:	2100      	movs	r1, #0
 80176b8:	4650      	mov	r0, sl
 80176ba:	f1b8 0f00 	cmp.w	r8, #0
 80176be:	f000 80cb 	beq.w	8017858 <arm_mat_inverse_f32+0x1f8>
 80176c2:	f000 f963 	bl	801798c <memset>
 80176c6:	3f01      	subs	r7, #1
 80176c8:	f108 0801 	add.w	r8, r8, #1
 80176cc:	f846 bb04 	str.w	fp, [r6], #4
 80176d0:	d1e5      	bne.n	801769e <arm_mat_inverse_f32+0x3e>
 80176d2:	9b01      	ldr	r3, [sp, #4]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	f000 80b5 	beq.w	8017844 <arm_mat_inverse_f32+0x1e4>
 80176da:	009d      	lsls	r5, r3, #2
 80176dc:	eb09 0205 	add.w	r2, r9, r5
 80176e0:	46cc      	mov	ip, r9
 80176e2:	9202      	str	r2, [sp, #8]
 80176e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80176e8:	1d2a      	adds	r2, r5, #4
 80176ea:	9204      	str	r2, [sp, #16]
 80176ec:	462f      	mov	r7, r5
 80176ee:	469e      	mov	lr, r3
 80176f0:	2600      	movs	r6, #0
 80176f2:	9b02      	ldr	r3, [sp, #8]
 80176f4:	eddc 6a00 	vldr	s13, [ip]
 80176f8:	42b4      	cmp	r4, r6
 80176fa:	eba3 0b07 	sub.w	fp, r3, r7
 80176fe:	f000 80a1 	beq.w	8017844 <arm_mat_inverse_f32+0x1e4>
 8017702:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8017868 <arm_mat_inverse_f32+0x208>
 8017706:	4632      	mov	r2, r6
 8017708:	4663      	mov	r3, ip
 801770a:	e00b      	b.n	8017724 <arm_mat_inverse_f32+0xc4>
 801770c:	eef4 7a47 	vcmp.f32	s15, s14
 8017710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017714:	f102 0201 	add.w	r2, r2, #1
 8017718:	bfc8      	it	gt
 801771a:	eeb0 7a67 	vmovgt.f32	s14, s15
 801771e:	42a2      	cmp	r2, r4
 8017720:	442b      	add	r3, r5
 8017722:	d014      	beq.n	801774e <arm_mat_inverse_f32+0xee>
 8017724:	edd3 7a00 	vldr	s15, [r3]
 8017728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801772c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017730:	eeb1 6a67 	vneg.f32	s12, s15
 8017734:	dcea      	bgt.n	801770c <arm_mat_inverse_f32+0xac>
 8017736:	eeb4 6a47 	vcmp.f32	s12, s14
 801773a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801773e:	f102 0201 	add.w	r2, r2, #1
 8017742:	bfc8      	it	gt
 8017744:	eeb0 7a46 	vmovgt.f32	s14, s12
 8017748:	42a2      	cmp	r2, r4
 801774a:	442b      	add	r3, r5
 801774c:	d1ea      	bne.n	8017724 <arm_mat_inverse_f32+0xc4>
 801774e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017756:	d075      	beq.n	8017844 <arm_mat_inverse_f32+0x1e4>
 8017758:	eef5 6a40 	vcmp.f32	s13, #0.0
 801775c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017760:	d070      	beq.n	8017844 <arm_mat_inverse_f32+0x1e4>
 8017762:	4672      	mov	r2, lr
 8017764:	4663      	mov	r3, ip
 8017766:	ed93 7a00 	vldr	s14, [r3]
 801776a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801776e:	3a01      	subs	r2, #1
 8017770:	ece3 7a01 	vstmia	r3!, {s15}
 8017774:	d1f7      	bne.n	8017766 <arm_mat_inverse_f32+0x106>
 8017776:	9901      	ldr	r1, [sp, #4]
 8017778:	464b      	mov	r3, r9
 801777a:	ed93 7a00 	vldr	s14, [r3]
 801777e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017782:	3901      	subs	r1, #1
 8017784:	ece3 7a01 	vstmia	r3!, {s15}
 8017788:	d1f7      	bne.n	801777a <arm_mat_inverse_f32+0x11a>
 801778a:	9803      	ldr	r0, [sp, #12]
 801778c:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8017790:	42b1      	cmp	r1, r6
 8017792:	d039      	beq.n	8017808 <arm_mat_inverse_f32+0x1a8>
 8017794:	eddb 6a00 	vldr	s13, [fp]
 8017798:	465a      	mov	r2, fp
 801779a:	4673      	mov	r3, lr
 801779c:	46e2      	mov	sl, ip
 801779e:	ecba 7a01 	vldmia	sl!, {s14}
 80177a2:	edd2 7a00 	vldr	s15, [r2]
 80177a6:	ee26 7a87 	vmul.f32	s14, s13, s14
 80177aa:	3b01      	subs	r3, #1
 80177ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80177b0:	ece2 7a01 	vstmia	r2!, {s15}
 80177b4:	d1f3      	bne.n	801779e <arm_mat_inverse_f32+0x13e>
 80177b6:	9b01      	ldr	r3, [sp, #4]
 80177b8:	44bb      	add	fp, r7
 80177ba:	4602      	mov	r2, r0
 80177bc:	46ca      	mov	sl, r9
 80177be:	ecba 7a01 	vldmia	sl!, {s14}
 80177c2:	edd2 7a00 	vldr	s15, [r2]
 80177c6:	ee26 7a87 	vmul.f32	s14, s13, s14
 80177ca:	3b01      	subs	r3, #1
 80177cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80177d0:	ece2 7a01 	vstmia	r2!, {s15}
 80177d4:	d1f3      	bne.n	80177be <arm_mat_inverse_f32+0x15e>
 80177d6:	4428      	add	r0, r5
 80177d8:	3101      	adds	r1, #1
 80177da:	428c      	cmp	r4, r1
 80177dc:	44c3      	add	fp, r8
 80177de:	d1d7      	bne.n	8017790 <arm_mat_inverse_f32+0x130>
 80177e0:	9b04      	ldr	r3, [sp, #16]
 80177e2:	f1be 0e01 	subs.w	lr, lr, #1
 80177e6:	f106 0601 	add.w	r6, r6, #1
 80177ea:	449c      	add	ip, r3
 80177ec:	f1a7 0704 	sub.w	r7, r7, #4
 80177f0:	44a9      	add	r9, r5
 80177f2:	f47f af7e 	bne.w	80176f2 <arm_mat_inverse_f32+0x92>
 80177f6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80177fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177fe:	d006      	beq.n	801780e <arm_mat_inverse_f32+0x1ae>
 8017800:	2000      	movs	r0, #0
 8017802:	b007      	add	sp, #28
 8017804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017808:	44bb      	add	fp, r7
 801780a:	4428      	add	r0, r5
 801780c:	e7e4      	b.n	80177d8 <arm_mat_inverse_f32+0x178>
 801780e:	9b05      	ldr	r3, [sp, #20]
 8017810:	9a01      	ldr	r2, [sp, #4]
 8017812:	685b      	ldr	r3, [r3, #4]
 8017814:	edd3 7a00 	vldr	s15, [r3]
 8017818:	eef5 7a40 	vcmp.f32	s15, #0.0
 801781c:	fb02 f204 	mul.w	r2, r2, r4
 8017820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017824:	4614      	mov	r4, r2
 8017826:	bf08      	it	eq
 8017828:	3304      	addeq	r3, #4
 801782a:	d007      	beq.n	801783c <arm_mat_inverse_f32+0x1dc>
 801782c:	e7e8      	b.n	8017800 <arm_mat_inverse_f32+0x1a0>
 801782e:	ecf3 7a01 	vldmia	r3!, {s15}
 8017832:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801783a:	d1e1      	bne.n	8017800 <arm_mat_inverse_f32+0x1a0>
 801783c:	f10e 0e01 	add.w	lr, lr, #1
 8017840:	4574      	cmp	r4, lr
 8017842:	d1f4      	bne.n	801782e <arm_mat_inverse_f32+0x1ce>
 8017844:	f06f 0004 	mvn.w	r0, #4
 8017848:	b007      	add	sp, #28
 801784a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801784e:	f06f 0002 	mvn.w	r0, #2
 8017852:	b007      	add	sp, #28
 8017854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017858:	4656      	mov	r6, sl
 801785a:	3f01      	subs	r7, #1
 801785c:	f846 bb04 	str.w	fp, [r6], #4
 8017860:	f47f af1b 	bne.w	801769a <arm_mat_inverse_f32+0x3a>
 8017864:	e735      	b.n	80176d2 <arm_mat_inverse_f32+0x72>
 8017866:	bf00      	nop
 8017868:	00000000 	.word	0x00000000

0801786c <arm_sin_f32>:
 801786c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80178ec <arm_sin_f32+0x80>
 8017870:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017874:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801787c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017880:	d504      	bpl.n	801788c <arm_sin_f32+0x20>
 8017882:	ee17 3a90 	vmov	r3, s15
 8017886:	3b01      	subs	r3, #1
 8017888:	ee07 3a90 	vmov	s15, r3
 801788c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017890:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80178f0 <arm_sin_f32+0x84>
 8017894:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017898:	ee20 0a07 	vmul.f32	s0, s0, s14
 801789c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80178a0:	ee17 3a90 	vmov	r3, s15
 80178a4:	b29b      	uxth	r3, r3
 80178a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80178aa:	d21a      	bcs.n	80178e2 <arm_sin_f32+0x76>
 80178ac:	ee07 3a90 	vmov	s15, r3
 80178b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80178b4:	1c59      	adds	r1, r3, #1
 80178b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80178ba:	4a0e      	ldr	r2, [pc, #56]	@ (80178f4 <arm_sin_f32+0x88>)
 80178bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80178c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80178c4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80178c8:	ed93 7a00 	vldr	s14, [r3]
 80178cc:	edd2 6a00 	vldr	s13, [r2]
 80178d0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80178d4:	ee20 0a26 	vmul.f32	s0, s0, s13
 80178d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80178dc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80178e0:	4770      	bx	lr
 80178e2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80178e6:	2101      	movs	r1, #1
 80178e8:	2300      	movs	r3, #0
 80178ea:	e7e6      	b.n	80178ba <arm_sin_f32+0x4e>
 80178ec:	3e22f983 	.word	0x3e22f983
 80178f0:	44000000 	.word	0x44000000
 80178f4:	0801a93c 	.word	0x0801a93c

080178f8 <arm_cos_f32>:
 80178f8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8017980 <arm_cos_f32+0x88>
 80178fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017900:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8017904:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017908:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801790c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017910:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017914:	d504      	bpl.n	8017920 <arm_cos_f32+0x28>
 8017916:	ee17 3a90 	vmov	r3, s15
 801791a:	3b01      	subs	r3, #1
 801791c:	ee07 3a90 	vmov	s15, r3
 8017920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017924:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8017984 <arm_cos_f32+0x8c>
 8017928:	ee30 0a67 	vsub.f32	s0, s0, s15
 801792c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017930:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8017934:	ee17 3a90 	vmov	r3, s15
 8017938:	b29b      	uxth	r3, r3
 801793a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801793e:	d21a      	bcs.n	8017976 <arm_cos_f32+0x7e>
 8017940:	ee07 3a90 	vmov	s15, r3
 8017944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017948:	1c59      	adds	r1, r3, #1
 801794a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801794e:	4a0e      	ldr	r2, [pc, #56]	@ (8017988 <arm_cos_f32+0x90>)
 8017950:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017954:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017958:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801795c:	ed93 7a00 	vldr	s14, [r3]
 8017960:	edd2 6a00 	vldr	s13, [r2]
 8017964:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8017968:	ee20 0a26 	vmul.f32	s0, s0, s13
 801796c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017970:	ee37 0a80 	vadd.f32	s0, s15, s0
 8017974:	4770      	bx	lr
 8017976:	ee30 0a47 	vsub.f32	s0, s0, s14
 801797a:	2101      	movs	r1, #1
 801797c:	2300      	movs	r3, #0
 801797e:	e7e6      	b.n	801794e <arm_cos_f32+0x56>
 8017980:	3e22f983 	.word	0x3e22f983
 8017984:	44000000 	.word	0x44000000
 8017988:	0801a93c 	.word	0x0801a93c

0801798c <memset>:
 801798c:	4402      	add	r2, r0
 801798e:	4603      	mov	r3, r0
 8017990:	4293      	cmp	r3, r2
 8017992:	d100      	bne.n	8017996 <memset+0xa>
 8017994:	4770      	bx	lr
 8017996:	f803 1b01 	strb.w	r1, [r3], #1
 801799a:	e7f9      	b.n	8017990 <memset+0x4>

0801799c <strncpy>:
 801799c:	b510      	push	{r4, lr}
 801799e:	3901      	subs	r1, #1
 80179a0:	4603      	mov	r3, r0
 80179a2:	b132      	cbz	r2, 80179b2 <strncpy+0x16>
 80179a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80179a8:	f803 4b01 	strb.w	r4, [r3], #1
 80179ac:	3a01      	subs	r2, #1
 80179ae:	2c00      	cmp	r4, #0
 80179b0:	d1f7      	bne.n	80179a2 <strncpy+0x6>
 80179b2:	441a      	add	r2, r3
 80179b4:	2100      	movs	r1, #0
 80179b6:	4293      	cmp	r3, r2
 80179b8:	d100      	bne.n	80179bc <strncpy+0x20>
 80179ba:	bd10      	pop	{r4, pc}
 80179bc:	f803 1b01 	strb.w	r1, [r3], #1
 80179c0:	e7f9      	b.n	80179b6 <strncpy+0x1a>
	...

080179c4 <__errno>:
 80179c4:	4b01      	ldr	r3, [pc, #4]	@ (80179cc <__errno+0x8>)
 80179c6:	6818      	ldr	r0, [r3, #0]
 80179c8:	4770      	bx	lr
 80179ca:	bf00      	nop
 80179cc:	20000180 	.word	0x20000180

080179d0 <__libc_init_array>:
 80179d0:	b570      	push	{r4, r5, r6, lr}
 80179d2:	4d0d      	ldr	r5, [pc, #52]	@ (8017a08 <__libc_init_array+0x38>)
 80179d4:	4c0d      	ldr	r4, [pc, #52]	@ (8017a0c <__libc_init_array+0x3c>)
 80179d6:	1b64      	subs	r4, r4, r5
 80179d8:	10a4      	asrs	r4, r4, #2
 80179da:	2600      	movs	r6, #0
 80179dc:	42a6      	cmp	r6, r4
 80179de:	d109      	bne.n	80179f4 <__libc_init_array+0x24>
 80179e0:	4d0b      	ldr	r5, [pc, #44]	@ (8017a10 <__libc_init_array+0x40>)
 80179e2:	4c0c      	ldr	r4, [pc, #48]	@ (8017a14 <__libc_init_array+0x44>)
 80179e4:	f002 f840 	bl	8019a68 <_init>
 80179e8:	1b64      	subs	r4, r4, r5
 80179ea:	10a4      	asrs	r4, r4, #2
 80179ec:	2600      	movs	r6, #0
 80179ee:	42a6      	cmp	r6, r4
 80179f0:	d105      	bne.n	80179fe <__libc_init_array+0x2e>
 80179f2:	bd70      	pop	{r4, r5, r6, pc}
 80179f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80179f8:	4798      	blx	r3
 80179fa:	3601      	adds	r6, #1
 80179fc:	e7ee      	b.n	80179dc <__libc_init_array+0xc>
 80179fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8017a02:	4798      	blx	r3
 8017a04:	3601      	adds	r6, #1
 8017a06:	e7f2      	b.n	80179ee <__libc_init_array+0x1e>
 8017a08:	0801b58c 	.word	0x0801b58c
 8017a0c:	0801b58c 	.word	0x0801b58c
 8017a10:	0801b58c 	.word	0x0801b58c
 8017a14:	0801b590 	.word	0x0801b590

08017a18 <memcpy>:
 8017a18:	440a      	add	r2, r1
 8017a1a:	4291      	cmp	r1, r2
 8017a1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017a20:	d100      	bne.n	8017a24 <memcpy+0xc>
 8017a22:	4770      	bx	lr
 8017a24:	b510      	push	{r4, lr}
 8017a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017a2e:	4291      	cmp	r1, r2
 8017a30:	d1f9      	bne.n	8017a26 <memcpy+0xe>
 8017a32:	bd10      	pop	{r4, pc}

08017a34 <acosf>:
 8017a34:	b508      	push	{r3, lr}
 8017a36:	ed2d 8b02 	vpush	{d8}
 8017a3a:	eeb0 8a40 	vmov.f32	s16, s0
 8017a3e:	f000 fbbf 	bl	80181c0 <__ieee754_acosf>
 8017a42:	eeb4 8a48 	vcmp.f32	s16, s16
 8017a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a4a:	eef0 8a40 	vmov.f32	s17, s0
 8017a4e:	d615      	bvs.n	8017a7c <acosf+0x48>
 8017a50:	eeb0 0a48 	vmov.f32	s0, s16
 8017a54:	f000 f966 	bl	8017d24 <fabsf>
 8017a58:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017a5c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a64:	dd0a      	ble.n	8017a7c <acosf+0x48>
 8017a66:	f7ff ffad 	bl	80179c4 <__errno>
 8017a6a:	ecbd 8b02 	vpop	{d8}
 8017a6e:	2321      	movs	r3, #33	@ 0x21
 8017a70:	6003      	str	r3, [r0, #0]
 8017a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017a76:	4804      	ldr	r0, [pc, #16]	@ (8017a88 <acosf+0x54>)
 8017a78:	f000 b9d8 	b.w	8017e2c <nanf>
 8017a7c:	eeb0 0a68 	vmov.f32	s0, s17
 8017a80:	ecbd 8b02 	vpop	{d8}
 8017a84:	bd08      	pop	{r3, pc}
 8017a86:	bf00      	nop
 8017a88:	0801b140 	.word	0x0801b140

08017a8c <asinf>:
 8017a8c:	b508      	push	{r3, lr}
 8017a8e:	ed2d 8b02 	vpush	{d8}
 8017a92:	eeb0 8a40 	vmov.f32	s16, s0
 8017a96:	f000 fc8b 	bl	80183b0 <__ieee754_asinf>
 8017a9a:	eeb4 8a48 	vcmp.f32	s16, s16
 8017a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aa2:	eef0 8a40 	vmov.f32	s17, s0
 8017aa6:	d615      	bvs.n	8017ad4 <asinf+0x48>
 8017aa8:	eeb0 0a48 	vmov.f32	s0, s16
 8017aac:	f000 f93a 	bl	8017d24 <fabsf>
 8017ab0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017ab4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017abc:	dd0a      	ble.n	8017ad4 <asinf+0x48>
 8017abe:	f7ff ff81 	bl	80179c4 <__errno>
 8017ac2:	ecbd 8b02 	vpop	{d8}
 8017ac6:	2321      	movs	r3, #33	@ 0x21
 8017ac8:	6003      	str	r3, [r0, #0]
 8017aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017ace:	4804      	ldr	r0, [pc, #16]	@ (8017ae0 <asinf+0x54>)
 8017ad0:	f000 b9ac 	b.w	8017e2c <nanf>
 8017ad4:	eeb0 0a68 	vmov.f32	s0, s17
 8017ad8:	ecbd 8b02 	vpop	{d8}
 8017adc:	bd08      	pop	{r3, pc}
 8017ade:	bf00      	nop
 8017ae0:	0801b140 	.word	0x0801b140

08017ae4 <atan2f>:
 8017ae4:	f000 bd4a 	b.w	801857c <__ieee754_atan2f>

08017ae8 <expf>:
 8017ae8:	b508      	push	{r3, lr}
 8017aea:	ed2d 8b02 	vpush	{d8}
 8017aee:	eef0 8a40 	vmov.f32	s17, s0
 8017af2:	f000 fde3 	bl	80186bc <__ieee754_expf>
 8017af6:	eeb0 8a40 	vmov.f32	s16, s0
 8017afa:	eeb0 0a68 	vmov.f32	s0, s17
 8017afe:	f000 f98b 	bl	8017e18 <finitef>
 8017b02:	b160      	cbz	r0, 8017b1e <expf+0x36>
 8017b04:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8017b44 <expf+0x5c>
 8017b08:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b10:	dd0a      	ble.n	8017b28 <expf+0x40>
 8017b12:	f7ff ff57 	bl	80179c4 <__errno>
 8017b16:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8017b48 <expf+0x60>
 8017b1a:	2322      	movs	r3, #34	@ 0x22
 8017b1c:	6003      	str	r3, [r0, #0]
 8017b1e:	eeb0 0a48 	vmov.f32	s0, s16
 8017b22:	ecbd 8b02 	vpop	{d8}
 8017b26:	bd08      	pop	{r3, pc}
 8017b28:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8017b4c <expf+0x64>
 8017b2c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b34:	d5f3      	bpl.n	8017b1e <expf+0x36>
 8017b36:	f7ff ff45 	bl	80179c4 <__errno>
 8017b3a:	2322      	movs	r3, #34	@ 0x22
 8017b3c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8017b50 <expf+0x68>
 8017b40:	6003      	str	r3, [r0, #0]
 8017b42:	e7ec      	b.n	8017b1e <expf+0x36>
 8017b44:	42b17217 	.word	0x42b17217
 8017b48:	7f800000 	.word	0x7f800000
 8017b4c:	c2cff1b5 	.word	0xc2cff1b5
 8017b50:	00000000 	.word	0x00000000

08017b54 <logf>:
 8017b54:	b508      	push	{r3, lr}
 8017b56:	ed2d 8b02 	vpush	{d8}
 8017b5a:	eeb0 8a40 	vmov.f32	s16, s0
 8017b5e:	f000 fe7b 	bl	8018858 <__ieee754_logf>
 8017b62:	eeb4 8a48 	vcmp.f32	s16, s16
 8017b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b6a:	d60f      	bvs.n	8017b8c <logf+0x38>
 8017b6c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b74:	dc0a      	bgt.n	8017b8c <logf+0x38>
 8017b76:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b7e:	d108      	bne.n	8017b92 <logf+0x3e>
 8017b80:	f7ff ff20 	bl	80179c4 <__errno>
 8017b84:	2322      	movs	r3, #34	@ 0x22
 8017b86:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8017ba8 <logf+0x54>
 8017b8a:	6003      	str	r3, [r0, #0]
 8017b8c:	ecbd 8b02 	vpop	{d8}
 8017b90:	bd08      	pop	{r3, pc}
 8017b92:	f7ff ff17 	bl	80179c4 <__errno>
 8017b96:	ecbd 8b02 	vpop	{d8}
 8017b9a:	2321      	movs	r3, #33	@ 0x21
 8017b9c:	6003      	str	r3, [r0, #0]
 8017b9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017ba2:	4802      	ldr	r0, [pc, #8]	@ (8017bac <logf+0x58>)
 8017ba4:	f000 b942 	b.w	8017e2c <nanf>
 8017ba8:	ff800000 	.word	0xff800000
 8017bac:	0801b140 	.word	0x0801b140

08017bb0 <powf>:
 8017bb0:	b508      	push	{r3, lr}
 8017bb2:	ed2d 8b04 	vpush	{d8-d9}
 8017bb6:	eeb0 8a60 	vmov.f32	s16, s1
 8017bba:	eeb0 9a40 	vmov.f32	s18, s0
 8017bbe:	f000 ff3d 	bl	8018a3c <__ieee754_powf>
 8017bc2:	eeb4 8a48 	vcmp.f32	s16, s16
 8017bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bca:	eef0 8a40 	vmov.f32	s17, s0
 8017bce:	d63e      	bvs.n	8017c4e <powf+0x9e>
 8017bd0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bd8:	d112      	bne.n	8017c00 <powf+0x50>
 8017bda:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017be2:	d039      	beq.n	8017c58 <powf+0xa8>
 8017be4:	eeb0 0a48 	vmov.f32	s0, s16
 8017be8:	f000 f916 	bl	8017e18 <finitef>
 8017bec:	b378      	cbz	r0, 8017c4e <powf+0x9e>
 8017bee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bf6:	d52a      	bpl.n	8017c4e <powf+0x9e>
 8017bf8:	f7ff fee4 	bl	80179c4 <__errno>
 8017bfc:	2322      	movs	r3, #34	@ 0x22
 8017bfe:	e014      	b.n	8017c2a <powf+0x7a>
 8017c00:	f000 f90a 	bl	8017e18 <finitef>
 8017c04:	b998      	cbnz	r0, 8017c2e <powf+0x7e>
 8017c06:	eeb0 0a49 	vmov.f32	s0, s18
 8017c0a:	f000 f905 	bl	8017e18 <finitef>
 8017c0e:	b170      	cbz	r0, 8017c2e <powf+0x7e>
 8017c10:	eeb0 0a48 	vmov.f32	s0, s16
 8017c14:	f000 f900 	bl	8017e18 <finitef>
 8017c18:	b148      	cbz	r0, 8017c2e <powf+0x7e>
 8017c1a:	eef4 8a68 	vcmp.f32	s17, s17
 8017c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c22:	d7e9      	bvc.n	8017bf8 <powf+0x48>
 8017c24:	f7ff fece 	bl	80179c4 <__errno>
 8017c28:	2321      	movs	r3, #33	@ 0x21
 8017c2a:	6003      	str	r3, [r0, #0]
 8017c2c:	e00f      	b.n	8017c4e <powf+0x9e>
 8017c2e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c36:	d10a      	bne.n	8017c4e <powf+0x9e>
 8017c38:	eeb0 0a49 	vmov.f32	s0, s18
 8017c3c:	f000 f8ec 	bl	8017e18 <finitef>
 8017c40:	b128      	cbz	r0, 8017c4e <powf+0x9e>
 8017c42:	eeb0 0a48 	vmov.f32	s0, s16
 8017c46:	f000 f8e7 	bl	8017e18 <finitef>
 8017c4a:	2800      	cmp	r0, #0
 8017c4c:	d1d4      	bne.n	8017bf8 <powf+0x48>
 8017c4e:	eeb0 0a68 	vmov.f32	s0, s17
 8017c52:	ecbd 8b04 	vpop	{d8-d9}
 8017c56:	bd08      	pop	{r3, pc}
 8017c58:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8017c5c:	e7f7      	b.n	8017c4e <powf+0x9e>
	...

08017c60 <sqrtf>:
 8017c60:	b508      	push	{r3, lr}
 8017c62:	ed2d 8b02 	vpush	{d8}
 8017c66:	eeb0 8a40 	vmov.f32	s16, s0
 8017c6a:	f000 f925 	bl	8017eb8 <__ieee754_sqrtf>
 8017c6e:	eeb4 8a48 	vcmp.f32	s16, s16
 8017c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c76:	d60c      	bvs.n	8017c92 <sqrtf+0x32>
 8017c78:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8017c98 <sqrtf+0x38>
 8017c7c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c84:	d505      	bpl.n	8017c92 <sqrtf+0x32>
 8017c86:	f7ff fe9d 	bl	80179c4 <__errno>
 8017c8a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8017c8e:	2321      	movs	r3, #33	@ 0x21
 8017c90:	6003      	str	r3, [r0, #0]
 8017c92:	ecbd 8b02 	vpop	{d8}
 8017c96:	bd08      	pop	{r3, pc}
 8017c98:	00000000 	.word	0x00000000

08017c9c <cosf>:
 8017c9c:	ee10 3a10 	vmov	r3, s0
 8017ca0:	b507      	push	{r0, r1, r2, lr}
 8017ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8017d1c <cosf+0x80>)
 8017ca4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017ca8:	4293      	cmp	r3, r2
 8017caa:	d806      	bhi.n	8017cba <cosf+0x1e>
 8017cac:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8017d20 <cosf+0x84>
 8017cb0:	b003      	add	sp, #12
 8017cb2:	f85d eb04 	ldr.w	lr, [sp], #4
 8017cb6:	f000 b903 	b.w	8017ec0 <__kernel_cosf>
 8017cba:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017cbe:	d304      	bcc.n	8017cca <cosf+0x2e>
 8017cc0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017cc4:	b003      	add	sp, #12
 8017cc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8017cca:	4668      	mov	r0, sp
 8017ccc:	f001 f986 	bl	8018fdc <__ieee754_rem_pio2f>
 8017cd0:	f000 0003 	and.w	r0, r0, #3
 8017cd4:	2801      	cmp	r0, #1
 8017cd6:	d009      	beq.n	8017cec <cosf+0x50>
 8017cd8:	2802      	cmp	r0, #2
 8017cda:	d010      	beq.n	8017cfe <cosf+0x62>
 8017cdc:	b9b0      	cbnz	r0, 8017d0c <cosf+0x70>
 8017cde:	eddd 0a01 	vldr	s1, [sp, #4]
 8017ce2:	ed9d 0a00 	vldr	s0, [sp]
 8017ce6:	f000 f8eb 	bl	8017ec0 <__kernel_cosf>
 8017cea:	e7eb      	b.n	8017cc4 <cosf+0x28>
 8017cec:	eddd 0a01 	vldr	s1, [sp, #4]
 8017cf0:	ed9d 0a00 	vldr	s0, [sp]
 8017cf4:	f000 f93c 	bl	8017f70 <__kernel_sinf>
 8017cf8:	eeb1 0a40 	vneg.f32	s0, s0
 8017cfc:	e7e2      	b.n	8017cc4 <cosf+0x28>
 8017cfe:	eddd 0a01 	vldr	s1, [sp, #4]
 8017d02:	ed9d 0a00 	vldr	s0, [sp]
 8017d06:	f000 f8db 	bl	8017ec0 <__kernel_cosf>
 8017d0a:	e7f5      	b.n	8017cf8 <cosf+0x5c>
 8017d0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8017d10:	ed9d 0a00 	vldr	s0, [sp]
 8017d14:	2001      	movs	r0, #1
 8017d16:	f000 f92b 	bl	8017f70 <__kernel_sinf>
 8017d1a:	e7d3      	b.n	8017cc4 <cosf+0x28>
 8017d1c:	3f490fd8 	.word	0x3f490fd8
 8017d20:	00000000 	.word	0x00000000

08017d24 <fabsf>:
 8017d24:	ee10 3a10 	vmov	r3, s0
 8017d28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017d2c:	ee00 3a10 	vmov	s0, r3
 8017d30:	4770      	bx	lr
	...

08017d34 <sinf>:
 8017d34:	ee10 3a10 	vmov	r3, s0
 8017d38:	b507      	push	{r0, r1, r2, lr}
 8017d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8017db8 <sinf+0x84>)
 8017d3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017d40:	4293      	cmp	r3, r2
 8017d42:	d807      	bhi.n	8017d54 <sinf+0x20>
 8017d44:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8017dbc <sinf+0x88>
 8017d48:	2000      	movs	r0, #0
 8017d4a:	b003      	add	sp, #12
 8017d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d50:	f000 b90e 	b.w	8017f70 <__kernel_sinf>
 8017d54:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017d58:	d304      	bcc.n	8017d64 <sinf+0x30>
 8017d5a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017d5e:	b003      	add	sp, #12
 8017d60:	f85d fb04 	ldr.w	pc, [sp], #4
 8017d64:	4668      	mov	r0, sp
 8017d66:	f001 f939 	bl	8018fdc <__ieee754_rem_pio2f>
 8017d6a:	f000 0003 	and.w	r0, r0, #3
 8017d6e:	2801      	cmp	r0, #1
 8017d70:	d00a      	beq.n	8017d88 <sinf+0x54>
 8017d72:	2802      	cmp	r0, #2
 8017d74:	d00f      	beq.n	8017d96 <sinf+0x62>
 8017d76:	b9c0      	cbnz	r0, 8017daa <sinf+0x76>
 8017d78:	eddd 0a01 	vldr	s1, [sp, #4]
 8017d7c:	ed9d 0a00 	vldr	s0, [sp]
 8017d80:	2001      	movs	r0, #1
 8017d82:	f000 f8f5 	bl	8017f70 <__kernel_sinf>
 8017d86:	e7ea      	b.n	8017d5e <sinf+0x2a>
 8017d88:	eddd 0a01 	vldr	s1, [sp, #4]
 8017d8c:	ed9d 0a00 	vldr	s0, [sp]
 8017d90:	f000 f896 	bl	8017ec0 <__kernel_cosf>
 8017d94:	e7e3      	b.n	8017d5e <sinf+0x2a>
 8017d96:	eddd 0a01 	vldr	s1, [sp, #4]
 8017d9a:	ed9d 0a00 	vldr	s0, [sp]
 8017d9e:	2001      	movs	r0, #1
 8017da0:	f000 f8e6 	bl	8017f70 <__kernel_sinf>
 8017da4:	eeb1 0a40 	vneg.f32	s0, s0
 8017da8:	e7d9      	b.n	8017d5e <sinf+0x2a>
 8017daa:	eddd 0a01 	vldr	s1, [sp, #4]
 8017dae:	ed9d 0a00 	vldr	s0, [sp]
 8017db2:	f000 f885 	bl	8017ec0 <__kernel_cosf>
 8017db6:	e7f5      	b.n	8017da4 <sinf+0x70>
 8017db8:	3f490fd8 	.word	0x3f490fd8
 8017dbc:	00000000 	.word	0x00000000

08017dc0 <tanf>:
 8017dc0:	ee10 3a10 	vmov	r3, s0
 8017dc4:	b507      	push	{r0, r1, r2, lr}
 8017dc6:	4a12      	ldr	r2, [pc, #72]	@ (8017e10 <tanf+0x50>)
 8017dc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017dcc:	4293      	cmp	r3, r2
 8017dce:	d807      	bhi.n	8017de0 <tanf+0x20>
 8017dd0:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8017e14 <tanf+0x54>
 8017dd4:	2001      	movs	r0, #1
 8017dd6:	b003      	add	sp, #12
 8017dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ddc:	f000 b910 	b.w	8018000 <__kernel_tanf>
 8017de0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017de4:	d304      	bcc.n	8017df0 <tanf+0x30>
 8017de6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017dea:	b003      	add	sp, #12
 8017dec:	f85d fb04 	ldr.w	pc, [sp], #4
 8017df0:	4668      	mov	r0, sp
 8017df2:	f001 f8f3 	bl	8018fdc <__ieee754_rem_pio2f>
 8017df6:	0040      	lsls	r0, r0, #1
 8017df8:	f000 0002 	and.w	r0, r0, #2
 8017dfc:	eddd 0a01 	vldr	s1, [sp, #4]
 8017e00:	ed9d 0a00 	vldr	s0, [sp]
 8017e04:	f1c0 0001 	rsb	r0, r0, #1
 8017e08:	f000 f8fa 	bl	8018000 <__kernel_tanf>
 8017e0c:	e7ed      	b.n	8017dea <tanf+0x2a>
 8017e0e:	bf00      	nop
 8017e10:	3f490fda 	.word	0x3f490fda
 8017e14:	00000000 	.word	0x00000000

08017e18 <finitef>:
 8017e18:	ee10 3a10 	vmov	r3, s0
 8017e1c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8017e20:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8017e24:	bfac      	ite	ge
 8017e26:	2000      	movge	r0, #0
 8017e28:	2001      	movlt	r0, #1
 8017e2a:	4770      	bx	lr

08017e2c <nanf>:
 8017e2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8017e34 <nanf+0x8>
 8017e30:	4770      	bx	lr
 8017e32:	bf00      	nop
 8017e34:	7fc00000 	.word	0x7fc00000

08017e38 <lrintf>:
 8017e38:	ee10 3a10 	vmov	r3, s0
 8017e3c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017e40:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8017e44:	281e      	cmp	r0, #30
 8017e46:	b082      	sub	sp, #8
 8017e48:	dc2f      	bgt.n	8017eaa <lrintf+0x72>
 8017e4a:	1c41      	adds	r1, r0, #1
 8017e4c:	da02      	bge.n	8017e54 <lrintf+0x1c>
 8017e4e:	2000      	movs	r0, #0
 8017e50:	b002      	add	sp, #8
 8017e52:	4770      	bx	lr
 8017e54:	2816      	cmp	r0, #22
 8017e56:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8017e5a:	dd0a      	ble.n	8017e72 <lrintf+0x3a>
 8017e5c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017e60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017e64:	3a96      	subs	r2, #150	@ 0x96
 8017e66:	fa03 f002 	lsl.w	r0, r3, r2
 8017e6a:	2900      	cmp	r1, #0
 8017e6c:	d0f0      	beq.n	8017e50 <lrintf+0x18>
 8017e6e:	4240      	negs	r0, r0
 8017e70:	e7ee      	b.n	8017e50 <lrintf+0x18>
 8017e72:	4b10      	ldr	r3, [pc, #64]	@ (8017eb4 <lrintf+0x7c>)
 8017e74:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8017e78:	ed93 7a00 	vldr	s14, [r3]
 8017e7c:	ee37 0a00 	vadd.f32	s0, s14, s0
 8017e80:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017e84:	eddd 7a01 	vldr	s15, [sp, #4]
 8017e88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017e8c:	ee17 3a90 	vmov	r3, s15
 8017e90:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8017e94:	d0db      	beq.n	8017e4e <lrintf+0x16>
 8017e96:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8017e9a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8017e9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8017ea2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8017ea6:	40d8      	lsrs	r0, r3
 8017ea8:	e7df      	b.n	8017e6a <lrintf+0x32>
 8017eaa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017eae:	ee17 0a90 	vmov	r0, s15
 8017eb2:	e7cd      	b.n	8017e50 <lrintf+0x18>
 8017eb4:	0801b144 	.word	0x0801b144

08017eb8 <__ieee754_sqrtf>:
 8017eb8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017ebc:	4770      	bx	lr
	...

08017ec0 <__kernel_cosf>:
 8017ec0:	ee10 3a10 	vmov	r3, s0
 8017ec4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017ec8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8017ecc:	eef0 6a40 	vmov.f32	s13, s0
 8017ed0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017ed4:	d204      	bcs.n	8017ee0 <__kernel_cosf+0x20>
 8017ed6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8017eda:	ee17 2a90 	vmov	r2, s15
 8017ede:	b342      	cbz	r2, 8017f32 <__kernel_cosf+0x72>
 8017ee0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017ee4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8017f50 <__kernel_cosf+0x90>
 8017ee8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8017f54 <__kernel_cosf+0x94>
 8017eec:	4a1a      	ldr	r2, [pc, #104]	@ (8017f58 <__kernel_cosf+0x98>)
 8017eee:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017ef2:	4293      	cmp	r3, r2
 8017ef4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8017f5c <__kernel_cosf+0x9c>
 8017ef8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017efc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8017f60 <__kernel_cosf+0xa0>
 8017f00:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017f04:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8017f64 <__kernel_cosf+0xa4>
 8017f08:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017f0c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8017f68 <__kernel_cosf+0xa8>
 8017f10:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017f14:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8017f18:	ee26 6a07 	vmul.f32	s12, s12, s14
 8017f1c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017f20:	eee7 0a06 	vfma.f32	s1, s14, s12
 8017f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017f28:	d804      	bhi.n	8017f34 <__kernel_cosf+0x74>
 8017f2a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017f2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017f32:	4770      	bx	lr
 8017f34:	4a0d      	ldr	r2, [pc, #52]	@ (8017f6c <__kernel_cosf+0xac>)
 8017f36:	4293      	cmp	r3, r2
 8017f38:	bf9a      	itte	ls
 8017f3a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8017f3e:	ee07 3a10 	vmovls	s14, r3
 8017f42:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8017f46:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017f4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017f4e:	e7ec      	b.n	8017f2a <__kernel_cosf+0x6a>
 8017f50:	ad47d74e 	.word	0xad47d74e
 8017f54:	310f74f6 	.word	0x310f74f6
 8017f58:	3e999999 	.word	0x3e999999
 8017f5c:	b493f27c 	.word	0xb493f27c
 8017f60:	37d00d01 	.word	0x37d00d01
 8017f64:	bab60b61 	.word	0xbab60b61
 8017f68:	3d2aaaab 	.word	0x3d2aaaab
 8017f6c:	3f480000 	.word	0x3f480000

08017f70 <__kernel_sinf>:
 8017f70:	ee10 3a10 	vmov	r3, s0
 8017f74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017f78:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8017f7c:	d204      	bcs.n	8017f88 <__kernel_sinf+0x18>
 8017f7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017f82:	ee17 3a90 	vmov	r3, s15
 8017f86:	b35b      	cbz	r3, 8017fe0 <__kernel_sinf+0x70>
 8017f88:	ee20 7a00 	vmul.f32	s14, s0, s0
 8017f8c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8017fe4 <__kernel_sinf+0x74>
 8017f90:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8017fe8 <__kernel_sinf+0x78>
 8017f94:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017f98:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8017fec <__kernel_sinf+0x7c>
 8017f9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017fa0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8017ff0 <__kernel_sinf+0x80>
 8017fa4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017fa8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8017ff4 <__kernel_sinf+0x84>
 8017fac:	ee60 6a07 	vmul.f32	s13, s0, s14
 8017fb0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017fb4:	b930      	cbnz	r0, 8017fc4 <__kernel_sinf+0x54>
 8017fb6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8017ff8 <__kernel_sinf+0x88>
 8017fba:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017fbe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8017fc2:	4770      	bx	lr
 8017fc4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8017fc8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8017fcc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8017fd0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8017fd4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8017ffc <__kernel_sinf+0x8c>
 8017fd8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8017fdc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8017fe0:	4770      	bx	lr
 8017fe2:	bf00      	nop
 8017fe4:	2f2ec9d3 	.word	0x2f2ec9d3
 8017fe8:	b2d72f34 	.word	0xb2d72f34
 8017fec:	3638ef1b 	.word	0x3638ef1b
 8017ff0:	b9500d01 	.word	0xb9500d01
 8017ff4:	3c088889 	.word	0x3c088889
 8017ff8:	be2aaaab 	.word	0xbe2aaaab
 8017ffc:	3e2aaaab 	.word	0x3e2aaaab

08018000 <__kernel_tanf>:
 8018000:	b508      	push	{r3, lr}
 8018002:	ee10 3a10 	vmov	r3, s0
 8018006:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801800a:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 801800e:	eef0 7a40 	vmov.f32	s15, s0
 8018012:	d217      	bcs.n	8018044 <__kernel_tanf+0x44>
 8018014:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8018018:	ee17 1a10 	vmov	r1, s14
 801801c:	bb41      	cbnz	r1, 8018070 <__kernel_tanf+0x70>
 801801e:	1c43      	adds	r3, r0, #1
 8018020:	4313      	orrs	r3, r2
 8018022:	d108      	bne.n	8018036 <__kernel_tanf+0x36>
 8018024:	f7ff fe7e 	bl	8017d24 <fabsf>
 8018028:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801802c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018030:	eeb0 0a67 	vmov.f32	s0, s15
 8018034:	bd08      	pop	{r3, pc}
 8018036:	2801      	cmp	r0, #1
 8018038:	d0fa      	beq.n	8018030 <__kernel_tanf+0x30>
 801803a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801803e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018042:	e7f5      	b.n	8018030 <__kernel_tanf+0x30>
 8018044:	494c      	ldr	r1, [pc, #304]	@ (8018178 <__kernel_tanf+0x178>)
 8018046:	428a      	cmp	r2, r1
 8018048:	d312      	bcc.n	8018070 <__kernel_tanf+0x70>
 801804a:	2b00      	cmp	r3, #0
 801804c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 801817c <__kernel_tanf+0x17c>
 8018050:	bfb8      	it	lt
 8018052:	eef1 7a40 	vneglt.f32	s15, s0
 8018056:	ee37 7a67 	vsub.f32	s14, s14, s15
 801805a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8018180 <__kernel_tanf+0x180>
 801805e:	bfb8      	it	lt
 8018060:	eef1 0a60 	vneglt.f32	s1, s1
 8018064:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018068:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8018184 <__kernel_tanf+0x184>
 801806c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018070:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8018074:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8018188 <__kernel_tanf+0x188>
 8018078:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 801818c <__kernel_tanf+0x18c>
 801807c:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8018190 <__kernel_tanf+0x190>
 8018080:	493d      	ldr	r1, [pc, #244]	@ (8018178 <__kernel_tanf+0x178>)
 8018082:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8018086:	428a      	cmp	r2, r1
 8018088:	eea7 6a25 	vfma.f32	s12, s14, s11
 801808c:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8018194 <__kernel_tanf+0x194>
 8018090:	eee6 5a07 	vfma.f32	s11, s12, s14
 8018094:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8018198 <__kernel_tanf+0x198>
 8018098:	eea5 6a87 	vfma.f32	s12, s11, s14
 801809c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801819c <__kernel_tanf+0x19c>
 80180a0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80180a4:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 80181a0 <__kernel_tanf+0x1a0>
 80180a8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80180ac:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80181a4 <__kernel_tanf+0x1a4>
 80180b0:	eee7 5a05 	vfma.f32	s11, s14, s10
 80180b4:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80181a8 <__kernel_tanf+0x1a8>
 80180b8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80180bc:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80181ac <__kernel_tanf+0x1ac>
 80180c0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80180c4:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80181b0 <__kernel_tanf+0x1b0>
 80180c8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80180cc:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80181b4 <__kernel_tanf+0x1b4>
 80180d0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80180d4:	eeb0 7a46 	vmov.f32	s14, s12
 80180d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80180dc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80180e0:	eeb0 6a60 	vmov.f32	s12, s1
 80180e4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80180e8:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80181b8 <__kernel_tanf+0x1b8>
 80180ec:	eee6 0a26 	vfma.f32	s1, s12, s13
 80180f0:	eee5 0a07 	vfma.f32	s1, s10, s14
 80180f4:	ee37 6aa0 	vadd.f32	s12, s15, s1
 80180f8:	d31d      	bcc.n	8018136 <__kernel_tanf+0x136>
 80180fa:	ee07 0a10 	vmov	s14, r0
 80180fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018102:	ee26 5a06 	vmul.f32	s10, s12, s12
 8018106:	ee36 6a07 	vadd.f32	s12, s12, s14
 801810a:	179b      	asrs	r3, r3, #30
 801810c:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8018110:	f003 0302 	and.w	r3, r3, #2
 8018114:	f1c3 0301 	rsb	r3, r3, #1
 8018118:	ee06 3a90 	vmov	s13, r3
 801811c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8018120:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018124:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018128:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801812c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8018130:	ee66 7a87 	vmul.f32	s15, s13, s14
 8018134:	e77c      	b.n	8018030 <__kernel_tanf+0x30>
 8018136:	2801      	cmp	r0, #1
 8018138:	d01b      	beq.n	8018172 <__kernel_tanf+0x172>
 801813a:	4b20      	ldr	r3, [pc, #128]	@ (80181bc <__kernel_tanf+0x1bc>)
 801813c:	ee16 2a10 	vmov	r2, s12
 8018140:	401a      	ands	r2, r3
 8018142:	ee05 2a90 	vmov	s11, r2
 8018146:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801814a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801814e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018152:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8018156:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801815a:	ee16 2a90 	vmov	r2, s13
 801815e:	4013      	ands	r3, r2
 8018160:	ee07 3a90 	vmov	s15, r3
 8018164:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018168:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801816c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8018170:	e75e      	b.n	8018030 <__kernel_tanf+0x30>
 8018172:	eef0 7a46 	vmov.f32	s15, s12
 8018176:	e75b      	b.n	8018030 <__kernel_tanf+0x30>
 8018178:	3f2ca140 	.word	0x3f2ca140
 801817c:	3f490fda 	.word	0x3f490fda
 8018180:	33222168 	.word	0x33222168
 8018184:	00000000 	.word	0x00000000
 8018188:	b79bae5f 	.word	0xb79bae5f
 801818c:	38a3f445 	.word	0x38a3f445
 8018190:	37d95384 	.word	0x37d95384
 8018194:	3a1a26c8 	.word	0x3a1a26c8
 8018198:	3b6b6916 	.word	0x3b6b6916
 801819c:	3cb327a4 	.word	0x3cb327a4
 80181a0:	3e088889 	.word	0x3e088889
 80181a4:	3895c07a 	.word	0x3895c07a
 80181a8:	398137b9 	.word	0x398137b9
 80181ac:	3abede48 	.word	0x3abede48
 80181b0:	3c11371f 	.word	0x3c11371f
 80181b4:	3d5d0dd1 	.word	0x3d5d0dd1
 80181b8:	3eaaaaab 	.word	0x3eaaaaab
 80181bc:	fffff000 	.word	0xfffff000

080181c0 <__ieee754_acosf>:
 80181c0:	b508      	push	{r3, lr}
 80181c2:	ee10 3a10 	vmov	r3, s0
 80181c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80181ca:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80181ce:	ed2d 8b0c 	vpush	{d8-d13}
 80181d2:	d10a      	bne.n	80181ea <__ieee754_acosf+0x2a>
 80181d4:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 801836c <__ieee754_acosf+0x1ac>
 80181d8:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8018370 <__ieee754_acosf+0x1b0>
 80181dc:	2b00      	cmp	r3, #0
 80181de:	bfc8      	it	gt
 80181e0:	eeb0 0a67 	vmovgt.f32	s0, s15
 80181e4:	ecbd 8b0c 	vpop	{d8-d13}
 80181e8:	bd08      	pop	{r3, pc}
 80181ea:	d904      	bls.n	80181f6 <__ieee754_acosf+0x36>
 80181ec:	ee30 8a40 	vsub.f32	s16, s0, s0
 80181f0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80181f4:	e7f6      	b.n	80181e4 <__ieee754_acosf+0x24>
 80181f6:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80181fa:	d23c      	bcs.n	8018276 <__ieee754_acosf+0xb6>
 80181fc:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8018200:	f240 80b1 	bls.w	8018366 <__ieee754_acosf+0x1a6>
 8018204:	ee60 7a00 	vmul.f32	s15, s0, s0
 8018208:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8018374 <__ieee754_acosf+0x1b4>
 801820c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8018378 <__ieee754_acosf+0x1b8>
 8018210:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 801837c <__ieee754_acosf+0x1bc>
 8018214:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018218:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8018380 <__ieee754_acosf+0x1c0>
 801821c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018220:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8018384 <__ieee754_acosf+0x1c4>
 8018224:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018228:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8018388 <__ieee754_acosf+0x1c8>
 801822c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018230:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 801838c <__ieee754_acosf+0x1cc>
 8018234:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018238:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8018390 <__ieee754_acosf+0x1d0>
 801823c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8018240:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8018394 <__ieee754_acosf+0x1d4>
 8018244:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018248:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8018398 <__ieee754_acosf+0x1d8>
 801824c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8018250:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018254:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018258:	ee27 7a27 	vmul.f32	s14, s14, s15
 801825c:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 801839c <__ieee754_acosf+0x1dc>
 8018260:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8018264:	eee0 7a46 	vfms.f32	s15, s0, s12
 8018268:	ee70 7a67 	vsub.f32	s15, s0, s15
 801826c:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 80183a0 <__ieee754_acosf+0x1e0>
 8018270:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018274:	e7b6      	b.n	80181e4 <__ieee754_acosf+0x24>
 8018276:	2b00      	cmp	r3, #0
 8018278:	eddf da3e 	vldr	s27, [pc, #248]	@ 8018374 <__ieee754_acosf+0x1b4>
 801827c:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8018378 <__ieee754_acosf+0x1b8>
 8018280:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8018380 <__ieee754_acosf+0x1c0>
 8018284:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8018384 <__ieee754_acosf+0x1c4>
 8018288:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8018388 <__ieee754_acosf+0x1c8>
 801828c:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 801838c <__ieee754_acosf+0x1cc>
 8018290:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8018390 <__ieee754_acosf+0x1d0>
 8018294:	eddf aa39 	vldr	s21, [pc, #228]	@ 801837c <__ieee754_acosf+0x1bc>
 8018298:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8018394 <__ieee754_acosf+0x1d4>
 801829c:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8018398 <__ieee754_acosf+0x1d8>
 80182a0:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80182a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80182a8:	da28      	bge.n	80182fc <__ieee754_acosf+0x13c>
 80182aa:	ee30 8a09 	vadd.f32	s16, s0, s18
 80182ae:	ee28 0a27 	vmul.f32	s0, s16, s15
 80182b2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80182b6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80182ba:	eeac ca80 	vfma.f32	s24, s25, s0
 80182be:	eeaa aa80 	vfma.f32	s20, s21, s0
 80182c2:	eeec ba00 	vfma.f32	s23, s24, s0
 80182c6:	eeea 9a00 	vfma.f32	s19, s20, s0
 80182ca:	eeab ba80 	vfma.f32	s22, s23, s0
 80182ce:	eea9 9a80 	vfma.f32	s18, s19, s0
 80182d2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80182d6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80182da:	f7ff fded 	bl	8017eb8 <__ieee754_sqrtf>
 80182de:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80182e2:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80183a4 <__ieee754_acosf+0x1e4>
 80182e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80182ea:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80182ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 80182f2:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80183a8 <__ieee754_acosf+0x1e8>
 80182f6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80182fa:	e773      	b.n	80181e4 <__ieee754_acosf+0x24>
 80182fc:	ee39 8a40 	vsub.f32	s16, s18, s0
 8018300:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018304:	eeb0 0a48 	vmov.f32	s0, s16
 8018308:	f7ff fdd6 	bl	8017eb8 <__ieee754_sqrtf>
 801830c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8018310:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8018314:	eeac ca88 	vfma.f32	s24, s25, s16
 8018318:	eeaa aa88 	vfma.f32	s20, s21, s16
 801831c:	eeec ba08 	vfma.f32	s23, s24, s16
 8018320:	ee10 3a10 	vmov	r3, s0
 8018324:	eeab ba88 	vfma.f32	s22, s23, s16
 8018328:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801832c:	f023 030f 	bic.w	r3, r3, #15
 8018330:	eeea 9a08 	vfma.f32	s19, s20, s16
 8018334:	ee07 3a90 	vmov	s15, r3
 8018338:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801833c:	eeb0 6a48 	vmov.f32	s12, s16
 8018340:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8018344:	eea9 9a88 	vfma.f32	s18, s19, s16
 8018348:	ee70 6a27 	vadd.f32	s13, s0, s15
 801834c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8018350:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8018354:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8018358:	eea0 7a26 	vfma.f32	s14, s0, s13
 801835c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8018360:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018364:	e73e      	b.n	80181e4 <__ieee754_acosf+0x24>
 8018366:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80183ac <__ieee754_acosf+0x1ec>
 801836a:	e73b      	b.n	80181e4 <__ieee754_acosf+0x24>
 801836c:	40490fdb 	.word	0x40490fdb
 8018370:	00000000 	.word	0x00000000
 8018374:	3811ef08 	.word	0x3811ef08
 8018378:	3a4f7f04 	.word	0x3a4f7f04
 801837c:	bf303361 	.word	0xbf303361
 8018380:	bd241146 	.word	0xbd241146
 8018384:	3e4e0aa8 	.word	0x3e4e0aa8
 8018388:	bea6b090 	.word	0xbea6b090
 801838c:	3e2aaaab 	.word	0x3e2aaaab
 8018390:	3d9dc62e 	.word	0x3d9dc62e
 8018394:	4001572d 	.word	0x4001572d
 8018398:	c019d139 	.word	0xc019d139
 801839c:	33a22168 	.word	0x33a22168
 80183a0:	3fc90fda 	.word	0x3fc90fda
 80183a4:	b3a22168 	.word	0xb3a22168
 80183a8:	40490fda 	.word	0x40490fda
 80183ac:	3fc90fdb 	.word	0x3fc90fdb

080183b0 <__ieee754_asinf>:
 80183b0:	b538      	push	{r3, r4, r5, lr}
 80183b2:	ee10 5a10 	vmov	r5, s0
 80183b6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80183ba:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80183be:	ed2d 8b04 	vpush	{d8-d9}
 80183c2:	d10c      	bne.n	80183de <__ieee754_asinf+0x2e>
 80183c4:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 801853c <__ieee754_asinf+0x18c>
 80183c8:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8018540 <__ieee754_asinf+0x190>
 80183cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80183d0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80183d4:	eeb0 0a67 	vmov.f32	s0, s15
 80183d8:	ecbd 8b04 	vpop	{d8-d9}
 80183dc:	bd38      	pop	{r3, r4, r5, pc}
 80183de:	d904      	bls.n	80183ea <__ieee754_asinf+0x3a>
 80183e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80183e4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80183e8:	e7f6      	b.n	80183d8 <__ieee754_asinf+0x28>
 80183ea:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80183ee:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80183f2:	d20b      	bcs.n	801840c <__ieee754_asinf+0x5c>
 80183f4:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80183f8:	d252      	bcs.n	80184a0 <__ieee754_asinf+0xf0>
 80183fa:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8018544 <__ieee754_asinf+0x194>
 80183fe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8018402:	eef4 7ae8 	vcmpe.f32	s15, s17
 8018406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801840a:	dce5      	bgt.n	80183d8 <__ieee754_asinf+0x28>
 801840c:	f7ff fc8a 	bl	8017d24 <fabsf>
 8018410:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8018414:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018418:	ee28 8a27 	vmul.f32	s16, s16, s15
 801841c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8018548 <__ieee754_asinf+0x198>
 8018420:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 801854c <__ieee754_asinf+0x19c>
 8018424:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8018550 <__ieee754_asinf+0x1a0>
 8018428:	eea8 7a27 	vfma.f32	s14, s16, s15
 801842c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8018554 <__ieee754_asinf+0x1a4>
 8018430:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018434:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8018558 <__ieee754_asinf+0x1a8>
 8018438:	eea7 7a88 	vfma.f32	s14, s15, s16
 801843c:	eddf 7a47 	vldr	s15, [pc, #284]	@ 801855c <__ieee754_asinf+0x1ac>
 8018440:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018444:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8018560 <__ieee754_asinf+0x1b0>
 8018448:	eea7 9a88 	vfma.f32	s18, s15, s16
 801844c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8018564 <__ieee754_asinf+0x1b4>
 8018450:	eee8 7a07 	vfma.f32	s15, s16, s14
 8018454:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8018568 <__ieee754_asinf+0x1b8>
 8018458:	eea7 7a88 	vfma.f32	s14, s15, s16
 801845c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801856c <__ieee754_asinf+0x1bc>
 8018460:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018464:	eeb0 0a48 	vmov.f32	s0, s16
 8018468:	eee7 8a88 	vfma.f32	s17, s15, s16
 801846c:	f7ff fd24 	bl	8017eb8 <__ieee754_sqrtf>
 8018470:	4b3f      	ldr	r3, [pc, #252]	@ (8018570 <__ieee754_asinf+0x1c0>)
 8018472:	ee29 9a08 	vmul.f32	s18, s18, s16
 8018476:	429c      	cmp	r4, r3
 8018478:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801847c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8018480:	d93d      	bls.n	80184fe <__ieee754_asinf+0x14e>
 8018482:	eea0 0a06 	vfma.f32	s0, s0, s12
 8018486:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8018574 <__ieee754_asinf+0x1c4>
 801848a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801848e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8018540 <__ieee754_asinf+0x190>
 8018492:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018496:	2d00      	cmp	r5, #0
 8018498:	bfd8      	it	le
 801849a:	eeb1 0a40 	vnegle.f32	s0, s0
 801849e:	e79b      	b.n	80183d8 <__ieee754_asinf+0x28>
 80184a0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80184a4:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801854c <__ieee754_asinf+0x19c>
 80184a8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8018548 <__ieee754_asinf+0x198>
 80184ac:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8018560 <__ieee754_asinf+0x1b0>
 80184b0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80184b4:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8018554 <__ieee754_asinf+0x1a4>
 80184b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80184bc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8018558 <__ieee754_asinf+0x1a8>
 80184c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80184c4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 801855c <__ieee754_asinf+0x1ac>
 80184c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80184cc:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8018550 <__ieee754_asinf+0x1a0>
 80184d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80184d4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8018564 <__ieee754_asinf+0x1b4>
 80184d8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80184dc:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8018568 <__ieee754_asinf+0x1b8>
 80184e0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80184e4:	eddf 6a21 	vldr	s13, [pc, #132]	@ 801856c <__ieee754_asinf+0x1bc>
 80184e8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80184ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80184f0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80184f4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80184f8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80184fc:	e76c      	b.n	80183d8 <__ieee754_asinf+0x28>
 80184fe:	ee10 3a10 	vmov	r3, s0
 8018502:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8018506:	f023 030f 	bic.w	r3, r3, #15
 801850a:	ee07 3a10 	vmov	s14, r3
 801850e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8018512:	ee70 5a00 	vadd.f32	s11, s0, s0
 8018516:	ee30 0a07 	vadd.f32	s0, s0, s14
 801851a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801853c <__ieee754_asinf+0x18c>
 801851e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8018522:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8018578 <__ieee754_asinf+0x1c8>
 8018526:	eee5 7a66 	vfms.f32	s15, s10, s13
 801852a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801852e:	eeb0 6a40 	vmov.f32	s12, s0
 8018532:	eea7 6a66 	vfms.f32	s12, s14, s13
 8018536:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801853a:	e7aa      	b.n	8018492 <__ieee754_asinf+0xe2>
 801853c:	b33bbd2e 	.word	0xb33bbd2e
 8018540:	3fc90fdb 	.word	0x3fc90fdb
 8018544:	7149f2ca 	.word	0x7149f2ca
 8018548:	3a4f7f04 	.word	0x3a4f7f04
 801854c:	3811ef08 	.word	0x3811ef08
 8018550:	3e2aaaab 	.word	0x3e2aaaab
 8018554:	bd241146 	.word	0xbd241146
 8018558:	3e4e0aa8 	.word	0x3e4e0aa8
 801855c:	bea6b090 	.word	0xbea6b090
 8018560:	3d9dc62e 	.word	0x3d9dc62e
 8018564:	bf303361 	.word	0xbf303361
 8018568:	4001572d 	.word	0x4001572d
 801856c:	c019d139 	.word	0xc019d139
 8018570:	3f799999 	.word	0x3f799999
 8018574:	333bbd2e 	.word	0x333bbd2e
 8018578:	3f490fdb 	.word	0x3f490fdb

0801857c <__ieee754_atan2f>:
 801857c:	ee10 2a90 	vmov	r2, s1
 8018580:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8018584:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8018588:	b510      	push	{r4, lr}
 801858a:	eef0 7a40 	vmov.f32	s15, s0
 801858e:	d806      	bhi.n	801859e <__ieee754_atan2f+0x22>
 8018590:	ee10 0a10 	vmov	r0, s0
 8018594:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8018598:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801859c:	d904      	bls.n	80185a8 <__ieee754_atan2f+0x2c>
 801859e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80185a2:	eeb0 0a67 	vmov.f32	s0, s15
 80185a6:	bd10      	pop	{r4, pc}
 80185a8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80185ac:	d103      	bne.n	80185b6 <__ieee754_atan2f+0x3a>
 80185ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185b2:	f000 be43 	b.w	801923c <atanf>
 80185b6:	1794      	asrs	r4, r2, #30
 80185b8:	f004 0402 	and.w	r4, r4, #2
 80185bc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80185c0:	b943      	cbnz	r3, 80185d4 <__ieee754_atan2f+0x58>
 80185c2:	2c02      	cmp	r4, #2
 80185c4:	d05e      	beq.n	8018684 <__ieee754_atan2f+0x108>
 80185c6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8018698 <__ieee754_atan2f+0x11c>
 80185ca:	2c03      	cmp	r4, #3
 80185cc:	bf08      	it	eq
 80185ce:	eef0 7a47 	vmoveq.f32	s15, s14
 80185d2:	e7e6      	b.n	80185a2 <__ieee754_atan2f+0x26>
 80185d4:	b941      	cbnz	r1, 80185e8 <__ieee754_atan2f+0x6c>
 80185d6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801869c <__ieee754_atan2f+0x120>
 80185da:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80186a0 <__ieee754_atan2f+0x124>
 80185de:	2800      	cmp	r0, #0
 80185e0:	bfb8      	it	lt
 80185e2:	eef0 7a47 	vmovlt.f32	s15, s14
 80185e6:	e7dc      	b.n	80185a2 <__ieee754_atan2f+0x26>
 80185e8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80185ec:	d110      	bne.n	8018610 <__ieee754_atan2f+0x94>
 80185ee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80185f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80185f6:	d107      	bne.n	8018608 <__ieee754_atan2f+0x8c>
 80185f8:	2c02      	cmp	r4, #2
 80185fa:	d846      	bhi.n	801868a <__ieee754_atan2f+0x10e>
 80185fc:	4b29      	ldr	r3, [pc, #164]	@ (80186a4 <__ieee754_atan2f+0x128>)
 80185fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018602:	edd3 7a00 	vldr	s15, [r3]
 8018606:	e7cc      	b.n	80185a2 <__ieee754_atan2f+0x26>
 8018608:	2c02      	cmp	r4, #2
 801860a:	d841      	bhi.n	8018690 <__ieee754_atan2f+0x114>
 801860c:	4b26      	ldr	r3, [pc, #152]	@ (80186a8 <__ieee754_atan2f+0x12c>)
 801860e:	e7f6      	b.n	80185fe <__ieee754_atan2f+0x82>
 8018610:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018614:	d0df      	beq.n	80185d6 <__ieee754_atan2f+0x5a>
 8018616:	1a5b      	subs	r3, r3, r1
 8018618:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801861c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8018620:	da1a      	bge.n	8018658 <__ieee754_atan2f+0xdc>
 8018622:	2a00      	cmp	r2, #0
 8018624:	da01      	bge.n	801862a <__ieee754_atan2f+0xae>
 8018626:	313c      	adds	r1, #60	@ 0x3c
 8018628:	db19      	blt.n	801865e <__ieee754_atan2f+0xe2>
 801862a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801862e:	f7ff fb79 	bl	8017d24 <fabsf>
 8018632:	f000 fe03 	bl	801923c <atanf>
 8018636:	eef0 7a40 	vmov.f32	s15, s0
 801863a:	2c01      	cmp	r4, #1
 801863c:	d012      	beq.n	8018664 <__ieee754_atan2f+0xe8>
 801863e:	2c02      	cmp	r4, #2
 8018640:	d017      	beq.n	8018672 <__ieee754_atan2f+0xf6>
 8018642:	2c00      	cmp	r4, #0
 8018644:	d0ad      	beq.n	80185a2 <__ieee754_atan2f+0x26>
 8018646:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80186ac <__ieee754_atan2f+0x130>
 801864a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801864e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80186b0 <__ieee754_atan2f+0x134>
 8018652:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018656:	e7a4      	b.n	80185a2 <__ieee754_atan2f+0x26>
 8018658:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801869c <__ieee754_atan2f+0x120>
 801865c:	e7ed      	b.n	801863a <__ieee754_atan2f+0xbe>
 801865e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80186b4 <__ieee754_atan2f+0x138>
 8018662:	e7ea      	b.n	801863a <__ieee754_atan2f+0xbe>
 8018664:	ee17 3a90 	vmov	r3, s15
 8018668:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801866c:	ee07 3a90 	vmov	s15, r3
 8018670:	e797      	b.n	80185a2 <__ieee754_atan2f+0x26>
 8018672:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80186ac <__ieee754_atan2f+0x130>
 8018676:	ee77 7a87 	vadd.f32	s15, s15, s14
 801867a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80186b0 <__ieee754_atan2f+0x134>
 801867e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018682:	e78e      	b.n	80185a2 <__ieee754_atan2f+0x26>
 8018684:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80186b0 <__ieee754_atan2f+0x134>
 8018688:	e78b      	b.n	80185a2 <__ieee754_atan2f+0x26>
 801868a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80186b8 <__ieee754_atan2f+0x13c>
 801868e:	e788      	b.n	80185a2 <__ieee754_atan2f+0x26>
 8018690:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80186b4 <__ieee754_atan2f+0x138>
 8018694:	e785      	b.n	80185a2 <__ieee754_atan2f+0x26>
 8018696:	bf00      	nop
 8018698:	c0490fdb 	.word	0xc0490fdb
 801869c:	3fc90fdb 	.word	0x3fc90fdb
 80186a0:	bfc90fdb 	.word	0xbfc90fdb
 80186a4:	0801b158 	.word	0x0801b158
 80186a8:	0801b14c 	.word	0x0801b14c
 80186ac:	33bbbd2e 	.word	0x33bbbd2e
 80186b0:	40490fdb 	.word	0x40490fdb
 80186b4:	00000000 	.word	0x00000000
 80186b8:	3f490fdb 	.word	0x3f490fdb

080186bc <__ieee754_expf>:
 80186bc:	ee10 2a10 	vmov	r2, s0
 80186c0:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 80186c4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80186c8:	d902      	bls.n	80186d0 <__ieee754_expf+0x14>
 80186ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80186ce:	4770      	bx	lr
 80186d0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80186d4:	d106      	bne.n	80186e4 <__ieee754_expf+0x28>
 80186d6:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8018810 <__ieee754_expf+0x154>
 80186da:	2900      	cmp	r1, #0
 80186dc:	bf18      	it	ne
 80186de:	eeb0 0a67 	vmovne.f32	s0, s15
 80186e2:	4770      	bx	lr
 80186e4:	484b      	ldr	r0, [pc, #300]	@ (8018814 <__ieee754_expf+0x158>)
 80186e6:	4282      	cmp	r2, r0
 80186e8:	dd02      	ble.n	80186f0 <__ieee754_expf+0x34>
 80186ea:	2000      	movs	r0, #0
 80186ec:	f000 bf00 	b.w	80194f0 <__math_oflowf>
 80186f0:	2a00      	cmp	r2, #0
 80186f2:	da05      	bge.n	8018700 <__ieee754_expf+0x44>
 80186f4:	4a48      	ldr	r2, [pc, #288]	@ (8018818 <__ieee754_expf+0x15c>)
 80186f6:	4293      	cmp	r3, r2
 80186f8:	d902      	bls.n	8018700 <__ieee754_expf+0x44>
 80186fa:	2000      	movs	r0, #0
 80186fc:	f000 bef2 	b.w	80194e4 <__math_uflowf>
 8018700:	4a46      	ldr	r2, [pc, #280]	@ (801881c <__ieee754_expf+0x160>)
 8018702:	4293      	cmp	r3, r2
 8018704:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8018708:	d952      	bls.n	80187b0 <__ieee754_expf+0xf4>
 801870a:	4a45      	ldr	r2, [pc, #276]	@ (8018820 <__ieee754_expf+0x164>)
 801870c:	4293      	cmp	r3, r2
 801870e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8018712:	d834      	bhi.n	801877e <__ieee754_expf+0xc2>
 8018714:	4b43      	ldr	r3, [pc, #268]	@ (8018824 <__ieee754_expf+0x168>)
 8018716:	4413      	add	r3, r2
 8018718:	ed93 7a00 	vldr	s14, [r3]
 801871c:	4b42      	ldr	r3, [pc, #264]	@ (8018828 <__ieee754_expf+0x16c>)
 801871e:	4413      	add	r3, r2
 8018720:	ee30 7a47 	vsub.f32	s14, s0, s14
 8018724:	f1c1 0201 	rsb	r2, r1, #1
 8018728:	edd3 7a00 	vldr	s15, [r3]
 801872c:	1a52      	subs	r2, r2, r1
 801872e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8018732:	ee20 6a00 	vmul.f32	s12, s0, s0
 8018736:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801882c <__ieee754_expf+0x170>
 801873a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8018830 <__ieee754_expf+0x174>
 801873e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8018742:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8018834 <__ieee754_expf+0x178>
 8018746:	eea6 5a86 	vfma.f32	s10, s13, s12
 801874a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8018838 <__ieee754_expf+0x17c>
 801874e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8018752:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801883c <__ieee754_expf+0x180>
 8018756:	eea6 5a86 	vfma.f32	s10, s13, s12
 801875a:	eef0 6a40 	vmov.f32	s13, s0
 801875e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8018762:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8018766:	ee20 5a26 	vmul.f32	s10, s0, s13
 801876a:	bb92      	cbnz	r2, 80187d2 <__ieee754_expf+0x116>
 801876c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8018770:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8018774:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018778:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801877c:	4770      	bx	lr
 801877e:	4b30      	ldr	r3, [pc, #192]	@ (8018840 <__ieee754_expf+0x184>)
 8018780:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8018844 <__ieee754_expf+0x188>
 8018784:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8018848 <__ieee754_expf+0x18c>
 8018788:	4413      	add	r3, r2
 801878a:	edd3 7a00 	vldr	s15, [r3]
 801878e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018792:	eeb0 7a40 	vmov.f32	s14, s0
 8018796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801879a:	ee17 2a90 	vmov	r2, s15
 801879e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80187a2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80187a6:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801884c <__ieee754_expf+0x190>
 80187aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80187ae:	e7be      	b.n	801872e <__ieee754_expf+0x72>
 80187b0:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 80187b4:	d20b      	bcs.n	80187ce <__ieee754_expf+0x112>
 80187b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8018850 <__ieee754_expf+0x194>
 80187ba:	ee70 6a26 	vadd.f32	s13, s0, s13
 80187be:	eef4 6ae5 	vcmpe.f32	s13, s11
 80187c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187c6:	dd02      	ble.n	80187ce <__ieee754_expf+0x112>
 80187c8:	ee30 0a25 	vadd.f32	s0, s0, s11
 80187cc:	4770      	bx	lr
 80187ce:	2200      	movs	r2, #0
 80187d0:	e7af      	b.n	8018732 <__ieee754_expf+0x76>
 80187d2:	ee36 6a66 	vsub.f32	s12, s12, s13
 80187d6:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 80187da:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80187de:	bfb8      	it	lt
 80187e0:	3264      	addlt	r2, #100	@ 0x64
 80187e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80187e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80187ea:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80187ee:	ee17 3a90 	vmov	r3, s15
 80187f2:	bfab      	itete	ge
 80187f4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80187f8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80187fc:	ee00 3a10 	vmovge	s0, r3
 8018800:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8018854 <__ieee754_expf+0x198>
 8018804:	bfbc      	itt	lt
 8018806:	ee00 3a10 	vmovlt	s0, r3
 801880a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801880e:	4770      	bx	lr
 8018810:	00000000 	.word	0x00000000
 8018814:	42b17217 	.word	0x42b17217
 8018818:	42cff1b5 	.word	0x42cff1b5
 801881c:	3eb17218 	.word	0x3eb17218
 8018820:	3f851591 	.word	0x3f851591
 8018824:	0801b16c 	.word	0x0801b16c
 8018828:	0801b164 	.word	0x0801b164
 801882c:	3331bb4c 	.word	0x3331bb4c
 8018830:	b5ddea0e 	.word	0xb5ddea0e
 8018834:	388ab355 	.word	0x388ab355
 8018838:	bb360b61 	.word	0xbb360b61
 801883c:	3e2aaaab 	.word	0x3e2aaaab
 8018840:	0801b174 	.word	0x0801b174
 8018844:	3fb8aa3b 	.word	0x3fb8aa3b
 8018848:	3f317180 	.word	0x3f317180
 801884c:	3717f7d1 	.word	0x3717f7d1
 8018850:	7149f2ca 	.word	0x7149f2ca
 8018854:	0d800000 	.word	0x0d800000

08018858 <__ieee754_logf>:
 8018858:	ee10 3a10 	vmov	r3, s0
 801885c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8018860:	d106      	bne.n	8018870 <__ieee754_logf+0x18>
 8018862:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80189fc <__ieee754_logf+0x1a4>
 8018866:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8018a00 <__ieee754_logf+0x1a8>
 801886a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801886e:	4770      	bx	lr
 8018870:	2b00      	cmp	r3, #0
 8018872:	461a      	mov	r2, r3
 8018874:	da02      	bge.n	801887c <__ieee754_logf+0x24>
 8018876:	ee30 7a40 	vsub.f32	s14, s0, s0
 801887a:	e7f4      	b.n	8018866 <__ieee754_logf+0xe>
 801887c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018880:	db02      	blt.n	8018888 <__ieee754_logf+0x30>
 8018882:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018886:	4770      	bx	lr
 8018888:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801888c:	bfb8      	it	lt
 801888e:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8018a04 <__ieee754_logf+0x1ac>
 8018892:	485d      	ldr	r0, [pc, #372]	@ (8018a08 <__ieee754_logf+0x1b0>)
 8018894:	bfbe      	ittt	lt
 8018896:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801889a:	f06f 0118 	mvnlt.w	r1, #24
 801889e:	ee17 2a90 	vmovlt	r2, s15
 80188a2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80188a6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80188aa:	4410      	add	r0, r2
 80188ac:	bfa8      	it	ge
 80188ae:	2100      	movge	r1, #0
 80188b0:	3b7f      	subs	r3, #127	@ 0x7f
 80188b2:	440b      	add	r3, r1
 80188b4:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 80188b8:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 80188bc:	4311      	orrs	r1, r2
 80188be:	ee00 1a10 	vmov	s0, r1
 80188c2:	4952      	ldr	r1, [pc, #328]	@ (8018a0c <__ieee754_logf+0x1b4>)
 80188c4:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 80188c8:	f102 000f 	add.w	r0, r2, #15
 80188cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80188d0:	4001      	ands	r1, r0
 80188d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80188d6:	bb89      	cbnz	r1, 801893c <__ieee754_logf+0xe4>
 80188d8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80188dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188e0:	d10f      	bne.n	8018902 <__ieee754_logf+0xaa>
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	f000 8087 	beq.w	80189f6 <__ieee754_logf+0x19e>
 80188e8:	ee07 3a90 	vmov	s15, r3
 80188ec:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8018a10 <__ieee754_logf+0x1b8>
 80188f0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8018a14 <__ieee754_logf+0x1bc>
 80188f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80188f8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80188fc:	eea7 0a87 	vfma.f32	s0, s15, s14
 8018900:	4770      	bx	lr
 8018902:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8018a18 <__ieee754_logf+0x1c0>
 8018906:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801890a:	eee0 7a66 	vfms.f32	s15, s0, s13
 801890e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018916:	b913      	cbnz	r3, 801891e <__ieee754_logf+0xc6>
 8018918:	ee30 0a47 	vsub.f32	s0, s0, s14
 801891c:	4770      	bx	lr
 801891e:	ee07 3a90 	vmov	s15, r3
 8018922:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8018a10 <__ieee754_logf+0x1b8>
 8018926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801892a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801892e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8018932:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8018a14 <__ieee754_logf+0x1bc>
 8018936:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801893a:	4770      	bx	lr
 801893c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8018940:	ee70 7a27 	vadd.f32	s15, s0, s15
 8018944:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8018a1c <__ieee754_logf+0x1c4>
 8018948:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8018a20 <__ieee754_logf+0x1c8>
 801894c:	4935      	ldr	r1, [pc, #212]	@ (8018a24 <__ieee754_logf+0x1cc>)
 801894e:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8018952:	4411      	add	r1, r2
 8018954:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8018958:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 801895c:	430a      	orrs	r2, r1
 801895e:	2a00      	cmp	r2, #0
 8018960:	ee07 3a90 	vmov	s15, r3
 8018964:	ee26 5a06 	vmul.f32	s10, s12, s12
 8018968:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801896c:	ee25 7a05 	vmul.f32	s14, s10, s10
 8018970:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8018a28 <__ieee754_logf+0x1d0>
 8018974:	eee7 7a25 	vfma.f32	s15, s14, s11
 8018978:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8018a2c <__ieee754_logf+0x1d4>
 801897c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8018980:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8018a30 <__ieee754_logf+0x1d8>
 8018984:	eee7 7a24 	vfma.f32	s15, s14, s9
 8018988:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8018a34 <__ieee754_logf+0x1dc>
 801898c:	eee7 4a87 	vfma.f32	s9, s15, s14
 8018990:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8018a38 <__ieee754_logf+0x1e0>
 8018994:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018998:	ee67 7a85 	vmul.f32	s15, s15, s10
 801899c:	eee5 7a87 	vfma.f32	s15, s11, s14
 80189a0:	dd1a      	ble.n	80189d8 <__ieee754_logf+0x180>
 80189a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80189a6:	ee20 7a07 	vmul.f32	s14, s0, s14
 80189aa:	ee27 7a00 	vmul.f32	s14, s14, s0
 80189ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80189b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80189b6:	b913      	cbnz	r3, 80189be <__ieee754_logf+0x166>
 80189b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80189bc:	e7ac      	b.n	8018918 <__ieee754_logf+0xc0>
 80189be:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8018a10 <__ieee754_logf+0x1b8>
 80189c2:	eee6 7a86 	vfma.f32	s15, s13, s12
 80189c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80189ca:	ee37 0a40 	vsub.f32	s0, s14, s0
 80189ce:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8018a14 <__ieee754_logf+0x1bc>
 80189d2:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80189d6:	4770      	bx	lr
 80189d8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80189dc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80189e0:	b913      	cbnz	r3, 80189e8 <__ieee754_logf+0x190>
 80189e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80189e6:	4770      	bx	lr
 80189e8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8018a10 <__ieee754_logf+0x1b8>
 80189ec:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80189f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80189f4:	e7eb      	b.n	80189ce <__ieee754_logf+0x176>
 80189f6:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8018a00 <__ieee754_logf+0x1a8>
 80189fa:	4770      	bx	lr
 80189fc:	cc000000 	.word	0xcc000000
 8018a00:	00000000 	.word	0x00000000
 8018a04:	4c000000 	.word	0x4c000000
 8018a08:	004afb20 	.word	0x004afb20
 8018a0c:	007ffff0 	.word	0x007ffff0
 8018a10:	3717f7d1 	.word	0x3717f7d1
 8018a14:	3f317180 	.word	0x3f317180
 8018a18:	3eaaaaab 	.word	0x3eaaaaab
 8018a1c:	3e1cd04f 	.word	0x3e1cd04f
 8018a20:	3e178897 	.word	0x3e178897
 8018a24:	ffcf5c30 	.word	0xffcf5c30
 8018a28:	3e638e29 	.word	0x3e638e29
 8018a2c:	3ecccccd 	.word	0x3ecccccd
 8018a30:	3e3a3325 	.word	0x3e3a3325
 8018a34:	3e924925 	.word	0x3e924925
 8018a38:	3f2aaaab 	.word	0x3f2aaaab

08018a3c <__ieee754_powf>:
 8018a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a40:	ee10 4a90 	vmov	r4, s1
 8018a44:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8018a48:	ed2d 8b02 	vpush	{d8}
 8018a4c:	ee10 6a10 	vmov	r6, s0
 8018a50:	eeb0 8a40 	vmov.f32	s16, s0
 8018a54:	eef0 8a60 	vmov.f32	s17, s1
 8018a58:	d10c      	bne.n	8018a74 <__ieee754_powf+0x38>
 8018a5a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8018a5e:	0076      	lsls	r6, r6, #1
 8018a60:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8018a64:	f240 829c 	bls.w	8018fa0 <__ieee754_powf+0x564>
 8018a68:	ee38 0a28 	vadd.f32	s0, s16, s17
 8018a6c:	ecbd 8b02 	vpop	{d8}
 8018a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a74:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8018a78:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8018a7c:	d802      	bhi.n	8018a84 <__ieee754_powf+0x48>
 8018a7e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018a82:	d908      	bls.n	8018a96 <__ieee754_powf+0x5a>
 8018a84:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8018a88:	d1ee      	bne.n	8018a68 <__ieee754_powf+0x2c>
 8018a8a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8018a8e:	0064      	lsls	r4, r4, #1
 8018a90:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8018a94:	e7e6      	b.n	8018a64 <__ieee754_powf+0x28>
 8018a96:	2e00      	cmp	r6, #0
 8018a98:	da1e      	bge.n	8018ad8 <__ieee754_powf+0x9c>
 8018a9a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8018a9e:	d22b      	bcs.n	8018af8 <__ieee754_powf+0xbc>
 8018aa0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8018aa4:	d332      	bcc.n	8018b0c <__ieee754_powf+0xd0>
 8018aa6:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8018aaa:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8018aae:	fa49 f503 	asr.w	r5, r9, r3
 8018ab2:	fa05 f303 	lsl.w	r3, r5, r3
 8018ab6:	454b      	cmp	r3, r9
 8018ab8:	d126      	bne.n	8018b08 <__ieee754_powf+0xcc>
 8018aba:	f005 0501 	and.w	r5, r5, #1
 8018abe:	f1c5 0502 	rsb	r5, r5, #2
 8018ac2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8018ac6:	d122      	bne.n	8018b0e <__ieee754_powf+0xd2>
 8018ac8:	2c00      	cmp	r4, #0
 8018aca:	f280 826f 	bge.w	8018fac <__ieee754_powf+0x570>
 8018ace:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018ad2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8018ad6:	e7c9      	b.n	8018a6c <__ieee754_powf+0x30>
 8018ad8:	2500      	movs	r5, #0
 8018ada:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018ade:	d1f0      	bne.n	8018ac2 <__ieee754_powf+0x86>
 8018ae0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8018ae4:	f000 825c 	beq.w	8018fa0 <__ieee754_powf+0x564>
 8018ae8:	d908      	bls.n	8018afc <__ieee754_powf+0xc0>
 8018aea:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8018e4c <__ieee754_powf+0x410>
 8018aee:	2c00      	cmp	r4, #0
 8018af0:	bfa8      	it	ge
 8018af2:	eeb0 0a68 	vmovge.f32	s0, s17
 8018af6:	e7b9      	b.n	8018a6c <__ieee754_powf+0x30>
 8018af8:	2502      	movs	r5, #2
 8018afa:	e7ee      	b.n	8018ada <__ieee754_powf+0x9e>
 8018afc:	2c00      	cmp	r4, #0
 8018afe:	f280 8252 	bge.w	8018fa6 <__ieee754_powf+0x56a>
 8018b02:	eeb1 0a68 	vneg.f32	s0, s17
 8018b06:	e7b1      	b.n	8018a6c <__ieee754_powf+0x30>
 8018b08:	2500      	movs	r5, #0
 8018b0a:	e7da      	b.n	8018ac2 <__ieee754_powf+0x86>
 8018b0c:	2500      	movs	r5, #0
 8018b0e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018b12:	d102      	bne.n	8018b1a <__ieee754_powf+0xde>
 8018b14:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018b18:	e7a8      	b.n	8018a6c <__ieee754_powf+0x30>
 8018b1a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8018b1e:	d109      	bne.n	8018b34 <__ieee754_powf+0xf8>
 8018b20:	2e00      	cmp	r6, #0
 8018b22:	db07      	blt.n	8018b34 <__ieee754_powf+0xf8>
 8018b24:	eeb0 0a48 	vmov.f32	s0, s16
 8018b28:	ecbd 8b02 	vpop	{d8}
 8018b2c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b30:	f7ff b9c2 	b.w	8017eb8 <__ieee754_sqrtf>
 8018b34:	eeb0 0a48 	vmov.f32	s0, s16
 8018b38:	f7ff f8f4 	bl	8017d24 <fabsf>
 8018b3c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8018b40:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8018b44:	4647      	mov	r7, r8
 8018b46:	d002      	beq.n	8018b4e <__ieee754_powf+0x112>
 8018b48:	f1b8 0f00 	cmp.w	r8, #0
 8018b4c:	d117      	bne.n	8018b7e <__ieee754_powf+0x142>
 8018b4e:	2c00      	cmp	r4, #0
 8018b50:	bfbc      	itt	lt
 8018b52:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8018b56:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018b5a:	2e00      	cmp	r6, #0
 8018b5c:	da86      	bge.n	8018a6c <__ieee754_powf+0x30>
 8018b5e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8018b62:	ea58 0805 	orrs.w	r8, r8, r5
 8018b66:	d104      	bne.n	8018b72 <__ieee754_powf+0x136>
 8018b68:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018b6c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018b70:	e77c      	b.n	8018a6c <__ieee754_powf+0x30>
 8018b72:	2d01      	cmp	r5, #1
 8018b74:	f47f af7a 	bne.w	8018a6c <__ieee754_powf+0x30>
 8018b78:	eeb1 0a40 	vneg.f32	s0, s0
 8018b7c:	e776      	b.n	8018a6c <__ieee754_powf+0x30>
 8018b7e:	0ff0      	lsrs	r0, r6, #31
 8018b80:	3801      	subs	r0, #1
 8018b82:	ea55 0300 	orrs.w	r3, r5, r0
 8018b86:	d104      	bne.n	8018b92 <__ieee754_powf+0x156>
 8018b88:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018b8c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018b90:	e76c      	b.n	8018a6c <__ieee754_powf+0x30>
 8018b92:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8018b96:	d973      	bls.n	8018c80 <__ieee754_powf+0x244>
 8018b98:	4bad      	ldr	r3, [pc, #692]	@ (8018e50 <__ieee754_powf+0x414>)
 8018b9a:	4598      	cmp	r8, r3
 8018b9c:	d808      	bhi.n	8018bb0 <__ieee754_powf+0x174>
 8018b9e:	2c00      	cmp	r4, #0
 8018ba0:	da0b      	bge.n	8018bba <__ieee754_powf+0x17e>
 8018ba2:	2000      	movs	r0, #0
 8018ba4:	ecbd 8b02 	vpop	{d8}
 8018ba8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bac:	f000 bca0 	b.w	80194f0 <__math_oflowf>
 8018bb0:	4ba8      	ldr	r3, [pc, #672]	@ (8018e54 <__ieee754_powf+0x418>)
 8018bb2:	4598      	cmp	r8, r3
 8018bb4:	d908      	bls.n	8018bc8 <__ieee754_powf+0x18c>
 8018bb6:	2c00      	cmp	r4, #0
 8018bb8:	dcf3      	bgt.n	8018ba2 <__ieee754_powf+0x166>
 8018bba:	2000      	movs	r0, #0
 8018bbc:	ecbd 8b02 	vpop	{d8}
 8018bc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bc4:	f000 bc8e 	b.w	80194e4 <__math_uflowf>
 8018bc8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018bcc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018bd0:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8018e58 <__ieee754_powf+0x41c>
 8018bd4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8018bd8:	eee0 6a67 	vfms.f32	s13, s0, s15
 8018bdc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018be0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8018be4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018bec:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8018e5c <__ieee754_powf+0x420>
 8018bf0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8018bf4:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8018e60 <__ieee754_powf+0x424>
 8018bf8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018bfc:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8018e64 <__ieee754_powf+0x428>
 8018c00:	eef0 6a67 	vmov.f32	s13, s15
 8018c04:	eee0 6a07 	vfma.f32	s13, s0, s14
 8018c08:	ee16 3a90 	vmov	r3, s13
 8018c0c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8018c10:	f023 030f 	bic.w	r3, r3, #15
 8018c14:	ee06 3a90 	vmov	s13, r3
 8018c18:	eee0 6a47 	vfms.f32	s13, s0, s14
 8018c1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018c20:	3d01      	subs	r5, #1
 8018c22:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8018c26:	4305      	orrs	r5, r0
 8018c28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018c2c:	f024 040f 	bic.w	r4, r4, #15
 8018c30:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8018c34:	bf18      	it	ne
 8018c36:	eeb0 8a47 	vmovne.f32	s16, s14
 8018c3a:	ee07 4a10 	vmov	s14, r4
 8018c3e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018c42:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8018c46:	ee07 3a90 	vmov	s15, r3
 8018c4a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8018c4e:	ee07 4a10 	vmov	s14, r4
 8018c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018c56:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018c5a:	ee17 1a10 	vmov	r1, s14
 8018c5e:	2900      	cmp	r1, #0
 8018c60:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018c64:	f340 80dd 	ble.w	8018e22 <__ieee754_powf+0x3e6>
 8018c68:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8018c6c:	f240 80ca 	bls.w	8018e04 <__ieee754_powf+0x3c8>
 8018c70:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c78:	bf4c      	ite	mi
 8018c7a:	2001      	movmi	r0, #1
 8018c7c:	2000      	movpl	r0, #0
 8018c7e:	e791      	b.n	8018ba4 <__ieee754_powf+0x168>
 8018c80:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8018c84:	bf01      	itttt	eq
 8018c86:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8018e68 <__ieee754_powf+0x42c>
 8018c8a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8018c8e:	f06f 0317 	mvneq.w	r3, #23
 8018c92:	ee17 7a90 	vmoveq	r7, s15
 8018c96:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8018c9a:	bf18      	it	ne
 8018c9c:	2300      	movne	r3, #0
 8018c9e:	3a7f      	subs	r2, #127	@ 0x7f
 8018ca0:	441a      	add	r2, r3
 8018ca2:	4b72      	ldr	r3, [pc, #456]	@ (8018e6c <__ieee754_powf+0x430>)
 8018ca4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8018ca8:	429f      	cmp	r7, r3
 8018caa:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8018cae:	dd06      	ble.n	8018cbe <__ieee754_powf+0x282>
 8018cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8018e70 <__ieee754_powf+0x434>)
 8018cb2:	429f      	cmp	r7, r3
 8018cb4:	f340 80a4 	ble.w	8018e00 <__ieee754_powf+0x3c4>
 8018cb8:	3201      	adds	r2, #1
 8018cba:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8018cbe:	2600      	movs	r6, #0
 8018cc0:	4b6c      	ldr	r3, [pc, #432]	@ (8018e74 <__ieee754_powf+0x438>)
 8018cc2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8018cc6:	ee07 1a10 	vmov	s14, r1
 8018cca:	edd3 5a00 	vldr	s11, [r3]
 8018cce:	4b6a      	ldr	r3, [pc, #424]	@ (8018e78 <__ieee754_powf+0x43c>)
 8018cd0:	ee75 7a87 	vadd.f32	s15, s11, s14
 8018cd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018cd8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8018cdc:	1049      	asrs	r1, r1, #1
 8018cde:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8018ce2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8018ce6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8018cea:	ee37 6a65 	vsub.f32	s12, s14, s11
 8018cee:	ee07 1a90 	vmov	s15, r1
 8018cf2:	ee26 5a24 	vmul.f32	s10, s12, s9
 8018cf6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8018cfa:	ee15 7a10 	vmov	r7, s10
 8018cfe:	401f      	ands	r7, r3
 8018d00:	ee06 7a90 	vmov	s13, r7
 8018d04:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8018d08:	ee37 7a65 	vsub.f32	s14, s14, s11
 8018d0c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8018d10:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8018d14:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8018e7c <__ieee754_powf+0x440>
 8018d18:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8018e80 <__ieee754_powf+0x444>
 8018d1c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8018d20:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8018e84 <__ieee754_powf+0x448>
 8018d24:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018d28:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8018e58 <__ieee754_powf+0x41c>
 8018d2c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018d30:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8018e88 <__ieee754_powf+0x44c>
 8018d34:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018d38:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8018e8c <__ieee754_powf+0x450>
 8018d3c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018d40:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018d44:	ee35 7a26 	vadd.f32	s14, s10, s13
 8018d48:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8018d4c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018d50:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8018d54:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8018d58:	eef0 5a67 	vmov.f32	s11, s15
 8018d5c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8018d60:	ee75 5a87 	vadd.f32	s11, s11, s14
 8018d64:	ee15 1a90 	vmov	r1, s11
 8018d68:	4019      	ands	r1, r3
 8018d6a:	ee05 1a90 	vmov	s11, r1
 8018d6e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8018d72:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8018d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018d7a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018d7e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018d82:	eeb0 6a67 	vmov.f32	s12, s15
 8018d86:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018d8a:	ee16 1a10 	vmov	r1, s12
 8018d8e:	4019      	ands	r1, r3
 8018d90:	ee06 1a10 	vmov	s12, r1
 8018d94:	eeb0 7a46 	vmov.f32	s14, s12
 8018d98:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8018d9c:	493c      	ldr	r1, [pc, #240]	@ (8018e90 <__ieee754_powf+0x454>)
 8018d9e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8018da2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018da6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8018e94 <__ieee754_powf+0x458>
 8018daa:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8018e98 <__ieee754_powf+0x45c>
 8018dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018db2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8018e9c <__ieee754_powf+0x460>
 8018db6:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018dba:	ed91 7a00 	vldr	s14, [r1]
 8018dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018dc2:	ee07 2a10 	vmov	s14, r2
 8018dc6:	eef0 6a67 	vmov.f32	s13, s15
 8018dca:	4a35      	ldr	r2, [pc, #212]	@ (8018ea0 <__ieee754_powf+0x464>)
 8018dcc:	eee6 6a25 	vfma.f32	s13, s12, s11
 8018dd0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8018dd4:	ed92 5a00 	vldr	s10, [r2]
 8018dd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018ddc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018de0:	ee76 6a87 	vadd.f32	s13, s13, s14
 8018de4:	ee16 2a90 	vmov	r2, s13
 8018de8:	4013      	ands	r3, r2
 8018dea:	ee06 3a90 	vmov	s13, r3
 8018dee:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8018df2:	ee37 7a45 	vsub.f32	s14, s14, s10
 8018df6:	eea6 7a65 	vfms.f32	s14, s12, s11
 8018dfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018dfe:	e70f      	b.n	8018c20 <__ieee754_powf+0x1e4>
 8018e00:	2601      	movs	r6, #1
 8018e02:	e75d      	b.n	8018cc0 <__ieee754_powf+0x284>
 8018e04:	d152      	bne.n	8018eac <__ieee754_powf+0x470>
 8018e06:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8018ea4 <__ieee754_powf+0x468>
 8018e0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018e0e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8018e12:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e1a:	f73f af29 	bgt.w	8018c70 <__ieee754_powf+0x234>
 8018e1e:	2386      	movs	r3, #134	@ 0x86
 8018e20:	e048      	b.n	8018eb4 <__ieee754_powf+0x478>
 8018e22:	4a21      	ldr	r2, [pc, #132]	@ (8018ea8 <__ieee754_powf+0x46c>)
 8018e24:	4293      	cmp	r3, r2
 8018e26:	d907      	bls.n	8018e38 <__ieee754_powf+0x3fc>
 8018e28:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e30:	bf4c      	ite	mi
 8018e32:	2001      	movmi	r0, #1
 8018e34:	2000      	movpl	r0, #0
 8018e36:	e6c1      	b.n	8018bbc <__ieee754_powf+0x180>
 8018e38:	d138      	bne.n	8018eac <__ieee754_powf+0x470>
 8018e3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018e3e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8018e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e46:	dbea      	blt.n	8018e1e <__ieee754_powf+0x3e2>
 8018e48:	e7ee      	b.n	8018e28 <__ieee754_powf+0x3ec>
 8018e4a:	bf00      	nop
 8018e4c:	00000000 	.word	0x00000000
 8018e50:	3f7ffff3 	.word	0x3f7ffff3
 8018e54:	3f800007 	.word	0x3f800007
 8018e58:	3eaaaaab 	.word	0x3eaaaaab
 8018e5c:	3fb8aa3b 	.word	0x3fb8aa3b
 8018e60:	36eca570 	.word	0x36eca570
 8018e64:	3fb8aa00 	.word	0x3fb8aa00
 8018e68:	4b800000 	.word	0x4b800000
 8018e6c:	001cc471 	.word	0x001cc471
 8018e70:	005db3d6 	.word	0x005db3d6
 8018e74:	0801b18c 	.word	0x0801b18c
 8018e78:	fffff000 	.word	0xfffff000
 8018e7c:	3e6c3255 	.word	0x3e6c3255
 8018e80:	3e53f142 	.word	0x3e53f142
 8018e84:	3e8ba305 	.word	0x3e8ba305
 8018e88:	3edb6db7 	.word	0x3edb6db7
 8018e8c:	3f19999a 	.word	0x3f19999a
 8018e90:	0801b17c 	.word	0x0801b17c
 8018e94:	3f76384f 	.word	0x3f76384f
 8018e98:	3f763800 	.word	0x3f763800
 8018e9c:	369dc3a0 	.word	0x369dc3a0
 8018ea0:	0801b184 	.word	0x0801b184
 8018ea4:	3338aa3c 	.word	0x3338aa3c
 8018ea8:	43160000 	.word	0x43160000
 8018eac:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8018eb0:	d971      	bls.n	8018f96 <__ieee754_powf+0x55a>
 8018eb2:	15db      	asrs	r3, r3, #23
 8018eb4:	3b7e      	subs	r3, #126	@ 0x7e
 8018eb6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018eba:	4118      	asrs	r0, r3
 8018ebc:	4408      	add	r0, r1
 8018ebe:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018ec2:	4a3c      	ldr	r2, [pc, #240]	@ (8018fb4 <__ieee754_powf+0x578>)
 8018ec4:	3b7f      	subs	r3, #127	@ 0x7f
 8018ec6:	411a      	asrs	r2, r3
 8018ec8:	4002      	ands	r2, r0
 8018eca:	ee07 2a10 	vmov	s14, r2
 8018ece:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8018ed2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8018ed6:	f1c3 0317 	rsb	r3, r3, #23
 8018eda:	4118      	asrs	r0, r3
 8018edc:	2900      	cmp	r1, #0
 8018ede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018ee2:	bfb8      	it	lt
 8018ee4:	4240      	neglt	r0, r0
 8018ee6:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8018eea:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8018fb8 <__ieee754_powf+0x57c>
 8018eee:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8018fbc <__ieee754_powf+0x580>
 8018ef2:	ee17 3a10 	vmov	r3, s14
 8018ef6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8018efa:	f023 030f 	bic.w	r3, r3, #15
 8018efe:	ee07 3a10 	vmov	s14, r3
 8018f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018f06:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018f0a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018f0e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8018fc0 <__ieee754_powf+0x584>
 8018f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018f16:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8018f1a:	eef0 6a67 	vmov.f32	s13, s15
 8018f1e:	eee7 6a06 	vfma.f32	s13, s14, s12
 8018f22:	eef0 5a66 	vmov.f32	s11, s13
 8018f26:	eee7 5a46 	vfms.f32	s11, s14, s12
 8018f2a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8018f2e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8018f32:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8018fc4 <__ieee754_powf+0x588>
 8018f36:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8018fc8 <__ieee754_powf+0x58c>
 8018f3a:	eea7 6a25 	vfma.f32	s12, s14, s11
 8018f3e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8018fcc <__ieee754_powf+0x590>
 8018f42:	eee6 5a07 	vfma.f32	s11, s12, s14
 8018f46:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8018fd0 <__ieee754_powf+0x594>
 8018f4a:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018f4e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8018fd4 <__ieee754_powf+0x598>
 8018f52:	eee6 5a07 	vfma.f32	s11, s12, s14
 8018f56:	eeb0 6a66 	vmov.f32	s12, s13
 8018f5a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8018f5e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8018f62:	ee66 5a86 	vmul.f32	s11, s13, s12
 8018f66:	ee36 6a47 	vsub.f32	s12, s12, s14
 8018f6a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8018f6e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8018f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018f76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018f7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018f7e:	ee10 3a10 	vmov	r3, s0
 8018f82:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8018f86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8018f8a:	da06      	bge.n	8018f9a <__ieee754_powf+0x55e>
 8018f8c:	f000 fa2a 	bl	80193e4 <scalbnf>
 8018f90:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018f94:	e56a      	b.n	8018a6c <__ieee754_powf+0x30>
 8018f96:	2000      	movs	r0, #0
 8018f98:	e7a5      	b.n	8018ee6 <__ieee754_powf+0x4aa>
 8018f9a:	ee00 3a10 	vmov	s0, r3
 8018f9e:	e7f7      	b.n	8018f90 <__ieee754_powf+0x554>
 8018fa0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018fa4:	e562      	b.n	8018a6c <__ieee754_powf+0x30>
 8018fa6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8018fd8 <__ieee754_powf+0x59c>
 8018faa:	e55f      	b.n	8018a6c <__ieee754_powf+0x30>
 8018fac:	eeb0 0a48 	vmov.f32	s0, s16
 8018fb0:	e55c      	b.n	8018a6c <__ieee754_powf+0x30>
 8018fb2:	bf00      	nop
 8018fb4:	ff800000 	.word	0xff800000
 8018fb8:	3f317218 	.word	0x3f317218
 8018fbc:	3f317200 	.word	0x3f317200
 8018fc0:	35bfbe8c 	.word	0x35bfbe8c
 8018fc4:	b5ddea0e 	.word	0xb5ddea0e
 8018fc8:	3331bb4c 	.word	0x3331bb4c
 8018fcc:	388ab355 	.word	0x388ab355
 8018fd0:	bb360b61 	.word	0xbb360b61
 8018fd4:	3e2aaaab 	.word	0x3e2aaaab
 8018fd8:	00000000 	.word	0x00000000

08018fdc <__ieee754_rem_pio2f>:
 8018fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fde:	ee10 6a10 	vmov	r6, s0
 8018fe2:	4b88      	ldr	r3, [pc, #544]	@ (8019204 <__ieee754_rem_pio2f+0x228>)
 8018fe4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8018fe8:	429d      	cmp	r5, r3
 8018fea:	b087      	sub	sp, #28
 8018fec:	4604      	mov	r4, r0
 8018fee:	d805      	bhi.n	8018ffc <__ieee754_rem_pio2f+0x20>
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	ed80 0a00 	vstr	s0, [r0]
 8018ff6:	6043      	str	r3, [r0, #4]
 8018ff8:	2000      	movs	r0, #0
 8018ffa:	e022      	b.n	8019042 <__ieee754_rem_pio2f+0x66>
 8018ffc:	4b82      	ldr	r3, [pc, #520]	@ (8019208 <__ieee754_rem_pio2f+0x22c>)
 8018ffe:	429d      	cmp	r5, r3
 8019000:	d83a      	bhi.n	8019078 <__ieee754_rem_pio2f+0x9c>
 8019002:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8019006:	2e00      	cmp	r6, #0
 8019008:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801920c <__ieee754_rem_pio2f+0x230>
 801900c:	4a80      	ldr	r2, [pc, #512]	@ (8019210 <__ieee754_rem_pio2f+0x234>)
 801900e:	f023 030f 	bic.w	r3, r3, #15
 8019012:	dd18      	ble.n	8019046 <__ieee754_rem_pio2f+0x6a>
 8019014:	4293      	cmp	r3, r2
 8019016:	ee70 7a47 	vsub.f32	s15, s0, s14
 801901a:	bf09      	itett	eq
 801901c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8019214 <__ieee754_rem_pio2f+0x238>
 8019020:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8019218 <__ieee754_rem_pio2f+0x23c>
 8019024:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801921c <__ieee754_rem_pio2f+0x240>
 8019028:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801902c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8019030:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019034:	ed80 7a00 	vstr	s14, [r0]
 8019038:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801903c:	edc0 7a01 	vstr	s15, [r0, #4]
 8019040:	2001      	movs	r0, #1
 8019042:	b007      	add	sp, #28
 8019044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019046:	4293      	cmp	r3, r2
 8019048:	ee70 7a07 	vadd.f32	s15, s0, s14
 801904c:	bf09      	itett	eq
 801904e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8019214 <__ieee754_rem_pio2f+0x238>
 8019052:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8019218 <__ieee754_rem_pio2f+0x23c>
 8019056:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801921c <__ieee754_rem_pio2f+0x240>
 801905a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801905e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019066:	ed80 7a00 	vstr	s14, [r0]
 801906a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801906e:	edc0 7a01 	vstr	s15, [r0, #4]
 8019072:	f04f 30ff 	mov.w	r0, #4294967295
 8019076:	e7e4      	b.n	8019042 <__ieee754_rem_pio2f+0x66>
 8019078:	4b69      	ldr	r3, [pc, #420]	@ (8019220 <__ieee754_rem_pio2f+0x244>)
 801907a:	429d      	cmp	r5, r3
 801907c:	d873      	bhi.n	8019166 <__ieee754_rem_pio2f+0x18a>
 801907e:	f7fe fe51 	bl	8017d24 <fabsf>
 8019082:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8019224 <__ieee754_rem_pio2f+0x248>
 8019086:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801908a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801908e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019092:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019096:	ee17 0a90 	vmov	r0, s15
 801909a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801920c <__ieee754_rem_pio2f+0x230>
 801909e:	eea7 0a67 	vfms.f32	s0, s14, s15
 80190a2:	281f      	cmp	r0, #31
 80190a4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019218 <__ieee754_rem_pio2f+0x23c>
 80190a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80190ac:	eeb1 6a47 	vneg.f32	s12, s14
 80190b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80190b4:	ee16 1a90 	vmov	r1, s13
 80190b8:	dc09      	bgt.n	80190ce <__ieee754_rem_pio2f+0xf2>
 80190ba:	4a5b      	ldr	r2, [pc, #364]	@ (8019228 <__ieee754_rem_pio2f+0x24c>)
 80190bc:	1e47      	subs	r7, r0, #1
 80190be:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80190c2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80190c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80190ca:	4293      	cmp	r3, r2
 80190cc:	d107      	bne.n	80190de <__ieee754_rem_pio2f+0x102>
 80190ce:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80190d2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80190d6:	2a08      	cmp	r2, #8
 80190d8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80190dc:	dc14      	bgt.n	8019108 <__ieee754_rem_pio2f+0x12c>
 80190de:	6021      	str	r1, [r4, #0]
 80190e0:	ed94 7a00 	vldr	s14, [r4]
 80190e4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80190e8:	2e00      	cmp	r6, #0
 80190ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80190ee:	ed84 0a01 	vstr	s0, [r4, #4]
 80190f2:	daa6      	bge.n	8019042 <__ieee754_rem_pio2f+0x66>
 80190f4:	eeb1 7a47 	vneg.f32	s14, s14
 80190f8:	eeb1 0a40 	vneg.f32	s0, s0
 80190fc:	ed84 7a00 	vstr	s14, [r4]
 8019100:	ed84 0a01 	vstr	s0, [r4, #4]
 8019104:	4240      	negs	r0, r0
 8019106:	e79c      	b.n	8019042 <__ieee754_rem_pio2f+0x66>
 8019108:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8019214 <__ieee754_rem_pio2f+0x238>
 801910c:	eef0 6a40 	vmov.f32	s13, s0
 8019110:	eee6 6a25 	vfma.f32	s13, s12, s11
 8019114:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019118:	eee6 7a25 	vfma.f32	s15, s12, s11
 801911c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801921c <__ieee754_rem_pio2f+0x240>
 8019120:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8019124:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8019128:	ee15 2a90 	vmov	r2, s11
 801912c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019130:	1a5b      	subs	r3, r3, r1
 8019132:	2b19      	cmp	r3, #25
 8019134:	dc04      	bgt.n	8019140 <__ieee754_rem_pio2f+0x164>
 8019136:	edc4 5a00 	vstr	s11, [r4]
 801913a:	eeb0 0a66 	vmov.f32	s0, s13
 801913e:	e7cf      	b.n	80190e0 <__ieee754_rem_pio2f+0x104>
 8019140:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801922c <__ieee754_rem_pio2f+0x250>
 8019144:	eeb0 0a66 	vmov.f32	s0, s13
 8019148:	eea6 0a25 	vfma.f32	s0, s12, s11
 801914c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019150:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8019230 <__ieee754_rem_pio2f+0x254>
 8019154:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019158:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801915c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019160:	ed84 7a00 	vstr	s14, [r4]
 8019164:	e7bc      	b.n	80190e0 <__ieee754_rem_pio2f+0x104>
 8019166:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801916a:	d306      	bcc.n	801917a <__ieee754_rem_pio2f+0x19e>
 801916c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019170:	edc0 7a01 	vstr	s15, [r0, #4]
 8019174:	edc0 7a00 	vstr	s15, [r0]
 8019178:	e73e      	b.n	8018ff8 <__ieee754_rem_pio2f+0x1c>
 801917a:	15ea      	asrs	r2, r5, #23
 801917c:	3a86      	subs	r2, #134	@ 0x86
 801917e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8019182:	ee07 3a90 	vmov	s15, r3
 8019186:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801918a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8019234 <__ieee754_rem_pio2f+0x258>
 801918e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019192:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019196:	ed8d 7a03 	vstr	s14, [sp, #12]
 801919a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801919e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80191a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80191a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80191aa:	ed8d 7a04 	vstr	s14, [sp, #16]
 80191ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80191b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80191b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191ba:	edcd 7a05 	vstr	s15, [sp, #20]
 80191be:	d11e      	bne.n	80191fe <__ieee754_rem_pio2f+0x222>
 80191c0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80191c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191c8:	bf0c      	ite	eq
 80191ca:	2301      	moveq	r3, #1
 80191cc:	2302      	movne	r3, #2
 80191ce:	491a      	ldr	r1, [pc, #104]	@ (8019238 <__ieee754_rem_pio2f+0x25c>)
 80191d0:	9101      	str	r1, [sp, #4]
 80191d2:	2102      	movs	r1, #2
 80191d4:	9100      	str	r1, [sp, #0]
 80191d6:	a803      	add	r0, sp, #12
 80191d8:	4621      	mov	r1, r4
 80191da:	f000 f98f 	bl	80194fc <__kernel_rem_pio2f>
 80191de:	2e00      	cmp	r6, #0
 80191e0:	f6bf af2f 	bge.w	8019042 <__ieee754_rem_pio2f+0x66>
 80191e4:	edd4 7a00 	vldr	s15, [r4]
 80191e8:	eef1 7a67 	vneg.f32	s15, s15
 80191ec:	edc4 7a00 	vstr	s15, [r4]
 80191f0:	edd4 7a01 	vldr	s15, [r4, #4]
 80191f4:	eef1 7a67 	vneg.f32	s15, s15
 80191f8:	edc4 7a01 	vstr	s15, [r4, #4]
 80191fc:	e782      	b.n	8019104 <__ieee754_rem_pio2f+0x128>
 80191fe:	2303      	movs	r3, #3
 8019200:	e7e5      	b.n	80191ce <__ieee754_rem_pio2f+0x1f2>
 8019202:	bf00      	nop
 8019204:	3f490fd8 	.word	0x3f490fd8
 8019208:	4016cbe3 	.word	0x4016cbe3
 801920c:	3fc90f80 	.word	0x3fc90f80
 8019210:	3fc90fd0 	.word	0x3fc90fd0
 8019214:	37354400 	.word	0x37354400
 8019218:	37354443 	.word	0x37354443
 801921c:	2e85a308 	.word	0x2e85a308
 8019220:	43490f80 	.word	0x43490f80
 8019224:	3f22f984 	.word	0x3f22f984
 8019228:	0801b194 	.word	0x0801b194
 801922c:	2e85a300 	.word	0x2e85a300
 8019230:	248d3132 	.word	0x248d3132
 8019234:	43800000 	.word	0x43800000
 8019238:	0801b214 	.word	0x0801b214

0801923c <atanf>:
 801923c:	b538      	push	{r3, r4, r5, lr}
 801923e:	ee10 5a10 	vmov	r5, s0
 8019242:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8019246:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801924a:	eef0 7a40 	vmov.f32	s15, s0
 801924e:	d310      	bcc.n	8019272 <atanf+0x36>
 8019250:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8019254:	d904      	bls.n	8019260 <atanf+0x24>
 8019256:	ee70 7a00 	vadd.f32	s15, s0, s0
 801925a:	eeb0 0a67 	vmov.f32	s0, s15
 801925e:	bd38      	pop	{r3, r4, r5, pc}
 8019260:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8019398 <atanf+0x15c>
 8019264:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801939c <atanf+0x160>
 8019268:	2d00      	cmp	r5, #0
 801926a:	bfc8      	it	gt
 801926c:	eef0 7a47 	vmovgt.f32	s15, s14
 8019270:	e7f3      	b.n	801925a <atanf+0x1e>
 8019272:	4b4b      	ldr	r3, [pc, #300]	@ (80193a0 <atanf+0x164>)
 8019274:	429c      	cmp	r4, r3
 8019276:	d810      	bhi.n	801929a <atanf+0x5e>
 8019278:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801927c:	d20a      	bcs.n	8019294 <atanf+0x58>
 801927e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80193a4 <atanf+0x168>
 8019282:	ee30 7a07 	vadd.f32	s14, s0, s14
 8019286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801928a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801928e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019292:	dce2      	bgt.n	801925a <atanf+0x1e>
 8019294:	f04f 33ff 	mov.w	r3, #4294967295
 8019298:	e013      	b.n	80192c2 <atanf+0x86>
 801929a:	f7fe fd43 	bl	8017d24 <fabsf>
 801929e:	4b42      	ldr	r3, [pc, #264]	@ (80193a8 <atanf+0x16c>)
 80192a0:	429c      	cmp	r4, r3
 80192a2:	d84f      	bhi.n	8019344 <atanf+0x108>
 80192a4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80192a8:	429c      	cmp	r4, r3
 80192aa:	d841      	bhi.n	8019330 <atanf+0xf4>
 80192ac:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80192b0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80192b4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80192b8:	2300      	movs	r3, #0
 80192ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80192be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80192c2:	1c5a      	adds	r2, r3, #1
 80192c4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80192c8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80193ac <atanf+0x170>
 80192cc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80193b0 <atanf+0x174>
 80192d0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80193b4 <atanf+0x178>
 80192d4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80192d8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80192dc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80193b8 <atanf+0x17c>
 80192e0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80192e4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80193bc <atanf+0x180>
 80192e8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80192ec:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80193c0 <atanf+0x184>
 80192f0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80192f4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80193c4 <atanf+0x188>
 80192f8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80192fc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80193c8 <atanf+0x18c>
 8019300:	eea6 5a87 	vfma.f32	s10, s13, s14
 8019304:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80193cc <atanf+0x190>
 8019308:	eea5 7a26 	vfma.f32	s14, s10, s13
 801930c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80193d0 <atanf+0x194>
 8019310:	eea7 5a26 	vfma.f32	s10, s14, s13
 8019314:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80193d4 <atanf+0x198>
 8019318:	eea5 7a26 	vfma.f32	s14, s10, s13
 801931c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019320:	eea5 7a86 	vfma.f32	s14, s11, s12
 8019324:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019328:	d121      	bne.n	801936e <atanf+0x132>
 801932a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801932e:	e794      	b.n	801925a <atanf+0x1e>
 8019330:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019334:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019338:	ee30 0a27 	vadd.f32	s0, s0, s15
 801933c:	2301      	movs	r3, #1
 801933e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019342:	e7be      	b.n	80192c2 <atanf+0x86>
 8019344:	4b24      	ldr	r3, [pc, #144]	@ (80193d8 <atanf+0x19c>)
 8019346:	429c      	cmp	r4, r3
 8019348:	d80b      	bhi.n	8019362 <atanf+0x126>
 801934a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801934e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019352:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019356:	2302      	movs	r3, #2
 8019358:	ee70 6a67 	vsub.f32	s13, s0, s15
 801935c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019360:	e7af      	b.n	80192c2 <atanf+0x86>
 8019362:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8019366:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801936a:	2303      	movs	r3, #3
 801936c:	e7a9      	b.n	80192c2 <atanf+0x86>
 801936e:	4a1b      	ldr	r2, [pc, #108]	@ (80193dc <atanf+0x1a0>)
 8019370:	491b      	ldr	r1, [pc, #108]	@ (80193e0 <atanf+0x1a4>)
 8019372:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019376:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801937a:	edd3 6a00 	vldr	s13, [r3]
 801937e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019382:	2d00      	cmp	r5, #0
 8019384:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019388:	edd2 7a00 	vldr	s15, [r2]
 801938c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019390:	bfb8      	it	lt
 8019392:	eef1 7a67 	vneglt.f32	s15, s15
 8019396:	e760      	b.n	801925a <atanf+0x1e>
 8019398:	bfc90fdb 	.word	0xbfc90fdb
 801939c:	3fc90fdb 	.word	0x3fc90fdb
 80193a0:	3edfffff 	.word	0x3edfffff
 80193a4:	7149f2ca 	.word	0x7149f2ca
 80193a8:	3f97ffff 	.word	0x3f97ffff
 80193ac:	3c8569d7 	.word	0x3c8569d7
 80193b0:	3d4bda59 	.word	0x3d4bda59
 80193b4:	bd6ef16b 	.word	0xbd6ef16b
 80193b8:	3d886b35 	.word	0x3d886b35
 80193bc:	3dba2e6e 	.word	0x3dba2e6e
 80193c0:	3e124925 	.word	0x3e124925
 80193c4:	3eaaaaab 	.word	0x3eaaaaab
 80193c8:	bd15a221 	.word	0xbd15a221
 80193cc:	bd9d8795 	.word	0xbd9d8795
 80193d0:	bde38e38 	.word	0xbde38e38
 80193d4:	be4ccccd 	.word	0xbe4ccccd
 80193d8:	401bffff 	.word	0x401bffff
 80193dc:	0801b53c 	.word	0x0801b53c
 80193e0:	0801b52c 	.word	0x0801b52c

080193e4 <scalbnf>:
 80193e4:	ee10 3a10 	vmov	r3, s0
 80193e8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80193ec:	d02b      	beq.n	8019446 <scalbnf+0x62>
 80193ee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80193f2:	d302      	bcc.n	80193fa <scalbnf+0x16>
 80193f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80193f8:	4770      	bx	lr
 80193fa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80193fe:	d123      	bne.n	8019448 <scalbnf+0x64>
 8019400:	4b24      	ldr	r3, [pc, #144]	@ (8019494 <scalbnf+0xb0>)
 8019402:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8019498 <scalbnf+0xb4>
 8019406:	4298      	cmp	r0, r3
 8019408:	ee20 0a27 	vmul.f32	s0, s0, s15
 801940c:	db17      	blt.n	801943e <scalbnf+0x5a>
 801940e:	ee10 3a10 	vmov	r3, s0
 8019412:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019416:	3a19      	subs	r2, #25
 8019418:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801941c:	4288      	cmp	r0, r1
 801941e:	dd15      	ble.n	801944c <scalbnf+0x68>
 8019420:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801949c <scalbnf+0xb8>
 8019424:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80194a0 <scalbnf+0xbc>
 8019428:	ee10 3a10 	vmov	r3, s0
 801942c:	eeb0 7a67 	vmov.f32	s14, s15
 8019430:	2b00      	cmp	r3, #0
 8019432:	bfb8      	it	lt
 8019434:	eef0 7a66 	vmovlt.f32	s15, s13
 8019438:	ee27 0a87 	vmul.f32	s0, s15, s14
 801943c:	4770      	bx	lr
 801943e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80194a4 <scalbnf+0xc0>
 8019442:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019446:	4770      	bx	lr
 8019448:	0dd2      	lsrs	r2, r2, #23
 801944a:	e7e5      	b.n	8019418 <scalbnf+0x34>
 801944c:	4410      	add	r0, r2
 801944e:	28fe      	cmp	r0, #254	@ 0xfe
 8019450:	dce6      	bgt.n	8019420 <scalbnf+0x3c>
 8019452:	2800      	cmp	r0, #0
 8019454:	dd06      	ble.n	8019464 <scalbnf+0x80>
 8019456:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801945a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801945e:	ee00 3a10 	vmov	s0, r3
 8019462:	4770      	bx	lr
 8019464:	f110 0f16 	cmn.w	r0, #22
 8019468:	da09      	bge.n	801947e <scalbnf+0x9a>
 801946a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80194a4 <scalbnf+0xc0>
 801946e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80194a8 <scalbnf+0xc4>
 8019472:	ee10 3a10 	vmov	r3, s0
 8019476:	eeb0 7a67 	vmov.f32	s14, s15
 801947a:	2b00      	cmp	r3, #0
 801947c:	e7d9      	b.n	8019432 <scalbnf+0x4e>
 801947e:	3019      	adds	r0, #25
 8019480:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019484:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019488:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80194ac <scalbnf+0xc8>
 801948c:	ee07 3a90 	vmov	s15, r3
 8019490:	e7d7      	b.n	8019442 <scalbnf+0x5e>
 8019492:	bf00      	nop
 8019494:	ffff3cb0 	.word	0xffff3cb0
 8019498:	4c000000 	.word	0x4c000000
 801949c:	7149f2ca 	.word	0x7149f2ca
 80194a0:	f149f2ca 	.word	0xf149f2ca
 80194a4:	0da24260 	.word	0x0da24260
 80194a8:	8da24260 	.word	0x8da24260
 80194ac:	33000000 	.word	0x33000000

080194b0 <with_errnof>:
 80194b0:	b510      	push	{r4, lr}
 80194b2:	ed2d 8b02 	vpush	{d8}
 80194b6:	eeb0 8a40 	vmov.f32	s16, s0
 80194ba:	4604      	mov	r4, r0
 80194bc:	f7fe fa82 	bl	80179c4 <__errno>
 80194c0:	eeb0 0a48 	vmov.f32	s0, s16
 80194c4:	ecbd 8b02 	vpop	{d8}
 80194c8:	6004      	str	r4, [r0, #0]
 80194ca:	bd10      	pop	{r4, pc}

080194cc <xflowf>:
 80194cc:	b130      	cbz	r0, 80194dc <xflowf+0x10>
 80194ce:	eef1 7a40 	vneg.f32	s15, s0
 80194d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80194d6:	2022      	movs	r0, #34	@ 0x22
 80194d8:	f7ff bfea 	b.w	80194b0 <with_errnof>
 80194dc:	eef0 7a40 	vmov.f32	s15, s0
 80194e0:	e7f7      	b.n	80194d2 <xflowf+0x6>
	...

080194e4 <__math_uflowf>:
 80194e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80194ec <__math_uflowf+0x8>
 80194e8:	f7ff bff0 	b.w	80194cc <xflowf>
 80194ec:	10000000 	.word	0x10000000

080194f0 <__math_oflowf>:
 80194f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80194f8 <__math_oflowf+0x8>
 80194f4:	f7ff bfea 	b.w	80194cc <xflowf>
 80194f8:	70000000 	.word	0x70000000

080194fc <__kernel_rem_pio2f>:
 80194fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019500:	ed2d 8b04 	vpush	{d8-d9}
 8019504:	b0d9      	sub	sp, #356	@ 0x164
 8019506:	4690      	mov	r8, r2
 8019508:	9001      	str	r0, [sp, #4]
 801950a:	4ab9      	ldr	r2, [pc, #740]	@ (80197f0 <__kernel_rem_pio2f+0x2f4>)
 801950c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801950e:	f118 0f04 	cmn.w	r8, #4
 8019512:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8019516:	460f      	mov	r7, r1
 8019518:	f103 3bff 	add.w	fp, r3, #4294967295
 801951c:	db27      	blt.n	801956e <__kernel_rem_pio2f+0x72>
 801951e:	f1b8 0203 	subs.w	r2, r8, #3
 8019522:	bf48      	it	mi
 8019524:	f108 0204 	addmi.w	r2, r8, #4
 8019528:	10d2      	asrs	r2, r2, #3
 801952a:	1c55      	adds	r5, r2, #1
 801952c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801952e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8019800 <__kernel_rem_pio2f+0x304>
 8019532:	00e8      	lsls	r0, r5, #3
 8019534:	eba2 060b 	sub.w	r6, r2, fp
 8019538:	9002      	str	r0, [sp, #8]
 801953a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801953e:	eb0a 0c0b 	add.w	ip, sl, fp
 8019542:	ac1c      	add	r4, sp, #112	@ 0x70
 8019544:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8019548:	2000      	movs	r0, #0
 801954a:	4560      	cmp	r0, ip
 801954c:	dd11      	ble.n	8019572 <__kernel_rem_pio2f+0x76>
 801954e:	a91c      	add	r1, sp, #112	@ 0x70
 8019550:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8019554:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8019558:	f04f 0c00 	mov.w	ip, #0
 801955c:	45d4      	cmp	ip, sl
 801955e:	dc27      	bgt.n	80195b0 <__kernel_rem_pio2f+0xb4>
 8019560:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019564:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8019800 <__kernel_rem_pio2f+0x304>
 8019568:	4606      	mov	r6, r0
 801956a:	2400      	movs	r4, #0
 801956c:	e016      	b.n	801959c <__kernel_rem_pio2f+0xa0>
 801956e:	2200      	movs	r2, #0
 8019570:	e7db      	b.n	801952a <__kernel_rem_pio2f+0x2e>
 8019572:	42c6      	cmn	r6, r0
 8019574:	bf5d      	ittte	pl
 8019576:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801957a:	ee07 1a90 	vmovpl	s15, r1
 801957e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019582:	eef0 7a47 	vmovmi.f32	s15, s14
 8019586:	ece4 7a01 	vstmia	r4!, {s15}
 801958a:	3001      	adds	r0, #1
 801958c:	e7dd      	b.n	801954a <__kernel_rem_pio2f+0x4e>
 801958e:	ecfe 6a01 	vldmia	lr!, {s13}
 8019592:	ed96 7a00 	vldr	s14, [r6]
 8019596:	eee6 7a87 	vfma.f32	s15, s13, s14
 801959a:	3401      	adds	r4, #1
 801959c:	455c      	cmp	r4, fp
 801959e:	f1a6 0604 	sub.w	r6, r6, #4
 80195a2:	ddf4      	ble.n	801958e <__kernel_rem_pio2f+0x92>
 80195a4:	ece9 7a01 	vstmia	r9!, {s15}
 80195a8:	f10c 0c01 	add.w	ip, ip, #1
 80195ac:	3004      	adds	r0, #4
 80195ae:	e7d5      	b.n	801955c <__kernel_rem_pio2f+0x60>
 80195b0:	a908      	add	r1, sp, #32
 80195b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80195b6:	9104      	str	r1, [sp, #16]
 80195b8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80195ba:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80197fc <__kernel_rem_pio2f+0x300>
 80195be:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80197f8 <__kernel_rem_pio2f+0x2fc>
 80195c2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80195c6:	9203      	str	r2, [sp, #12]
 80195c8:	4654      	mov	r4, sl
 80195ca:	00a2      	lsls	r2, r4, #2
 80195cc:	9205      	str	r2, [sp, #20]
 80195ce:	aa58      	add	r2, sp, #352	@ 0x160
 80195d0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80195d4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80195d8:	a944      	add	r1, sp, #272	@ 0x110
 80195da:	aa08      	add	r2, sp, #32
 80195dc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80195e0:	4694      	mov	ip, r2
 80195e2:	4626      	mov	r6, r4
 80195e4:	2e00      	cmp	r6, #0
 80195e6:	f1a0 0004 	sub.w	r0, r0, #4
 80195ea:	dc4c      	bgt.n	8019686 <__kernel_rem_pio2f+0x18a>
 80195ec:	4628      	mov	r0, r5
 80195ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80195f2:	f7ff fef7 	bl	80193e4 <scalbnf>
 80195f6:	eeb0 8a40 	vmov.f32	s16, s0
 80195fa:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80195fe:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019602:	f000 f9ed 	bl	80199e0 <floorf>
 8019606:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801960a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801960e:	2d00      	cmp	r5, #0
 8019610:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019614:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019618:	ee17 9a90 	vmov	r9, s15
 801961c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019620:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019624:	dd41      	ble.n	80196aa <__kernel_rem_pio2f+0x1ae>
 8019626:	f104 3cff 	add.w	ip, r4, #4294967295
 801962a:	a908      	add	r1, sp, #32
 801962c:	f1c5 0e08 	rsb	lr, r5, #8
 8019630:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8019634:	fa46 f00e 	asr.w	r0, r6, lr
 8019638:	4481      	add	r9, r0
 801963a:	fa00 f00e 	lsl.w	r0, r0, lr
 801963e:	1a36      	subs	r6, r6, r0
 8019640:	f1c5 0007 	rsb	r0, r5, #7
 8019644:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8019648:	4106      	asrs	r6, r0
 801964a:	2e00      	cmp	r6, #0
 801964c:	dd3c      	ble.n	80196c8 <__kernel_rem_pio2f+0x1cc>
 801964e:	f04f 0e00 	mov.w	lr, #0
 8019652:	f109 0901 	add.w	r9, r9, #1
 8019656:	4670      	mov	r0, lr
 8019658:	4574      	cmp	r4, lr
 801965a:	dc68      	bgt.n	801972e <__kernel_rem_pio2f+0x232>
 801965c:	2d00      	cmp	r5, #0
 801965e:	dd03      	ble.n	8019668 <__kernel_rem_pio2f+0x16c>
 8019660:	2d01      	cmp	r5, #1
 8019662:	d074      	beq.n	801974e <__kernel_rem_pio2f+0x252>
 8019664:	2d02      	cmp	r5, #2
 8019666:	d07d      	beq.n	8019764 <__kernel_rem_pio2f+0x268>
 8019668:	2e02      	cmp	r6, #2
 801966a:	d12d      	bne.n	80196c8 <__kernel_rem_pio2f+0x1cc>
 801966c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019670:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019674:	b340      	cbz	r0, 80196c8 <__kernel_rem_pio2f+0x1cc>
 8019676:	4628      	mov	r0, r5
 8019678:	9306      	str	r3, [sp, #24]
 801967a:	f7ff feb3 	bl	80193e4 <scalbnf>
 801967e:	9b06      	ldr	r3, [sp, #24]
 8019680:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019684:	e020      	b.n	80196c8 <__kernel_rem_pio2f+0x1cc>
 8019686:	ee60 7a28 	vmul.f32	s15, s0, s17
 801968a:	3e01      	subs	r6, #1
 801968c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019694:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019698:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801969c:	ecac 0a01 	vstmia	ip!, {s0}
 80196a0:	ed90 0a00 	vldr	s0, [r0]
 80196a4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80196a8:	e79c      	b.n	80195e4 <__kernel_rem_pio2f+0xe8>
 80196aa:	d105      	bne.n	80196b8 <__kernel_rem_pio2f+0x1bc>
 80196ac:	1e60      	subs	r0, r4, #1
 80196ae:	a908      	add	r1, sp, #32
 80196b0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80196b4:	11f6      	asrs	r6, r6, #7
 80196b6:	e7c8      	b.n	801964a <__kernel_rem_pio2f+0x14e>
 80196b8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80196bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80196c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196c4:	da31      	bge.n	801972a <__kernel_rem_pio2f+0x22e>
 80196c6:	2600      	movs	r6, #0
 80196c8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80196cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196d0:	f040 8098 	bne.w	8019804 <__kernel_rem_pio2f+0x308>
 80196d4:	1e60      	subs	r0, r4, #1
 80196d6:	2200      	movs	r2, #0
 80196d8:	4550      	cmp	r0, sl
 80196da:	da4b      	bge.n	8019774 <__kernel_rem_pio2f+0x278>
 80196dc:	2a00      	cmp	r2, #0
 80196de:	d065      	beq.n	80197ac <__kernel_rem_pio2f+0x2b0>
 80196e0:	3c01      	subs	r4, #1
 80196e2:	ab08      	add	r3, sp, #32
 80196e4:	3d08      	subs	r5, #8
 80196e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d0f8      	beq.n	80196e0 <__kernel_rem_pio2f+0x1e4>
 80196ee:	4628      	mov	r0, r5
 80196f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80196f4:	f7ff fe76 	bl	80193e4 <scalbnf>
 80196f8:	1c63      	adds	r3, r4, #1
 80196fa:	aa44      	add	r2, sp, #272	@ 0x110
 80196fc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80197fc <__kernel_rem_pio2f+0x300>
 8019700:	0099      	lsls	r1, r3, #2
 8019702:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019706:	4623      	mov	r3, r4
 8019708:	2b00      	cmp	r3, #0
 801970a:	f280 80a9 	bge.w	8019860 <__kernel_rem_pio2f+0x364>
 801970e:	4623      	mov	r3, r4
 8019710:	2b00      	cmp	r3, #0
 8019712:	f2c0 80c7 	blt.w	80198a4 <__kernel_rem_pio2f+0x3a8>
 8019716:	aa44      	add	r2, sp, #272	@ 0x110
 8019718:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801971c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80197f4 <__kernel_rem_pio2f+0x2f8>
 8019720:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8019800 <__kernel_rem_pio2f+0x304>
 8019724:	2000      	movs	r0, #0
 8019726:	1ae2      	subs	r2, r4, r3
 8019728:	e0b1      	b.n	801988e <__kernel_rem_pio2f+0x392>
 801972a:	2602      	movs	r6, #2
 801972c:	e78f      	b.n	801964e <__kernel_rem_pio2f+0x152>
 801972e:	f852 1b04 	ldr.w	r1, [r2], #4
 8019732:	b948      	cbnz	r0, 8019748 <__kernel_rem_pio2f+0x24c>
 8019734:	b121      	cbz	r1, 8019740 <__kernel_rem_pio2f+0x244>
 8019736:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801973a:	f842 1c04 	str.w	r1, [r2, #-4]
 801973e:	2101      	movs	r1, #1
 8019740:	f10e 0e01 	add.w	lr, lr, #1
 8019744:	4608      	mov	r0, r1
 8019746:	e787      	b.n	8019658 <__kernel_rem_pio2f+0x15c>
 8019748:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801974c:	e7f5      	b.n	801973a <__kernel_rem_pio2f+0x23e>
 801974e:	f104 3cff 	add.w	ip, r4, #4294967295
 8019752:	aa08      	add	r2, sp, #32
 8019754:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019758:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801975c:	a908      	add	r1, sp, #32
 801975e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8019762:	e781      	b.n	8019668 <__kernel_rem_pio2f+0x16c>
 8019764:	f104 3cff 	add.w	ip, r4, #4294967295
 8019768:	aa08      	add	r2, sp, #32
 801976a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801976e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019772:	e7f3      	b.n	801975c <__kernel_rem_pio2f+0x260>
 8019774:	a908      	add	r1, sp, #32
 8019776:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801977a:	3801      	subs	r0, #1
 801977c:	430a      	orrs	r2, r1
 801977e:	e7ab      	b.n	80196d8 <__kernel_rem_pio2f+0x1dc>
 8019780:	3201      	adds	r2, #1
 8019782:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8019786:	2e00      	cmp	r6, #0
 8019788:	d0fa      	beq.n	8019780 <__kernel_rem_pio2f+0x284>
 801978a:	9905      	ldr	r1, [sp, #20]
 801978c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8019790:	eb0d 0001 	add.w	r0, sp, r1
 8019794:	18e6      	adds	r6, r4, r3
 8019796:	a91c      	add	r1, sp, #112	@ 0x70
 8019798:	f104 0c01 	add.w	ip, r4, #1
 801979c:	384c      	subs	r0, #76	@ 0x4c
 801979e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80197a2:	4422      	add	r2, r4
 80197a4:	4562      	cmp	r2, ip
 80197a6:	da04      	bge.n	80197b2 <__kernel_rem_pio2f+0x2b6>
 80197a8:	4614      	mov	r4, r2
 80197aa:	e70e      	b.n	80195ca <__kernel_rem_pio2f+0xce>
 80197ac:	9804      	ldr	r0, [sp, #16]
 80197ae:	2201      	movs	r2, #1
 80197b0:	e7e7      	b.n	8019782 <__kernel_rem_pio2f+0x286>
 80197b2:	9903      	ldr	r1, [sp, #12]
 80197b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80197b8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80197bc:	9105      	str	r1, [sp, #20]
 80197be:	ee07 1a90 	vmov	s15, r1
 80197c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80197c6:	2400      	movs	r4, #0
 80197c8:	ece6 7a01 	vstmia	r6!, {s15}
 80197cc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8019800 <__kernel_rem_pio2f+0x304>
 80197d0:	46b1      	mov	r9, r6
 80197d2:	455c      	cmp	r4, fp
 80197d4:	dd04      	ble.n	80197e0 <__kernel_rem_pio2f+0x2e4>
 80197d6:	ece0 7a01 	vstmia	r0!, {s15}
 80197da:	f10c 0c01 	add.w	ip, ip, #1
 80197de:	e7e1      	b.n	80197a4 <__kernel_rem_pio2f+0x2a8>
 80197e0:	ecfe 6a01 	vldmia	lr!, {s13}
 80197e4:	ed39 7a01 	vldmdb	r9!, {s14}
 80197e8:	3401      	adds	r4, #1
 80197ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 80197ee:	e7f0      	b.n	80197d2 <__kernel_rem_pio2f+0x2d6>
 80197f0:	0801b578 	.word	0x0801b578
 80197f4:	0801b54c 	.word	0x0801b54c
 80197f8:	43800000 	.word	0x43800000
 80197fc:	3b800000 	.word	0x3b800000
 8019800:	00000000 	.word	0x00000000
 8019804:	9b02      	ldr	r3, [sp, #8]
 8019806:	eeb0 0a48 	vmov.f32	s0, s16
 801980a:	eba3 0008 	sub.w	r0, r3, r8
 801980e:	f7ff fde9 	bl	80193e4 <scalbnf>
 8019812:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80197f8 <__kernel_rem_pio2f+0x2fc>
 8019816:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801981a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801981e:	db19      	blt.n	8019854 <__kernel_rem_pio2f+0x358>
 8019820:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80197fc <__kernel_rem_pio2f+0x300>
 8019824:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019828:	aa08      	add	r2, sp, #32
 801982a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801982e:	3508      	adds	r5, #8
 8019830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019834:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801983c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019840:	ee10 3a10 	vmov	r3, s0
 8019844:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019848:	ee17 3a90 	vmov	r3, s15
 801984c:	3401      	adds	r4, #1
 801984e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019852:	e74c      	b.n	80196ee <__kernel_rem_pio2f+0x1f2>
 8019854:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019858:	aa08      	add	r2, sp, #32
 801985a:	ee10 3a10 	vmov	r3, s0
 801985e:	e7f6      	b.n	801984e <__kernel_rem_pio2f+0x352>
 8019860:	a808      	add	r0, sp, #32
 8019862:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019866:	9001      	str	r0, [sp, #4]
 8019868:	ee07 0a90 	vmov	s15, r0
 801986c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019870:	3b01      	subs	r3, #1
 8019872:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019876:	ee20 0a07 	vmul.f32	s0, s0, s14
 801987a:	ed62 7a01 	vstmdb	r2!, {s15}
 801987e:	e743      	b.n	8019708 <__kernel_rem_pio2f+0x20c>
 8019880:	ecfc 6a01 	vldmia	ip!, {s13}
 8019884:	ecb5 7a01 	vldmia	r5!, {s14}
 8019888:	eee6 7a87 	vfma.f32	s15, s13, s14
 801988c:	3001      	adds	r0, #1
 801988e:	4550      	cmp	r0, sl
 8019890:	dc01      	bgt.n	8019896 <__kernel_rem_pio2f+0x39a>
 8019892:	4282      	cmp	r2, r0
 8019894:	daf4      	bge.n	8019880 <__kernel_rem_pio2f+0x384>
 8019896:	a858      	add	r0, sp, #352	@ 0x160
 8019898:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801989c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80198a0:	3b01      	subs	r3, #1
 80198a2:	e735      	b.n	8019710 <__kernel_rem_pio2f+0x214>
 80198a4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80198a6:	2b02      	cmp	r3, #2
 80198a8:	dc09      	bgt.n	80198be <__kernel_rem_pio2f+0x3c2>
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	dc2b      	bgt.n	8019906 <__kernel_rem_pio2f+0x40a>
 80198ae:	d044      	beq.n	801993a <__kernel_rem_pio2f+0x43e>
 80198b0:	f009 0007 	and.w	r0, r9, #7
 80198b4:	b059      	add	sp, #356	@ 0x164
 80198b6:	ecbd 8b04 	vpop	{d8-d9}
 80198ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198be:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80198c0:	2b03      	cmp	r3, #3
 80198c2:	d1f5      	bne.n	80198b0 <__kernel_rem_pio2f+0x3b4>
 80198c4:	aa30      	add	r2, sp, #192	@ 0xc0
 80198c6:	1f0b      	subs	r3, r1, #4
 80198c8:	4413      	add	r3, r2
 80198ca:	461a      	mov	r2, r3
 80198cc:	4620      	mov	r0, r4
 80198ce:	2800      	cmp	r0, #0
 80198d0:	f1a2 0204 	sub.w	r2, r2, #4
 80198d4:	dc52      	bgt.n	801997c <__kernel_rem_pio2f+0x480>
 80198d6:	4622      	mov	r2, r4
 80198d8:	2a01      	cmp	r2, #1
 80198da:	f1a3 0304 	sub.w	r3, r3, #4
 80198de:	dc5d      	bgt.n	801999c <__kernel_rem_pio2f+0x4a0>
 80198e0:	ab30      	add	r3, sp, #192	@ 0xc0
 80198e2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8019800 <__kernel_rem_pio2f+0x304>
 80198e6:	440b      	add	r3, r1
 80198e8:	2c01      	cmp	r4, #1
 80198ea:	dc67      	bgt.n	80199bc <__kernel_rem_pio2f+0x4c0>
 80198ec:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80198f0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80198f4:	2e00      	cmp	r6, #0
 80198f6:	d167      	bne.n	80199c8 <__kernel_rem_pio2f+0x4cc>
 80198f8:	edc7 6a00 	vstr	s13, [r7]
 80198fc:	ed87 7a01 	vstr	s14, [r7, #4]
 8019900:	edc7 7a02 	vstr	s15, [r7, #8]
 8019904:	e7d4      	b.n	80198b0 <__kernel_rem_pio2f+0x3b4>
 8019906:	ab30      	add	r3, sp, #192	@ 0xc0
 8019908:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8019800 <__kernel_rem_pio2f+0x304>
 801990c:	440b      	add	r3, r1
 801990e:	4622      	mov	r2, r4
 8019910:	2a00      	cmp	r2, #0
 8019912:	da24      	bge.n	801995e <__kernel_rem_pio2f+0x462>
 8019914:	b34e      	cbz	r6, 801996a <__kernel_rem_pio2f+0x46e>
 8019916:	eef1 7a47 	vneg.f32	s15, s14
 801991a:	edc7 7a00 	vstr	s15, [r7]
 801991e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8019922:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019926:	aa31      	add	r2, sp, #196	@ 0xc4
 8019928:	2301      	movs	r3, #1
 801992a:	429c      	cmp	r4, r3
 801992c:	da20      	bge.n	8019970 <__kernel_rem_pio2f+0x474>
 801992e:	b10e      	cbz	r6, 8019934 <__kernel_rem_pio2f+0x438>
 8019930:	eef1 7a67 	vneg.f32	s15, s15
 8019934:	edc7 7a01 	vstr	s15, [r7, #4]
 8019938:	e7ba      	b.n	80198b0 <__kernel_rem_pio2f+0x3b4>
 801993a:	ab30      	add	r3, sp, #192	@ 0xc0
 801993c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8019800 <__kernel_rem_pio2f+0x304>
 8019940:	440b      	add	r3, r1
 8019942:	2c00      	cmp	r4, #0
 8019944:	da05      	bge.n	8019952 <__kernel_rem_pio2f+0x456>
 8019946:	b10e      	cbz	r6, 801994c <__kernel_rem_pio2f+0x450>
 8019948:	eef1 7a67 	vneg.f32	s15, s15
 801994c:	edc7 7a00 	vstr	s15, [r7]
 8019950:	e7ae      	b.n	80198b0 <__kernel_rem_pio2f+0x3b4>
 8019952:	ed33 7a01 	vldmdb	r3!, {s14}
 8019956:	3c01      	subs	r4, #1
 8019958:	ee77 7a87 	vadd.f32	s15, s15, s14
 801995c:	e7f1      	b.n	8019942 <__kernel_rem_pio2f+0x446>
 801995e:	ed73 7a01 	vldmdb	r3!, {s15}
 8019962:	3a01      	subs	r2, #1
 8019964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019968:	e7d2      	b.n	8019910 <__kernel_rem_pio2f+0x414>
 801996a:	eef0 7a47 	vmov.f32	s15, s14
 801996e:	e7d4      	b.n	801991a <__kernel_rem_pio2f+0x41e>
 8019970:	ecb2 7a01 	vldmia	r2!, {s14}
 8019974:	3301      	adds	r3, #1
 8019976:	ee77 7a87 	vadd.f32	s15, s15, s14
 801997a:	e7d6      	b.n	801992a <__kernel_rem_pio2f+0x42e>
 801997c:	edd2 7a00 	vldr	s15, [r2]
 8019980:	edd2 6a01 	vldr	s13, [r2, #4]
 8019984:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019988:	3801      	subs	r0, #1
 801998a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801998e:	ed82 7a00 	vstr	s14, [r2]
 8019992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019996:	edc2 7a01 	vstr	s15, [r2, #4]
 801999a:	e798      	b.n	80198ce <__kernel_rem_pio2f+0x3d2>
 801999c:	edd3 7a00 	vldr	s15, [r3]
 80199a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80199a4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80199a8:	3a01      	subs	r2, #1
 80199aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80199ae:	ed83 7a00 	vstr	s14, [r3]
 80199b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80199b6:	edc3 7a01 	vstr	s15, [r3, #4]
 80199ba:	e78d      	b.n	80198d8 <__kernel_rem_pio2f+0x3dc>
 80199bc:	ed33 7a01 	vldmdb	r3!, {s14}
 80199c0:	3c01      	subs	r4, #1
 80199c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80199c6:	e78f      	b.n	80198e8 <__kernel_rem_pio2f+0x3ec>
 80199c8:	eef1 6a66 	vneg.f32	s13, s13
 80199cc:	eeb1 7a47 	vneg.f32	s14, s14
 80199d0:	edc7 6a00 	vstr	s13, [r7]
 80199d4:	ed87 7a01 	vstr	s14, [r7, #4]
 80199d8:	eef1 7a67 	vneg.f32	s15, s15
 80199dc:	e790      	b.n	8019900 <__kernel_rem_pio2f+0x404>
 80199de:	bf00      	nop

080199e0 <floorf>:
 80199e0:	ee10 3a10 	vmov	r3, s0
 80199e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80199e8:	3a7f      	subs	r2, #127	@ 0x7f
 80199ea:	2a16      	cmp	r2, #22
 80199ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80199f0:	dc2b      	bgt.n	8019a4a <floorf+0x6a>
 80199f2:	2a00      	cmp	r2, #0
 80199f4:	da12      	bge.n	8019a1c <floorf+0x3c>
 80199f6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019a5c <floorf+0x7c>
 80199fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80199fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a06:	dd06      	ble.n	8019a16 <floorf+0x36>
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	da24      	bge.n	8019a56 <floorf+0x76>
 8019a0c:	2900      	cmp	r1, #0
 8019a0e:	4b14      	ldr	r3, [pc, #80]	@ (8019a60 <floorf+0x80>)
 8019a10:	bf08      	it	eq
 8019a12:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8019a16:	ee00 3a10 	vmov	s0, r3
 8019a1a:	4770      	bx	lr
 8019a1c:	4911      	ldr	r1, [pc, #68]	@ (8019a64 <floorf+0x84>)
 8019a1e:	4111      	asrs	r1, r2
 8019a20:	420b      	tst	r3, r1
 8019a22:	d0fa      	beq.n	8019a1a <floorf+0x3a>
 8019a24:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8019a5c <floorf+0x7c>
 8019a28:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019a2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a34:	ddef      	ble.n	8019a16 <floorf+0x36>
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	bfbe      	ittt	lt
 8019a3a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8019a3e:	fa40 f202 	asrlt.w	r2, r0, r2
 8019a42:	189b      	addlt	r3, r3, r2
 8019a44:	ea23 0301 	bic.w	r3, r3, r1
 8019a48:	e7e5      	b.n	8019a16 <floorf+0x36>
 8019a4a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019a4e:	d3e4      	bcc.n	8019a1a <floorf+0x3a>
 8019a50:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019a54:	4770      	bx	lr
 8019a56:	2300      	movs	r3, #0
 8019a58:	e7dd      	b.n	8019a16 <floorf+0x36>
 8019a5a:	bf00      	nop
 8019a5c:	7149f2ca 	.word	0x7149f2ca
 8019a60:	bf800000 	.word	0xbf800000
 8019a64:	007fffff 	.word	0x007fffff

08019a68 <_init>:
 8019a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a6a:	bf00      	nop
 8019a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a6e:	bc08      	pop	{r3}
 8019a70:	469e      	mov	lr, r3
 8019a72:	4770      	bx	lr

08019a74 <_fini>:
 8019a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a76:	bf00      	nop
 8019a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a7a:	bc08      	pop	{r3}
 8019a7c:	469e      	mov	lr, r3
 8019a7e:	4770      	bx	lr
